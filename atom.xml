<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>waynamigo&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://waynamigo.github.io/"/>
  <updated>2023-10-30T03:43:10.094Z</updated>
  <id>http://waynamigo.github.io/</id>
  
  <author>
    <name>waynamigo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/30/%E4%BF%A1%E5%8F%B7%E5%88%86%E7%A6%BB%E9%97%AE%E9%A2%98/"/>
    <id>http://waynamigo.github.io/2023/10/30/信号分离问题/</id>
    <published>2023-10-30T03:42:41.755Z</published>
    <updated>2023-10-30T03:43:10.094Z</updated>
    
    <content type="html"><![CDATA[<ol><li>服务注册与发现 consul</li><li>负载均衡，consul，用wrr算法实现的</li><li>APi网关 gateway</li><li>熔断器 circuitbreaker</li></ol><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;服务注册与发现 consul&lt;/li&gt;
&lt;li&gt;负载均衡，consul，用wrr算法实现的&lt;/li&gt;
&lt;li&gt;APi网关 gateway&lt;/li&gt;
&lt;li&gt;熔断器 circuitbreaker&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;SpringCloud&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/27/%E9%9D%A2%E7%BB%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://waynamigo.github.io/2023/10/27/面经操作系统问题/</id>
    <published>2023-10-27T12:01:07.451Z</published>
    <updated>2023-10-27T12:14:16.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux启动"><a href="#linux启动" class="headerlink" title="linux启动"></a>linux启动</h2><p>主板加电BIOS，加电自检<br>引导系统的Boot Loader<br>grub配置文件读取，加载内核<br>用户层init进程执行rc.syninit<br>初始化内核模块<br>初始化用户空间的init</p><p>执行/etc/rc.d/rc.local(本地运行服务)<br>执行/bin/login,就可以登录了。</p><h2 id="linux删除命令rm，发生了什么"><a href="#linux删除命令rm，发生了什么" class="headerlink" title="linux删除命令rm，发生了什么"></a>linux删除命令rm，发生了什么</h2><p>linux文件系统里，用inode保存文件的数据结构，rm本质上是删除了这个inode和文件名的关联，然后文件的引用计数减少，当一个文件引用计数减少到0时，系统释放空间</p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux启动&quot;&gt;&lt;a href=&quot;#linux启动&quot; class=&quot;headerlink&quot; title=&quot;linux启动&quot;&gt;&lt;/a&gt;linux启动&lt;/h2&gt;&lt;p&gt;主板加电BIOS，加电自检&lt;br&gt;引导系统的Boot Loader&lt;br&gt;grub配置文件读取，加载
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/25/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/"/>
    <id>http://waynamigo.github.io/2023/10/25/面试指北/</id>
    <published>2023-10-25T03:35:14.347Z</published>
    <updated>2023-10-25T05:22:56.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提前准备技术面试和手撕算法"><a href="#提前准备技术面试和手撕算法" class="headerlink" title="提前准备技术面试和手撕算法"></a>提前准备技术面试和手撕算法</h3><p>面试之前一定要提前准备一下常见的面试题：</p><ul><li><p>自己面试中可能涉及哪些知识点、那些知识点是重点。</p></li><li><p>面试中哪些问题会被经常问到、面试中自己改如何回答。(强烈不推荐死记硬背，第一：通过背这种方式你能记住多少？能记住多久？第二：背题的方式的学习很难坚持下去！)</p></li></ul><p>这块内容只会介绍面试大概会涉及到哪方面的知识点，具体这些知识点涵盖哪些问题，后面的文章有介绍到。</p><p><strong>Java :</strong></p><ul><li><p>Java 基础</p></li><li><p>Java 集合</p></li><li><p>Java 并发</p></li><li><p>JVM</p></li></ul><p><strong>计算机基础 ：</strong></p><ul><li><p>算法</p></li><li><p>数据结构</p></li><li><p>计算机网络</p></li><li><p>操作系统</p></li></ul><p><strong>数据库 ：</strong></p><ul><li><p>MySQL</p></li><li><p>Redis</p></li></ul><p><strong>常用框架 ：</strong></p><ul><li><p>Spring</p></li><li><p>SpringBoot</p></li><li><p>MyBatis</p></li><li><p>Netty</p></li><li><p>Zookeeper</p></li><li><p>Dubbo</p></li></ul><p><strong>分布式 :</strong></p><ul><li><p>CAP 理论 和 BASE 理论、Paxos 算法和 Raft 算法</p></li><li><p>RPC</p></li><li><p>分布式事务</p></li><li><p>分布式 ID</p></li></ul><p><strong>高并发 ：</strong></p><ul><li>消息队列</li><li>读写分离&amp;分库分表</li><li>负载均衡</li></ul><p><strong>高可用 ：</strong></p><ul><li>限流</li><li>降级</li><li>熔断</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\9284b079-786d-4bdd-bbd5-36c91f58e9ed-1666093736347134.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>不同类型的公司对于技能的要求侧重点是不同的比如腾讯、字节可能更重视计算机基础比如网络、操作系统这方面的内容。阿里、美团这种可能更重视你的项目经历、实战能力。</p><p>关于如何准备算法面试请看《Java 面试指北》的「面试准备篇」中对应的文章。</p><h3 id="提前准备自我介绍"><a href="#提前准备自我介绍" class="headerlink" title="提前准备自我介绍"></a>提前准备自我介绍</h3><p>自我介绍一般是你和面试官的第一次面对面正式交流，换位思考一下，假如你是面试官的话，你想听到被你面试的人如何介绍自己呢？一定不是客套地说说自己喜欢编程、平时花了很多时间来学习、自己的兴趣爱好是打球吧？</p><p>我觉得一个好的自我介绍应该包含这几点要素：</p><ol><li><p>用简单的话说清楚自己主要的技术栈于擅长的领域；</p></li><li><p>把重点放在自己在行的地方以及自己的优势之处；</p></li><li><p>重点突出自己的能力比如自己的定位的 bug 的能力特别厉害；</p></li></ol><p>从社招和校招两个角度来举例子吧！我下面的两个例子仅供参考，自我介绍并不需要死记硬背，记住要说的要点，面试的时候根据公司的情况临场发挥也是没问题的。另外，网上一般建议的是准备好两份自我介绍：一份对 hr 说的，主要讲能突出自己的经历，会的编程技术一语带过；另一份对技术面试官说的，主要讲自己会的技术细节和项目经验。</p><p><strong>校招：</strong></p><blockquote><p>面试官，您好！我叫秀儿。大学时间我主要利用课外时间学习了 Java 以及 Spring、MyBatis 等框架 。在校期间参与过一个考试系统的开发，这个系统的主要用了 Spring、MyBatis 和 shiro 这三种框架。我在其中主要担任后端开发，主要负责了权限管理功能模块的搭建。另外，我在大学的时候参加过一次软件编程大赛，我和我的团队做的在线订餐系统成功获得了第二名的成绩。我还利用自己的业余时间写了一个简单的 RPC 框架，这个框架用到了 Netty 进行网络通信， 目前我已经将这个项目开源，在 Github 上收获了 2k 的 Star! 说到业余爱好的话，我比较喜欢通过博客整理分享自己所学知识，现在已经是多个博客平台的认证作者。 生活中我是一个比较积极乐观的人，一般会通过运动打球的方式来放松。我一直都非常想加入贵公司，我觉得贵公司的文化和技术氛围我都非常喜欢，期待能与你共事！</p></blockquote><h3 id="面试之后及时复盘"><a href="#面试之后及时复盘" class="headerlink" title="面试之后及时复盘"></a>面试之后及时复盘</h3><p>如果失败，不要灰心；如果通过，切勿狂喜。面试和工作实际上是两回事，可能很多面试未通过的人，工作能力比你强的多，反之亦然。</p><p>面试就像是一场全新的征程，失败和胜利都是平常之事。所以，劝各位不要因为面试失败而灰心、丧失斗志。也不要因为面试通过而沾沾自喜，等待你的将是更美好的未来，继续加油！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章内容有点多，如果这篇文章只能让你记住 4 句话，那请记住下面这 4 句：</p><ol><li>一定要提前准备面试！技术面试不同于编程，编程厉害不代表技术面试就一定能过。</li><li>一定不要对面试抱有侥幸心理。打铁还需自身硬！千万不要觉得自己看几篇面经，看几篇面试题解析就能通过面试了。一定要静下心来深入学习！</li><li>建议大学生尽可能早一点以求职为导向来学习的。这样更有针对性，并且可以大概率减少自己处在迷茫的时间，很大程度上还可以让自己少走很多弯路。 但是，不要把“以求职为导向学习”理解为“我就不用学课堂上那些计算机基础课程了”！</li><li>手撕算法是当下技术面试的标配，尽早准备！</li></ol><h2 id="程序员简历到底该怎么写？"><a href="#程序员简历到底该怎么写？" class="headerlink" title="程序员简历到底该怎么写？"></a><strong>程序员简历到底该怎么写？</strong></h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一份好的简历可以在整个申请面试以及面试过程中起到非常重要的作用。</p><p><strong>为什么说简历很重要呢？</strong> 我们可以从下面几点来说：</p><p><strong>1.简历就像是我们的一个门面一样，它在很大程度上决定了是否能够获得面试机会。</strong></p><ul><li>假如你是网申，你的简历必然会经过 HR 的筛选，一张简历 HR 可能也就花费 10 秒钟看一下，然后 HR 就会决定你这一关是 Fail 还是 Pass。</li><li>假如你是内推，如果你的简历没有什么优势的话，就算是内推你的人再用心，也无能为力。</li></ul><p>另外，就算你通过了第一轮的筛选获得面试机会，后面的面试中，面试官也会根据你的简历来判断你究竟是否值得他花费很多时间去面试。</p><p><strong>2.简历上的内容很大程度上决定了面试官提问的侧重点。</strong></p><ul><li>一般情况下你的简历上注明你会的东西才会被问到（Java、数据结构、网络、算法这些基础是每个人必问的），比如写了你熟练使用 Redis,那面试官就很大概率会问你 redis 的一些问题。再比如你写了你在项目中使用了消息队列，那面试官大概率问很多消息队列相关的问题。</li><li>技能熟练度在很大程度上也决定了面试官提问的深度。</li></ul><p>在不夸大自己能力的情况下，写出一份好的简历也是一项很棒的能力。</p><h3 id="简历内容"><a href="#简历内容" class="headerlink" title="简历内容"></a>简历内容</h3><h4 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h4><ul><li><p>最基本的 ：姓名（身份证上的那个）、年龄、电话、籍贯、联系方式、邮箱地址</p></li><li><p>潜在加分项 ： Github 地址、博客地址（如果技术博客和 Github 上没有什么内容的话，就不要写了）</p></li></ul><p>示例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\882a8258-d2d2-4a39-9d64-3c6373d8c4dc.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="求职意向"><a href="#求职意向" class="headerlink" title="求职意向"></a>求职意向</h4><p>你想要应聘什么岗位，希望在什么城市。另外，你也可以将求职意向放到个人信息这块写。</p><p>示例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\952dc989-4dde-4082-afa3-ee27fd5fbea9.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h4><p>教育经历也不可或缺。通过教育经历的介绍，你要确保能让面试官就可以知道你的学历、专业、毕业学校以及毕业的日期。</p><p>示例：</p><blockquote><p>北京理工大学 硕士，软件工程 2019.09 - 2022.01 湖南大学 学士，应用化学 2015.09 ~ 2019.06</p></blockquote><h4 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h4><p>先问一下你自己会什么，然后看看你意向的公司需要什么。一般 HR 可能并不太懂技术，所以他在筛选简历的时候可能就盯着你专业技能的关键词来看。对于公司有要求而你不会的技能，你可以花几天时间学习一下，然后在简历上可以写上自己了解这个技能。</p><p>下面这个专业技能介绍，你可以根据自己的实际情况参考一下。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\827799aa-d3d0-454e-849a-39a5882d2ec7.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我这里再单独放一个我看过的某位同学的技能介绍，我们来找找问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\01aae7c4-bd79-40f3-b8c6-2d9febaba9d0.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>上图中的技能介绍存在的问题：</p><ul><li><p>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</p></li><li><p>技能介绍太杂，没有亮点。不需要全才，某个领域做得好就行了！</p></li><li><p>对 Java 后台开发的部分技能比如 Spring Boot 的熟悉度仅仅为了解，无法满足企业的要求。</p></li></ul><h4 id="实习经历-工作经历"><a href="#实习经历-工作经历" class="headerlink" title="实习经历/工作经历"></a>实习经历/工作经历</h4><p>工作经历针对社招，实际经历针对校招。</p><p>工作经历建议采用时间倒序的方式来介绍，实习经历建议将最有价值的放在最前面。</p><p>示例：</p><blockquote><p>XXX 公司 （201X 年 X 月 ~ 201X 年 X 月 ）</p><p>●职位：Java 后端开发工程师<br>●工作内容：主要负责 XXX</p></blockquote><h4 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h4><p>简历上有一两个项目经历很正常，但是真正能把项目经历很好的展示给面试官的非常少。</p><p>很多求职者的项目经历介绍都会面临过于啰嗦、过于简单、没突出亮点等问题。</p><p>项目经历应该突出自己做了什么，简单概括项目基本情况。项目经历取得的成果尽量要量化一下，多挖掘一些亮点比如自己是如何解决项目中存在也一个痛点的 。除了解决痛点，还能如何挖掘亮点呢？ 从你项目涉及到的技术上来挖掘，想想这些技术能为项目带来哪些改进。</p><p>技术优化取得的成果尽量要量化一下：</p><ul><li>我使用 xxx 技术解决了 xxx 问题，系统 qps 从 xxx 提高到了 xxx。</li><li>我使用 xxx 技术了优化了 xxx 接口，系统 qps 从 xxx 提高到了 xxx。</li></ul><p>另外，如果你觉得你的项目技术比较落后的话，可以自己私下进行改进。重要的是让项目比较有亮点，通过什么方式就无所谓了。</p><p>项目经历介绍模板：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\94151987-17b4-4d28-b6bf-7fed6120cecd.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>个人工作内容描述最好可以体现自己的综合素质，比如你是如何协调项目组成员协同开发的或者在遇到某一个棘手的问题的时候你是如何解决的又或者说你在这个项目优化了某个模块的性能。示例：项目的 MySQL 数据库中的某张表的数据量达到千万级别，查询速度非常缓慢，数据库压力非常大，我使用 Sharding-JDBC 进行了分库分表，单表的数据量都在 300w 以下。</p><h4 id="荣誉奖项（可选）"><a href="#荣誉奖项（可选）" class="headerlink" title="荣誉奖项（可选）"></a>荣誉奖项（可选）</h4><p>如果你有含金量比较高的竞赛（比如 ACM、阿里的天池大赛）的获奖经历的话，荣誉奖项这块内容一定要写一下！并且，你还可以将荣誉奖项这块内容适当往前放，放在一个更加显眼的位置。</p><h4 id="校园经历（可选）"><a href="#校园经历（可选）" class="headerlink" title="校园经历（可选）"></a>校园经历（可选）</h4><p>如果有比较亮眼的校园经历的话就简单写一下，没有就不写！</p><h4 id="个人评价"><a href="#个人评价" class="headerlink" title="个人评价"></a>个人评价</h4><p><strong>个人评价就是对自己的解读，一定要用简洁的语言突出自己的特点和优 势，避免废话！</strong> 像勤奋、吃苦这些比较虚的东西就不要扯了，面试官看着这种个人评价就烦。</p><p>列举 3 个实际的例子：</p><ul><li><p>学习能力较强，大三参加国家软件设计大赛的时候快速上手 Python 写了一个可配置化的爬虫系统。</p></li><li><p>具有团队协作精神，大三参加国家软件设计大赛的时候协调项目组内 5 名开发同学，并对编码遇到困难的同学提供帮助，最终顺利在 1 个月的时间完成项目的核心功能。</p></li><li><p>项目经验丰富，在校期间主导过多个企业级项目的开发。</p></li></ul><h3 id="STAR-法则和-FAB-法则"><a href="#STAR-法则和-FAB-法则" class="headerlink" title="STAR 法则和 FAB 法则"></a>STAR 法则和 FAB 法则</h3><h4 id="STAR-法则（Situation-Task-Action-Result）"><a href="#STAR-法则（Situation-Task-Action-Result）" class="headerlink" title="STAR 法则（Situation Task Action Result）"></a>STAR 法则（Situation Task Action Result）</h4><p>相信大家一定听说过 STAR 法则。对于面试，你可以将这个法则用在自己的简历以及和面试官沟通交流的过程中。</p><p>STAR 法则由下面 4 个单词组成（STAR 法则的名字就是由它们的首字母组成）：</p><ul><li><p>Situation： 情景。 事情是在什么情况下发生的？</p></li><li><p>Task:： 任务。你的任务是什么？</p></li><li><p>Action： 行动。你做了什么？</p></li><li><p>Result： 结果。最终的结果怎样？</p></li></ul><h4 id="FAB-法则（Feature-Advantage-Benefit）"><a href="#FAB-法则（Feature-Advantage-Benefit）" class="headerlink" title="FAB 法则（Feature Advantage Benefit）"></a>FAB 法则（Feature Advantage Benefit）</h4><p>除了 STAR 法则，你还需要了解在销售行业经常用到的一个叫做 FAB 的法则。</p><p>FAB 法则由下面 3 个单词组成（FAB 法则的名字就是由它们的首字母组成）：</p><ul><li>Feature： 你的特征/优势是什么？</li><li>Advantage： 比别人好在哪些地方；</li><li>Benefit： 如果雇佣你，招聘方会得到什么好处。</li></ul><p>简单来说，<strong>FAB 法则主要是让你的面试官知道你的优势和你能为公司带来的价值。</strong></p><h3 id="注意事项和建议"><a href="#注意事项和建议" class="headerlink" title="注意事项和建议"></a>注意事项和建议</h3><ul><li>一定要使用 PDF 格式投递，不要使用 Word 或者其他格式投递。这是最基本的！</li><li>尽量避免主观表述，少一点语义模糊的形容词。表述要简洁明了，简历结构要清晰。</li><li>精简表述，突出亮点。校招简历建议不要超过 2 页，社招简历建议不要超过 3 页。如果内容过多的话，不需要非把内容压缩到一页，保持排版干净整洁就可以了。</li><li>不会的东西就不要写在简历上了。注意简历真实性，适当润色没有问题。</li><li>技术博客、Github 以及获奖经历等可以直接证明自己能力的东西，能写就尽量写在这里。不过，如果技术博客和 Github 上没有什么内容的话，就不要写了。</li><li>技术名词最好规范大小写比较好，比如 java-&gt;Java ，spring boot -&gt; Spring Boot 。这个虽然有些面试官不会介意，但是很多面试官都会在意这个细节的。</li><li>工作经历建议采用时间倒序的方式来介绍，实习经历建议将最有价值的放在最前面。</li><li>将自己的项目经历完美的展示出来非常重要，重点是突出自己做了什么（挖掘亮点），而不是介绍项目是做什么的。</li><li>项目经历建议以时间倒序排序，另外项目经历不在于多（精选 2~3 即可），而在于有亮点。</li><li>个人评价就是对自己的解读，一定要用简洁的语言突出自己的特点和优势，避免废话！ 像勤奋、吃苦这些比较虚的东西就不要扯了，面试官看着这种个人评价就烦。</li><li>准备面试的过程中应该将你写在简历上的东西作为重点，尤其是项目经历上和技能介绍上的。</li><li>面试和工作是两回事，聪明的人会把面试官往自己擅长的领域领，其他人则被面试官牵着鼻子走。虽说面试和工作是两回事，但是你要想要获得自己满意的 offer ，你自身的实力必须要强。</li></ul><h2 id="为什么要学习源码？源码这块面试会怎么问呢？如何阅读源码？"><a href="#为什么要学习源码？源码这块面试会怎么问呢？如何阅读源码？" class="headerlink" title="为什么要学习源码？源码这块面试会怎么问呢？如何阅读源码？"></a><strong>为什么要学习源码？源码这块面试会怎么问呢？如何阅读源码？</strong></h2><h3 id="为什么要学习源码？"><a href="#为什么要学习源码？" class="headerlink" title="为什么要学习源码？"></a>为什么要学习源码？</h3><h4 id="学习优秀的代码实践"><a href="#学习优秀的代码实践" class="headerlink" title="学习优秀的代码实践"></a>学习优秀的代码实践</h4><p>如果我们沉浸在自己的世界，整天 CRUD，实际是很难提高自己的编码能力，重复编码提升的不过是熟练度罢了!</p><p>如果我们想要写出质量更高、扩展性更好的代码，我们要做的事情非常简单：<strong>看一些技术大佬是怎么写的，模仿就完事了</strong>。</p><p><strong>这个模仿不同于照葫芦画瓢，我们需要搞懂优秀设计背后的原理。</strong></p><p>那怎么检验自己是否掌握了呢？很简单，看自己能不能在后续的编码中实践就好了。但是，切记不要为了用“好的编码实践”而用，一切要结合业务实际需要。</p><p>一些不错的开源项目，都是一些技术大佬们几个月甚至是几年的成果。只要肯花时间看，我们一定能从源码中学到很多东西。</p><p>我们需要重点关注源码中的这些点：</p><ul><li><p>如何抽象接口的？</p></li><li><p>如何运用设计模式的？</p></li><li><p>如何实践 SOLID 软件设计原则的？</p></li><li><p>有哪些优秀的编码实践？</p></li><li><p>……</p></li></ul><h4 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h4><p>如果我们想要设计一个类似的框架或者轮子的话，参考已有的优秀框架不失为一个好手段。俗话说的好：“他山之石可以攻玉”。</p><p>我们平时接触到的很多开源项目都是例子，比如阿里开源的消息队列 RocketMQ 就借鉴了 Kafka 。</p><h4 id="面试需要"><a href="#面试需要" class="headerlink" title="面试需要"></a>面试需要</h4><p>据我观察，大部分真正愿意去看源码的朋友都是为了面试。这些朋友会找到对应框架比较重要的部分来学习源码，拿 Spring Boot 来说的话，就是 Spring Boot 启动流程、自动配置原理…。</p><p>确实，短时间内突击源码，我们一定要重点关注那些重要的地方。</p><p>但是，这种为了面试而突击源码的方式，往往很难真正学到源码的精髓，能收货的东西也会很有限。</p><h4 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h4><p>很多时候，我们阅读源码是因为项目需要。</p><p>比如说我们的项目在前期引入了某个开源框架，但是到项目中期的时候，我们发现这个开源框架并不能很好地满足我们的需求，甚至说还有一些小 bug 。与这个开源框架相关的负责人员交涉之后，我们的反馈并没有得到相应。这个时候， 我们就需要自己去实现某些功能以及修复某些 bug。想要做这些事情的前提是：我们当前对这个开源框架某一块的源码比较熟悉了。</p><h3 id="源码面试这块会怎么问？"><a href="#源码面试这块会怎么问？" class="headerlink" title="源码面试这块会怎么问？"></a>源码面试这块会怎么问？</h3><p>首先，你需要明确一点的是：随便一个框架的源码都 10w+行了，都看一遍是不可能的。你需要挑选比较重要的地方看。</p><p>拿 Spring/Spring Boot 源码举例：你一定要去看 IOC 和 AOP 具体的实现，要知道一个 Spring Bean 是如何一步一步被创建出来的。一定要搞清 Spring Boot 是如何实现自动配置的。</p><p>源码面试这个不会太细节。如果你知道的话一定是加分项，不知道的话不一定就会被 pass。不过你写简历的时候尽量写清楚点，写清楚自己看过哪部分的源码。</p><p>平时学习过程中，有时间的话可以多看看源码，对于提升自己的能力非常有帮助！</p><p>如果你不知道阅读什么源码的话，可以先从 JDK 的几个常用集合看起。另外，我比较推荐看 Dubbo 的，因为感觉会稍微相对容易一点，模块划分清晰，注释也比较详细。搞清楚了 Dubbo 基本的原理之后，看起来就没那么吃力了。</p><h3 id="有哪些值得阅读的优秀源码？"><a href="#有哪些值得阅读的优秀源码？" class="headerlink" title="有哪些值得阅读的优秀源码？"></a>有哪些值得阅读的优秀源码？</h3><blockquote><p>下面有部分内容是摘自朋友写的一篇文章：<a href="https://insights.thoughtworks.cn/how-to-improve-code-quality/" target="_blank" rel="noopener">《如何提升代码质量 - Thoughtworks 洞见》</a></p></blockquote><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><p><strong>为什么要看 JDK 源码？</strong></p><ol><li>JDK 源码是其它所有源码的基础，看懂了 JDK 源码再看其它的源码会达到事半功倍的效果。</li><li>JDK 源码中包含大量的数据结构知识，是学习数据结构很好的资料，比如，链表、队列、散列表、红黑树、跳表、桶、堆、双端队列等。</li><li>JDK 源码中包含大量的设计模式，是学习设计模式很好的资料，比如，适配器模式、模板方法模式、装饰器模式、迭代器模式、代理模式、工厂模式、命令模式、状态模式等。</li><li>JDK 源码中包含大量 Java 的高阶知识，比如弱引用、Unsafe、CAS、锁原理、伪共享等，不看源码是很难学会这些知识的。</li></ol><p><strong>JDK 源码阅读顺序 ：</strong></p><ol><li>java.lang 包下的基本包装类(Integer、Long、Double、Float 等)，还有字符串相关类(String、StringBuffer、StringBuilder 等)、常用类(Object、Exception、Thread、ThreadLocal等)。</li><li>java.lang.ref 包下的引用类(WeakReference、SoftReference 等)</li><li>java.lang.annotation 包下的注解的相关类</li><li>java.lang.reflect 包下的反射的相关类</li><li>java.util 包下为一些工具类，主要由各种容器和集合类(Map、Set、List 等)</li><li>java.util.concurrent 为并发包，主要是原子类、锁以及并发工具类</li><li><a href="http://java.io/" target="_blank" rel="noopener">java.io </a>和 java.nio 可以结合着看</li><li>java.time 主要包含时间相关的类，可以学习下 Java 8 新增的几个</li><li><a href="http://java.net/" target="_blank" rel="noopener">java.net </a>包下为网络通信相关的类，可以阅读下 Socket 和 HTTPClient 相关代码</li></ol><p>源码量那么大，不要妄想一口气都看完。最好符合你当前的目的，比如你想搞懂多线程，你就主要看 JUC，想搞懂 IO 就多去看 NIO，想看常量池就去看 ClassFileParser。看模块的时候，要注意接口大于一切，或者说函数大于一切。先不要妄想搞懂所有细节，先找几个比较关键的函数，搞懂函数的作用（比如应该仔细分析一下函数名称和参数名称）然后再往下进行。</p><p>在看 Java 类库的时候要多注意类是不是 abstract 的，是不是用的模板方法，多关注函数前的修饰词，这一般说明这个函数是给谁用的。多注意这些细节而不是傻傻过一遍逻辑，能从里面学到不少关于设计的东西。还可以注意什么地方是为了之前的设计而委曲求全的做法，毕竟一个这么多年的类库，肯定不是什么地方都是完美的。</p><p>JDK 源码一定要看 Java 并发相关的源码， Doug Lea 的并发源码比较漂亮，一行行都是精华，非常值得阅读学习。</p><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p>Spring 是一个开源的设计层面框架，它解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。包括在此基础上衍生的 Spring MVC、 Spring Boot 、Spring Cloud 等，在现在企业中的应用越来越广泛。无论是设计思想，代码规范，还是设计模式，接口设计，类加载，都是非常优秀的源码。</p><p>个人学习心得如下：先去看视频，大概熟悉一下 Spring 的使用情况，然后再去学习源码，此处可以阅读<a href="https://book.douban.com/subject/25866350/" target="_blank" rel="noopener">《Spring 源码深度解析》</a>，除了看书之外，记得打开 IDEA 查看对应的源码，如果能调试看看具体调用逻辑那就更好了。</p><h4 id="Google-Guava"><a href="#Google-Guava" class="headerlink" title="Google Guava"></a>Google Guava</h4><p><a href="https://github.com/google/guava" target="_blank" rel="noopener">Google Guava</a> 是 Google 公司内部 Java 开发工具库的开源版本。Google 内部的很多 Java 项目都在使用它。它提供了一些 JDK 没有提供的功能，以及对 JDK 已有功能的增强功能。其中就包括：集合（Collections）、缓存（Caching）、原生类型支持（Primitives Support）、并发库（Concurrency Libraries）、通用注解（Common Annotation）、字符串处理（Strings Processing）、数学计算（Math）、I/O、事件总线（EventBus）等等。</p><h4 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h4><p><a href="https://github.com/netty/netty" target="_blank" rel="noopener">Netty</a> 是一个优秀的开源网络编程框架，我们平常经常接触的 Dubbo、RocketMQ、Elasticsearch、gRPC 等等都用到了 Netty。</p><p>Netty 中使用了大量的设计模式以及优秀的设计原则。</p><h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><p><a href="https://github.com/apache/dubbo" target="_blank" rel="noopener">Dubbo</a> 是一款优秀的国产 RPC 框架，其 SPI 自适应扩展、负载均衡实现、集群实现、服务调用过程等部分的源码都非常值得阅读和学习。</p><h3 id="保姆级别的源码阅读教学"><a href="#保姆级别的源码阅读教学" class="headerlink" title="保姆级别的源码阅读教学"></a>保姆级别的源码阅读教学</h3><h4 id="如何高效阅读项目源码"><a href="#如何高效阅读项目源码" class="headerlink" title="如何高效阅读项目源码"></a>如何高效阅读项目源码</h4><p>⚠️ 注意：</p><ul><li><p>阅读源码之前，一定要先熟悉项目。你连 Dubbo 怎么使用、RPC 是个啥都不知道，就直接去看 Dubbo 源码的话，不是纯属扯淡么？</p></li><li><p>阅读源码之前，一定要对项目源码使用的技术有一个最基本的认识。</p></li></ul><h5 id="从了解并使用项目开始"><a href="#从了解并使用项目开始" class="headerlink" title="从了解并使用项目开始"></a>从了解并使用项目开始</h5><p>开始看源码之前，自己花一些时间阅读以下官方的文档、使用教程。如果官方文档是英文的话，也可以找一些国人写的博客看看。不知道项目是用法和用途的就去看项目源代码的行为，无疑是在黑夜中穿针。</p><h5 id="站在最外层概览项目设计"><a href="#站在最外层概览项目设计" class="headerlink" title="站在最外层概览项目设计"></a>站在最外层概览项目设计</h5><p>阅读源码之前，我比较推荐先站在最外层去熟悉项目整体架构和模块分包。掌控全局之后，我们方能以一个更正确的姿势畅游源码的世界。</p><p>比如，我在看 Dubbo 源码之前，我就首先花了大量时间熟悉了 Dubbo 的模块分包，这个在其官方文档上介绍的就非常详细。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fjavaguide%2Fdubbo-modules.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fbb0639124ff5896b6735f06c4f555b98.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="从某个功能主线-问题出发研究项目源码"><a href="#从某个功能主线-问题出发研究项目源码" class="headerlink" title="从某个功能主线/问题出发研究项目源码"></a>从某个功能主线/问题出发研究项目源码</h5><p>一个比较成熟的项目的源码量是非常多，我们不可能都看完。比较推荐的方式就是通过一个功能主线（比如 Dubbo 是如何暴露服务的？）或者问题（比如 SpringBoot 的自动配置原理？）出发。</p><h5 id="学会使用官方提供的-Demo"><a href="#学会使用官方提供的-Demo" class="headerlink" title="学会使用官方提供的 Demo"></a>学会使用官方提供的 Demo</h5><p>一般情况下，项目源码已经自带了一些 Demo 我们可以直接使用。这样可以方便我们：</p><ul><li><p>检验源码阅读环境是否搭建成功。</p></li><li><p>调试项目。</p></li></ul><p>比如在 Dubbo 项目源码中，我们找到 dubbo-demo 这个文件夹，里面包含了 3 种不同类型（xml、api、annotation）使用方式的 demo，可以帮助我们节省掉大量写 Demo 的时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F0486ec54187e80ecd07a81aafebbf278.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="有哪些对阅读源码有帮助的建议"><a href="#有哪些对阅读源码有帮助的建议" class="headerlink" title="有哪些对阅读源码有帮助的建议"></a>有哪些对阅读源码有帮助的建议</h4><h5 id="学习常见的设计模式、设计原则"><a href="#学习常见的设计模式、设计原则" class="headerlink" title="学习常见的设计模式、设计原则"></a>学习常见的设计模式、设计原则</h5><p>一个优秀的开源项目一定会不可避免使用到一些设计模式，如果我们提前不了解这些设计模式的话，会加深自己理解代码的难度。</p><p>另外，项目的代码还应该满足一些设计原则。对于，面向对象编程来说，下面这些原则都是我们应该非常熟练的。</p><ol><li><p>面向对象编程的思想（继承、封装、多态、抽象）</p></li><li><p>面向对象的七大设计原则： </p><ul><li><p>单一职责原则（Single Responsibility Principle, SRP）</p></li><li><p>开闭原则（Open Closed Principle，OCP）</p></li><li><p>里氏代换原则（Liskov Substitution Principle，LSP）</p></li><li><p>接口隔离原则（Interface Segregation Principle，ISP）</p></li><li><p>依赖反转原则（Dependency Inversion Principle，DIP）</p></li><li><p>合成/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）</p></li><li><p>迪米特法则（Principle of Least Knowledge，PLK，也叫最小知识原则）</p></li></ul></li><li><p>软件设计的三大原则 </p><ul><li><p>DRY（Don’t Repeat Yourself）原则：不要重复你自己</p></li><li><p>KISS（ Keep It Simple/Stupid）原则：保持简单易懂</p></li><li><p>YAGNI （ You Ain’t Gonna Need It）原则 ：不要进行过度设计</p></li></ul></li></ol><h5 id="学会看测试类"><a href="#学会看测试类" class="headerlink" title="学会看测试类"></a>学会看测试类</h5><p>测试类一方面可以说是对代码的稳定性的保障，让我们对自己写的代码更放心。另一方面测试本身也是对代码的一个说明，因此，很多人都会说：“好的测试即是文档”。通过测试类，我们可以很清楚地知道某一块代码具体是在干嘛。</p><h5 id="学会调试"><a href="#学会调试" class="headerlink" title="学会调试"></a>学会调试</h5><p>通过调试，我们可以更直观地看到调用逻辑关系。通过变量信息，可以更直观地看到数据的变化过程，这对于我们理解代码以及找 bug 都是非常有帮助的。</p><h5 id="掌握-IDE-常用的快捷键"><a href="#掌握-IDE-常用的快捷键" class="headerlink" title="掌握 IDE 常用的快捷键"></a>掌握 IDE 常用的快捷键</h5><p>熟悉常用的快捷键在源码阅读中非常有必要！这个是必须要会的。</p><p>比如在 IDEA 中我们通过 command+o(mac)或者 ctrl+n(win/linux)即可搜索类以及文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\6feb1a70-cf36-4632-b9ac-55eb430b87a0.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>通过 command+f12(mac)或者 ctrl+f12(win/linux)即可查看类的结构（函数、变量）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\8b23a419-8370-42be-8ebc-02455f3b3236.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="使用一些插件辅助自己"><a href="#使用一些插件辅助自己" class="headerlink" title="使用一些插件辅助自己"></a>使用一些插件辅助自己</h5><p>有一些插件可以帮助我们理清源码的调用逻辑。比如 IDEA 插件 SequenceDiagram 就可以帮助我们一键生成方法的时序图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\a579fca9-a4c7-4c5b-8ec3-7816abc45084.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>相关阅读：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247494507&idx=2&sn=50764e6f24f3f48738770154d032dde4&chksm=cea1a4a0f9d62db6da5a45de6ac230eb108fb9bd8d71a93e10e3b0a929b9e01d885f158f80ba&scene=178&cur_album_id=1319419426898329600#rd" target="_blank" rel="noopener">《安利一个 IDEA 骚操作:一键生成方法的序列图》</a></p><h5 id="手撸一个简易版"><a href="#手撸一个简易版" class="headerlink" title="手撸一个简易版"></a>手撸一个简易版</h5><p>我们可以在学习某个具体的框架源码之前，自己先手撸一个简易版的框架。</p><p>就比如我们学习 Dubbo 源码之前，我们自己撸一个简易版的 RPC 框架。</p><p>自己动脑思考该怎么设计，功能该如何实现。</p><p>做了这些尝试之后，我们再去看别人写的源码，收货一定会非常大！</p><h2 id="为什么要准备算法面试？怎么高效刷-Leetcode？"><a href="#为什么要准备算法面试？怎么高效刷-Leetcode？" class="headerlink" title="为什么要准备算法面试？怎么高效刷 Leetcode？"></a>为什么要准备算法面试？怎么高效刷 Leetcode？</h2><h3 id="为什么要准备算法面试？"><a href="#为什么要准备算法面试？" class="headerlink" title="为什么要准备算法面试？"></a>为什么要准备算法面试？</h3><p>很明显，国内现在的校招面试开始越来越重视算法了，尤其是像字节跳动、腾讯这类大公司。绝大部分公司的校招笔试是有算法题的，如果 AC 率比较低的话，基本就挂掉了。</p><p>社招的话，算法面试同样会有。不过，面试官可能会更看重你的工程能力，你的项目经历。如果你的其他方面都很优秀，但是算法很菜的话，不一定会挂掉。不过，还是建议刷下算法题，避免让其成为自己在面试中的短板。</p><p>社招往往是在技术面试的最后，面试官给你一个算法题目让你做。</p><p>为了能够应对，我们大部分人能做的就是刷 Leetcode 来积累做算法题的经验和套路。</p><p>另外， 很多小伙伴特别是已经工作几年的，总觉得说算法这东西没啥用。确实，相比于系统设计能力，工程能力来说，算法对于普通工程师的价值可能并不是那么大。但是，在面试中算法确实很能考验面试者能力的一个环节。单纯靠项目经历以及技术面试的话，还是很容易弄虚作假的。算法能力在某些角度可以反映你解决编程问题的能力以及你的思维能力。</p><h3 id="刷-LeetCode-吃力正常吗？"><a href="#刷-LeetCode-吃力正常吗？" class="headerlink" title="刷 LeetCode 吃力正常吗？"></a>刷 LeetCode 吃力正常吗？</h3><p>我自己写过框架，写过 web 服务器，给项目造过轮子。</p><p>我想说的是太正常不过了！我的工程能力在同龄人中应该还算可以，但是很多 Leetcode 上面的算法题我真做不出来。手撕算法方面我真的没有公司新招进来的应届生强。说实话，公司出的算法题，我自己都不一定能做出来（主要是因为工作之后很久没碰了）。</p><p>小声 BB：应届生过来了还是要不断经历我们“老人“的 diss，哈哈哈！鲁迅先生说：没有 diss,哪里来的成长。</p><h3 id="刷-Leetcode-需要哪些基础？"><a href="#刷-Leetcode-需要哪些基础？" class="headerlink" title="刷 Leetcode 需要哪些基础？"></a>刷 Leetcode 需要哪些基础？</h3><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><p>刷题之前，确保你有一个还算熟悉的编程语言。比较常用的有 Java、C/C++、Python、Go。</p><h4 id="数据结构和算法基础"><a href="#数据结构和算法基础" class="headerlink" title="数据结构和算法基础"></a>数据结构和算法基础</h4><p>为了让自己更愉快地刷题，一些基本的数据结构和算法知识是必备的。</p><p>刷 Leetcode 之前，如果你还没有算法和数据结构方面的基础知识的话，可以先看一些比较适合入门的书籍。我的下面这个回答会推荐一些算法相关的书籍和学习资源（写的用心，觉得不错的话可以点个赞鼓励一下）：<a href="https://www.zhihu.com/question/323359308/answer/1545320858" target="_blank" rel="noopener">《有哪些值得推荐的好的算法书？》</a> 。</p><ul><li>数据结构：数组、链表、栈、队列、堆、二叉树、图、哈希表、并查集</li><li>算法思想 ： 递归、动态规划、二分查找、贪心、分治、回溯、DFS、BFS、KMP、树的广度和深度优先搜索、</li><li>数学： 位运算、质数、排列组合</li></ul><p>另外，对于每一种编程语言都有一些内置的常用数据结构的实现，我们需要提前了解。拿 Java 来说，<code>HashMap、TreeMap，TreeSet，PriorityQueue，Deque</code>等都是比较常用的。</p><h3 id="怎么高效刷-Leetcode？"><a href="#怎么高效刷-Leetcode？" class="headerlink" title="怎么高效刷 Leetcode？"></a>怎么高效刷 Leetcode？</h3><p>最重要的还是一定要坚持刷起来！！！</p><h4 id="按照类型来刷"><a href="#按照类型来刷" class="headerlink" title="按照类型来刷"></a>按照类型来刷</h4><p>我个人比较建议每次刷题助攻一个类型，比如你某一天或者几天就主要刷动态规划相关的题目。</p><p>为什么这样建议呢？ 也是一点个人经验吧！我当时在刷算法题的时候，发现如果每次做的算法题类型跨度太大的话，非常影响自己速度和体验。当你刷了同一种类型的题目比较多了之后，你就会大概知道这类题型的套路了。</p><h4 id="由简入难"><a href="#由简入难" class="headerlink" title="由简入难"></a>由简入难</h4><p>很多朋友可能和我一样，刚开始刷 LeetCode 的时候，寸步难行，经常一道算法题一下午写不出来。当时，我甚至开始怀疑自己是不是笨。为此，我专门找到一些算法大佬交流。算法大佬安慰我说：“ 不是你笨，不用灰心！你先从简单地算法题开始做起，多多总结就好了！”。</p><p>于是，我每天抽出 1~3 个小时专门用来刷简单类型的算法题。刷了一个多月之后，一些我比较熟悉的题型（简单类型）可以不看答案就能直接 AC 了。</p><p>刷算法是一个循序渐进的过程，如果你不是 ACM 大佬这种级别的人物的话，还是建议先从简单开始刷起，慢慢积累经验。</p><p>不过，要说明的一点是：很多简单类型的题目甚至还要比中等类型的题目还要难！所以，如果你没办法解决一些简单的算法题，也不要太纠结，不要因此失去信心。</p><h4 id="重视高频面试题目-题型"><a href="#重视高频面试题目-题型" class="headerlink" title="重视高频面试题目/题型"></a>重视高频面试题目/题型</h4><p>如果你的时间不是很充足的话，建议可以从高频面试题入手。</p><p>像 Leetcode 上面就专门把一些最热门的算法面试题给单独整理了出来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\27aa2047-0b05-4393-89b7-b6744ae70f38.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h3 id="面试中有哪些常见的手撕代码题？"><a href="#面试中有哪些常见的手撕代码题？" class="headerlink" title="面试中有哪些常见的手撕代码题？"></a>面试中有哪些常见的手撕代码题？</h3><p>欢迎各位同学在评论区补充完善。</p><ul><li>LRU 缓存实现：<a href="https://www.baeldung.com/java-lru-cache" target="_blank" rel="noopener">https://www.baeldung.com/java-lru-cache</a></li><li>栈实现：<a href="https://zihengcat.github.io/2019/05/18/java-data-structure-and-algorithm-stack/" target="_blank" rel="noopener">https://zihengcat.github.io/2019/05/18/java-data-structure-and-algorithm-stack/</a></li><li>队列实现：<a href="https://cloud.tencent.com/developer/article/1894209" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1894209</a></li><li>加权轮询算法实现：<a href="https://mp.weixin.qq.com/s/P25wnGkOjrZiq034UIu2pg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/P25wnGkOjrZiq034UIu2pg</a></li><li>死锁：<a href="https://www.baeldung.com/java-deadlock-livelock" target="_blank" rel="noopener">https://www.baeldung.com/java-deadlock-livelock</a> 、<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html（死锁模块有示例代码）" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html（死锁模块有示例代码）</a></li><li>单例模式实现：<a href="https://segmentfault.com/a/1190000040146574" target="_blank" rel="noopener">https://segmentfault.com/a/1190000040146574</a></li><li>快速排序：<a href="http://www.atguigu.com/mst/java/gaopin/17136.html" target="_blank" rel="noopener">http://www.atguigu.com/mst/java/gaopin/17136.html</a></li><li>生产者与消费者：<a href="https://cloud.tencent.com/developer/article/1824304" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1824304</a></li><li>……</li></ul><h2 id="没有项目经验怎么办？跟着视频做的项目会被面试官嫌弃不？"><a href="#没有项目经验怎么办？跟着视频做的项目会被面试官嫌弃不？" class="headerlink" title="没有项目经验怎么办？跟着视频做的项目会被面试官嫌弃不？"></a><strong>没有项目经验怎么办？跟着视频做的项目会被面试官嫌弃不？</strong></h2><h3 id="没有项目经验怎么办"><a href="#没有项目经验怎么办" class="headerlink" title="没有项目经验怎么办?"></a>没有项目经验怎么办?</h3><p>没有项目经验是大部分应届生会碰到的一个问题。甚至说，有很多有工作经验的程序员，对自己在公司做的项目不满意，也想找一个比较有技术含量的项目来做。</p><p>说几种我觉得比较靠谱的获取项目经验的方式，希望能够对你有启发。</p><h4 id="实战项目视频-专栏"><a href="#实战项目视频-专栏" class="headerlink" title="实战项目视频/专栏"></a>实战项目视频/专栏</h4><p>在网上找一个符合自己能力与找工作需求的实战项目视频或者专栏，跟着老师一起做。</p><p>你可以通过慕课网、哔哩哔哩、拉勾、极客时间、培训机构（比如黑马、尚硅谷）等渠道获取到适合自己的实战项目视频/专栏。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5aed393a-f5d3-41eb-8476-18913997deb3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>尽量选择一个适合自己的项目，没必要必须做分布式/微服务项目，对于绝大部分同学来说，能把一个单机项目做好就已经很不错了。</p><p>我面试过很多求职者，简历上看着有微服务的项目经验，结果随便问两个问题就知道根本不是自己做的或者说做的时候压根没认真思考。这种情况会给我留下非常不好的印象。</p><p>我在《Java 面试指北》的「面试准备篇」中也说过：</p><blockquote><p>个人认为也没必要非要去做微服务或者分布式项目，不一定对你面试有利。微服务或者分布式项目涉及的知识点太多，一般人很难吃透。并且，这类项目其实对于校招生来说稍微有一点超标了。即使你做出来，很多面试官也会认为不是你独立完成的。</p><p>其实，你能把一个单体项目做到极致也很好，对于个人能力提升不比做微服务或者分布式项目差。如何做到极致？代码质量这里就不提了，更重要的是你要尽量让自己的项目有一些亮点（比如你是如何提升项目性能的、如何解决项目中存在的一个痛点的），项目经历取得的成果尽量要量化一下比如我使用 xxx 技术解决了 xxx 问题，系统 qps 从 xxx 提高到了 xxx。</p></blockquote><p>跟着老师做的过程中，你一定要有自己的思考，不要浅尝辄止。对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去深入学习。</p><h4 id="实战类开源项目"><a href="#实战类开源项目" class="headerlink" title="实战类开源项目"></a>实战类开源项目</h4><p>Github 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。</p><p>你可以参考 <a href="https://javaguide.cn/open-source-project/practical-project.html" target="_blank" rel="noopener">Java 优质开源实战项目</a> 上面推荐的实战类开源项目，质量都很高，项目类型也比较全面，涵盖博客/论坛系统、考试/刷题系统、商城系统、权限管理系统、快速开发脚手架以及各种轮子。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c81c0f02-24ac-4a6a-bab5-0240c060b176.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>一定要记住： <strong>不光要做，还要改进，改善。不论是实战项目视频或者专栏还是实战类开源项目，都一定会有很多可以完善改进的地方</strong>。</p><h4 id="从头开始做"><a href="#从头开始做" class="headerlink" title="从头开始做"></a>从头开始做</h4><p>自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。</p><p>这个要求比较高，我建议你已经有了一个项目经验之后，再采用这个方法。如果你没有做过项目的话，还是老老实实采用上面两个方法比较好。</p><h4 id="参加各种大公司组织的各种大赛"><a href="#参加各种大公司组织的各种大赛" class="headerlink" title="参加各种大公司组织的各种大赛"></a>参加各种大公司组织的各种大赛</h4><p>如果参加这种赛事能获奖的话，项目含金量非常高。即使没获奖也没啥，也可以写简历上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5fd25717-d7cd-492b-b964-84913ce4621f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="参与实际项目"><a href="#参与实际项目" class="headerlink" title="参与实际项目"></a>参与实际项目</h4><p>通常情况下，你有如下途径接触到企业实际项目的开发：</p><ol><li><p>老师接的项目；</p></li><li><p>自己接的私活；</p></li><li><p>实习/工作接触到的项目；</p></li></ol><p>老师接的项目和自己接的私活通常都是一些偏业务的项目，很少会涉及到性能优化。这种情况下，你可以考虑对项目进行改进，别怕花时间，某个时间用心做好一件事情就好比如你对项目的数据模型进行改进、引入缓存提高访问速度等等。</p><p>实习/工作接触到的项目类似，如果遇到一些偏业务的项目，也是要自己私下对项目进行改进优化。</p><p>尽量是真的对项目进行了优化，这本身也是对个人能力的提升。如果你实在是没时间去实践的话，也没关系，吃透这个项目优化手段就好，把一些面试可能会遇到的问题提前准备一下。</p><h3 id="我跟着视频做的项目会被面试官嫌弃不？"><a href="#我跟着视频做的项目会被面试官嫌弃不？" class="headerlink" title="我跟着视频做的项目会被面试官嫌弃不？"></a>我跟着视频做的项目会被面试官嫌弃不？</h3><p>很多应届生都是跟着视频做的项目，这个大部分面试官都心知肚明。</p><p>不排除确实有些面试官不吃这一套，这个也看人。不过我相信大多数面试官都是能理解的，毕竟你在学校的时候实际上是没有什么获得实际项目经验的途径的。</p><p>大部分应届生的项目经验都是自己在网上找的或者像你一样买的付费课程跟着做的，极少部分是比较真实的项目。 从你能想着做一个实战项目来说，我觉得初衷是好的，确实也能真正学到东西。 但是，究竟有多少是自己掌握了很重要。看视频最忌讳的是被动接受，自己多改进一下，多思考一下！就算是你跟着视频做的项目，也是可以优化的！</p><p><strong>如果你想真正学到东西的话，建议不光要把项目单纯完成跑起来，还要去自己尝试着优化！</strong></p><p>简单说几个比较容易的优化点：</p><ol><li>全局异常处理 ：很多项目这方面都做的不是很好，可以参考我的这篇文章：<a href="https://mp.weixin.qq.com/s/Y4Q4yWRqKG_lw0GLUsY2qw" target="_blank" rel="noopener">《使用枚举简单封装一个优雅的 Spring Boot 全局异常处理！》</a> 来做优化。</li><li>项目的技术选型优化 ：比如使用 Guava 做本地缓存的地方可以换成 Caffeine 。Caffeine 的各方面的表现要更加好！再比如 Controller 层是否放了太多的业务逻辑。</li><li>数据库方面 ：数据库设计可否优化？索引是否使用使用正确？SQL 语句是否可以优化？是否需要进行读写分离？</li><li>缓存 ：项目有没有哪些数据是经常被访问的？是否引入缓存来提高响应速度？</li><li>安全 ： 项目是否存在安全问题？</li><li>……</li></ol><p>另外，我在星球分享过常见的性能优化方向实践案例，涉及到多线程、异步、索引、缓存等方向，强烈推荐你看看：<a href="https://t.zsxq.com/06EqfeMZZ" target="_blank" rel="noopener">https://t.zsxq.com/06EqfeMZZ</a> 。</p><p><strong>最后，再给大家推荐一个 IDEA 优化代码的小技巧，超级实用！</strong></p><p>分析你的代码：右键项目-&gt; Analyze-&gt;Inspect Code</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c065470a-b2c0-4896-ab99-af854cd7dd43.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>扫描完成之后，IDEA 会给出一些可能存在的代码坏味道比如命名问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5b4d6cab-f3a2-4f51-a72d-dbaa2eb31344.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>并且，你还可以自定义检查规则。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4d46853e-e08c-4f25-9018-c7c3f0c6c181.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h2 id="接触不到高并发场景咋办？如何获得高并发的经验？"><a href="#接触不到高并发场景咋办？如何获得高并发的经验？" class="headerlink" title="接触不到高并发场景咋办？如何获得高并发的经验？"></a><strong>接触不到高并发场景咋办？如何获得高并发的经验？</strong></h2><p>不论是应届生还是有几年工作经验的程序员，都可能会面临一个问题：<strong>接触不到高并发场景</strong>。</p><p>不要慌！说实话，能接触到高并发这类业务场景的人还是极少数的。即使在阿里、京东这种公司，你也还是很有可能接触不到。</p><p>我在大学那会的时候，自己就比较喜欢捣鼓各种高并发相关的技术了（还是因为太卷，工作之后实际并没有怎么用到，哈哈哈），自己在手动搭建过 Redis 集群、Zookeeeper 集群，动手实现过分库分表、读写分离。</p><p>在介绍方法之前，我们首先知道 <strong>高并发系统设计的三大目标</strong> ：</p><ul><li><strong>高性能</strong> ：系统的处理请求的速度很快，响应时间很短。</li><li><strong>高可用</strong> ：系统几乎可以一直正常提供服务。也就是说系统具备较高的无故障运行的能力。</li><li><strong>可扩展</strong> ：流量高峰时能否在短时间内完成扩容，更平稳地承接峰值流量，比如双 11 活动、明星离婚、明星恋爱等热点事件。</li></ul><p><strong>实现高性能的常用手段</strong>  ：</p><ul><li><p>数据库 </p><ul><li>分库分表&amp;读写分离</li><li>NoSQL</li></ul></li><li><p>缓存</p></li><li><p>消息队列 （待重构）</p></li><li><p>负载均衡</p></li><li><p>池化技术</p></li><li><p>……</p></li></ul><p><strong>实现高可用的常用手段  ：</strong></p><ul><li>限流</li><li>降级</li><li>熔断</li><li>排队</li><li>集群</li><li>超时和重试机制</li><li>灾备设计</li><li>异地多活</li></ul><p><strong>实现可扩展架构的常用手段：</strong></p><ul><li>分层架构：面向流程拆分</li><li>SOA、微服务：面向服务拆分</li><li>微内核架构：面向功能拆分</li></ul><p>你可以在 JavaGuide 的在线阅读网站上找到上面这些手段对应的详细讲解。篇幅问题，我这里就不帖原文了。网站地址：<a href="https://javaguide.cn/" target="_blank" rel="noopener">https://javaguide.cn/</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3e29bdbc-ebe5-4377-bb63-249fcad54b4c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>知道了高并发系统设计相关的概念和手段之后，废话不多说，直接推荐两种我觉得比较靠谱的方法。</p><p><strong>第一种方法是自己研究某个技术然后对已有项目进行改进，具体步骤如下：</strong></p><ol><li>自己研究某个技术比如读写分离。</li><li>将自己研究的成果应用到自己的项目比如为项目增加读写分离来提高读数据库的速度。</li><li>想一想项目用了某个技术比如读写分离之后，会不会遇到什么问题，项目的性能到底提升了多少。如果你能模拟一下真实场景就更好了，既能真正学到，又能让自己项目经历更真实。</li><li>简单复盘总结一下自己对项目所做的完善改进。</li></ol><p>这里要说明一点的是：<strong>一定不要为了学习实践某个技术而直接用在自己公司的项目上。</strong></p><p>技术是为了服务业务的，没必要用的技术就不要用！我之前有个同事天天喜欢在项目上用自己学到的新技术，结果，有一天就出现生产问题了。我现在想着这件事，都想锤他！</p><p><strong>你完全可以私下对项目进行改进</strong>。 甚至说，你就只是搞懂了这个技术，并没有将其用在真实的项目中。面试官会专门去调查你这个项目么？那大概率是不会。不过，一定要确保自己是真的搞懂了！</p><p>我们只是迫于压力，为了找工作而简单润色一下项目经历而已嘛！</p><p><strong>第二种方法是你可以跟着视频/教程做一个分布式相关的项目</strong>，然后把它吃透，最好还可以对这个项目进行改进，具体步骤如下：</p><ol><li>跟着视频/教程写一个分布式相关的项目（自己从头开始做也是一样的）。</li><li>深入研究并搞懂项目涉及到的一些技术。</li><li>思考有没有可以改进的地方？</li><li>思考线上环境可能会有一些什么问题出现？该怎么解决？</li><li>简单复盘总结复盘一下自己从这个项目中学到的什么东西。</li></ol><p>我在大学的时候就是通过这种方法获得的高并发相关的经验。我还记得我当时做的那个分布式项目使用到了 Redis 是单机并且消息队列用的是已经淘汰的 ActiveMQ。所以，我就自己搭建了 Redis 集群，模拟各种可能出现的问题。同时，我使用 RocketMQ 替换了 ActiveMQ 并提取封装了消息队列相关的代码。</p><p>通过上面这两种方法来获得高并发经验的话，还有一点非常重要： <strong>自己不光要模拟一些生产环境可能会遇到的问题，还要知道这些问题是怎么解决的</strong>。 就比如说你用到了 Redis 的话，你自己肯定要私下模拟一下缓存穿透、单机内存不够用、Redis突然宕机等等情况。</p><p>基本上，你用到的大部分中间件可能会遇到的问题，你都能够在网上找到对应的案例和解答。多花点时间看看，自己实践一下，研究思考一下。这样的话，在面试中才不会掉链子。</p><h2 id="优质-Java-实战项目推荐"><a href="#优质-Java-实战项目推荐" class="headerlink" title="优质 Java 实战项目推荐"></a><strong>优质 Java 实战项目推荐</strong></h2><h3 id="业务类开源项目"><a href="#业务类开源项目" class="headerlink" title="业务类开源项目"></a>业务类开源项目</h3><h4 id="社区系统"><a href="#社区系统" class="headerlink" title="社区系统"></a>社区系统</h4><p><a href="https://t.zsxq.com/zb2fMzr" target="_blank" rel="noopener">upupor</a> 是一个小众但是功能强大，代码质量也还可以的开源社区，挺适合作为学习的项目。 最主要的是这个项目目前知名度非常非常低，没有项目经历的小伙伴也可以改造升级一下拿来作为自己的项目经历。</p><p>技术栈 ：</p><ul><li><p>后端：Spring Boot + MySQL + Redis + Undertow（Web 容器）</p></li><li><p>前端 ：Thymeleaf（模板引擎，方便 SEO）+ Bootstrap</p></li></ul><p>相关地址 ：</p><ul><li><p>Github 地址：<a href="https://github.com/yangrunkang/upupor" target="_blank" rel="noopener">https://github.com/yangrunkang/upupor</a> 。</p></li><li><p>在线演示：<a href="https://upupor.com/" target="_blank" rel="noopener">https://upupor.com</a> 。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\55e1c636-7cea-4096-aca6-2d8a37aeaccc.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>网站的性能也是不错的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5c3d6977-effe-4e19-a308-07eeb18c889a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>类似的社区类小众但有两点的项目还有 <a href="https://github.com/rymcu/forest" target="_blank" rel="noopener">forest</a>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4f316405-9db0-417f-97df-4361fa7b38a9.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>不同于其他社区项目，forest 这个知识社区项目主打文章分享，可以自定义专题和作品集。看得出来作者维护比较认真，并且很有想法。根据项目首页介绍，这个项目未来还可能会增加专业知识题库、社区贡献系统、会员系统。</p><p>我大概浏览了一下这个项目代码，发现这个项目的代码写的也相对比较规范干净，比很多 star 数量比较多的社区类项目都要好太多！</p><p><strong>技术栈 ：</strong></p><ul><li>后端： SpringBoot + Shrio + MyBatis + JWT + Redis</li><li>前端：Vue + NuxtJS + Element-UI。</li></ul><p><strong>相关地址 ：</strong></p><ul><li>Github 地址：<a href="https://github.com/rymcu" target="_blank" rel="noopener">https://github.com/rymcu</a> 。</li><li>在线演示：<a href="https://rymcu.com/" target="_blank" rel="noopener">https://rymcu.com/</a> 。</li></ul><h4 id="小说网站"><a href="#小说网站" class="headerlink" title="小说网站"></a>小说网站</h4><p><a href="https://t.zsxq.com/iufIi2R" target="_blank" rel="noopener">novel-plus</a> 是一个开源的小说网站项目。这个项目的代码质量也是非常不错的，结果清晰，代码结构也比较规范。这是我推荐这个项目很大的一个原因。</p><ul><li>Github 地址：<a href="https://github.com/201206030/novel-plus" target="_blank" rel="noopener">https://github.com/201206030/novel-plus</a></li><li>Gitee 地址：<a href="https://gitee.com/novel_dev_team/novel-plus" target="_blank" rel="noopener">https://gitee.com/novel_dev_team/novel-plus</a></li></ul><p>另外，除了单体版之外，这个项目还有一个基于 Spring Cloud 的微服务版本供你学习使用。</p><ul><li>GitHub 地址： <a href="https://github.com/201206030/novel-cloud" target="_blank" rel="noopener">https://github.com/201206030/novel-cloud</a></li><li>Gitee 地址： <a href="https://gitee.com/novel_dev_team/novel-cloud" target="_blank" rel="noopener">https://gitee.com/novel_dev_team/novel-cloud</a></li></ul><p>技术栈：</p><ul><li>后端： SpringBoot + MyBatis +Spring Security + Elasticsearch+ 支付宝支付</li><li>前端：Thymeleaf + Layui。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\8b91f2dc-b533-4550-a899-0556575af9a0.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\39f39d58-e9bd-40d5-81c6-a2b336cfecfc.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\90a179b6-56a8-4578-8d2a-e025f05cd8fe.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这个项目还有一个爬虫模块用于系统初期测试使用。对 Java 爬虫感兴趣的朋友，可以简单研究一下。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\8e1fbabe-a489-4087-a272-ccad0658657d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="在线文档管理"><a href="#在线文档管理" class="headerlink" title="在线文档管理"></a>在线文档管理</h4><p><a href="https://github.com/Jarrettluo/document-sharing-site" target="_blank" rel="noopener">document-sharing-site</a> 是一个支持几乎所有类型（Word, Excel, PPT, PDF, Pic 等）的文档存储、在线预览、共享的开源项目。</p><p><strong>技术栈 ：</strong></p><ul><li>后端：Spring Boot + Hutool + Tika(内容分析工具包) + Elasticsearch + JWT</li><li>前端：Vue + axios。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\86195e52-a0e4-4d85-a838-79f2efa3eb70.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\0c122e2a-6b72-4109-bc8e-3d6d47228df5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f26070f9-301f-455f-aa86-ae7692540851.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>相关地址 ：</p><ul><li>项目地址：<a href="https://github.com/Jarrettluo/document-sharing-site" target="_blank" rel="noopener">https://github.com/Jarrettluo/document-sharing-site</a></li><li>在线体验：<a href="http://81.69.247.172/#/" target="_blank" rel="noopener">http://81.69.247.172/#/</a></li></ul><h4 id="导航网站"><a href="#导航网站" class="headerlink" title="导航网站"></a>导航网站</h4><p><a href="https://t.zsxq.com/FEYBYbU" target="_blank" rel="noopener">geshanzsq-nav</a> 是一个前后端分离的导航网站。这个项目同样非常小众，撞车的概率非常小，并且，质量也是非常高。</p><ul><li>Github 地址：<a href="https://github.com/geshanzsq/geshanzsq-nav" target="_blank" rel="noopener">https://github.com/geshanzsq/geshanzsq-nav</a></li><li>Gitee 地址 ：<a href="https://gitee.com/geshanzsq/geshanzsq-nav" target="_blank" rel="noopener">https://gitee.com/geshanzsq/geshanzsq-nav</a></li></ul><p>技术栈：</p><ul><li>后端： SpringBoot + MyBatis +Spring Security + Spring Security + Redis + Jwt</li><li>前端：Thymeleaf + Layui。</li></ul><p>在线演示：<a href="https://gesdh.cn/" target="_blank" rel="noopener">https://gesdh.cn/</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\8882684f-e219-4682-99bd-cf0b83c5bfc2.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="音乐网站"><a href="#音乐网站" class="headerlink" title="音乐网站"></a>音乐网站</h4><p><a href="https://t.zsxq.com/YfqVzrV" target="_blank" rel="noopener">music-website</a> 是一个开源的音乐网站。这个项目的前端写的挺不错的，后端稍微差劲很多，虽然也把功能写出来了，但是很多实现都不太优雅（详见 Controller 层）。</p><p>如果你想要将这个项目作为自己的项目经验或者毕业设计的话，可以自行对后端的代码进行优化。</p><p>Github 地址：<a href="https://github.com/Yin-Hongwei/music-website" target="_blank" rel="noopener">https://github.com/Yin-Hongwei/music-website</a> 。</p><p>技术栈：</p><ul><li>后端 ：SpringBoot + MyBatis + MySQL</li><li>前端 ：Vue3.0 + TypeScript + Vue-Router + Vuex + Axios + ElementPlus + Echarts</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c9786f17-5e06-424d-be14-b9a4ba286cf6.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="健身会员管理系统"><a href="#健身会员管理系统" class="headerlink" title="健身会员管理系统"></a>健身会员管理系统</h4><p>基于基于 RuoYi-Vue 做的一个健身会员管理系统，实现了 JWT 登录、渠道管理、促销活动等功能，附带详细的教程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\958d8395-2fa0-4821-b399-a62a42a1e6fe.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\917c1dec-c5ee-4855-91ed-3508a673542e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Github 地址：<a href="https://github.com/lenve/tienchin" target="_blank" rel="noopener">https://github.com/lenve/tienchin</a></p><h3 id="轮子类开源项目"><a href="#轮子类开源项目" class="headerlink" title="轮子类开源项目"></a>轮子类开源项目</h3><h4 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h4><p><a href="https://t.zsxq.com/RfyRrrv" target="_blank" rel="noopener">cache</a> 是一个不错的轮子类项目，使用 Java 手写一个类似于 Redis 的单机版本地缓存(附详细教程)。 麻雀虽小五张俱全，支持数据缓存、缓存失效时间、数据淘汰策略（如 FIFO 、 LRU ）、RDB 和 AOF 持久化……。 并且，这个项目附带了 6 篇教程来讲解核心功能具体是怎么实现的。</p><p>Github 地址：<a href="https://github.com/houbb/cache" target="_blank" rel="noopener">https://github.com/houbb/cache</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\657869aa-2426-4c4e-ac19-56599f12844e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="RPC-框架"><a href="#RPC-框架" class="headerlink" title="RPC 框架"></a>RPC 框架</h4><p>guide-rpc-framework 是一款基于 Netty+Kyro+Zookeeper 实现的 RPC 框架。</p><ul><li>Github 地址: <a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">https://github.com/Snailclimb/guide-rpc-framework</a></li><li>Gitee 地址 ：<a href="https://gitee.com/SnailClimb/guide-rpc-framework" target="_blank" rel="noopener">https://gitee.com/SnailClimb/guide-rpc-framework</a></li></ul><p>这个项目代码注释详细，结构清晰，并且集成了 Check Style 规范代码结构，非常适合阅读和学习。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3cda6de8-d577-40ac-ad08-fd6b5a7f594d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>并且，这个项目的 README 文档写的也非常认真。从 README 文档中，你就可以大概了解到这个 RPC 框架的设计思路以及前置技术。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c6f47c75-98cf-4d46-b8fb-bfdaf79ae97c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>MYDB 是一个 Java 语言实现的简易版数据库，部分原理参照自 MySQL、PostgreSQL 和 SQLite。</p><p>麻雀虽小，五脏俱全。MYDB 目前已经实现 MVCC、两种事务隔离级别（读提交和可重复读）、死锁处理、简陋的 SQL 解析等关系型数据库的核心功能。</p><p>并且，MYDB 作者写了详细的实现教程，教程地址： <a href="https://ziyang.moe/cs/project/mydb/" target="_blank" rel="noopener">https://ziyang.moe/cs/project/mydb/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\7e0ffdfd-5029-4335-bb2d-78d4e8983fef.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Github 地址：<a href="https://github.com/CN-GuoZiyang/MYDB" target="_blank" rel="noopener">https://github.com/CN-GuoZiyang/MYDB</a></p><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><p>Mini-Compiler 是一个 Mini 版本的入门级编译器，基于 Java 语言编写，有助于初学者了解面向对象编程语言编译器的运行原理。</p><p>代码示例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cb527169-4489-4076-88ea-dea046ed0b29.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到，代码注释还是非常清晰的，一共只有 7 个类。</p><p>不过，想要搞懂这个项目难度会远大于普通的业务类型项目，像核心类 Parser （语法解析器）的代码量接近有 2000 行（其它 6 个类代码量比较少）。</p><p>Github 地址：<a href="https://github.com/chenyuwangjs/A-tutorial-compiler-written-in-Java" target="_blank" rel="noopener">https://github.com/chenyuwangjs/A-tutorial-compiler-written-in-Java</a> 。</p><p>下面是一些相关的学习资料 ：</p><ul><li><a href="https://www.cnblogs.com/xueweihan/p/16283249.html" target="_blank" rel="noopener">写给小白的开源编译器</a></li><li><a href="https://www.bilibili.com/video/BV1Kf4y1V783/" target="_blank" rel="noopener">700 行手写编译器（视频）</a></li><li><a href="https://book.douban.com/subject/20436488/" target="_blank" rel="noopener">《编译器设计》</a></li></ul><h3 id="国外公开课-Lab"><a href="#国外公开课-Lab" class="headerlink" title="国外公开课 Lab"></a>国外公开课 Lab</h3><h4 id="手写关系型数据库"><a href="#手写关系型数据库" class="headerlink" title="手写关系型数据库"></a>手写关系型数据库</h4><p>MIT 6.830/6.814: Database Systems 这门课程的内容非常适合想要深入学习数据库原理的小伙伴。这门课程的 lab 是使用 Java 语言一步一步实现一个关系型数据库。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\34a9da65-1e02-4aaa-80ce-5e5b34e4c6cf.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>课程地址：<a href="http://db.lcs.mit.edu/6.830/" target="_blank" rel="noopener">http://db.lcs.mit.edu/6.830/</a> 。</p><ul><li>课程代码：<a href="https://github.com/MIT-DB-Class/simple-db-hw" target="_blank" rel="noopener">https://github.com/MIT-DB-Class/simple-db-hw</a> 。</li><li>课程讲义：<a href="https://github.com/MIT-DB-Class/course-info-2018/" target="_blank" rel="noopener">https://github.com/MIT-DB-Class/course-info-2018/</a> 。</li><li>课程视频：<a href="https://www.youtube.com/playlist?list=PLfciLKR3SgqOxCy1TIXXyfTqKzX2enDjK" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLfciLKR3SgqOxCy1TIXXyfTqKzX2enDjK</a> 。</li></ul><p>网络上有一些相关的文章分享：</p><ul><li><a href="https://blog.csdn.net/hjw199666/category_9588041.html" target="_blank" rel="noopener">https://blog.csdn.net/hjw199666/category_9588041.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/58595037" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/58595037</a></li></ul><p>另外，UCB CS186: Introduction to Database System 的这门课程 lab 也是使用 Java 实现一个关系型数据库。</p><ul><li>课程地址：<a href="https://cs186berkeley.net/sp21/" target="_blank" rel="noopener">https://cs186berkeley.net/sp21/</a> 。</li><li>课程视频：<a href="https://www.bilibili.com/video/BV13a411c7Qo" target="_blank" rel="noopener">https://www.bilibili.com/video/BV13a411c7Qo</a> 。</li></ul><h4 id="手写分布式-KV-存储"><a href="#手写分布式-KV-存储" class="headerlink" title="手写分布式 KV 存储"></a>手写分布式 KV 存储</h4><p>MIT6.824: Distributed System 这门课程出品自 MIT 大名鼎鼎的 PDOS 实验室，授课老师 Robert Morris 教授。Robert Morris 曾是一位顶尖黑客，世界上第一个蠕虫病毒 Morris 病毒就是出自他之手。</p><p>这门课程的 lab 会循序渐进带你实现一个基于 Raft 共识算法的 KV-store 框架，让你在痛苦的 debug 中体会并行与分布式带来的随机性和复杂性。</p><ul><li>课程网站：<a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/schedule.html</a> 。</li><li>课程视频（中文翻译）：<a href="https://www.bilibili.com/video/BV1R7411t71W" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1R7411t71W</a> 。</li></ul><p>相关资料：</p><ul><li>MIT6.824: Distributed System（中文翻译 wiki）： <a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/" target="_blank" rel="noopener">https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/</a></li><li>如何的才能更好地学习 MIT6.824 分布式系统课程？：<a href="https://www.zhihu.com/question/29597104" target="_blank" rel="noopener">https://www.zhihu.com/question/29597104</a></li></ul><h3 id="视频类实战项目教程"><a href="#视频类实战项目教程" class="headerlink" title="视频类实战项目教程"></a>视频类实战项目教程</h3><p>大家有没有比较好的实战项目视频分享推荐下？慕课网上面的实战课程虽然多，但是，说实话哈，有一些质量都不过关，价格也不便宜。求球友分享优质的实战项目视频教程。</p><ul><li><a href="https://mp.weixin.qq.com/s/B-Gzw20xKIPC_w4b_8bJiA" target="_blank" rel="noopener">电商系统 &amp; 金融系统</a></li><li><a href="https://t.zsxq.com/zFIAubi" target="_blank" rel="noopener">在线教育系统 &amp; 预约挂号系统 &amp; 云原生实战</a></li></ul><h2 id="项目经验常见问题解答（补充）"><a href="#项目经验常见问题解答（补充）" class="headerlink" title="项目经验常见问题解答（补充）"></a><strong>项目经验常见问题解答（补充）</strong></h2><p>你在项目经历中不涉及的知识点，但在技能介绍中提到的知识点也很大概率会被问到。像 Redis 这种基本是面试 Java 后端岗位必备的技能，我觉得大部分面试官应该都会问。</p><p>一个项目的话不是不可以，但你一定要保证这个项目不能太鸡肋。如果太鸡肋的话，简历关可能就直接 pass，而且面试官提问都不好提。</p><p>如果你没有项目经验的话，建议你尽量一边学习各种框架和中间件一边做一个完整且有一些亮点的项目作为自己的项目经验。</p><h3 id="什么项目算是有亮点的或者是面试官认为有价值的？"><a href="#什么项目算是有亮点的或者是面试官认为有价值的？" class="headerlink" title="什么项目算是有亮点的或者是面试官认为有价值的？"></a>什么项目算是有亮点的或者是面试官认为有价值的？</h3><p>最有价值的当然是你参加各种大公司组织的各种大赛（比如阿里的天池软件设计大赛）而做的项目，如果参加这种赛事能获奖的话，项目含金量非常高。即使没获奖也没啥，也可以写简历上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5fd25717-d7cd-492b-b964-84913ce4621f-1666096434511182.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>跟着老师或者普通公司做的项目的话，一般都是面向企业级别，一般很少会用到分布式/微服务，基本都是单机，这种项目的含金量稍低，即使你的业务很复杂。遇到这种情况可以考虑说自己去对项目进行改进，别怕花时间，某个时间用心做好一件事情就好比如你对项目的数据模型进行改进、引入缓存提高访问速度等等。</p><p>自己做的项目的话，我觉得一定要：尽量和别人避开，别网上流传一个项目，然后自己名字不改，啥也不做就写简历上了。</p><h3 id="项目太简单怎么办"><a href="#项目太简单怎么办" class="headerlink" title="项目太简单怎么办?"></a>项目太简单怎么办?</h3><p>项目太简单的话，不光是影响简历通过的概率，还会影响到你的面试准备，毕竟面试中的重点就是项目经历涉及到的知识点，如果你的项目经历比较简单的话，面试官直接不知道问啥了。个人建议你可以参考《Java 面试指北》中对应的文章对项目经历进行完善改进！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\30362dad-4243-4d2c-94c6-49217df1a32d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>另外，你还要保证自己的项目的不是烂大街那种（比如商城、博客……），自己参加比赛做的项目或者是企业真实项目是比较好的。</p><h3 id="如何优化项目经历性价比更高？"><a href="#如何优化项目经历性价比更高？" class="headerlink" title="如何优化项目经历性价比更高？"></a>如何优化项目经历性价比更高？</h3><p>面试之前，你可以跟着网上的教程，从性能优化方向入手去改进一下自己的项目。为什么建议从性能优化方向入手呢？因为性能优化方向改进相比较于业务方向的改进性价比会更高，更容易体现在简历上。并且，更重要的是，性能优化方向更容易在面试之前提前准备，面试官也更喜欢提问这类问题。</p><p>你项目没有用到的性能优化手段，只要你搞懂吃透并且觉得合理，你就完全可以写在简历上。不过，建议你还是要实践一下，压测一波，取得的成果也要量化一下比如我使用 xxx 技术解决了 xxx 问题，系统 qps 从 xxx 提高到了 xxx。</p><h3 id="必须是微服务项目才有亮点？"><a href="#必须是微服务项目才有亮点？" class="headerlink" title="必须是微服务项目才有亮点？"></a>必须是微服务项目才有亮点？</h3><p>个人认为也没必要非要去做微服务或者分布式项目，不一定对你面试有利。微服务或者分布式项目涉及的知识点太多，一般人很难吃透。并且，这类项目其实对于校招生来说稍微有一点超标了。即使你做出来，很多面试官也会认为不是你独立完成的。</p><p>其实，你能把一个单体项目做到极致也很好，对于个人能力提升不比做微服务或者分布式项目差。如何做到极致？代码质量这里就不提了，更重要的是你要尽量让自己的项目有一些亮点（比如你是如何提升项目性能的、如何解决项目中存在的一个痛点的），项目经历取得的成果尽量要量化一下比如我使用 xxx 技术解决了 xxx 问题，系统 qps 从 xxx 提高到了 xxx。</p><h3 id="能不能推荐一些一些优质线上问题-系统性能优化案例"><a href="#能不能推荐一些一些优质线上问题-系统性能优化案例" class="headerlink" title="能不能推荐一些一些优质线上问题/系统性能优化案例?"></a>能不能推荐一些一些优质线上问题/系统性能优化案例?</h3><p>请看这个帖子：<a href="https://t.zsxq.com/iYZNBmA" target="_blank" rel="noopener">https://t.zsxq.com/iYZNBmA</a> 。</p><h3 id="如何准备项目经历？"><a href="#如何准备项目经历？" class="headerlink" title="如何准备项目经历？"></a>如何准备项目经历？</h3><p>你可以从下面几个方面来准备项目的回答（欢迎大家补充）：</p><ol><li>你对项目整体设计的一个感受（面试官可能会让你画系统的架构图）</li><li>你在这个项目中你负责了什么、做了什么、担任了什么角色。</li><li>从这个项目中你学会了那些东西，使用到了那些技术，学会了那些新技术的使用。</li><li>你在这个项目中是否解决过什么问题？怎么解决的？收获了什么？</li><li>你的项目用到了哪些技术？这些技术你吃透了没有？举个例子，你的项目经历使用了 Seata 来做分布式事务，那 Seata 相关的问题你要提前准备一下吧，比如说 Seata 支持哪些配置中心、Seata 的事务分组是怎么做的、Seata 支持哪些事务模式，怎么选择？</li><li>你在这个项目中犯过的错误，最后是怎么弥补的？</li></ol><p>相关帖子：<a href="https://t.zsxq.com/Yz7aYZN" target="_blank" rel="noopener">面试的时候怎么准备项目的回答</a></p><h2 id="去外包对自己的简历有影响么？"><a href="#去外包对自己的简历有影响么？" class="headerlink" title="去外包对自己的简历有影响么？"></a><strong>去外包对自己的简历有影响么？</strong></h2><p>有很多初入职场找工作的小伙伴，由于没有什么经验，自己的能力也一般，加上竞争压力太大。导致自己都是基本收到都是各种外包机构的面试邀请，最后，没办法就去了外包公司。</p><p>然后，很多小伙伴就会担心自己的外包工作经历会对自己的简历产生影响。</p><p>比如下面这个就是一位星球的匿名用户的提问。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\0e5f4e3b-8493-49ca-9a9d-0d0b159946c5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>其实，去外包对简历的影响，主要还是看你去的公司和经历的项目，比如你在 ThoughtWorks 做外包的话我觉得对你的简历就没啥影响，甚至还可能是加分项。我的很多同事跳槽，都是去了字节、阿里这些大公司。</p><p>另外，去了外包之后以后只能混外包这种说法有点自欺欺人。</p><p>首先，外包的技术深度确实不比大公司，这点没办法，根本属性决定了。然后，外包公司一般会让你会很多东西，什么东西都想让你了解一下，这可能会导致你没有一门比较精通的技术。你是Java程序员，下个项目需要你是IOS开发，然后你就要自己学，这个还是很坑的。</p><p>不过，刚毕业的话在外包干两年还是能学到一些东西的，因为你在外包公司的话，大概率会经历大量的实战项目。。</p><p>其实，最重要的是，自己平时要注意多多思考和学习，勿要浮于表面就好了。</p><p>很多人抱怨抱怨公司工作强度很多大，就我来看，很多外包公司的工作强度甚至比不上甲方的程序员。</p><p>按照大众的话来说，最好是不要去外包公司，这点是没啥问题的。不过， 如果说你目前正在外包公司工作或者你只能找到外包工作的话，不要一味抱怨，只要自己能学到东西就好！</p><p>下面是一些读者投稿的真实外包工作经历，感兴趣的小伙伴可以看看：</p><ul><li><a href="https://mp.weixin.qq.com/s/Xw4E5E2cHbEFT1VjSvMB9Q" target="_blank" rel="noopener">入职外包一个月的感受！</a>（后续：<a href="https://mp.weixin.qq.com/s/i9WtR70mDuQ_19teawopew" target="_blank" rel="noopener">外包一年，拿到某金融上市公司和某鸟的 offer</a>）</li><li><a href="https://mp.weixin.qq.com/s/CXRaTN9caV1JZFhVe86pog" target="_blank" rel="noopener">二本本科，银行外包开发工作 4 个月有余。聊聊外包公司工作的一些真实感受！</a></li><li><a href="https://mp.weixin.qq.com/s/5DJWM6cSsK3OesBNcSGTFA" target="_blank" rel="noopener">我在华为外包一年的经历分享。</a></li><li><a href="https://mp.weixin.qq.com/s/Ujmwkre4lOwNuPPBe6UOhw" target="_blank" rel="noopener">我，法律专业，转行程序员。聊聊我的外包工作经历</a></li><li><a href="https://mp.weixin.qq.com/s/NxE1D47vSZCzMcppU_PgVw" target="_blank" rel="noopener">我在蚂蚁外包的这段时光</a></li><li><a href="https://mp.weixin.qq.com/s/auris11egNPWugIQJBMDRg" target="_blank" rel="noopener">朋友被裁员之后的工行、华为外包工作经历分享</a></li><li><a href="https://mp.weixin.qq.com/s/2B9popH_HV-DjkzVQ7Pnew" target="_blank" rel="noopener">我在国企外包一年的经历和感受</a></li><li><a href="https://mp.weixin.qq.com/s/gaFtUqOSNt7UIypY1GL0jQ" target="_blank" rel="noopener">转行了！文科生转程序员的外包工作经历分享</a></li><li><a href="https://mp.weixin.qq.com/s/2CfLm7wxcxSZf7-Os67goA" target="_blank" rel="noopener">请不要“妖魔化”外包。</a></li></ul><h2 id="如果面试官问“你有什么问题问我吗？”，该如何回答？"><a href="#如果面试官问“你有什么问题问我吗？”，该如何回答？" class="headerlink" title="如果面试官问“你有什么问题问我吗？”，该如何回答？"></a><strong>如果面试官问“你有什么问题问我吗？”，该如何回答？</strong></h2><p>我还记得当时我去参加面试的时候，几乎每一场面试，特别是 HR 面和高管面的时候，面试官总是会在结尾问我:“问了你这么多问题了，你有什么问题问我吗？”。</p><p>短暂地思考之后，我的内心会陷入短暂的纠结中:我该问吗？不问的话面试官会不会对我影响不好？问什么问题？问这个问题会不会让面试官对我的影响不好啊？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images-1666096563338186" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h3 id="面试是一个双向选择的过程"><a href="#面试是一个双向选择的过程" class="headerlink" title="面试是一个双向选择的过程"></a>面试是一个双向选择的过程</h3><p>就技术面试而言，回答这个问题的时候，只要你不是触碰到你所面试的公司的雷区，那么我觉得这对你能不能拿到最终 offer 来说影响确实是不大的。</p><p>但是，我建议还是可以好好回答这个问题。</p><p><strong>面试本身就是一个双向选择的过程，你对这个问题的回答也会侧面反映出你对这次面试的上心程度，你的问题是否有价值，也影响了你最终的选择与公司是否选择你。</strong></p><p>面试官在技术面试中主要考察的还是你这样个人到底有没有胜任这个工作的能力以及你是否适合公司未来的发展需要，很多公司还需要你认同它的文化，我觉得你只要不是太笨，应该不会栽在这里。除非你和另外一个人在能力上相同，但是只能在你们两个人中选一个，那么这个问题才对你能不能拿到 offer 至关重要。有准备总比没准备好，给面试官留一个好的影响总归是没错的。</p><p>但是，就非技术面试来说，我觉得好好回答这个问题对你最终的结果还是比较重要的。</p><p><strong>总的来说，不管是技术面试还是非技术面试，如果你想赢得公司的青睐和尊重，我觉得我们都应该重视这个问题。</strong></p><h3 id="不要问太-Low-的问题"><a href="#不要问太-Low-的问题" class="headerlink" title="不要问太 Low 的问题"></a>不要问太 Low 的问题</h3><p>回答这个问题很重要的一点就是你没有必要放低自己的姿态问一些很虚或者故意讨好面试官的问题，也不要把自己从面经上学到的东西照搬下来使用。</p><p>面试官也不是傻子，特别是那种特别有经验的面试官，你是真心诚意的问问题，还是从别处照搬问题来讨好面试官，人家可能一听就听出来了。</p><p><strong>总的来说，还是要真诚。</strong></p><p>除此之外，<strong>不要问太 Low 的问题，会显得你整个人格局比较小或者说你根本没有准备</strong>（侧面反映你对这家公司不上心，既然你自己都不上心，公司为什么要录用你呢？）。举例几个比较 Low 的问题，大家看看自己有没有问过其中的问题：</p><ul><li>贵公司的主要业务是什么？（面试之前自己不知道提前网上查一下吗？）</li><li>贵公司的男女比例如何？（考虑脱单？记住你是来工作的！）</li><li>贵公司一年搞几次外出旅游？（你是来工作的，这些娱乐活动先别放在心上！）</li><li>……</li></ul><h3 id="有哪些有价值的问题值得问"><a href="#有哪些有价值的问题值得问" class="headerlink" title="有哪些有价值的问题值得问?"></a>有哪些有价值的问题值得问?</h3><p>针对这个问题。笔主专门找了几个专门做 HR 工作的小哥哥小姐姐们询问并且查阅了挺多前辈们的回答，然后结合自己的实际经历，我概括了下面几个比较适合问的问题。大家在面试的时候，可以根据自己对于公司或者岗位的了解程度，对下面提到的问题进行适当修饰或者修改。</p><p>另外，这些问题只是给没有经验的朋友一个参考，如果你还有其他比较好的问题的话，那当然也更好啦！</p><h4 id="面对-HR-或者其他-Level-比较低的面试官时"><a href="#面对-HR-或者其他-Level-比较低的面试官时" class="headerlink" title="面对 HR 或者其他 Level 比较低的面试官时"></a>面对 HR 或者其他 Level 比较低的面试官时</h4><ol><li>能不能谈谈你作为一个公司老员工对公司的感受? (这个问题比较容易回答，不会让面试官陷入无话可说的尴尬境地。另外，从面试官的回答中你可以加深对这个公司的了解，让你更加清楚这个公司到底是不是你想的那样或者说你是否能适应这个公司的文化。除此之外，这样的问题在某种程度上还可以拉进你与面试官的距离。)</li><li>能不能问一下，你当时因为什么原因选择加入这家公司的呢或者说这家公司有哪些地方吸引你?有什么地方你觉得还不太好或者可以继续完善吗？ （类似第一个问题，都是问面试官个人对于公司的看法，）</li><li>我觉得我这次表现的不是太好，你有什么建议或者评价给我吗？(这个是我常问的。我觉得说自己表现不好只是这个语境需要这样来说，这样可以显的你比较谦虚好学上进。)</li><li>接下来我会有一段空档期，有什么值得注意或者建议学习的吗？ （体现出你对工作比较上心，自助学习意识比较强。）</li><li>这个岗位为什么还在招人？ (岗位真实性和价值咨询)</li><li>大概什么时候能给我回复呢？ (终面的时候，如果面试官没有说的话，可以问一下)</li><li>……</li></ol><h4 id="面对部门领导"><a href="#面对部门领导" class="headerlink" title="面对部门领导"></a>面对部门领导</h4><ol><li>部门的主要人员分配以及对应的主要工作能简单介绍一下吗？</li><li>未来如果我要加入这个团队，你对我的期望是什么？ （部门领导一般情况下是你的直属上级了，你以后和他打交道的机会应该是最多的。你问这个问题，会让他感觉你是一个对他的部门比较上心，比较有团体意识，并且愿意倾听的候选人。）</li><li>公司对新入职的员工的培养机制是什么样的呢？ （正规的公司一般都有培养机制，提前问一下是对你自己的负责也会显的你比较上心）</li><li>以您来看，这个岗位未来在公司内部的发展如何？ (在我看来，问这个问题也是对你自己的负责吧，谁不想发展前景更好的岗位呢？)</li><li>团队现在面临的最大挑战是什么？ (这样的问题不会暴露你对公司的不了解，并且也能让你对未来工作的挑战或困难有一个提前的预期。)</li></ol><h4 id="面对-Level-比较高的-比如总裁-老板"><a href="#面对-Level-比较高的-比如总裁-老板" class="headerlink" title="面对 Level 比较高的(比如总裁,老板)"></a>面对 Level 比较高的(比如总裁,老板)</h4><ol><li>贵公司的发展目标和方向是什么？ （看下公司的发展是否满足自己的期望）</li><li>与同行业的竞争者相比，贵公司的核心竞争优势在什么地方？ （充分了解自己的优势和劣势）</li><li>公司现在面临的最大挑战是什么？</li></ol><h2 id="Java-优质面试视频推荐"><a href="#Java-优质面试视频推荐" class="headerlink" title="Java 优质面试视频推荐"></a><strong>Java 优质面试视频推荐</strong></h2><p>文字看累了，还可以看看视频！推荐几个不错的 Java 面试相关的视频。</p><p><strong>1、中华石杉老师的《Java 面试突击第一季》</strong></p><p>即使是19年那会出来的视频，放到现在依然是适用的！对于想要进 Java 生态为主的公司比如美团、阿里非常有帮助！主要讲的是高并发高可用相关的内容。</p><p>地址：<a href="https://www.bilibili.com/video/BV1B4411h7Nz" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1B4411h7Nz</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\81016677-6496-4a18-bd56-97ae95537f9b.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这份资料对应的笔记：<a href="https://doocs.github.io/advanced-java/#/" target="_blank" rel="noopener">https://doocs.github.io/advanced-java/#/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3483dec6-a48f-4a58-96cd-02e78a19879a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>2、图灵学院的《Java 常见面试题详解系列》</strong></p><p>涵盖 Java 核心知识、数据库以及常见框架，拿数据库和缓存来说：数据库以面试常问的 MySQL 为例介绍了索引、锁、事务、主从同步、MyISAM 和 InnoDB 的区别、分库分表、慢查询处理等面试题。缓存以面试常问的 Redis 为例介绍了 Redis 常见数据库结构、缓存过期策略、 缓存穿透、缓存击穿、缓存雪崩、数据库和缓存一致性保证、Redis 高可用等面试题。</p><p>地址：<a href="https://www.bilibili.com/video/BV1XU4y1J7Dr" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1XU4y1J7Dr</a></p><p><strong>3、尚硅谷周阳老师的 《Java 面试题第三季》</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\fab45673-7a8f-4f24-b4dd-f8c2b5d010e6.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Java 培训领域比较出名的周阳老师的作品，内容涵盖算法、Java 核心知识、数据库以及常见框架。</p><p>可以重点看看并发和 Spring 这块，比其他老师讲的要深入和好理解很多。</p><p>地址：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p><p>前两季视频地址 ：</p><ul><li>Java 面试题第一季 ：<a href="https://www.bilibili.com/video/BV1Eb411P7bP" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Eb411P7bP</a> </li><li>Java 面试题第二季 ：<a href="https://www.bilibili.com/video/BV18b411M7xz" target="_blank" rel="noopener">https://www.bilibili.com/video/BV18b411M7xz</a> </li></ul><p><strong>4、图灵的《分布式面试核心面试题系列》</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\65d7e277-d1b4-439b-8c0e-e74d1062783e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>主要是分布式相关的内容，涵盖负载均衡、分布式 ID、分布式事务、Dubbo、Zookeeper 、Redis。</p><p>地址：<a href="https://www.bilibili.com/video/BV1Mz4y1Z7bM" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Mz4y1Z7bM</a></p><p><strong>5、享学的《Java 面试全解析系列》</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\435595f6-4b41-4e84-826b-9cc92f1dcb36.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>内容比较杂，可以挑选自己比较感兴趣面试题学习。可以重点看看数据库这块，对于常见的 MySQL 面试题比如 MySQL 索引数据结构介绍的比较详细。</p><p>地址：<a href="https://www.bilibili.com/video/BV1yA411u7WL" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1yA411u7WL</a></p><h1 id="二、技术面试题篇"><a href="#二、技术面试题篇" class="headerlink" title="二、技术面试题篇"></a>二、技术面试题篇</h1><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="如何准备系统设计面试"><a href="#如何准备系统设计面试" class="headerlink" title="如何准备系统设计面试"></a>如何准备系统设计面试</h3><p><strong>系统设计在面试中一定是最让面试者头疼的事情之一</strong>。因为系统设计相关的问题通常是开放式的,所以没有标准答案。你在和面试官思想的交流碰撞中会慢慢优化自己的系统设计方案。理论上来说,系统设计面试官一起一步一步改进原有系统设计方案的过程。</p><p>系统设计题往往也非常能考察岀面试者的综合能力,回答好的话,很易就能在面试中脱颖而岀。不论是对于参加社招还是校招的小伙伴,都很有必要重视起来接下来。</p><p>我会带着小伙伴们从我的角度出发来谈谈:<strong>如何准备面试中的系统设计</strong></p><p>由于文章篇幅有限,就不列举实际例子了,可能会在后面的文章中单独提一些具体的例子</p><p><strong>系统设计面试一般怎么问</strong></p><p>我简单总下系统设计面试相关问题的问法个</p><ol><li>设计某某系统比如秒杀系统、微博系统、抢红包系统、短网址系统</li><li>设计某某系统中一个功能比如哔哩哔哩点赞功能</li><li>设计一个框架比如RPC框架、消息队列、缓存框架、分布式文件系统等等</li><li>某某系统的技术选型比如缓存用<code>Redis</code>还是<code>Memcached</code>、网关用<code>Spring Cloud Gateway</code>还是<code>Netflix Zuul2</code></li></ol><h4 id="系统设计怎么做？"><a href="#系统设计怎么做？" class="headerlink" title="系统设计怎么做？"></a><strong>系统设计怎么做？</strong></h4><p>我们将步骤总结成了以下 4 步。</p><h5 id="Step1-问清楚系统具体要求"><a href="#Step1-问清楚系统具体要求" class="headerlink" title="Step1:问清楚系统具体要求"></a><strong>Step1:问清楚系统具体要求</strong></h5><p><strong>当面试官给出了系统设计题目之后，一定不要立即开始设计解决方案</strong>。 你需要先理解系统设计的需求：功能性需求和非功能性需求。</p><p>为了避免自己曲解题目所想要解决的问题，你可以先简要地给面试官说说自己的理解，</p><p><strong>为啥要询问清楚系统的功能性需求也就是说系统包含哪些功能呢？</strong></p><p>毕竟，如果面试官冷不丁地直接让你设计一个微博系统，你不可能把微博系统涵盖的功能比如推荐信息流、会员机制等一个一个都列举出来，然后再去设计吧！你需要筛选出系统所提供的核心功能（<strong>缩小边界范围</strong>）！</p><p><strong>为啥要询问清楚系统的非功能性需求或者说约束条件比如系统需要达到多少QPS呢？</strong></p><p>让你设计一个1w人用的微博系统和100w人用的微博系统能一样么？不同的约束系统对应的系统设计方案肯定是不一样的。</p><h5 id="Step2-对系统进行抽象设计"><a href="#Step2-对系统进行抽象设计" class="headerlink" title="Step2:对系统进行抽象设计"></a><strong>Step2:对系统进行抽象设计</strong></h5><p>我们需要在一个 High Level 的层面对系统进行设计。</p><p>你可以画出系统的抽象架构图，这个抽象架构图中包含了系统的一些组件以及这些组件之间的连接。</p><h5 id="Step3-考虑系统目前需要优化的点"><a href="#Step3-考虑系统目前需要优化的点" class="headerlink" title="Step3:考虑系统目前需要优化的点"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b1a58f5a-1be3-4365-ad9a-e2f61fad53f0-16657490089161.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><strong>Step3:考虑系统目前需要优化的点</strong></h5><p>对系统进行抽象设计之后，你需要思考当前抽象的系统设计有哪些需要优化的点，比如说：</p><ol><li>当前系统部署在一台机器够吗？是否需要部署在多台机器然后进行负载均衡呢？</li><li>数据库处理速度能否支撑业务需求？是否需要给指定字段加索引？是否需要读写分离？是否需要缓存？</li><li>数据量是否大到需要分库分表？</li><li>是否存在安全隐患？</li><li>系统是否需要分布式文件系统？</li><li>……</li></ol><h5 id="Step4-优化你的系统抽象设计"><a href="#Step4-优化你的系统抽象设计" class="headerlink" title="Step4:优化你的系统抽象设计"></a><strong>Step4:优化你的系统抽象设计</strong></h5><p>根据 Step 3 中的“系统需要优化的点” 对系统的抽象设计做进一步完善。</p><h4 id="系统设计该如何准备？"><a href="#系统设计该如何准备？" class="headerlink" title="系统设计该如何准备？"></a><strong>系统设计该如何准备？</strong></h4><h5 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h5><p>系统设计面试非常考察你的知识储备，系统设计能力的提高需要大量的理论知识储备。比如说你要知道大型网站架构设计必备的三板斧：</p><p><strong>1.高性能架构设计：</strong> 熟悉系统常见性能优化手段比如引入 读写分离、缓存、负载均衡、异步 等等。</p><p><strong>2.高可用架构设计 ：</strong>CAP理论和BASE理论、通过集群来提高系统整体稳定性、超时和重试机制、应对接口级故障：降级、熔断、限流、排队。</p><p><strong>3.高扩展架构设计 ：</strong>说白了就是懂得如何拆分系统。你按照不同的思路来拆分软件系统，就会得到不同的架构。</p><h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><p>虽然懂得了理论，但是自己没有进行实践的话，很多东西是无法体会到的！</p><p>因此，你还要<strong>不断通过实战项目锻炼自己的系统设计能力</strong>。</p><h5 id="保持好奇心"><a href="#保持好奇心" class="headerlink" title="保持好奇心"></a>保持好奇心</h5><p>多思考自己经常浏览的网站是怎么做的。比如：</p><p>1你刷微博的时候可以思考一下微博是如何记录点赞数量的？</p><p>2你看哔哩哔哩的时候可以思考一下消息提醒系统是如何做的？</p><p>3你使用短链系统的时候可以考虑一下短链系统是如何做的？</p><p>4……</p><h5 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h5><p>实现同样的功能，一般会有多种技术选择方案，比如缓存用Redis 还是 <code>Memcached</code>、网关用<code>Spring Cloud Gateway</code>还是<code>Netflix Zuul2</code> 。 很多时候，面试官在系统设计面过程中会具体到技术的选型，因而，你需要区分不同技术的优缺点。</p><h4 id="系统设计面试必知"><a href="#系统设计面试必知" class="headerlink" title="系统设计面试必知"></a>系统设计面试必知</h4><blockquote><p>系统设计的时候必然离不开描述性能相关的指标比如 QPS。</p></blockquote><h5 id="性能相关的指标"><a href="#性能相关的指标" class="headerlink" title="性能相关的指标"></a>性能相关的指标</h5><h6 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h6><p><strong>响应时间RT(Response-time)就是用户发出请求到用户收到系统处理结果所需要的时间。</strong></p><p>RT是一个非常重要且直观的指标，RT数值大小直接反应了系统处理用户请求速度的快慢。</p><h6 id="并发数"><a href="#并发数" class="headerlink" title="并发数"></a>并发数</h6><p><strong>并发数可以简单理解为系统能够同时供多少人访问使用也就是说系统同时能处理的请求数量。</strong></p><p>并发数反应了系统的负载能力。</p><h6 id="QPS-和-TPS"><a href="#QPS-和-TPS" class="headerlink" title="QPS 和 TPS"></a>QPS 和 TPS</h6><ul><li><p><strong>QPS（Query Per Second）</strong> ：服务器每秒可以执行的查询次数；</p></li><li><p><strong>TPS（Transaction Per Second）</strong> ：服务器每秒处理的事务数（这里的一个事务可以理解为客户发出请求到收到服务器的过程）；</p></li></ul><p>书中是这样描述 QPS 和 TPS 的区别的。</p><blockquote><p>QPS vs TPS：QPS 基本类似于 TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。如，访问一个页面会请求服务器2次，一次访问，产生一个“T”，产生2个“Q”。</p></blockquote><h6 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h6><p><strong>吞吐量指的是系统单位时间内系统处理的请求数量。</strong></p><p>一个系统的吞吐量与请求对系统的资源消耗等紧密关联。请求对系统资源消耗越多，系统吞吐能力越低，反之则越高。</p><p>TPS、QPS都是吞吐量的常用量化指标。</p><ul><li><p>QPS（TPS） = 并发数/平均响应时间(RT)</p></li><li><p>并发数 = QPS * 平均响应时间(RT)</p></li></ul><h5 id="系统活跃度"><a href="#系统活跃度" class="headerlink" title="系统活跃度"></a>系统活跃度</h5><p>介绍几个描述系统活跃度的常见名词，建议牢牢记住。你不光会在回答系统设计面试题的时候碰到，日常工作中你也会经常碰到这些名词。</p><h6 id="PV-Page-View"><a href="#PV-Page-View" class="headerlink" title="PV(Page View)"></a>PV(Page View)</h6><p>访问量, 即页面浏览量或点击量，衡量网站用户访问的网页数量；在一定统计周期内用户每打开或刷新一个页面就记录1次，多次打开或刷新同一页面则浏览量累计。UV 从网页打开的数量/刷新的次数的角度来统计的。</p><h6 id="UV-Unique-Visitor"><a href="#UV-Unique-Visitor" class="headerlink" title="UV(Unique Visitor)"></a>UV(Unique Visitor)</h6><p>独立访客，统计1天内访问某站点的用户数。1天内相同访客多次访问网站，只计算为1个独立访客。UV 是从用户个体的角度来统计的。</p><h6 id="DAU-Daily-Active-User"><a href="#DAU-Daily-Active-User" class="headerlink" title="DAU(Daily Active User)"></a>DAU(Daily Active User)</h6><p>日活跃用户数量。</p><h6 id="MAU-monthly-active-users"><a href="#MAU-monthly-active-users" class="headerlink" title="MAU(monthly active users)"></a>MAU(monthly active users)</h6><p>月活跃用户人数。</p><p>举例：某网站 DAU为 1200w， 用户日均使用时长 1 小时，RT为0.5s，求并发量和QPS。</p><p>平均并发量 = DAU（1200w）* 日均使用时长（1 小时，3600秒） /一天的秒数（86400）=1200w/24 = 50w</p><p>真实并发量（考虑到某些时间段使用人数比较少） = DAU（1200w）* 日均使用时长（1 小时，3600秒） /一天的秒数-访问量比较小的时间段假设为8小时（57600）=1200w/16 = 75w</p><p>峰值并发量 = 平均并发量 * 6 = 300w</p><p>QPS = 真实并发量/RT = 75W/0.5=150w/s</p><h5 id="常用性能测试工具"><a href="#常用性能测试工具" class="headerlink" title="常用性能测试工具"></a>常用性能测试工具</h5><h6 id="后端常用"><a href="#后端常用" class="headerlink" title="后端常用"></a>后端常用</h6><p>既然系统设计涉及到系统性能方面的问题，那在面试的时候，面试官就很可能会问：<strong>你是如何进行性能测试的？</strong></p><p>推荐 4 个比较常用的性能测试工具：</p><ol><li><p>Jmeter ：Apache JMeter 是 JAVA 开发的性能测试工具。</p></li><li><p>LoadRunner：一款商业的性能测试工具。</p></li><li><p>Galtling ：一款基于Scala 开发的高性能服务器性能测试工具。</p></li><li><p>ab ：全称为 Apache Bench 。Apache 旗下的一款测试工具，非常实用。</p></li></ol><p>没记错的话，除了 <strong>LoadRunner</strong> 其他几款性能测试工具都是开源免费的。</p><h6 id="前端常用"><a href="#前端常用" class="headerlink" title="前端常用"></a>前端常用</h6><ol><li><p>Fiddler：抓包工具，它可以修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是Web 调试的利器。</p></li><li><p>HttpWatch: 可用于录制HTTP请求信息的工具。</p></li></ol><h5 id="常见软件的QPS"><a href="#常见软件的QPS" class="headerlink" title="常见软件的QPS"></a>常见软件的QPS</h5><p>这里给出的 QPS 仅供参考，实际项目需要进行压测来计算。</p><ul><li><p>Nginx ：一般情况下，系统的性能瓶颈基本不会是 Nginx。单机 Nginx 可以达到 30w +。</p></li><li><p>Redis:  Redis 官方的性能测试报告：<a href="https://redis.io/topics/benchmarks" target="_blank" rel="noopener">https://redis.io/topics/benchmarks</a>  。从报告中，我们可以得出 Redis 的单机 QPS 可以达到 8w+（CPU性能有关系，也和执行的命令也有关系比如执行 SET 命令甚至可以达到10w+QPS）。</p></li><li><p>MySQL:  MySQL 单机的 QPS 为 大概在 4k 左右。</p></li><li><p>Tomcat ：单机 Tomcat 的QPS 在 2w左右。这个和你的 Tomcat 配置有很大关系，举个例子Tomcat 支持的连接器有 NIO、NIO.2 和 APR。 AprEndpoint 是通过 JNI 调用 APR 本地库而实现非阻塞 I/O 的，性能更好，Tomcat 配置 APR 为 连接器的话，QPS 可以达到 3w左右。更多相关内容可以自行搜索 Tomcat 性能优化。</p></li></ul><h5 id="系统设计原则"><a href="#系统设计原则" class="headerlink" title="系统设计原则"></a>系统设计原则</h5><p><strong>合适优于先进 &gt; 演化优于一步到位 &gt; 简单优于复杂</strong></p><h5 id="常见的性能优化策略"><a href="#常见的性能优化策略" class="headerlink" title="常见的性能优化策略"></a>常见的性能优化策略</h5><p>性能优化之前我们需要对请求经历的各个环节进行分析，排查出可能出现性能瓶颈的地方，定位问题。</p><p>下面是一些性能优化时，我经常拿来自问的一些问题：</p><ol><li><p>当前系统的SQL语句是否存在问题？</p></li><li><p>当前系统是否需要升级硬件？</p></li><li><p>系统是否需要缓存？</p></li><li><p>系统架构本身是不是就有问题？</p></li><li><p>系统是否存在死锁的地方？</p></li><li><p>数据库索引使用是否合理？</p></li><li><p>系统是否存在内存泄漏？（Java 的自动回收内存虽然很方便，但是，有时候代码写的不好真的会造成内存泄漏）</p></li><li><p>系统的耗时操作进行了异步处理？</p></li><li><p>……</p></li></ol><h5 id="性能优化必知法则"><a href="#性能优化必知法则" class="headerlink" title="性能优化必知法则"></a>性能优化必知法则</h5><p><strong>SQL优化，JVM、DB，Tomcat参数调优 &gt; 硬件性能优化（内存升级、CPU核心数增加、机械硬盘—&gt;固态硬盘等等）&gt; 业务逻辑优化/缓存 &gt; 读写分离、集群等 &gt; 分库分表</strong></p><h4 id="系统设计面试的注意事项"><a href="#系统设计面试的注意事项" class="headerlink" title="系统设计面试的注意事项"></a>系统设计面试的注意事项</h4><h5 id="想好再说"><a href="#想好再说" class="headerlink" title="想好再说"></a>想好再说</h5><p>没必要面试官刚问了问题之后，你没准备好就开始回答。这样不会给面试官带来好印象的！系统设计本就需要面试者结合自己的以往的经验进行思考，这个过程是需要花费一些时间的。</p><h5 id="没有绝对的答案"><a href="#没有绝对的答案" class="headerlink" title="没有绝对的答案"></a>没有绝对的答案</h5><p>系统设计没有标准答案。重要的是你和面试官一起交流的过程。</p><p>一般情况下，你会在和面试官的交流过程中，一步一步完成系统设计。这个过程中，你会在面试官的引导下不断完善自己的系统设计方案。</p><p>因此，你不必要在系统设计面试之前找很多题目，然后只是单纯记住他们的答案。</p><h5 id="勿要绝对"><a href="#勿要绝对" class="headerlink" title="勿要绝对"></a>勿要绝对</h5><p>系统设计没有最好的设计方案，只有最合适的设计方案。这就类比架构设计了：<strong>软件开发没有银弹，架构设计的目的就是选择合适的解决方案。 何为银弹？</strong> 狼人传说中，只有银弹(银质子弹)才能制服这些猛兽。对应到软件开发活动中，银弹特指开发者们寻求的一种克服软件开发这个难缠的猛兽的“万能钥匙🔑”。</p><h5 id="权衡利弊"><a href="#权衡利弊" class="headerlink" title="权衡利弊"></a>权衡利弊</h5><p>知道使用某个技术可能会为系统带来的利弊。比如使用消息队列的好处是解耦和削峰，但是，同样也让系统可用性降低、复杂性提高，同时还会存在一致性问题（消息丢失或者消息未被消费咋办）。</p><h5 id="慢慢优化"><a href="#慢慢优化" class="headerlink" title="慢慢优化"></a>慢慢优化</h5><p>刚开始设计的系统不需要太完美，可以慢慢优化。</p><h5 id="不追新技术"><a href="#不追新技术" class="headerlink" title="不追新技术"></a>不追新技术</h5><p>使用稳定的、适合业务的技术，不必要过于追求新技术。</p><h5 id="追简避杂"><a href="#追简避杂" class="headerlink" title="追简避杂"></a>追简避杂</h5><p>系统设计应当追求简单避免复杂。KISS（ Keep It Simple, Stupid）原则——保持简单，易于理解。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>这篇文章简单带着小伙伴们分析了一下系统设计面试。如果你还想要深入学习的话，可以参考： <a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener">https://github.com/donnemartin/system-design-primer</a>  。</p><h3 id="如何设计一个秒杀系统"><a href="#如何设计一个秒杀系统" class="headerlink" title="如何设计一个秒杀系统"></a>如何设计一个秒杀系统</h3><p>大家好，我是 Guide哥！</p><p>今天这篇文章咱们就开始从后端的角度来谈谈：“如何设计秒杀系统？”。</p><p>在你看这篇文章之前，我想说的是系统设计没有一个标准答案，你需要结合自己的过往经验来回答，我这篇文章也是简单说说自己的看法。</p><p><strong>下面是正文！</strong></p><p>设计秒杀系统之前，我们首先需要对秒杀系统有一个清晰的认识。</p><p>秒杀系统主要为商品（往往是爆款商品）秒杀活动提供支持，这个秒杀活动会限制商品的个数以及秒杀持续时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b6868b10-8e2f-4b4c-899a-ae93248a2640.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>为什么秒杀系统的设计是一个难点呢？</strong> 是因为它的业务复杂么？ 当然不是！</p><p>秒杀系统的业务逻辑非常简单，一般就是下订单减库存，难点在于我们如何保障秒杀能够顺利进行。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\233dc15c-ea84-4a23-b679-ebaa1763b70b.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>秒杀开始的时候，会有大量用户同时参与进来，因此秒杀系统一定要满足 高并发 和 高性能 。</li><li>为了保证秒杀整个流程的顺利进行，整个秒杀系统必须要满足 高可用 。</li><li>除此之外，由于商品的库存有限，在面对大量订单的情况下，一定不能超卖，我们还需要保证 一致性 。</li></ul><blockquote><p>很多小伙伴可能不太了解当代三高互联网架构：高并发、高性能、高可用。</p><p>我这里简单解释一下：高并发简单来说就是能够同时处理很多用户请求。高性能简单来说就是处理用户的请求速度要快。高可用简单来说就是我们的系统要在趋近 100% 的时间内都能正确提供服务。</p></blockquote><p>知道了秒杀系统的特点之后，我们站在技术层面来思考一下：“设计秒杀系统的过程中需要重点关注哪些问题”。</p><ol><li>参与秒杀的商品属于热点数据，我们该如何处理热点数据？</li><li>商品的库存有限，在面对大量订单的情况下，如何解决超卖的问题？</li><li>如果系统用了消息队列，如何保证消息队列不丢失消息？</li><li>如何保证秒杀系统的高可用？</li><li>如何对项目进行压测？有哪些工具？</li><li>……</li></ol><p>好的，废话不多说！正式开始！</p><h4 id="高并发-amp-高性能"><a href="#高并发-amp-高性能" class="headerlink" title="高并发&amp;高性能"></a>高并发&amp;高性能</h4><h5 id="热点数据处理"><a href="#热点数据处理" class="headerlink" title="热点数据处理"></a>热点数据处理</h5><p><strong>何为热点数据？</strong> 热点数据指的就是某一时间段内被大量访问的数据，比如爆款商品的数据、新闻热点。</p><p><strong>为什么要关注热点数据？</strong> 热点数据可能仅仅占据系统所有数据的 0.1% ，但是其访问量可能是比其他所有数据之和还要多。不重点处理热点数据，势必会给系统资源消耗带来严峻的挑战。</p><p><strong>热点数据的分类？</strong> 根据热点数据的特点，我们通常将其分为两类：</p><ul><li><p>静态热点数据 ：可以提前预测到的热点数据比如要秒杀的商品。</p></li><li><p>动态热点数据 ： 不能够提前预测到的热点数据，需要通过一些手段动态检测系统运行情况产生。</p></li></ul><p>另外，处理热点数据的问题的关键就在于 <strong>我们如何找到这些热点数据（或者说热 key），然后将它们存在 jvm 内存里</strong>。 对于并发量非常一般的系统直接将热点数据存放进缓存比如 Redis 中就可以了，不过像淘宝、京东这种级别的并发量，如果把某些热点数据放在 Redis 中，直接可能就将整个 Redis 集群给干掉了。</p><p><strong>如何检测热点数据？</strong></p><p>我了解到的是市面上也有一些类似的中间件，比如京东零售的 <a href="https://gitee.com/jd-platform-opensource/hotkey" target="_blank" rel="noopener">hotkey</a> 就是一款专门用于检测热点数据的中间件，它可以毫秒级探测热点数据，毫秒级推送至服务器集群内存。相关阅读：<a href="https://mp.weixin.qq.com/s/xOzEj5HtCeh_ezHDPHw6Jw" target="_blank" rel="noopener">京东毫秒级热 key 探测框架设计与实践，已完美支撑 618 大促</a> 。</p><p>另外，我们平时使用 Redis 做缓存比较多，关于如何快速定位 Redis 热点数据，可以看下<a href="https://www.infoq.cn/article/3l3zaq4h8xpnom2glsyi" target="_blank" rel="noopener">如何快速定位 Redis 热 key</a>这篇文章。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210625085635200.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>如何处理热点数据？</strong> 热点数据一定要放在缓存中，并且最好可以写入到 jvm 内存一份（多级缓存），并设置个过期时间。需要注意写入到 jvm 的热点数据不宜过多，避免内存占用过大，一定要设置到淘汰策略。</p><p><strong>为什么还要放在 jvm 内存一份？</strong> 因为放在 jvm 内存中的数据访问速度是最快的，不存在什么网络开销。</p><h5 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h5><p><strong>消息队列</strong> </p><p>秒杀开始之后的流量不是很大，我处理不了嘛！那我就先把这些请求放到消息队列中去。然后，咱后端服务再慢慢根据自己的能力去消费这些消息，这样就避免直接把后端服务打垮掉。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image-20221014203252561.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>消息队列是一种非常实用的流量削峰手段。只要是涉及到流量削峰，那必然不可缺少消息队列。</p><p><strong>回答问题/验证码</strong> </p><p>我们可以在用户发起秒杀请求之前让其进行答题或者输入验证码。</p><p>这种方式一方面可以避免用户请求过于集中，另一方面可以有效解决用户使用脚本作弊。</p><p>回答问题/验证码这一步建议除了对答案的正确性做校验，还需要对用户的提交时间做校验，比如提交时间过短（&lt;1s）的话，大概就是使用脚本来处理的。</p><h4 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h4><h5 id="集群化"><a href="#集群化" class="headerlink" title="集群化"></a>集群化</h5><p>如果我们想要保证系统中某一个组件的高可用，往往需要搭建集群来避免单点风险，比如说 Nginx 集群、Kafka 集群、Redis 集群。</p><p>我们拿 Redis 来举例说明。<strong>如果我们需要保证 Redis 高可用的话，该怎么做呢？</strong></p><p>你直接通过 Redis replication（异步复制） 搞个一主(master)多从(slave)来提高可用性和读吞吐量，slave 的多少取决于你的读吞吐量。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210510110935773.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这样的方式有一个问题：一旦 master 宕机，slave 晋升成 master，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。</p><p>不过，这个问题我们可以通过 Sentinel（哨兵） 来解决。Redis Sentinel 是 Redis 官方推荐的高可用性(HA)解决方案。</p><p>Sentinel 是 Redis 的一种运行模式 ，它主要的作用就是对 Redis 运行节点进行监控。当 master 节点出现故障的时候， Sentinel 会帮助我们实现故障转移，确保整个 Redis 系统的可用性。整个过程完全自动，不需要人工介入!</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F2021051011143961.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Sentinel 也是一个 Redis 进程，只是不对外提供读写服务，通常哨兵要配置成单数。</p><h5 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h5><p>限流是从用户访问压力的角度来考虑如何应对系统故障。限流为了对服务端的接口接受请求的频率进行限制，防止服务挂掉。</p><p>🌰 举个例子：我们的秒杀接口一秒只能处理 10w 个请求，结果秒杀活动刚开始一下子来了 15w 个请求。这肯定不行啊！我们只能通过限流把 5w 个请求给拦截住，不然系统直接就给整挂掉了！</p><p>限流的话可以直接用 Redis 来做（建议基于 Lua 脚本），也可以使用现成的流量控制组件比如 Sentinel 、Hystrix 、Resilience4J 。</p><p><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">Hystrix</a> 是 Netflix 开源的熔断降级组件。</p><p><a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a> 是阿里巴巴体提供的面向分布式服务架构的流量控制组件，经历了淘宝近10年双11（11.11）购物节的所有核心场景（比如秒杀活动）的考验。</p><p>Sentinel 主要以流量为切入点，提供 <strong>流量控制、熔断降级、系统自适应保护</strong>等功能来保护系统的稳定性和可用性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fc0e01ae29ba72593b49c0e0f2c152771.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>个人比较建议使用 Sentinel ，更新维护频率更高，功能更强大，并且生态也更丰富（Sentinel 提供与 Spring Cloud、Dubbo 和 gRPC 等常用框架和库的开箱即用集成， Sentinel 未来还会对更多常用框架进行适配，并且会为 Service Mesh 提供集群流量防护的能力）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210625091858288.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="排队"><a href="#排队" class="headerlink" title="排队"></a>排队</h5><p>你可以把排队看作是限流的一个变种。限流是直接拒绝了用户的请求，而排队则是让用户等待一定的时间（类比现实世界的排队）。</p><p>排队虽然没有直接拒绝用户，但用户等了很长时间后进入系统，体验并不一定比限流好。</p><p>🌰 举个例子：当请求量达到一个阈值的时候，我们就通知用户让它们排队。等到系统可以继续处理请求之后，再慢慢来处理。</p><h5 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h5><p>降级是从系统功能优先级的角度考虑如何应对系统故障。</p><p>服务降级指的是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。降级的核心思想就是丢车保帅，优先保证核心业务。例</p><p>🌰 举个例子：当请求量达到一个阈值的时候，我们对系统中一些非核心的功能直接关闭或者让它们功能降低。这样的话，系统就有更多的资源留给秒杀功能了！</p><h5 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h5><p>熔断和降级是两个比较容易混淆的概念，两者的含义并不相同。降级的目的在于应对系统自身的故障，而熔断的目的在于应对当前系统依赖的外部系统或者第三方系统的故障。</p><p>熔断可以防止因为秒杀交易影响到其他正常服务的提供</p><p>🌰 举个例子： 秒杀功能位于服务 A 上，服务 A 上同时还有其他的一些功能比如商品管理。如果服务 A 上的商品管理接口响应非常慢的话，其他服务直接不再请求服务 A 上的商品管理这个接口，从而有效避免其他服务被拖慢甚至拖死。</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><h5 id="减库存方案"><a href="#减库存方案" class="headerlink" title="减库存方案"></a>减库存方案</h5><p>常见的减库存方案有：</p><ul><li><p>下单即减库存 ：只要用户下单了，即使不付款，我们就扣库存。</p></li><li><p>付款再减库存 ：当用户付款了之后，我们在减库存。不过， 这种情况可能会造成用户下订单成功，但是付款失败。</p></li></ul><p>一般情况下都是 <strong>下单减扣库存</strong> ，像现在的购物网站比如京东都是这样来做的。</p><p>不过，我们还会对业务逻辑做进一步优化，比如说对超过一定时间不付款的订单特殊处理，释放库存。</p><p>对应到代码层面，我们应该如何保证不会超卖呢？</p><p>我们上面也说，我们一般会提前将秒杀商品的信息放到缓存中去。我们可以通过 Redis 对库存进行原子操作。伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：先检查 库存是否充足</span></span><br><span class="line">Integer stockNum = (Integer)redisTemplate.get(key);</span><br><span class="line"><span class="keyword">if</span>(stockNum&lt;<span class="number">1</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二步：如果库存充足，减少库存（假设只能购买一件）</span></span><br><span class="line">Long count = redisTemplate.increment(key,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(count&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以通过 Lua 脚本来减少多个命令的网络开销并保证多个命令整体的原子性。伪代码如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 第一步：先检查 库存是否充足，库存不足，返回0</span></span><br><span class="line"><span class="keyword">local</span> stockNum=<span class="built_in">tonumber</span>(redis.call(<span class="string">"get"</span>,key));</span><br><span class="line"><span class="keyword">if</span> stockNum&lt;<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 第二部：如果库存充足，减少库存（假设只能购买一件），返回1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">'DECRBY'</span>,key,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="接口幂等"><a href="#接口幂等" class="headerlink" title="接口幂等"></a>接口幂等</h5><p><strong>什么是幂等呢?</strong> 在分布式系统中，幂等(idempotency)是对请求操作结果的一个描述，这个描述就是不论执行多少次相同的请求，产生的效果和返回的结果都和发出单个请求是一样的。</p><p>🌰 举个例子：假如咱们的前后端没有保证接口幂等性，我作为用户在秒杀商品的时候，我同时点击了多次秒杀商品按钮，后端处理了多次相同的订单请求，结果导致一个人秒杀了多个商品。这个肯定是不能出现的，属于非常严重的 bug 了！</p><p>保证分布式接口的幂等性对于数据的一致性至关重要，特别是像支付这种涉及到钱的接口。保证幂等性<strong>这个操作并不是说前端做了就可以的，后端同样要做。</strong></p><p>前端保证幂等性的话比较简单，一般通过当用户提交请求后将按钮致灰来做到。后端保证幂等性就稍微麻烦一点，方法也是有很多种，比如：</p><ol><li><p>同步锁；</p></li><li><p>分布式锁；</p></li><li><p>业务字段的唯一索性约束，防止重复数据产生。</p></li><li><p>……</p></li></ol><p>拿分布式锁来说，我们通过加锁的方式限制用户在第一次请求未结束之前，无法进行第二次请求。</p><p>分布式锁一般基于 Redis 来做比较多一些，这也是我比较推荐的一种方式。另外，如果使用 Redis 来实现分布式锁的话，比较推荐基于 Redisson。相关阅读：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247505586&idx=2&sn=7e9c7739b1a2c56849d371144556ff80&chksm=cea19979f9d6106f9b5fdce34a285e31d61981bdd58fe6b3a2fc9da23f21a9b01123d715dd96&token=1297266129&lang=zh_CN#rd" target="_blank" rel="noopener">分布式锁中的王者方案 - Redisson</a> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.设置分布式锁</span></span><br><span class="line">RLock lock = redisson.getLock(<span class="string">"lock"</span>);</span><br><span class="line"><span class="comment">// 2.占用锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="comment">// 3.执行业务</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 4.释放锁</span></span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure><p>当然了，除了 Redis 之外，像 ZooKeeper 等中间也可以拿来做分布式锁。</p><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><p>上线之前压力测试是必不可少的。推荐 4 个比较常用的性能测试工具：</p><ol><li><strong>Jmeter ：</strong>Apache JMeter 是 JAVA 开发的性能测试工具。</li><li><strong>LoadRunner：</strong>一款商业的性能测试工具。</li><li><strong>Galtling ：</strong>一款基于 Scala 开发的高性能服务器性能测试工具。</li><li><strong>ab ：</strong>全称为 Apache Bench 。Apache 旗下的一款测试工具，非常实用。</li></ol><p>没记错的话，除了 <strong>LoadRunner</strong> 其他几款性能测试工具都是开源免费的。</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>我简单画了一张图来总结一下上面涉及到的一些技术。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210624203212318.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>另外，上面涉及到知识点还蛮多的，如果面试官单独挑出一个来深挖还是能够问出很多问题的。</p><p>比如面试官想在消息队里上进行深挖，可能会问：</p><ul><li>常见消息队列的对比</li><li>如何保证消息的消费顺序？</li><li>如何保证消息不丢失？</li><li>如何保证消息不重复消费？</li><li>如何设计一个消息队列？</li><li>……</li></ul><p>再比如面试官想在 Redis 上深挖的话，可能会问：</p><ul><li>Redis 常用的数据结构了解么？</li><li>Redis 如何保证数据不丢失？</li><li>Redis 内存占用过大导致响应速度变慢怎么解决？</li><li>缓存穿透、缓存雪崩了解么？怎么解决？</li><li>……</li></ul><p>因此，要想要真正搞懂秒杀系统的设计，你还需要将其涉及到的一些技术给研究透！</p><h3 id="如何自己实现一个RPC框架"><a href="#如何自己实现一个RPC框架" class="headerlink" title="如何自己实现一个RPC框架"></a>如何自己实现一个RPC框架</h3><p>像设计一个 RPC 框架/消息队列这类问题在面试中还是非常常见的。这是一道你花点精力稍微准备一下就能回答上来的一个问题。如果你回答的比较好的话，那面试官肯定会对你印象非常不错！</p><p>消息队列的设计实际上和 RPC 框架/非常类似，我这里就先拿 RPC 框架开涮。</p><h4 id="如果让你自己设计-RPC-框架你会如何设计？"><a href="#如果让你自己设计-RPC-框架你会如何设计？" class="headerlink" title="如果让你自己设计 RPC 框架你会如何设计？"></a>如果让你自己设计 RPC 框架你会如何设计？</h4><p>一般情况下， RPC 框架不仅要提供服务发现功能，还要提供负载均衡、容错等功能，这样的 RPC 框架才算真正合格的。</p><p>为了便于小伙伴们理解，我们先从一个最简单的 RPC 框架使用示意图开始。这也是 <a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">guide-rpc-framework</a> 目前的架构 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\bbcad419b2e3ecac19d2becb0a764cc7.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>从上图我们可以看出：<strong>服务提供端 Server 向注册中心注册服务，服务消费者 Client 通过注册中心拿到服务相关信息，然后再通过网络请求服务提供端 Server。</strong></p><p>作为 RPC 框架领域的佼佼者<a href="https://github.com/apache/dubbo" target="_blank" rel="noopener">Dubbo</a>的架构如下图所示,和我们上面画的大体也是差不多的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ce5576fd8e7ef8aa2ef1a6f03f99544a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>下面我们再来看一个比较完整的 RPC 框架使用示意图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\55d67e70fac5f7f2f97742acb5713fb5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>参考上面这张图，我们简单说一下设计一个最基本的 RPC 框架的思路或者说实现一个最基本的 RPC 框架需要哪些东西：</strong></p><h5 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h5><p>注册中心首先是要有的。比较推荐使用 Zookeeper 作为注册中心。<br>ZooKeeper 为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。并且，ZooKeeper 将数据保存在内存中，性能是非常棒的。 在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景）。</p><p>关于 ZooKeeper 的更多介绍可以看我总结的这篇文章：<a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html" target="_blank" rel="noopener">《ZooKeeper 相关概念总结》</a></p><p>当然了，如果你想通过文件来存储服务地址的话也是没问题的，不过性能会比较差。</p><p>注册中心负责服务地址的注册与查找，相当于目录服务。 服务端启动的时候将服务名称及其对应的地址(ip+port)注册到注册中心，服务消费端根据服务名称找到对应的服务地址。有了服务地址之后，服务消费端就可以通过网络请求服务端了。</p><p>我们再来结合 Dubbo 的架构图来理解一下！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1623048967543-fa87d17d-2d72-40af-8608-c5cb40264ae3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>上述节点简单说明：</p><ul><li>Provider： 暴露服务的服务提供方</li><li>Consumer： 调用远程服务的服务消费方</li><li>Registry： 服务注册与发现的注册中心</li><li>Monitor： 统计服务的调用次数和调用时间的监控中心</li><li>Container： 服务运行容器</li></ul><p>调用关系说明：</p><ol><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h5 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h5><p><strong>既然我们要调用远程的方法，就要发送网络请求来传递目标类和方法的信息以及方法的参数等数据到服务提供端。</strong></p><p>网络传输具体实现你可以使用 <strong>Socket</strong> （ Java 中最原始、最基础的网络通信方式。但是，Socket 是阻塞 IO、性能低并且功能单一）。</p><p>你也可以使用同步非阻塞的 I/O 模型 <strong>NIO</strong> ，但是用它来进行网络编程真的太麻烦了。不过没关系，你可以使用基于 NIO 的网络编程框架 Netty ，它将是你最好的选择！</p><p>我先简单介绍一下 Netty ，后面的文章中我会详细介绍到。</p><ol><li><strong>Netty 是一个基于 NIO 的 client-server(客户端服务器)框架，使用它可以快速简单地开发网络应用程序。</strong></li><li>它极大地简化并简化了 TCP 和 UDP 套接字服务器等网络编程,并且性能以及安全性等很多方面甚至都要更好。</li><li>支持多种协议如 FTP，SMTP，HTTP 以及各种二进制和基于文本的传统协议。</li></ol><h5 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h5><p>要在网络传输数据就要涉及到<strong>序列化。为什么需要序列化和反序列化呢？</strong><br>因为网络传输的数据必须是二进制的。因此，我们的 Java 对象没办法直接在网络中传输。为了能够让 Java 对象在网络中传输我们需要将其<strong>序列化</strong>为二进制的数据。我们最终需要的还是目标 Java 对象，因此我们还要将二进制的数据“解析”为目标 Java 对象，也就是对二进制数据再进行一次<strong>反序列化</strong>。</p><p>另外，不仅网络传输的时候需要用到序列化和反序列化，将对象存储到文件、数据库等场景都需要用到序列化和反序列化。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1623048967534-1b8661e0-fc57-4890-9efe-a7f492c799be.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>JDK 自带的序列化，只需实现 java.io.Serializable接口即可，不过这种方式不推荐，因为不支持跨语言调用并且性能比较差。</p><p>现在比较常用序列化的有 <strong>hessian、kyro、protostuff</strong> ……。我会在下一篇文章中简单对比一下这些序列化方式。</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>动态代理也是需要的。很多人可能不清楚为啥需要动态代理？我来简单解释一下吧！</p><p>我们知道代理模式就是： 我们给某一个对象提供一个代理对象，并由代理对象来代替真实对象做一些事情。你可以把代理对象理解为一个幕后的工具人。 举个例子：我们真实对象调用方法的时候，我们可以通过代理对象去做一些事情比如安全校验、日志打印等等。但是，这个过程是完全对真实对象屏蔽的。</p><p>讲完了代理模式，再来说动态代理在 RPC 框架中的作用。</p><p>前面第一节的时候，我们就已经提到 ：<strong>RPC 的主要目的就是让我们调用远程方法像调用本地方法一样简单，我们不需要关心远程方法调用的细节比如网络传输。</strong></p><p><strong>怎样才能屏蔽程方法调用的底层细节呢？</strong></p><p><strong>答案就是动态代理。</strong>简单来说，当你调用远程方法的时候，实际会通过代理对象来传输网络请求，不然的话，怎么可能直接就调用到远程方法。</p><p>相关文章： <a href="https://javaguide.cn/java/basis/proxy.html" target="_blank" rel="noopener">代理模式详解：静态代理+JDK/CGLIB 动态代理实战</a></p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>负载均衡也是需要的。为啥？</p><p>举个例子：我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。</p><h5 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h5><p>我们还需要设计一个私有的 RPC 协议，这个协议是客户端（服务消费方）和服务端（服务提供方）交流的基础。</p><p>简单来说：<strong>通过设计协议，我们定义需要传输哪些类型的数据， 并且还会规定每一种类型的数据应该占多少字节。这样我们在接收到二进制数据之后，就可以正确的解析出我们需要的数据</strong>。这有一点像密文传输的感觉。</p><p>通常一些标准的 RPC 协议包含下面这些内容：</p><ul><li><p>魔数 ： 通常是 4 个字节。这个魔数主要是为了筛选来到服务端的数据包，有了这个魔数之后，服务端首先取出前面四个字节进行比对，能够在第一时间识别出这个数据包并非是遵循自定义协议的，也就是无效数据包，为了安全考虑可以直接关闭连接以节省资源。</p></li><li><p>序列化器编号 ：标识序列化的方式，比如是使用 Java 自带的序列化，还是 json，kyro 等序列化方式。</p></li><li><p>消息体长度 ： 运行时计算出来。</p></li><li><p>……</p></li></ul><p>如果你想看 <a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">guide-rpc-framework</a> 的 RPC 协议设计的话，可以在 Netty 编解码器相关的类中找到。</p><h4 id="实现一个最基本的-RPC-框架需要哪些技术？"><a href="#实现一个最基本的-RPC-框架需要哪些技术？" class="headerlink" title="实现一个最基本的 RPC 框架需要哪些技术？"></a>实现一个最基本的 RPC 框架需要哪些技术？</h4><p>刚刚我们已经聊了如何实现一个 RPC 框架，下面我们就来看看实现一个最基本的 RPC 框架需要哪些技术吧！</p><p>按照我实现的这一款基于 Netty+Kyro+Zookeeper 实现的 RPC 框架来说的话，你需要下面这些技术支撑：</p><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><ol><li><p>动态代理机制；</p></li><li><p>序列化机制以及各种序列化框架的对比，比如 hession2、kyro、protostuff；</p></li><li><p>线程池的使用；</p></li><li><p>CompletableFuture 的使用；</p></li></ol><h5 id="Netty-1"><a href="#Netty-1" class="headerlink" title="Netty"></a>Netty</h5><ol><li><p>使用 Netty 进行网络传输；</p></li><li><p>ByteBuf 介绍；</p></li><li><p>Netty 粘包拆包；</p></li><li><p>Netty 长连接和心跳机制；</p></li><li><p>……</p></li></ol><h5 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h5><ol><li><p>基本概念；</p></li><li><p>数据结构；</p></li><li><p>如何使用 Netflix 公司开源的 zookeeper 客户端框架 Curator 进行增删改查；</p></li><li><p>……</p></li></ol><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>实现一个最基本的 RPC 框架应该至少包括下面几部分:</p><ol><li><p><strong>注册中心 ：</strong>注册中心负责服务地址的注册与查找，相当于目录服务。</p></li><li><p><strong>网络传输 ：</strong>既然我们要调用远程的方法，就要发送网络请求来传递目标类和方法的信息以及方法的参数等数据到服务提供端。</p></li><li><p><strong>序列化和反序列化 ：</strong>要在网络传输数据就要涉及到<strong>序列化</strong>。</p></li><li><p><strong>动态代理 ：</strong>屏蔽程方法调用的底层细节。</p></li><li><p><strong>负载均衡 ：</strong> 避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题。</p></li><li><p><strong>传输协议 ：</strong>这个协议是客户端（服务消费方）和服务端（服务提供方）交流的基础。</p></li></ol><p>更完善的一点的 RPC 框架可能还有监控模块（拓展：你可以研究一下 Dubbo 的监控模块的设计）。</p><h3 id="如何设计一个排行榜"><a href="#如何设计一个排行榜" class="headerlink" title="如何设计一个排行榜"></a>如何设计一个排行榜</h3><p>排行榜到处可见，比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、王者荣耀中的段位排行榜等等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\2021060714195385.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>今天让我们从程序设计的角度，来看看如何设计一个排行榜！</p><p>我们先从最基础的实现方式来说起。</p><h4 id="MySQL-的-ORDER-BY-关键字"><a href="#MySQL-的-ORDER-BY-关键字" class="headerlink" title="MySQL 的 ORDER BY 关键字"></a>MySQL 的 ORDER BY 关键字</h4><p>第一种要介绍的实现方式就是直接使用 MySQL 的 ORDER BY 关键字。 ORDER BY 关键字可以对查询出来的数据按照指定的字段进行排序。</p><p>我相信但凡是学过 MySQL 的人，一定都用过 ORDER BY 关键字！没用过的，先不要看下面的文章了，麻烦默默反思 3 分钟。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ... <span class="keyword">ASC</span>/<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>我之前在一个用户数据量不大（6w 用户左右）并且排序需求并不复杂的项目中使用的就是这种方法。</p><p>这种方式的优缺点也比较明显。<strong>好处是比较简单，不需要引入额外的组件，成本比较低。坏处就是每次生成排行榜都比较耗时，对数据库的性能消耗非常之大，数据量一大，业务场景稍微复杂一点就顶不住了。</strong></p><p>我们这里创建一个名为 cus_order 的表，来实际测试一下这种排序方式。为了测试方便， cus_order 这张表只有 id、score、name这 3 个字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cus_order`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`score`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">100000</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><p>我们定义一个简单的存储过程（PROCEDURE）来插入 100w 测试数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER ;;</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`root`</span>@<span class="string">`%`</span><span class="keyword">PROCEDURE</span> <span class="string">`BatchinsertDataToCusOder`</span>(<span class="keyword">IN</span> start_num <span class="built_in">INT</span>, <span class="keyword">IN</span> max_num <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="built_in">INT</span> <span class="keyword">default</span> start_num;</span><br><span class="line">WHILE i &lt; max_num DO</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`cus_order`</span>(<span class="string">`id`</span>,<span class="string">`score`</span>,<span class="string">`name`</span>)</span><br><span class="line"><span class="keyword">values</span> (i,<span class="keyword">RAND</span>()*<span class="number">1000000</span>,<span class="keyword">CONCAT</span>(<span class="string">`user`</span>,i));</span><br><span class="line"><span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line"><span class="keyword">END</span>;;</span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure><p>存储过程定义完成之后，我们执行存储过程即可！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> BatchinsertDataToCusOder(<span class="number">1</span>, <span class="number">1000000</span>); <span class="comment"># 插入100w+的随机数据</span></span><br></pre></td></tr></table></figure><p>等待一会，100w 的测试数据就插入完成了！</p><p>为了能够对这 100w 数据按照 score 进行排序，我们需要执行下面的 SQL 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`score`</span> <span class="keyword">DESC</span>;<span class="comment">#降序排序</span></span><br></pre></td></tr></table></figure><p>为了能够查看这套 SQL 语句的执行时间，我们需要通过show profiles命令。</p><p>不过，请确保你的 profiling 是开启（on）的状态（可以通过 show variables 命令查看）。</p><p>默认情况下， profiling 是关闭（off）的状态，你直接通过set @@profiling=1命令即可开启。</p><p>然后，我们就查询到了具体的执行速度。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Query_ID"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"Duration"</span>: <span class="number">3.63526325</span>,</span><br><span class="line">  <span class="attr">"Query"</span>: <span class="string">"SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，一共耗时了接近 4 s。</p><p><strong>如何优化呢？ 加索引并且限制排序数据量</strong> 是一种比较常见的优化方式。</p><p>我们对 score 字段加索引，并限制只排序 score 排名前 500 的数据。</p><p>这个时候，我们再执行下面的 SQL 语句，速度就快了很多，只需要 0.01 秒就排序了前 500 名的数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Query_ID"</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">"Duration"</span>: <span class="number">0.0102915</span>,</span><br><span class="line">  <span class="attr">"Query"</span>: <span class="string">"SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC LIMIT 500"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然了，这只是一个最简单的场景，实际项目中的复杂度要比我这里列举的例子复杂很多，执行速度也会慢很多。</p><p>不过，<strong>能不用 MySQL 的 ORDER BY 关键字还是要看具体的业务场景。如果说你的项目需要排序数据量比较小并且业务场景不复杂的话（比如你对你博客的所有文章按照阅读量来排序），我觉得直接使用 MySQL 的 ORDER BY 关键字就可以了。</strong></p><h4 id="Redis-的-sorted-set"><a href="#Redis-的-sorted-set" class="headerlink" title="Redis 的 sorted set"></a>Redis 的 sorted set</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\up-d90863bb4c39ef96f9893244b9d5f1376ac.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>了解过 Redis 常见数据结构的小伙伴，都知道 Redis 中有一个叫做 <code>sorted set</code>的数据结构经常被用在各种排行榜的场景下。</p><p>通过 <code>sorted set</code> ，我们能够轻松应对百万级别的用户数据排序。这简直就是专门为排行榜设计的数据结构啊！</p><p>Redis 中 sorted set 有点类似于 Java 中的 <code>TreeSet</code>和<code>HashMap</code> 的结合体，<code>sorted set</code>中的数据会按照权重参数<code>score</code> 的值进行排序。</p><table><thead><tr><th>User</th><th>Score</th></tr></thead><tbody><tr><td>user1</td><td>112.0</td></tr><tr><td>user2</td><td>100.0</td></tr><tr><td>user3</td><td>123.0</td></tr><tr><td>user4</td><td>100.0</td></tr><tr><td>user5</td><td>33.0</td></tr><tr><td>user6</td><td>993.0</td></tr></tbody></table><p>我们这里简单来演示一下。我们把上表中的数据添加到<code>sorted set</code>中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 zadd 命令添加了 6 个元素到 cus_order_set 中</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD cus_order_set 112.0 user1 100.0 user2 123.0 user3 100.0 user4 33.0 user5 993.0 user6</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\up-c25cf4cc1d4d3a484b4db93672138b8c104.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><code>sorted set</code>基本可以满足大部分排行榜的场景。</p><p><strong>如果我们要查看包含所有用户的排行榜怎么办？</strong> 通过 ZRANGE (从小到大排序) / ZREVRANGE （从大到小排序）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -1 代表的是全部的用户数据，</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE cus_order_set 0 -1</span><br><span class="line">1) <span class="string">"user6"</span></span><br><span class="line">2) <span class="string">"user3"</span></span><br><span class="line">3) <span class="string">"user1"</span></span><br><span class="line">4) <span class="string">"user4"</span></span><br><span class="line">5) <span class="string">"user2"</span></span><br><span class="line">6) <span class="string">"user5"</span></span><br></pre></td></tr></table></figure><p><strong>如果我们要查看只包含前 3 名的排行榜怎么办？</strong> 限定范围区间即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0 为 start  2 为 stop</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE cus_order_set 0 2</span><br><span class="line">1) <span class="string">"user6"</span></span><br><span class="line">2) <span class="string">"user3"</span></span><br><span class="line">3) <span class="string">"user1"</span></span><br></pre></td></tr></table></figure><p><strong>如果我们需要查询某个用户的分数怎么办呢？</strong> 通过 <code>ZSCORE</code>命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZSCORE  cus_order_set <span class="string">"user1"</span></span><br><span class="line"><span class="string">"112"</span></span><br></pre></td></tr></table></figure><p><strong>如果我们需要查询某个用户的排名怎么办呢？</strong> 通过<code>ZREVRANK</code>命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANK  cus_order_set &quot;user3&quot;</span><br><span class="line">(integer) 1 # user3 排名第2</span><br></pre></td></tr></table></figure><p><strong>如何对用户的排名数据进行更新呢？</strong> 通过<code>ZINCRBY</code>命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对 user1 的分数加2</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY cus_order_set +2 <span class="string">"user1"</span></span><br><span class="line"><span class="string">"114"</span></span><br><span class="line"><span class="comment"># 对 user1 的分数减1</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY cus_order_set -1 <span class="string">"user1"</span></span><br><span class="line"><span class="string">"113"</span></span><br><span class="line"><span class="comment"># 查看 user1 的分数</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE  cus_order_set <span class="string">"user1"</span></span><br><span class="line"><span class="string">"113"</span></span><br></pre></td></tr></table></figure><p>除了我上面提到的之外，还有一些其他的命令来帮助你解决更多排行榜场景的需求，想要深入研究的小伙伴可以仔细学习哦！</p><p>不过，需要注意的一点是：<strong>Redis 中只保存了排行榜展示所需的数据，需要用户的具体信息数据的话，还是需要去对应的数据库（比如 MySQL）中查。</strong></p><p>你以为这样就完事了？ 不存在的！还有一些无法仅仅通过 Redis 提供的命令解决的场景。</p><p>比如，<strong>如何实现多条件排序？</strong> 其实，答案也比较简单，对于大部分场景，我们直接对 score 值做文章即可。</p><p>更具体点的话就是，我们根据特定的条件来拼接 score 值即可。比如我们还要加上时间先后条件的话，直接在score 值添加上时间戳即可。</p><p>再比如，<strong>如何实现指定日期（比如最近 7 天）的用户数据排序？</strong></p><p>我说一种比较简单的方法：我们把每一天的数据都按照日期为名字，比如 20350305 就代表 2035 年 3 月 5 号。</p><p>如果我们需要查询最近 n 天的排行榜数据的话，直接 ZUNIONSTORE来求 n 个 <code>sorted set</code>的并集即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZUNIONSTORE last_n_days n 20350305 20350306....</span><br></pre></td></tr></table></figure><p>我不知道大家看懂了没有，我这里还是简单地造一些数据模拟一下吧！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别添加了 3 天的数据</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD 20350305 112.0 user1 100.0 user2 123.0 user3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZADD 20350306 100.0 user4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD 20350307 33.0 user5 993.0 user6</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><p>通过 ZUNIONSTORE 命令来查看最近 3 天的排行榜情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE last_n_days 3 20350305 20350306 20350307</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure><p>现在，这 3 天的数据都集中在了 last_n_days 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE last_n_days 0 -1</span><br><span class="line">1) <span class="string">"user6"</span></span><br><span class="line">2) <span class="string">"user3"</span></span><br><span class="line">3) <span class="string">"user1"</span></span><br><span class="line">4) <span class="string">"user4"</span></span><br><span class="line">5) <span class="string">"user2"</span></span><br><span class="line">6) <span class="string">"user5"</span></span><br></pre></td></tr></table></figure><p>如果一个用户同时在多个<code>sorted set</code> 中的话，它最终的<code>score</code>值就等于这些<code>sorted set</code>中该用户的 <code>score</code>值之和。</p><p>既然可以求并集，那必然也可以求交集。你可以通过 <code>ZINTERSTORE</code>命令来求多个 n 个 <code>sorted set</code> 的交集。</p><p><strong>有哪些场景可以用到多个<code>sorted set</code> 的交集呢？</strong> 比如每日打卡的场景，你对某一段时间每天打卡的人进行排序。</p><p>这个命令还有一个常用的权重参数<code>weights</code>（默认为 1）。在进行并集/交集的过程中，每个集合中的元素会将自己的 <code>score</code> *<code>weights</code> 。</p><p>我下面演示一下这个参数的作用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># staff_set 存放员工的排名信息</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD staff_set 3.0 staff1 4.0 staff2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># staff_set 存放管理者的排名信息</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD manager_set 1.0 manager1 2.0 manager2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><p>如果，我们需要将员工和管理者放在一起比较，不过，两者权重分别为 1 和 3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># staff_set 的权重为1 manager_set的权重为3</span></span><br><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE all_user_set 2 staff_set manager_set WEIGHTS 1 3</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><p>最终排序的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANGE all_user_set 0 -1</span><br><span class="line">1)<span class="string">"manager2"</span></span><br><span class="line">2)<span class="string">"staff2"</span></span><br><span class="line">3)<span class="string">"staff1"</span></span><br><span class="line">4)<span class="string">"manager1"</span></span><br></pre></td></tr></table></figure><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>上面我一共提到了两种设计排行榜的方法：</p><ol><li>MySQL 的 ORDER BY 关键字</li><li>Redis 的 sorted set</li></ol><p>其实，这两种没有孰好孰坏，还是要看具体的业务场景。如果说你的项目需要排序数据量比较小并且业务场景不复杂的话（比如你对你博客的所有文章按照阅读量来排序），我觉得直接使用 MySQL 的 ORDER BY 关键字就可以了，没必要为了排行榜引入一个 Redis。</p><p>另外，在没有分页并且数据量不大的情况下，直接在前端拿到所有需要用到的数据之后再进行排序也是可以的。</p><h3 id="如何设计微博Feed流-信息流系统"><a href="#如何设计微博Feed流-信息流系统" class="headerlink" title="如何设计微博Feed流/信息流系统"></a>如何设计微博Feed流/信息流系统</h3><p>“如何设计微博 Feed 流/信息流系统？ ”是一道比较常见的系统设计问题，面试中比较常见。</p><p>这篇文章简单谈谈我的看法。个人能力有限，有些地方大家可以结合自己的经验自行扩展！爱你们哦！</p><p><strong>下面是正文！</strong></p><p>Feed 流是社交和资讯平台不可缺少的重要组成。TimeLine 时期，Feed 流推送的机制完全基于时间，比如朋友圈动态、几年前的微信订阅号就是这种机制。</p><p>现在的 Feed 流主要是基于智能化/个性化的推荐，简单来说，就是你喜欢什么我就给你推荐什么。这样的话，人们被推送的信息会极大地由自己的个人兴趣主导，你自己所处的信息世界就像桎梏于蚕茧一般的“茧房”中一样。这也就是“信息茧房”所表达的意思。</p><h4 id="Feed-流基础"><a href="#Feed-流基础" class="headerlink" title="Feed 流基础"></a>Feed 流基础</h4><h5 id="何为-Feed-流？"><a href="#何为-Feed-流？" class="headerlink" title="何为 Feed 流？"></a>何为 Feed 流？</h5><p>简单来说就是能够实时/智能推送信息的数据流。像咱们的朋友圈动态（timeline）、知乎的推荐（智能化推荐 ）、你订阅的 Up 主的动态（timeline）都属于 <strong>Feed 流</strong>。</p><h5 id="几种常见的-Feed-流形式"><a href="#几种常见的-Feed-流形式" class="headerlink" title="几种常见的 Feed 流形式"></a>几种常见的 Feed 流形式</h5><p>我总结了 3 种常见的 Feed 流形式。</p><h6 id="纯智能推荐"><a href="#纯智能推荐" class="headerlink" title="纯智能推荐"></a>纯智能推荐</h6><p>你看到的内容完全是基于你看过的内容而推荐的，比较典型的产品有头条首页推荐、知乎首页推荐。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\20210311135636547.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>智能推荐需要依赖 <strong>推荐系统</strong> ，推荐质量的好坏和推荐算法有非常大的关系。</p><p>推荐系统的相关文献把它们分成三类：<strong>协同过滤</strong>（仅使用用户与商品的交互信息生成推荐）系统、<strong>基于内容</strong>（利用用户偏好和／或商品偏好）的系统和 混合推荐模型（使用交互信息、用户和商品的元数据）的系统。</p><p>另外，随着深度学习应用的爆发式发展，特别是在计算机视觉、自然语言处理和语音方面的进展，基于深度学习的推荐系统越来越引发大家的关注。循环神经网络（RNN）理论上能够有效地对用户偏好和物品属性的动态性进行建模，基于当前的趋势，预测未来的行为。</p><h6 id="纯-Timeline"><a href="#纯-Timeline" class="headerlink" title="纯 Timeline"></a>纯 Timeline</h6><p>你看到的内容完全按照时间来排序，比较典型的产品有微信朋友圈、QQ 空间、微博关注者动态。</p><p>微信朋友圈：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\20210609182846318.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>微博关注者动态：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\20210617101513454.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>纯 Timeline 这种方式实现起来最简单，直接按照时间排序就行了。</p><p>纯 Timeline 这种形式更适用于好友社交领域，用户关注更多的是人发出的内容，而不仅仅是内容。</p><h6 id="智能推荐-Timeline"><a href="#智能推荐-Timeline" class="headerlink" title="智能推荐+Timeline"></a>智能推荐+Timeline</h6><p>智能推荐+Timeline 这个也是目前我觉得比较好的一种方式，实现起来比较简单，同时又能一定程度地避免 “信息茧房” 的问题。</p><h5 id="设计-Feed-流系统的注意事项"><a href="#设计-Feed-流系统的注意事项" class="headerlink" title="设计 Feed 流系统的注意事项"></a>设计 Feed 流系统的注意事项</h5><ol><li>实时性 ：你关注的人发了微博信息之后，信息需要在短时间之内出现在你的信息流中。</li><li>高并发 ：信息流是微博的主体模块，是用户进入到微博之后最先看到的模块，因此它的并发请求量是最高的，可以达到每秒几十万次请求。</li><li>性能 ： 信息流拉取性能直接影响用户的使用体验。微博信息流系统中需要聚合的数据非常多。聚合这么多的数据就需要查询多次缓存、数据库、计数器，而在每秒几十万次的请求下，如何保证在 100ms 之内完成这些查询操作，展示微博的信息流呢？这是微博信息流系统最复杂之处，也是技术上最大的挑战。</li><li>……</li></ol><h4 id="Feed-流架构设计"><a href="#Feed-流架构设计" class="headerlink" title="Feed 流架构设计"></a>Feed 流架构设计</h4><p>我们这里以 微博关注者动态 为例。</p><h5 id="Feed-流的-3-种推送模式"><a href="#Feed-流的-3-种推送模式" class="headerlink" title="Feed 流的 3 种推送模式"></a>Feed 流的 3 种推送模式</h5><h6 id="推模式"><a href="#推模式" class="headerlink" title="推模式"></a>推模式</h6><p>当一个用户发送一个动态（比如微博、视频）之后，主动将这个动态推送给其他相关用户（比如粉丝）。</p><p>推模式下，我们需要将这个动态插入到每位粉丝对应的 feed 表中，这个存储成本是比较高的。尤其是对于粉丝数量比较多的大 V 来说，每发一条动态，需要存储的数据量实在太大。</p><p>假如狗蛋，有 n 个粉丝 1、2 ~ n。那么，狗蛋发一条微博时，我们需要执行的 SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> outbox(userId, feedId, create_time) <span class="keyword">values</span>(<span class="string">"goudan"</span>, $feedId, $<span class="keyword">current_time</span>); //写入用户狗蛋的发件箱</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> inbox(userId, feedId, create_time) <span class="keyword">values</span>(<span class="string">"1"</span>, $feedId, $<span class="keyword">current_time</span>); //写入用户2的收件箱</span><br><span class="line">......</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> inbox(userId, feedId, create_time) <span class="keyword">values</span>(<span class="string">"n"</span>, $feedId, $<span class="keyword">current_time</span>); //写入用户n的收件箱</span><br></pre></td></tr></table></figure><p>当我们要查询用户 n 的信息流时，只需要执行下面这条 SQL 就可以了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> feedId <span class="keyword">from</span> inbox <span class="keyword">where</span> userId = <span class="string">"n"</span>;</span><br></pre></td></tr></table></figure><p>可以很明显的看出，推模式最大的问题就是写入数据库的操作太多。</p><p>正常情况下，一个微博用户的粉丝大概在 150 左右，挨个写入也还好。不过，微博大 V 的粉丝可能在几百万，几千万，如果挨个给每个写入一条数据的话，是肯定不能接受的！因此，推模式不适合关注者粉丝过多的场景。</p><h6 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h6><p>不同于推模式，拉模式下我们是自己主动去拉取动态（拉取你关注的人的动态），然后将这些动态根据相关指标（比如时间、热度）进行实时聚合。</p><p>拉模式存储成本虽然降低，但是查询和聚合这两个操作的成本会比较高。尤其是对于单个用户关注了很多人的情况来说，你需要定时获取他关注的所有人的动态然后再做聚合，这个成本可想而知。</p><p>另外，拉模式下的数据流的实时性要比推模式差的。</p><h6 id="推垃结合模式"><a href="#推垃结合模式" class="headerlink" title="推垃结合模式"></a>推垃结合模式</h6><p>推拉结合的核心是针对微博大 V 和不活跃用户特殊处理。</p><p>首先，我们需要区分出系统哪些用户属于微博大 V（10w 粉丝以上？）。其次，我们需要根据登录行为来判断哪些用户属于不活跃用户。</p><p>有了这些数据之后，就好办了！当微博大 V 发送微博的时候，我们仅仅将这条微博写入到活跃用户，不活跃的用户自己去拉取。示意图如下（图片来自：《高并发系统设计 40 问》）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\20210617104746905.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>推拉结合非常适合用户粉丝数比较大的场景。</p><h5 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h5><p>我们的存储的数据量会比较大，所以，存储库必须要满足可以水平扩展。</p><p>一般情况，通用的存储方案就是 <strong>MySQL + Redis</strong> 。MySQL 永久保存数据， Redis 作为缓存提高热点数据的访问速度。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1624285625987-aacc840a-7f40-4c54-b3ac-05f3a06c9834.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>如果缓存的数据量太大怎么办?</strong> 我们可以考虑使用<strong>Redis Cluster</strong>，也就是 Redis 集群。Redis Cluster 可以帮助我们解决 Redis 大数据量缓存的问题，并且，也方便我们进行横向拓展（增加 Redis 机器）。</p><p>为了提高系统的并发，我们可以考虑对数据进行 <strong>读写分离</strong> 和 <strong>分库分表</strong> 。</p><p>读写分离主要是为了将数据库的读和写操作分不到不同的数据库节点上。主服务器负责写，从服务器负责读。另外，一主一从或者一主多从都可以。读写分离可以大幅提高读性能，小幅提高写的性能。因此，读写分离更适合单机并发读请求比较多的场景。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1624285625926-e19b9405-dc8e-4bfa-a60f-b6e1ba9c05a9.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>分库分表是为了解决由于库、表数据量过大，而导致数据库性能持续下降的问题。常见的分库分表工具有：sharding-jdbc（当当）、TSharding（蘑菇街）、MyCAT（基于 Cobar）、Cobar（阿里巴巴）…。 推荐使用 sharding-jdbc。 因为，sharding-jdbc 是一款轻量级 Java 框架，以 jar 包形式提供服务，不要我们做额外的运维工作，并且兼容性也很好。</p><p><a href="https://time.geekbang.org/column/intro/100006601?code=i00Nq3pHUcUj04ZWy70NCRl%2FD2Lfj8GVzcGzZ3Wf5Ug%3D" target="_blank" rel="noopener">《从零开始学架构》</a> 中的有一张图片对于垂直拆分和水平拆分的描述还挺直观的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1624285625911-0ce3c6ad-7016-4da9-8e84-d73312325b8d.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>另外，如果觉得分库分表比较麻烦的话，可以考虑使用 <a href="https://docs.pingcap.com/zh/tidb/stable" target="_blank" rel="noopener">TiDB</a> 这类分布式数据库。TiDB 是国内 PingCAP 团队开发的一个分布式 SQL 数据库。其灵感来自于 Google 的 F1, TiDB 支持包括传统 RDBMS 和 NoSQL 的特性，具备水平扩容或者缩容、金融级高可用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1624285625848-2592f894-14e9-4069-947e-2ae7d675ae5f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://developer.aliyun.com/article/706808" target="_blank" rel="noopener">Feed 流系统设计-总纲</a> ：写的真心不错！</p></li><li><p><a href="http://www.woshipm.com/pd/773523.html" target="_blank" rel="noopener">feed 流设计：那些谋杀你时间 APP</a> ：可以让你从产品层面明白 Feed 流的一些概念。</p></li></ul><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><p><a href="https://www.zhihu.com/question/19645686" target="_blank" rel="noopener">微博和知乎中的 feed 流是如何实现的？</a> ：知乎的相关提问</p><h3 id="如何设计一个短链系统"><a href="#如何设计一个短链系统" class="headerlink" title="如何设计一个短链系统"></a>如何设计一个短链系统</h3><p>我平时经常看极客时间上的专栏，上面的每一个专栏 URL 地址都有一个短链与之对应。比如你使用下面两个链接打开的都是 《MySQL 实战 45 讲》这门课程。</p><ul><li>原始链接：<a href="https://time.geekbang.org/column/intro/100020801" target="_blank" rel="noopener">https://time.geekbang.org/column/intro/100020801</a></li><li>短链 ：<a href="http://gk.link/a/10q2I" target="_blank" rel="noopener">http://gk.link/a/10q2I</a></li></ul><p>有了长链，为什么还要再弄一个短链呢?</p><ol><li>短链更简洁，更方便传播：过长的链接不利于在互联网传播；</li><li>方便对链接的点击情况做后续追踪：比如查看短链最近一周的访问量、访客数、访问来源……；</li><li>对于短信等限制字数的场景来说更加友好：很多社交平台发表动态是有字数限制的，如果你直接使用长链的话，那留给你自己想表达的其他内容的文字就少了很多；</li><li>……</li></ol><h4 id="短链原理"><a href="#短链原理" class="headerlink" title="短链原理"></a>短链原理</h4><p>短链的具体原理其实比较简单，说白了就是： <strong>通过短链找到长链（原始链接），然后再重定向到长链地址即可！</strong></p><p>我画了一个简单的示意图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ae18d67d-3733-498c-82ee-9b6381ff3a54.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>🌰 举个例子：我们来访问 “<a href="http://gk.link/a/10q2I”" target="_blank" rel="noopener">http://gk.link/a/10q2I”</a> 这个链接，从 HTTP 请求信息可以看到请求被重定向了，返回的状态码为 “302”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\6b6dfba3-0812-4cc7-8a3f-2a31841acf67.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>另外还有一个比较常用的重定向状态 “301” ， <strong>我们应该用“301” 还是“302”作为状态码更好呢？</strong></p><p>答案是：“302” ，绝大部分短链系统也都是使用的 “302” 作为状态码。</p><p>这是因为 “301” 状态码代表永久重定向，只要浏览器拿到长链之后就会对其缓存，下次再请求短链就直接从缓存中拿对应的长链地址。这样的话，我们就没办法对短链进行相关分析了。</p><p>而“302” 状态码代表资源被临时重定向了，不会存在上面说的这种问题。</p><p>🌰 举个例子：你的活动链接通过短链发送给了 10w+用户，你想知道短链后续的点击情况的话，你使用  “301” 状态码就不行了。</p><h4 id="唯一短链生成"><a href="#唯一短链生成" class="headerlink" title="唯一短链生成"></a>唯一短链生成</h4><p>原始链接必定是唯一的，我们也要确保生成的短链唯一。</p><p>如何生成唯一的短链呢？换言之就是我们如何通过唯一的字符串来表示长链。</p><p>比较常见的一种方法就是: 通过哈希算法对长链去哈希。</p><p>一般建议使用用非加密型哈希算法比如 MurmurHash 。因为，相比于 MD5，SHA 等加密型哈希算法，非加密型哈希算法往往效率更高！</p><p>我们拿 MurmurHash 来说，MurmurHash 当前最新的版本是 MurmurHash3，它能够产生出 32-bit 或 128-bit 哈希值。对于绝大部分场景来说，32-bit 的一般就已经够用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Guava 自带的 MurmurHash 算法实现</span></span><br><span class="line">String url = <span class="string">"https://time.geekbang.org/column/intro/100020801"</span>;</span><br><span class="line"><span class="keyword">long</span> s = Hashing.murmur3_32().hashUnencodedChars(url).padToLong();<span class="comment">// 3394174629</span></span><br></pre></td></tr></table></figure><p>生成的哈希值是 10 进制的，为了缩短它的长度，我们可以将其转变为 62 进制即可。10 进制的 3394174629 转换为 62 进制就是 3HHBS5。</p><p>我们将 3HHBS5 作为短链的唯一标识拼接即可。</p><p>既然使用了哈希算法，那不可避免会出现哈希冲突（不同的长链生成的短链是一样的），虽然概率比较小，但是我们也还是要解决。</p><p><strong>如何判断是否发生了哈希冲突呢？</strong></p><p>判断是否发生哈希冲突也就是看我们生成的短链是否是唯一的。</p><p>如果我们使用的是 MySQL，PostgreSQL 这类关系型数据库的话，我们可以给存放短链的字段 sort_url 添加唯一索引。</p><p>不过，为了提高性能以及应对高并发，还是建议利用布隆过滤器解决这个问题。</p><p>如何解决哈希冲突呢？</p><p>解决办法其实也很简单。如果发生哈希冲突，我们就在长链后拼接一个随机字符串。如果拼接了随机字符串还是发生哈希冲突那就再拼接一个随机字符串。</p><p>并且，我们要将拼接之后得到的字符串和拼接的字符串都存储起来，通过这两者可以获取长链（原始链接）。</p><p><strong>一个长链对应一个短链还是多个短链呢？</strong></p><p>这个还是要看具体的业务需求。个人建议是一个长链可以在不同的条件（比如生成短链的用户不同）下对应上不同的短链。这样的话，我们可以更好地对短链进行相关分析。</p><p>🌰 举个例子：通过小码短连接后台，我们可以看到短连接的访问次数、访问人数等信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d541f2c1-a6a8-4dda-8297-98095f3f530e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这样的话，我们对长网址取哈希的时候加上对应的条件信息即可（比如生成短链的用户 ID）。</p><h4 id="短链存储"><a href="#短链存储" class="headerlink" title="短链存储"></a>短链存储</h4><p>如果我们使用 MySQL，PostgreSQL 这类关系型数据库存储的话，表结构大概是下面这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`url_map`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`long_url`</span> <span class="built_in">varchar</span>(<span class="number">160</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'长链'</span>,</span><br><span class="line">  <span class="string">`sort_url`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'短链'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>当然了，也可以使用 Redis 这类 K-V 内存数据库来做，这样性能也会更好！并且，存放在 Redis 中存放的本就是键值对的数据，刚好满足我们的需求。</p><p>当我们存放一个长链的时候，我们首先判断一下这个长链是否已经被转换过短链。</p><p>如果需要对长链就行区分的话（比如不同的用户使用同一个长链生成的短链不同），我们在判断的时候加上对应的条件即可（比如这个长链对应的用户）。</p><p>这里不能直接根据长链哈希之后得到的短链来判断长链是否已经被转换过短链，因为不同的长链生成的短链可能是一样的（哈希冲突，不过，概率很低）。</p><p>我个人建议不论是否使用 Redis 数据库，都要将最近比较活跃的短连接存放在缓存中。为了避免缓存过大，我们可以为这些放在缓存中的短连接设置一个过期时间。</p><h3 id="如何设计一个站内消息系统"><a href="#如何设计一个站内消息系统" class="headerlink" title="如何设计一个站内消息系统"></a>如何设计一个站内消息系统</h3><blockquote><p>这篇文章是一位朋友投稿给我的，我简单完善了一下。</p></blockquote><p>各位使用过简书，知乎或 B 站的小伙伴应该都有这样的使用体验：当有其他用户关注我们或者私信我们的行为时，我们会收到相关的消息。</p><p>虽然这些功能看上去简单，但其背后的设计是非常复杂的，几乎是一个完成的系统，可以称之为 站内消息系统。</p><p>我以 B 站举例（个人认为 B 站的消息系统是我见过的非常完美的，UI 也最为人性化的）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\409fa4a1-cdb5-498d-8579-32780559a6f4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到 B 站把消息大致分为了三类：</p><ol><li>系统推送的通知(System Notice)；</li><li>回复、@、点赞等用户行为产生的提醒(Remind)；</li><li>用户之间的私信(Chat)。</li></ol><p>这样设计不仅分类明确，且处于同一个主体的事件提醒还会做一个聚合，极大的提高了用户体验，不让用户收到太多分散的消息。</p><p>举个例子：比如你在某个视频或某篇文章下发表了评论，有 100 个人给你的评论点了赞，那么你希望消息页面呈现的是一个一个用户给你点赞的提醒，还是像以下聚合之后的提醒：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\854ccdbc-7007-4dbc-82b1-9d5a14aac717.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我相信你大概率会选择后者。</p><p>我认为对于很多应用来说，这样的设计都是非常合理的，接下来我写写我对于消息系统的设计。</p><h4 id="系统通知-System-Notice"><a href="#系统通知-System-Notice" class="headerlink" title="系统通知(System Notice)"></a>系统通知(System Notice)</h4><p>系统通知一般是由后台管理员发出，然后指定某一类（全体，个人等）用户接收。基于此设想，可以把系统通知大致分为两张表：</p><ol><li><strong>t_manager_system_notice（管理员系统通知表） ：</strong>记录管理员发出的通知 ；</li><li><strong>t_user_system_notice（用户系统通知表） ：</strong> 存储用户接受的通知。</li></ol><p>t_manager_system_notice（管理员系统通知表） 表结构如下：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>system_notice_id</td><td>LONG</td><td>系统通知 ID</td></tr><tr><td>title</td><td>VARCHAR</td><td>标题</td></tr><tr><td>content</td><td>TEXT</td><td>内容</td></tr><tr><td>type</td><td>VARCHAR</td><td>发给哪些用户：单用户 single；全体用户 all，vip 用户，具体类型各位小伙伴可以根据自己的需求选择</td></tr><tr><td>state</td><td>BOOLEAN</td><td>是否已被拉取过，如果已经拉取过，就无需再次拉取</td></tr><tr><td>recipient_id</td><td>LONG</td><td>接受通知的用户的 ID，如果 type 为单用户，那么 recipient 为该用户的 ID;否则 recipient 为 0</td></tr><tr><td>manager_id</td><td>LONG</td><td>发布通知的管理员 ID</td></tr><tr><td>publish_time</td><td>TIMESTAMP</td><td>发布时间</td></tr></tbody></table><p>t_user_system_notice（用户系统通知表）结构如下：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>user_notice_id</td><td>LONG</td><td>主键 ID</td></tr><tr><td>state</td><td>BOOLEAN</td><td>是否已读</td></tr><tr><td>system_notice_id</td><td>LONG</td><td>系统通知的 ID</td></tr><tr><td>recipient_id</td><td>LONG</td><td>接受通知的用户的 ID</td></tr><tr><td>pull_time</td><td>TIMESTAMP</td><td>拉取通知的时间</td></tr></tbody></table><p><strong>当管理员发布一条通知后，将通知插入 t_manager_system_notice 表中，然后系统定时的从 t_manager_system_notice 表中拉取通知，然后根据通知的 type 将通知插入 t_user_system_notice 表中。</strong></p><p>如果通知的 type 是 single 的，那就只需要插入一条记录到 t_user_system_notice 中。如果是全体用户，那么就需要将一个通知批量根据不同的用户 ID 插入到 t_user_system_notice 中，这个数据量就需要根据平台的用户量来计算。</p><p>🌰 举个例子：管理员 A 发布了一个活动的通知，他需要将这个通知发布给全体用户，当拉取时间到来时，系统会将这一条通知取出。随后系统到用户表中查询选取所有用户的 ID，然后将这一条通知的信息根据所有用户的 ID，批量插入 t_user_system_notice 中。用户需要查看系统通知时，从 t_user_system_notice 表中查询就行了。</p><p>👉 需要注意的是：</p><ol><li>因为一次拉取的数据量可能很大，所以两次拉取的时间间隔可以设置的长一些。</li><li>拉取 t_manager_system_notice 表中的通知时，需要判断 state，如果已经拉取过，就不需要重复拉取，否则会造成重复消费。</li><li>有的小伙伴可能有疑问： 某条通知已经被拉取过的话，在其后注册的用户是不是不能再接收到这条通知？是的。但如果你想将已拉取过的通知推送给那些后注册的用户，也不是特别大的问题。只需要再写一个定时任务，这个<strong>定时任务可以将通知的 push_time 与用户的注册时间比较一下，重新推送即可。</strong></li></ol><p>认真思考的小伙伴应该也发现了，当用户量比较大比如上千万的时候，如果发送一个全体用户的通知需要挨个插入数据到一张表的话，是不靠谱的！</p><p>常见的解决办法，有两种方式:</p><ol><li>每位用户单独有一张或者几张专门用来存放站内消息的表，根据 hash(userId)作为表名后缀。</li><li>对于系统通知类型，只存放一条数据到 t_user_system_notice 表，用户自己拉取数据然后再判断消息是否已经读取过即可。</li></ol><p>并且，当一条通知需要发布给全体用户时，我们还应该考虑到用户的活跃度。因为如果有些用户长期不活跃，我们还将通知推送给他（她），这显然会造成空间的浪费。 所以在选取用户 ID 时，我们可以将用户上次登录的时间与推送时间做一个比较，如果用户一年未登陆或几个月未登录，我们就不选取其 ID，进而避免无谓的推送。</p><p>以上就是系统通知的设计了，接下来再看看较难的提醒类型的消息。</p><h4 id="事件提醒-EventRemind"><a href="#事件提醒-EventRemind" class="headerlink" title="事件提醒(EventRemind)"></a>事件提醒(EventRemind)</h4><p>之所以称提醒类型的消息为事件提醒，是因为此类消息均是通过用户的行为产生的，如下：</p><ul><li>xxx 在某个评论中@了你；</li><li>xxx 点赞了你的文章；</li><li>xxx 点赞了你的评论；</li><li>xxx 回复了你的文章；</li><li>xxx 回复了你的评论；</li><li>……</li></ul><p>诸如此类事件，我们以单词 action 形容不同的事件（点赞，回复，@（at））。 可以看到除了事件之外，我们还需要了解用户是在哪个地方产生的事件，以便当我们收到提醒时， 点击这条消息就可以去到事件现场，从而增强用户体验，我以事件源 source 来形容事件发生的地方。</p><ul><li>当 action 为点赞，source 为文章时，我就知道：有用户点赞了我的某篇文章；</li><li>当 action 为点赞，source 为评论时，我就知道：有用户点赞了我的某条评论；</li><li>当 action 为@（at）， source 为评论时，我就知道：有用户在某条评论里@了我；</li><li>当 action 为回复，source 为文章时，我就知道：有用户回复了我的某篇文章；</li><li>当 action 为回复，source 为评论时，我就知道：有用户回复了我的某条评论；</li></ul><p>由此可以设计出事件提醒表 t_event_remind，其结构如下：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>event_remind_id</td><td>LONG</td><td>消息 ID</td></tr><tr><td>action</td><td>VARCHAR</td><td>动作类型，如点赞、at(@)、回复等</td></tr><tr><td>source_id</td><td>LONG</td><td>事件源 ID，如评论 ID、文章 ID 等</td></tr><tr><td>source_type</td><td>VARCHAR</td><td>事件源类型：”Comment”、”Post”等</td></tr><tr><td>source_content</td><td>VARCHAR</td><td>事件源的内容，比如回复的内容，回复的评论等等</td></tr><tr><td>url</td><td>VARCHAR</td><td>事件所发生的地点链接 url</td></tr><tr><td>state</td><td>BOOLEAN</td><td>是否已读</td></tr><tr><td>sender_id</td><td>LONG</td><td>操作者的 ID，即谁关注了你，at 了你</td></tr><tr><td>recipient_id</td><td>LONG</td><td>接受通知的用户的 ID</td></tr><tr><td>remind_time</td><td>TIMESTAMP</td><td>提醒的时间</td></tr></tbody></table><h5 id="消息聚合"><a href="#消息聚合" class="headerlink" title="消息聚合"></a>消息聚合</h5><p>消息聚合只适用于事件提醒，以聚合之后的点赞消息来说：</p><ul><li>100 人 {点赞} 了你的 {文章 ID = 1} ：《A》；</li><li>100 人 {点赞} 了你的 {文章 ID = 2} ：《B》；</li><li>100 人 {点赞} 了你的 {评论 ID = 3} ：《C》；</li></ul><p>聚合之后的消息明显有两个特征，即： <strong>action</strong> 和 <strong>source type</strong>，这是系统消息和私信都不具备的， 所以我个人认为事件提醒的设计要稍微比系统消息和私信复杂。</p><h5 id="如何聚合？"><a href="#如何聚合？" class="headerlink" title="如何聚合？"></a>如何聚合？</h5><p>稍稍观察下聚合的消息就可以发现：某一类的聚合消息之间是按照 source type 和 source id 来分组的， 因此我们可以得出以下伪 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_event_remind <span class="keyword">WHERE</span> recipient_id = 用户<span class="keyword">ID</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">action</span> = 点赞 <span class="keyword">AND</span> state = <span class="literal">FALSE</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> source_id , source_type;</span><br></pre></td></tr></table></figure><p>当然，SQL 层面的结果集处理还是很麻烦的，所以我的想法先把用户所有的点赞消息先查出来， 然后在程序里面进行分组，这样会简单不少。</p><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>其实还有一种设计提醒表的做法，即按业务分类，不同的提醒存入不同的表，这样可以分为:</p><ol><li><p>点赞提醒表</p></li><li><p>回复提醒表</p></li><li><p>at(@)提醒表。</p></li></ol><p>我认为这种设计比第一种的更松耦合，不必所有类型的提醒都挤在一张表里，但是这也会带来表数量的膨胀。 所以各位小伙伴可以自行选择方案。</p><h4 id="私信"><a href="#私信" class="headerlink" title="私信"></a>私信</h4><p>站内私信一般都是点到点的，且要求是实时的，服务端可以采用 Netty 等高性能网络通信框架完成请求。 我们还是以 B 站为例，看看它是怎么设计的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4c1f605d-6e63-4269-8388-592ca06eb79e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>B 站的私信部分可以分为两部分：</p><ol><li>左边的与不同用户的聊天室；</li><li>与当前正在对话的用户的对话框，显示了当前用户与目标用户的所有消息。</li></ol><p>按照这个设计，我们可以先设计出聊天室表 t_private_chat，因为是一对一，所以聊天室表会包含对话的两个用户的信息：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>private_chat_id</td><td>LONG</td><td>聊天室 ID</td></tr><tr><td>user1_id</td><td>LONG</td><td>用户 1 的 ID</td></tr><tr><td>user2_id</td><td>LONG</td><td>用户 2 的 ID</td></tr><tr><td>last_message</td><td>VARCHAR</td><td>最后一条消息的内容</td></tr></tbody></table><p>这里 user1_id 和 user2_id 代表两个用户的 ID，并无特定的先后顺序。</p><p>接下来是私信表 t_private_message 了，私信自然和所属的聊天室有联系，且考虑到私信可以在记录中删除（删除了只是不显示记录，但是对方会有记录，撤回才是真正的删除），就还需要记录私信的状态，以下是我的设计：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>private_message_id</td><td>LONG</td><td>私信 ID</td></tr><tr><td>content</td><td>TEXT</td><td>私信内容</td></tr><tr><td>state</td><td>BOOLEAN</td><td>是否已读</td></tr><tr><td>sender_remove</td><td>BOOLEAN</td><td>发送消息的人是否把这条消息从聊天记录中删除了</td></tr><tr><td>recipient_remove</td><td>BOOLEAN</td><td>接受人是否把这条消息从聊天记录删除了</td></tr><tr><td>sender_id</td><td>LONG</td><td>发送者 ID</td></tr><tr><td>recipient_id</td><td>LONG</td><td>接受者 ID</td></tr><tr><td>send_time</td><td>TIMESTAMP</td><td>发送时间</td></tr></tbody></table><h4 id="消息设置"><a href="#消息设置" class="headerlink" title="消息设置"></a>消息设置</h4><p>消息设置一般都是针对提醒类型的消息的，且肯定是由用户自己设置的。所以我想到一般有以下设置选项：</p><ol><li>是否开启点赞提醒；</li><li>是否开启回复提醒；</li><li>是否开启@提醒；</li></ol><p>下面是 B 站的消息设置：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\48555656-73e2-4406-a89f-3f7c07b9fd2e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到 B 站还添加了陌生人选项，也就是说如果给你发送私信的用户不是你关注的用户，那么视之为陌生人私信，就不接受。</p><p>以下是我对于消息设置的设计：</p><table><thead><tr><th>字段名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>user_id</td><td>LONG</td><td>用户 ID</td></tr><tr><td>like_message</td><td>BOOLEAN</td><td>是否接收点赞消息</td></tr><tr><td>reply_message</td><td>BOOLEAN</td><td>是否接收回复消息</td></tr><tr><td>at_message</td><td>BOOLEAN</td><td>是否接收 at 消息</td></tr><tr><td>stranger_message</td><td>BOOLEAN</td><td>是否接收陌生人的私信</td></tr></tbody></table><h5 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h5><p>以上就是我对于整个站内消息系统的大概设计了，我参考了很多文章的内容以及很多网站的设计，但实际项目的需求肯定与我所介绍的有很多出入，所以各位小伙伴可以酌情参考。</p><h3 id="如何解决大文件上传问题"><a href="#如何解决大文件上传问题" class="headerlink" title="如何解决大文件上传问题"></a>如何解决大文件上传问题</h3><p>如果你的项目涉及到文件上传的话，面试官很可能会问你这个问题。</p><p>我们先看第一个场景：<strong>大文件上传中途，突然失败！</strong></p><p>试想一个，你想上传一个 5g 的视频，上传进度到 99% 的时候，特么的，突然网络断了，这个时候，你发现自己竟然需要重新上传。我就问你抓狂不？</p><p><strong>有没有解决办法呢？</strong> 答案就是：<strong>分片上传！</strong></p><p><strong>什么是分片上传呢？</strong> 简单来说，我们只需要先将文件切分成多个文件分片（就像我下面绘制的图片所展示的那样），然后再上传这些小的文件分片。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4501e55b-1180-475b-b25c-712883926283.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>前端发送了所有文件分片之后，服务端再将这些文件分片进行合并即可。</p><p>使用分片上传主要有下面 2 点好处：</p><ol><li><p><strong>断点续传 ：</strong>上传文件中途暂停或失败（比如遇到网络问题）之后，不需要重新上传，只需要上传那些未成功上传的文件分片即可。所以，分片上传是断点续传的基础。</p></li><li><p><strong>多线程上传 ：</strong>我们可以通过多线程同时对一个文件的多个文件分片进行上传，这样的话就大大加快的文件上传的速度。</p></li></ol><p><strong>前端怎么生成文件分片呢？后端如何合并文件分片呢？</strong></p><p>前端可以通过 <strong>Blob.slice()</strong> 方法来对文件进行切割（File 对象是继承 Blob 对象的，因此 File 对象也有 slice() 方法）。</p><p>生成文件切片的示例代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\39435554-21ee-410a-b22c-00f877dad1b7.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><code>RandomAccessFile</code> 类可以帮助我们合并文件分片，示例代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4d3ca64d-1a7a-4062-a747-b5c3b6236526.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>何为秒传？</strong></p><p>秒传说的就是我们在上传某个文件的时候，首先根据文件的唯一标识判断一下服务端是否已经上传过该文件，如果上传过的话，直接就返回给用户文件上传成功即可。</p><p>一般情况下，这个唯一标识都是通过对文件的名称、最后修改时间等信息取 MD5 值得到的，这个可以通过使用 spark-md5 这个库来生成。</p><p>需要注意的是：你不能根据文件名就决定文件是否已经上传到服务端，因为很可能存在文件名相同，但是，内容不同的情况。另外，体验更好的是文件内容不变，唯一标识就不应该改变。因此，我们可以根据文件的内容来计算 MD5 值。</p><p>另外，还存在一种情况是我们要上传的文件已经上传了部分文件切片到服务端。这个时候，我们直接返回已上传的切片列表给前端即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\12dca35d-3c38-4770-ba60-c80ef77799dd.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>然后，前端再将剩余未上传的分片上传到服务端。</p><p>我简单画了一张图描述一下断点续传和秒传。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4b963425-d537-4cc0-ac3d-e22de616639c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>相关阅读：</p><ul><li><a href="https://aotu.io/notes/2020/05/12/file-upload/" target="_blank" rel="noopener">大规格文件的上传优化</a></li><li><a href="https://github.com/niumoo/down-bit" target="_blank" rel="noopener">一个 Java 实现的，多线程，断点续传下载器</a></li></ul><h3 id="如何统计网站Uv"><a href="#如何统计网站Uv" class="headerlink" title="如何统计网站Uv"></a>如何统计网站Uv</h3><p>我们先来聊聊描述系统活跃度常用的一些指标。</p><h4 id="系统活跃度常用指标"><a href="#系统活跃度常用指标" class="headerlink" title="系统活跃度常用指标"></a>系统活跃度常用指标</h4><p>我们先来看几个经常用来描述系统活跃度的名词：PV、UV、VV、IP。</p><p>🌰 举个栗子：假如你在家用 ADSL 拨号上网，早上 9 点访问了 <a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">JavaGuide</a>下的 2 个页面，下午 2 点又访问了 JavaGuide 下的 3 个页面。那么，对于 JavaGuide 来说，今天的 PV、UV、VV、IP 各项指标该如何计算？</p><ul><li><p>PV 等于上午浏览的 2 个页面和下午浏览的 3 个页面之和，即 PV = 2 + 3</p></li><li><p>UV 指独立访客数，一天内同一访客的多次访问只计为 1 个 UV，即 UV = 1</p></li><li><p>VV 指访客的访问次数，上午和下午分别有一次访问行为，即 VV = 2</p></li><li><p>IP 为独立 IP 数，由于 ADSL 拨号上网每次都 IP 不同，即 IP = 2</p></li></ul><h5 id="PV-Page-View-1"><a href="#PV-Page-View-1" class="headerlink" title="PV(Page View)"></a>PV(Page View)</h5><p><strong>PV(Page View)</strong> 即 <strong>页面浏览量</strong>。每当一个页面被打开或者被刷新，都会产生一次 PV。一般来说，PV 与来访者的数量成正比，但是 PV 并不直接决定页面的真实来访者数量，如果一个来访者通过不断的刷新页面或是使用爬虫访问，也可以制造出非常高的 PV 。</p><p>我上面介绍的只是最普通的一个 PV 的计算方式。实际上，PV 的计算规则有很多种。就比如微信公众号的一篇文章，在一段时间内，即使你多次刷新也不会增加阅读量。这样做的好处就是：更能反映出点开文章的真实用户群体的数量了。</p><p><strong>总结 ：PV 能够反映出网站的页面被网站用户浏览/刷新的次数。</strong></p><h5 id="UV-Unique-Visitor-1"><a href="#UV-Unique-Visitor-1" class="headerlink" title="UV(Unique Visitor)"></a>UV(Unique Visitor)</h5><p><strong>UV(Unique Visitor)</strong> 即 <strong>独立访客</strong>。1 天内相同访客多次访问网站，只计算为 1 个独立访客。UV 是从用户个体的角度来统计的。</p><p><strong>总结：UV 主要用来统计 1 天内访问某站点的用户数。</strong></p><h5 id="VV-Visit-View"><a href="#VV-Visit-View" class="headerlink" title="VV (Visit View)"></a>VV (Visit View)</h5><p><strong>VV (Visit View)</strong> 即 <strong>访客访问的次数</strong>。当访客完成所有的浏览并最终关掉该网站的所有页面时，便完成了一次访问。</p><p>总结：<strong>VV 主要用来记录网站用户在一天内访问你的站点的次数。</strong></p><h5 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h5><p>IP 即 <strong>独立 IP 访问数</strong>。一天内使用不同 IP 地址的用户访问网站的次数，同一 IP 多次访问计数均为 1。</p><h4 id="为什么要进行-PV-amp-UV-统计？"><a href="#为什么要进行-PV-amp-UV-统计？" class="headerlink" title="为什么要进行 PV&amp;UV 统计？"></a>为什么要进行 PV&amp;UV 统计？</h4><p>大部分网站都会进行 PV&amp;UV 的统计。就比如说咱们的 Github 的项目就自带 PV&amp;UV 统计。下面这张图就是 JavaGuide 这个开源项目最近这段时间的 PV 和 UV 的趋势图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1b4c8488-6fee-4021-b1b1-ce347fa70057.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>通过这张图，我可以清楚地知道我的项目访问量的真实情况。</p><p>简单来说，网站进行 PV&amp;UV 统计有下面这些好处：</p><ul><li>PV 和 UV 的结合更能反映项目的真实访问量，有助于我们更了解自己的网站，对于我们改进网站有指导意义。比如咱们网站的某个网页访问量最大，那我们就可以对那个网页进行优化改进。再比如我们的网站在周末访问量比较大，那我们周末就可以多部署一个服务来提高网站的稳定性和性能。</li><li>PV 和 UV 的结合可以帮助广告主预计投放广告可以带来的流量。</li></ul><h4 id="如何基于-Redis-统计-UV？"><a href="#如何基于-Redis-统计-UV？" class="headerlink" title="如何基于 Redis 统计 UV？"></a>如何基于 Redis 统计 UV？</h4><p>PV 的统计不涉及到数据的去重，而 UV 的计算需要根据 IP 地址或者当前登录的用户来作为去重标准。因此，PV 的统计相对于 UV 的统计来说更为简单一些。</p><p>因此我会重点介绍 UV 的统计。</p><p>最简单的办法就是：为每一个网页维护一个哈希表，网页 ID +日期 为 Key, Value 为看过这篇文章的所有用户 ID 或者 IP（Set 类型的数据结构）。</p><p>当我们需要为指定的网页增加 UV ，首先需要判断对应的用户 ID 或者 IP 是否已经存在于对应的 Set 中。</p><p>示意图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\dd88cf8c-9017-45a7-be9f-22e6c1e4a14c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>当我们需要计算对应页面的 UV 的话，直接计算出页面对应的 Set 集合的大小即可！</p><p>这种方式在访问量不是特别大的网站，还是可以满足基本需求的。</p><p>但是，如果网站的访问量比较大，这种方式就不能够满足我们的需求了！</p><p>试想一下：如果网站的一个页面在一天之内就有接近 100w +不同用户访问的话，维护一个包含 100w+ 用户 ID 或者 用户 IP 的 Set 在内存中，还要不断的判断指定的用户 ID 或者 用户 IP 是否在其中，消耗还是比较大的，更何况这还是一个页面！</p><p>有没有对内存消耗比较小，又有类似<code>Set</code>功能的数据结构呢？</p><p>答案是有的！这个时候我们就需要用到 <code>HyperLogLog</code>了！</p><p>其实，<code>HyperLogLog</code>是一种基数计数概率算法 ,并不是 Redis 特有的。Redis 只是实现了这个算法并提供了一些开箱即用的 API。</p><p>Redis 提供的 HyperLogLog 占用空间非常非常小（基于稀疏矩阵存储）， 12k 的空间就能存储接近2^64个不同元素。</p><p>不过，<code>HyperLogLog</code>的计算结果并不是一个精确值，存在一定的误差，这是由于它本质上是用概率算法导致的。</p><p>但是，一般我们在统计 UV 这种数据的时候，是能够容忍一定范围内的误差的（标准误差是 0.81%，这对于 UV 的统计影响不大，可以忽略不计）。我们更关注的是这种方法能够为我们节省宝贵的服务器资源。</p><p>使用 Redis<code>Hyperloglog</code>进行 UV 统计，我们主要会使用到以下三个命令：</p><ul><li><code>PFADD key values</code> : 用于数据添加，可以一次性添加多个。添加过程中，重复的记录会自动去重。</li><li><code>PFCOUNT key</code>: 对 key 进行统计。</li><li><code>PFMERGE destkey sourcekey1 sourcekey2</code> : 合并多个统计结果，在合并的过程中，会自动去重多个集合中重复的元素。</li></ul><p><strong>具体是怎么做的呢？</strong></p><p>1、将访问指定页面的每个用户 ID 添加到 HyperLogLog 中。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD PAGE_1:UV USER1 USER2 ...... USERn</span><br></pre></td></tr></table></figure><p>2、统计指定页面的 UV。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFCOUNT PAGE_1:UV</span><br></pre></td></tr></table></figure><p>HyperLogLog 除了上面的 PFADD 和 PFCOIUNT 命令外，还提供了 PFMERGE ，将多个 HyperLogLog 合并在一起形成一个新的 HyperLogLog 值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFMERGE destkey sourcekey [sourcekey ...]</span><br></pre></td></tr></table></figure><p>我们来用 Java 写一个简单的程序来实际体验一下，顺便来对比一下 Set 和 HyperLogLog 这两种方式。</p><p>我们这里使用 <a href="https://github.com/redis/jedis" target="_blank" rel="noopener">Jedis</a> 提供的相关 API。</p><p>直接在项目中引入 Jedis 相关的依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下，我们循环添加了 10w 个用户到指定 <code>Set</code>和 <code>HyperLogLog</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HyperLogLogTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String SET_KEY = <span class="string">"SET:PAGE1:2021-12-19"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String PF_KEY = <span class="string">"PF:PAGE2:2021-12-19"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> NUM = <span class="number">10000</span> * <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectToRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis = <span class="keyword">new</span> Jedis(<span class="keyword">new</span> HostAndPort(<span class="string">"localhost"</span>, <span class="number">6379</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; ++i) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            jedis.sadd(SET_KEY, <span class="string">"USER"</span> + i);</span><br><span class="line">            jedis.pfadd(PF_KEY, <span class="string">"USER"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">"##.00%"</span>);</span><br><span class="line">        Long setCount = jedis.scard(SET_KEY);</span><br><span class="line">        System.out.println(decimalFormat.format((<span class="keyword">double</span>) setCount / (<span class="keyword">double</span>)NUM));</span><br><span class="line">        <span class="keyword">long</span> pfCount = jedis.pfcount(PF_KEY);</span><br><span class="line">        System.out.println(decimalFormat.format((<span class="keyword">double</span>) pfCount / (<span class="keyword">double</span>)NUM));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100.00%</span><br><span class="line">99.27%</span><br></pre></td></tr></table></figure><p>从输出结果可以看出 Set 可以非常精确的存储这 10w 个用户，而 HyperLogLog 有一点点误差，误差率大概在 0.73% 附近。</p><p>我们再来对比一下两者的存储使用空间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  debug object PF:PAGE2:2021-12-19</span><br><span class="line">Value at:0x7f7e81c77ec0 refcount:1 encoding:raw serializedlength:10523 lru:14343834 lru_seconds_idle:1288</span><br><span class="line">127.0.0.1:6379&gt; debug object SET:PAGE1:2021-12-19</span><br><span class="line">Value at:0x7f7e81c77eb0 refcount:1 encoding:hashtable serializedlength:988895 lru:14344138 lru_seconds_idle:1009</span><br></pre></td></tr></table></figure><blockquote><p>我们可以通过 <code>debug object key</code> 命令来查看某个 key 序列化后的长度。输出的项的说明：</p><ul><li>Value at ：key 的内存地址</li><li>refcount ：引用次数</li><li>encoding ：编码类型</li><li>serializedlength：序列化长度(单位是 Bytes)</li><li>lru_seconds_idle：空闲时间</li></ul><p>不过，你需要注意的是 serializedlength 仅仅代表 key 序列化后的长度（持久化本地的时候会用到），并不是 key 在内存中实际占用的长度。不过，它也侧面反应了一个 key 所占用的内存，可以用来比较两个 key 消耗内存的大小。</p></blockquote><p>从上面的结果可以看出内存占用上，Hyperloglog 消耗了 10523 bytes ≈ 10kb，而 Set 消耗了</p><p>988895 bytes ≈ 965kb （粗略估计，两者实际占用内存大小会更大）。</p><p>可以看出，仅仅是 10w 的数据，两者消耗的内存差别就这么大，如果数据量更大的话，两者消耗的内存的差距只会更大！</p><p>我们这里再拓展一下： <strong>假如我们需要获取指定天数的 UV 怎么办呢？</strong></p><p>其实，思路很简单！我们在 key 上添加日期作为标识即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD PAGE_1:UV:<span class="number">2021</span>-<span class="number">12</span>-<span class="number">19</span> USER1 USER2 ...... USERn</span><br></pre></td></tr></table></figure><p><strong>那假如我们需要获取指定时间（精确到小时）的 UV 怎么办呢？</strong></p><p>思路也一样，我们在 key 上添加指定时间作为标识即可！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFADD PAGE_1:UV:2021-12-19-12 USER1 USER2 ...... USERn</span><br></pre></td></tr></table></figure><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>除了上面介绍到的方案之外，Doris 、ClickHouse 等用于联机分析(OLAP)的列式数据库管理系统(DBMS)现在也经常用在统计相关的场景。比如说百度的百度统计（网站流量分析）就是基于 Doris 做的，再比如说 Yandex（俄罗斯的一家做搜索引擎的公司）的在线流量分析产品就是用自家的 ClickHouse 做的。</p><h2 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h2><h3 id="Java-IO-模型常见面试题总结"><a href="#Java-IO-模型常见面试题总结" class="headerlink" title="Java IO 模型常见面试题总结"></a>Java IO 模型常见面试题总结</h3><p>面试中经常喜欢问的一个问题，因为通过这个问题，面试官可以顺便了解一下你的操作系统的水平。</p><p>IO 模型这块确实挺难理解的，需要太多计算机底层知识。写这篇文章用了挺久，就非常希望能把我所知道的讲出来吧!希望朋友们能有收货！为了写这篇文章，还翻看了一下《UNIX 网络编程》这本书，太难了，我滴乖乖！心痛~</p><p>个人能力有限。如果文章有任何需要补充/完善/修改的地方，欢迎在评论区指出，共同进步！</p><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><p>I/O 一直是很多小伙伴难以理解的一个知识点，这篇文章我会将我所理解的 I/O 讲给你听，希望可以对你有所帮助。</p><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h4><h5 id="何为-I-O"><a href="#何为-I-O" class="headerlink" title="何为 I/O?"></a>何为 I/O?</h5><p>I/O（<strong>I</strong>nput/<strong>O</strong>utpu） 即<strong>输入／输出</strong> 。</p><p><strong>我们先从计算机结构的角度来解读一下 I/O。</strong></p><p>根据冯.诺依曼结构，计算机结构分为 5 大部分：运算器、控制器、存储器、输入设备、输出设备。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\20190624122126398.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>输入设备（比如键盘）和输出设备（比如显示屏）都属于外部设备。网卡、硬盘这种既可以属于输入设备，也可以属于输出设备。</p><p>输入设备向计算机输入数据，输出设备接收计算机输出的数据。</p><p><strong>从计算机结构的视角来看的话， I/O 描述了计算机系统与外部设备之间通信的过程。</strong></p><p><strong>我们再先从应用程序的角度来解读一下 I/O。</strong></p><p>根据大学里学到的操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 用户空间（User space） 和 <strong>内核空间（Kernel space ）</strong> 。</p><p>像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如如文件管理、进程通信、内存管理等等。也就是说，我们想要进行 IO 操作，一定是要依赖内核空间的能力。</p><p>并且，用户空间的程序不能直接访问内核空间。</p><p>当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。</p><p>因此，用户进程想要执行 IO 操作的话，必须通过 系统调用 来间接访问内核空间</p><p>我们在平常开发过程中接触最多的就是 <strong>磁盘 IO（读写文件）</strong> 和 <strong>网络 IO（网络请求和相应）</strong>。</p><p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p><p>当应用程序发起 I/O 调用后，会经历两个步骤：</p><ol><li>内核等待 I/O 设备准备好数据</li><li>内核将数据从内核空间拷贝到用户空间。</li></ol><h5 id="有哪些常见的-IO-模型"><a href="#有哪些常见的-IO-模型" class="headerlink" title="有哪些常见的 IO 模型?"></a>有哪些常见的 IO 模型?</h5><p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I/O、同步非阻塞 I/O、I/O 多路复用、信号驱动 I/O 和异步 I/O</strong>。</p><p>这也是我们经常提到的 5 种 IO 模型。</p><h4 id="Java-中-3-种常见-IO-模型"><a href="#Java-中-3-种常见-IO-模型" class="headerlink" title="Java 中 3 种常见 IO 模型"></a>Java 中 3 种常见 IO 模型</h4><h5 id="BIO-Blocking-I-O"><a href="#BIO-Blocking-I-O" class="headerlink" title="BIO (Blocking I/O)"></a>BIO (Blocking I/O)</h5><p><strong>BIO 属于同步阻塞 IO 模型 。</strong></p><p>同步阻塞 IO 模型中，应用程序发起 read 调用后，会一直阻塞，直到在内核把数据拷贝到用户空间。</p><p> <img src="/images/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97.assets/1624285967500-eb053522-effc-475a-a1dc-eb410d76f572.png" alt="img"></p><p>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p><h5 id="NIO-Non-blocking-New-I-O"><a href="#NIO-Non-blocking-New-I-O" class="headerlink" title="NIO (Non-blocking/New I/O)"></a>NIO (Non-blocking/New I/O)</h5><p>Java 中的 NIO 于 Java 1.4 中引入，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。</p><p>Java 中的 NIO 可以看作是 <strong>I/O 多路复用模型</strong>。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。</p><p>跟着我的思路往下看看，相信你会得到答案！</p><p>我们先来看看 <strong>同步非阻塞 IO 模型</strong>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1624285967455-d13860a6-06cb-4397-ac09-ca3789187e1a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。</p><p>相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。</p><p>但是，这种 IO 模型同样存在问题：<strong>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的</strong>。</p><p>这个时候，<strong>I/O 多路复用模型</strong> 就上场了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1624285967508-983b174a-58dd-4327-b345-8027a3f42a21.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间-&gt;用户空间）还是阻塞的。</p><blockquote><p>目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，是目前几乎在所有的操作系统上都有支持</p><ul><li>select 调用 ：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。</li><li>epoll 调用 ：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。</li></ul></blockquote><p><strong>IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。</strong></p><p>Java 中的 NIO ，有一个非常重要的<strong>选择器 ( Selector )</strong> 的概念，也可以被称为 <strong>多路复用器</strong>。通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/javajob.assets/1624285967445-1152e468-bef7-4d9a-924b-4ef3dad343e0.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h5 id="AIO-Asynchronous-I-O"><a href="#AIO-Asynchronous-I-O" class="headerlink" title="AIO (Asynchronous I/O)"></a>AIO (Asynchronous I/O)</h5><p>AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。</p><p>异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/javajob.assets/1624285967551-d3b2369c-21de-4c90-9777-928091acb617.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。</p><p>最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/面试指北.assets/1624285968982-79ae67ec-fef4-4dc9-8b65-80d1830a78c4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><ul><li>《深入拆解 Tomcat &amp; Jetty》</li><li>如何完成一次 IO：<a href="https://llc687.top/post/如何完成一次-io/" target="_blank" rel="noopener">https://llc687.top/post/如何完成一次-io/</a></li><li>程序员应该这样理解 IO：<a href="https://www.jianshu.com/p/fa7bdc4f3de7" target="_blank" rel="noopener">https://www.jianshu.com/p/fa7bdc4f3de7</a></li><li>10 分钟看懂， Java NIO 底层原理：<a href="https://www.cnblogs.com/crazymakercircle/p/10225159.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazymakercircle/p/10225159.html</a></li><li>IO 模型知多少 | 理论篇：<a href="https://www.cnblogs.com/sheng-jie/p/how-much-you-know-about-io-models.html" target="_blank" rel="noopener">https://www.cnblogs.com/sheng-jie/p/how-much-you-know-about-io-models.html</a></li><li>《UNIX 网络编程 卷 1；套接字联网 API 》6.2 节 IO 模型</li></ul><h3 id="Java-数据类型常见面试题总结"><a href="#Java-数据类型常见面试题总结" class="headerlink" title="Java 数据类型常见面试题总结"></a>Java 数据类型常见面试题总结</h3><p>这篇文章绝对干货！<strong>文章涉及到的概念经常会被面试官拿来考察求职者的 Java 基础。</strong></p><p>本篇采用大家比较喜欢的面试官问答的形式来展开。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>👨‍💻面试官 ： Java 中有哪 8 种基本数据类型？</p><p>🙋 我 ：Java 中有 8 种基本数据类型，分别为：</p><ol><li>6 种数字类型 ：byte、short、int、long、float、double</li><li>1 种字符类型：char</li><li>1 种布尔型：boolean。</li></ol><p>👨‍💻面试官 ： 它们的默认值和占用的空间大小知道不？</p><p>🙋 我 ：这 8 种基本数据类型的默认值以及所占空间的大小如下：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>另外，对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><p><strong>注意：</strong></p><ol><li>Java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析：</li><li>char a = ‘h’char :单引号，String a = “hello” :双引号</li></ol><h4 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h4><p>👨‍💻面试官 ： 说说这 8 种基本数据类型对应的包装类型。</p><p>🙋 我 ：这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean</p><p>👨‍💻面试官 ：那基本类型和包装类型有啥区别不？</p><p>🙋 我 ：包装类型不赋值就是 Null ，而基本类型有默认值且不是 Null。</p><p>另外，这个问题建议还可以先从 JVM 层面来分析。</p><p>基本数据类型直接存放在 Java 虚拟机栈中的局部变量表中，而包装类型属于对象类型，我们知道对象实例都存在于堆中。相比于对象类型， 基本数据类型占用的空间非常小。</p><blockquote><p>《深入理解 Java 虚拟机》 ：局部变量表主要存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p></blockquote><h5 id="包装类型的常量池技术"><a href="#包装类型的常量池技术" class="headerlink" title="包装类型的常量池技术"></a>包装类型的常量池技术</h5><p>👨‍💻面试官 ： 包装类型的常量池技术了解么？</p><p>🙋 我 ： Java 基本类型的包装类的大部分都实现了常量池技术。</p><p>Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，Character 创建了数值在[0,127]范围的缓存数据，Boolean 直接返回 True Or False。</p><p><strong>Integer 缓存源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此方法将始终缓存-128 到 127（包括端点）范围内的值，并可以缓存此范围之外的其他值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">      <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Character 缓存源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">      <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CharacterCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Character((<span class="keyword">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Boolean 缓存源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p><p>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">33</span>;</span><br><span class="line">Integer i2 = <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// 输出 true</span></span><br><span class="line">Float i11 = <span class="number">333f</span>;</span><br><span class="line">Float i22 = <span class="number">333f</span>;</span><br><span class="line">System.out.println(i11 == i22);<span class="comment">// 输出 false</span></span><br><span class="line">Double i3 = <span class="number">1.2</span>;</span><br><span class="line">Double i4 = <span class="number">1.2</span>;</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><p>下面我们来看一下问题。下面的代码的输出结果是 true 还是 flase 呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">System.out.println(i1==i2);</span><br></pre></td></tr></table></figure><p>Integer i1=40 这一行代码会发生装箱，也就是说这行代码等价于 Integer i1=Integer.valueOf(40) 。因此，i1 直接使用的是常量池中的对象。而Integer i1 = new Integer(40) 会直接创建新的对象。</p><p>因此，答案是 false 。你答对了吗？</p><p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals 方法比较。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/javajob.assets/b636f4cf4c3a9d8ee280f2c1ea429ce2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h5 id="为什么要有包装类型？"><a href="#为什么要有包装类型？" class="headerlink" title="为什么要有包装类型？"></a>为什么要有包装类型？</h5><p>👨‍💻面试官 ： 为什么要有包装类型？</p><p>🙋 我 ：</p><p>Java 本身就是一门 OOP（面向对象编程）语言，对象可以说是 Java 的灵魂。</p><p>除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。</p><p>为什么呢？</p><p>我举个例子，假如你有一个对象中的属性使用了 基本类型，那这个属性就必然存在默认值了。这个逻辑不正确的！因为很多业务场景下，对象的某些属性没有赋值，我就希望它的值为 null。你给我默认赋个值，不是帮倒忙么？</p><p>另外，像泛型参数不能是基本类型。因为基本类型不是 Object 子类，应该用基本类型对应的包装类型代替。我们直接拿 JDK 中线程的代码举例。</p><p>Java 中的集合在定义类型的时候不能使用基本类型的。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Set&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h4><h5 id="什么是自动拆装箱？原理？"><a href="#什么是自动拆装箱？原理？" class="headerlink" title="什么是自动拆装箱？原理？"></a>什么是自动拆装箱？原理？</h5><p>👨‍💻面试官 ： 什么是自动拆装箱？原理了解么？</p><p>🙋 我 ：</p><p>基本类型和包装类型之间的互转。举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;  <span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> n = i;   <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure><p>上面这两行代码对应的字节码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">L1</span><br><span class="line"> LINENUMBER <span class="number">8</span> L1</span><br><span class="line"> ALOAD <span class="number">0</span></span><br><span class="line"> BIPUSH <span class="number">10</span></span><br><span class="line"> INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line"> PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line">L2</span><br><span class="line"> LINENUMBER <span class="number">9</span> L2</span><br><span class="line"> ALOAD <span class="number">0</span></span><br><span class="line"> ALOAD <span class="number">0</span></span><br><span class="line"> GETFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line"> INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class="line"> PUTFIELD AutoBoxTest.n : I</span><br><span class="line"> RETURN</span><br></pre></td></tr></table></figure><p>从字节码中，我们发现装箱其实就是调用了 包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。</p><p>因此，</p><ul><li>Integer i = 10 等价于 Integer i = Integer.valueOf(10)</li><li>int n = i 等价于 int n = i.intValue();</li></ul><h5 id="自动拆箱引发的-NPE-问题"><a href="#自动拆箱引发的-NPE-问题" class="headerlink" title="自动拆箱引发的 NPE 问题"></a>自动拆箱引发的 NPE 问题</h5><p>👨‍💻面试官 ： 自动拆箱可能会引发 NPE 问题，遇到过类似的场景么？</p><p>🙋 我 ：</p><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h6><p>在《阿里巴巴开发手册》上就有这样一条规定。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\51eb094e11b71dfeff75f93e99dc7856.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我们从上图可以看到，有一条是这样说的：“数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险”。</p><p>我们来模拟一个实际的案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoBoxTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">should_Throw_NullPointerException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> id = getNum();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码之后，果然出现了 <strong>NPE</strong> 的问题。</p><p><strong>为什么会这样呢?</strong> 我们对 AutoBoxTest.class 进行反编译查看其字节码（我更推荐使用 IDEA 插件 jclasslib 来查看类的字节码）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -c AutoBoxTest.class</span><br></pre></td></tr></table></figure><p>反编译后得到的 should_Throw_NullPointerException() 方法的字节码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> aload_0</span><br><span class="line">1 invokevirtual #2 &lt;AutoBoxTest.getNum&gt;</span><br><span class="line">4 invokevirtual #3 &lt;java/lang/Long.longValue&gt;</span><br><span class="line"><span class="number">7</span> lstore_1</span><br><span class="line"><span class="number">8</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>我们可以发现自动拆箱 Long -&gt; long 的过程，不过是调用了 longValue() 方法罢了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说下面两行的代码实际是等价的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> id = getNum();</span><br><span class="line"><span class="keyword">long</span> id = getNum().longValue();</span><br></pre></td></tr></table></figure><p>因为，getNum()返回的值为 null ，一个 null 值调用方法，当然会有 NPE 的问题了。</p><h6 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h6><p>通过上面的分析之后，我来考了一个不论是平时开发还是面试中都经常会碰到的一个问题：“三目运算符使用不当会导致诡异的 NPE 异常”。</p><p>请你回答下面的代码会有 NPE 问题出现吗？如果有 NPE 问题出现的话，原因是什么呢？你会怎么分析呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i = <span class="keyword">null</span>;</span><br><span class="line">        Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(flag ? <span class="number">0</span> : i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是会有 NPE 问题出现的。</p><p>我们还是通过查看其字节码来搞懂背后的原理（这里借助了 IDEA 插件 jclasslib 来查看类字节码）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3635ed695643e41cc9fd771334078b0d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>从字节码中可以看出，22 行的位置发生了 拆箱操作 。</p><p>详细解释下就是：flag ? 0 : i 这行代码中，0 是基本数据类型 int，返回数据的时候 i 会被强制拆箱成 int 类型，由于 i 的值是 null，因此就抛出了 NPE 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">null</span>;</span><br><span class="line">Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">System.out.println(flag ? <span class="number">0</span> : i);</span><br></pre></td></tr></table></figure><p>如果，我们把代码中 flag 变量的值修改为 true 的话，就不会存在 NPE 问题了，因为会直接返回 0，不会进行拆箱操作。</p><p>我们在实际项目中应该避免这样的写法，正确 ✅ 修改之后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">null</span>;</span><br><span class="line">Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">System.out.println(flag ? <span class="keyword">new</span> Integer(<span class="number">0</span>) : i);<span class="comment">// 两者类型一致就不会有拆箱导致的 NPE 问题了</span></span><br></pre></td></tr></table></figure><p>这个问题也在 《阿里巴巴开发手册》中 被提到过。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\10f950d32f14aa81d0677156837572c5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h3 id="泛型-amp-通配符常见面试题总结"><a href="#泛型-amp-通配符常见面试题总结" class="headerlink" title="泛型&amp;通配符常见面试题总结"></a>泛型&amp;通配符常见面试题总结</h3><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h5 id="什么是泛型？有什么作用？"><a href="#什么是泛型？有什么作用？" class="headerlink" title="什么是泛型？有什么作用？"></a>什么是泛型？有什么作用？</h5><p>Java 泛型（Generics） 是 JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。</p><p>编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 <code>ArrayList&lt;Persion&gt; persons = new ArrayList&lt;Persion&gt;()</code>这行代码就指明了该 ArrayList 对象只能传入 Persion 对象，如果传入其他类型的对象就会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br></pre></td></tr></table></figure><p>并且，原生 List 返回类型是 Object ，需要手动转换类型才能使用，使用泛型后编译器自动转换。</p><h5 id="泛型的使用方式有哪几种？"><a href="#泛型的使用方式有哪几种？" class="headerlink" title="泛型的使用方式有哪几种？"></a>泛型的使用方式有哪几种？</h5><p>泛型一般有三种使用方式:<strong>泛型类、泛型接口、泛型方法。</strong></p><p><strong>1.泛型类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何实例化泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure><p><strong>2.泛型接口 ：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，不指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.泛型方法 ：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">         System.out.printf( <span class="string">"%s "</span>, element );</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">"Hello"</span>, <span class="string">"World"</span> &#125;;</span><br><span class="line">printArray( intArray  );</span><br><span class="line">printArray( stringArray  );</span><br></pre></td></tr></table></figure><h5 id="项目中哪里用到了泛型？"><a href="#项目中哪里用到了泛型？" class="headerlink" title="项目中哪里用到了泛型？"></a>项目中哪里用到了泛型？</h5><ul><li>自定义接口通用返回结果 CommonResult<t> 通过参数 T 可根据具体的返回类型动态指定结果的数据类型</t></li><li>定义 Excel 处理类 ExcelUtil<t> 用于动态指定 Excel 导出的数据类型</t></li><li>构建集合工具类（参考 Collections 中的 sort, binarySearch 方法）。</li><li>……</li></ul><h5 id="什么是泛型擦除机制？为什么要擦除"><a href="#什么是泛型擦除机制？为什么要擦除" class="headerlink" title="什么是泛型擦除机制？为什么要擦除?"></a>什么是泛型擦除机制？为什么要擦除?</h5><p><strong>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。</strong></p><p>编译器会在编译期间会动态地将泛型 T 擦除为 Object 或将 T extends xxx 擦除为其限定类型 xxx 。</p><p>因此，泛型本质上其实还是编译器的行为，为了保证引入泛型机制但不创建新的类型，减少虚拟机的运行开销，编译器通过擦除将泛型类转化为一般类。</p><p>这里说的可能有点抽象，我举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//1.编译期间直接添加会报错</span></span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">Class&lt;? extends List&gt; clazz = list.getClass();</span><br><span class="line">Method add = clazz.getDeclaredMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line"><span class="comment">//2.运行期间通过反射添加，是可以的</span></span><br><span class="line">add.invoke(list, <span class="string">"kl"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list)</span><br></pre></td></tr></table></figure><p>再来举一个例子 : 由于泛型擦除的问题，下面的方法重载会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;String&gt; list)</span>  </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\11b0bd1c-95ae-4ef1-9aa1-0cc1fee5962a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>原因也很简单，泛型擦除之后，List<string> 与 List<integer> 在编译以后都变成了 List 。</integer></string></p><p>既然编译器要把泛型擦除，那为什么还要用泛型呢？用 Object 代替不行吗？</p><p>这个问题其实在变相考察泛型的作用：</p><ul><li>使用泛型可在编译期间进行类型检测。 </li><li>使用 Object 类型需要手动添加强制类型转换，降低代码可读性，提高出错概率。 </li><li>泛型可以使用自限定类型如 T extends Comparable 。 </li></ul><h5 id="什么是桥方法？"><a href="#什么是桥方法？" class="headerlink" title="什么是桥方法？"></a>什么是桥方法？</h5><p>桥方法(Bridge Method) 用于继承泛型类时保证多态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123; <span class="keyword">this</span>.data = data; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Node.setData"</span>);</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyNode</span><span class="params">(Integer data)</span> </span>&#123; <span class="keyword">super</span>(data); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Node&lt;T&gt; 泛型擦除后为 setData(Object data)，而子类 MyNode 中并没有重写该方法，所以编译器会加入该桥方法保证多态</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        setData((Integer) data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyNode.setData"</span>);</span><br><span class="line">        <span class="keyword">super</span>.setData(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️注意 ：桥方法为编译器自动生成，非手写。</p><p>泛型有哪些限制？为什么？</p><p>泛型的限制一般是由泛型擦除机制导致的。擦除为 Object 后无法进行类型判断</p><ul><li>只能声明不能实例化 T 类型变量。</li><li>泛型参数不能是基本类型。因为基本类型不是 Object 子类，应该用基本类型对应的引用类型代替。</li><li>不能实例化泛型参数的数组。擦除后为 Object 后无法进行类型判断。</li><li>不能实例化泛型数组。</li><li>泛型无法使用 Instance of 和 getClass() 进行类型判断。</li><li>不能实现两个不同泛型参数的同一接口，擦除后多个父类的桥方法将冲突</li><li>不能使用 static 修饰泛型变量</li><li>……</li></ul><h5 id="以下代码是否能编译，为什么？"><a href="#以下代码是否能编译，为什么？" class="headerlink" title="以下代码是否能编译，为什么？"></a>以下代码是否能编译，为什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Algorithm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">max</span><span class="params">(T x, T y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法编译，因为 x 和 y 都会被擦除为<code>Object</code> 类型，<code>Object</code>无法使用<code>&gt;</code>进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法编译，因为不能使用 <code>static</code>修饰泛型<code>T</code> 。</p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><h5 id="什么是通配符？有什么作用？"><a href="#什么是通配符？有什么作用？" class="headerlink" title="什么是通配符？有什么作用？"></a>什么是通配符？有什么作用？</h5><p>泛型类型是固定的，某些场景下使用起来不太灵活，于是，通配符就来了！通配符可以允许类型参数变化，用来解决泛型无法协变的问题。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制类型为 Person 的子类</span></span><br><span class="line">&lt;? extends Person&gt;</span><br><span class="line"><span class="comment">// 限制类型为 Manager 的父类</span></span><br><span class="line">&lt;? <span class="keyword">super</span> Manager&gt;</span><br></pre></td></tr></table></figure><h5 id="通配符-？和常用的泛型-T-之间有什么区别？"><a href="#通配符-？和常用的泛型-T-之间有什么区别？" class="headerlink" title="通配符 ？和常用的泛型 T 之间有什么区别？"></a>通配符 ？和常用的泛型 T 之间有什么区别？</h5><ul><li>T 可以用于声明变量或常量而 ? 不行。</li><li>T 一般用于声明泛型类或方法，通配符 ? 一般用于泛型方法的调用代码和形参。</li><li>T 在编译期会被擦除为限定类型或 Object，通配符用于捕获具体类型。</li></ul><h5 id="什么是无界通配符？"><a href="#什么是无界通配符？" class="headerlink" title="什么是无界通配符？"></a>什么是无界通配符？</h5><p>无界通配符可以接收任何泛型类型数据，用于实现不依赖于具体类型参数的简单方法，可以捕获参数类型并交由泛型方法进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Person&lt;?&gt; p)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 泛型方法自行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>List&lt;?&gt; 和 List 有区别吗？ 当然有！</p><ul><li>List&lt;?&gt; list 表示 list 是持有某种特定类型的 List，但是不知道具体是哪种类型。因此，我们添加元素进去的时候会报错。</li><li>List list 表示 list 是持有的元素的类型是 Object，因此可以添加任何类型的对象，只不过编译器会有警告信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"sss"</span>);<span class="comment">//报错</span></span><br><span class="line">List list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list2.add(<span class="string">"sss"</span>);<span class="comment">//警告信息</span></span><br></pre></td></tr></table></figure><h5 id="什么是上边界通配符？什么是下边界通配符？"><a href="#什么是上边界通配符？什么是下边界通配符？" class="headerlink" title="什么是上边界通配符？什么是下边界通配符？"></a>什么是上边界通配符？什么是下边界通配符？</h5><p>在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：<strong>类型实参只准传入某种类型的父类或某种类型的子类。</strong></p><p><strong>上边界通配符 extends</strong> 可以实现泛型的向上转型即传入的类型实参必须是指定类型的子类型。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制必须是 Person 类的子类</span></span><br><span class="line">&lt;? extends Person&gt;</span><br></pre></td></tr></table></figure><p>类型边界可以设置多个，还可以对 T 类型进行限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;T extends T1 &amp; T2&gt;</span><br><span class="line">&lt;T extends XXX&gt;</span><br></pre></td></tr></table></figure><p><strong>下边界通配符 super</strong> 与上边界通配符 extends刚好相反，它可以实现泛型的向下转型即传入的类型实参必须是指定类型的父类型。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  限制必须是 Employee 类的父类</span></span><br><span class="line">List&lt;? <span class="keyword">super</span> Employee&gt;</span><br></pre></td></tr></table></figure><p><strong><code>? extends xxx</code>和<code>? super xxx</code>有什么区别?</strong></p><p>两者接收参数的范围不同。并且，使用 ? extends xxx 声明的泛型参数只能调用 get() 方法返回 xxx 类型，调用 set() 报错。使用 ? super xxx 声明的泛型参数只能调用 set() 方法接收 xxx 类型，调用 get() 报错。</p><p><strong><code>T extends xxx</code> 和<code>? extends xxx</code>又有什么区别？</strong></p><p>T extends xxx 用于定义泛型类和方法，擦除后为 xxx 类型， ? extends xxx 用于声明方法形参，接收 xxx 和其子类型。</p><p><strong><code>Class&lt;?&gt;</code> 和<code>Class</code>的区别？</strong></p><p>直接使用 Class 的话会有一个类型警告，使用 Class&lt;?&gt; 则没有，因为 Class 是一个泛型类，接收原生类型会产生警告</p><h5 id="以下代码是否能编译，为什么？-1"><a href="#以下代码是否能编译，为什么？-1" class="headerlink" title="以下代码是否能编译，为什么？"></a>以下代码是否能编译，为什么？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line">Node&lt;Circle&gt; nc = <span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">Node&lt;Shape&gt;  ns = nc;</span><br></pre></td></tr></table></figure><p>不能，因为<code>Node&lt;Circle&gt;</code>不是 <code>Node&lt;Shape&gt;</code> 的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildNode</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ChildNode&lt;Circle&gt; nc = <span class="keyword">new</span> ChildNode&lt;&gt;();</span><br><span class="line">Node&lt;Circle&gt;  ns = nc;</span><br></pre></td></tr></table></figure><p>可以编译，<code>ChildNode&lt;Circle&gt;</code> 是 <code>Node&lt;Circle&gt;</code> 的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;? extends Number&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Number n : list)</span><br><span class="line">        System.out.print(n + <span class="string">" "</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以编译，<code>List&lt;? extends Number&gt;</code>可以往外取元素，但是无法调用<code>add()</code>添加元素。</p><h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><ul><li>Java 官方文档 ： <a href="https://docs.oracle.com/javase/tutorial/java/generics/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/generics/index.html</a></li><li>Java 基础 一文搞懂泛型：<a href="https://www.cnblogs.com/XiiX/p/14719568.html" target="_blank" rel="noopener">https://www.cnblogs.com/XiiX/p/14719568.html</a></li></ul><h3 id="String-类常见面试题总结"><a href="#String-类常见面试题总结" class="headerlink" title="String 类常见面试题总结"></a>String 类常见面试题总结</h3><blockquote><p>这篇文章是我的一位好朋友 Hydra（公众号码农参上号主）写的原创干货，经他同意，我将其整理到了 《Java 面试指北》的 Java 部分。</p></blockquote><p>String 字符串是我们日常工作中常用的一个类，在面试中也是高频考点，这里精心总结了一波常见但也有点烧脑的 String 面试题，一共 5 道题，难度从简到难，来一起来看看你能做对几道吧。</p><p><strong>说明</strong> ：本文基于<strong>jdk8</strong>版本中的 String 进行讨论，文章例子中的代码运行结果基于<code>Java 1.8.0_261-b12</code></p><h4 id="第-1-题，奇怪的-nullnull"><a href="#第-1-题，奇怪的-nullnull" class="headerlink" title="第 1 题，奇怪的 nullnull"></a>第 1 题，奇怪的 nullnull</h4><p>下面这段代码最终会打印什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s= s1+s2;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，你会发现打印了<code>nullnull</code>：</p><p>在分析这个结果之前，先扯点别的，说一下为空<code>null</code>的字符串的打印原理。查看一下<code>PrintStream</code>类的源码，<code>print</code>方法在打印<code>null</code>前进行了处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">        s = <span class="string">"null"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    write(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，一个为null的字符串就可以被打印在我们的控制台上了。</p><p>再回头看上面这道题，<code>s1</code>和<code>s2</code>没有经过初始化所以都是空对象null，需要注意这里不是字符串的”null”，打印结果的产生我们可以看一下字节码文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\0aa00c3f-97fb-42b6-9297-812b2b0b7b60.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>编译器会对<code>String</code>字符串相加的操作进行优化，会把这一过程转化为<code>StringBuilder</code>的<code>append</code>方法。那么，让我们再看看<code>append</code>方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>append</code>方法的参数字符串为<code>null</code>，那么这里会调用其父类<code>AbstractStringBuilder</code>的<code>appendNull</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AbstractStringBuilder <span class="title">appendNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = count;</span><br><span class="line">    ensureCapacityInternal(c + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">char</span>[] value = <span class="keyword">this</span>.value;</span><br><span class="line">    value[c++] = <span class="string">'n'</span>;</span><br><span class="line">    value[c++] = <span class="string">'u'</span>;</span><br><span class="line">    value[c++] = <span class="string">'l'</span>;</span><br><span class="line">    value[c++] = <span class="string">'l'</span>;</span><br><span class="line">    count = c;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>value</code>就是底层用来存储字符的<code>char</code>类型数组，到这里我们就可以明白了，其实<code>StringBuilder</code>也对<code>null</code>的字符串进行了特殊处理，在<code>append</code>的过程中如果碰到是<code>null</code>的字符串，那么就会以<code>&quot;null&quot;</code>的形式被添加进字符数组，这也就导致了两个为空<code>null</code>的字符串相加后会打印为<code>&quot;nullnull&quot;</code>。</p><h4 id="第-2-题，改变-String-的值"><a href="#第-2-题，改变-String-的值" class="headerlink" title="第 2 题，改变 String 的值"></a>第 2 题，改变 String 的值</h4><p>如何改变一个 String 字符串的值，这道题可能看上去有点太简单了，像下面这样直接赋值不就可以了吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">"Hydra"</span>;</span><br><span class="line">s=<span class="string">"Trunks"</span>;</span><br></pre></td></tr></table></figure><p>恭喜你，成功掉进了坑里！在回答这道题之前，我们需要知道 String 是<strong>不可变</strong>的，打开 String 的源码在开头就可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br></pre></td></tr></table></figure><p>可以看到，<code>String</code>的本质其实是一个<code>char</code>类型的数组，然后我们再看两个关键字。先看final，我们知道final在修饰引用数据类型时，就像这里的数组时，能够保证指向该数组地址的引用不能修改，但是数组本身内的值可以被修改。</p><p>是不是有点晕，没关系，我们看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">char</span>[] one=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">char</span>[] two=&#123;<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;;</span><br><span class="line">one=two;</span><br></pre></td></tr></table></figure><p>如果你这样写，那么编译器是会报错提示<code>Cannot assign a value to final variable &#39;one&#39;</code>，说明被final修饰的数组的引用地址是不可改变的。但是下面这段代码却能够正常的运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">char</span>[] one=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">one[<span class="number">1</span>]=<span class="string">'z'</span>;</span><br></pre></td></tr></table></figure><p>也就是说，即使被final修饰，但是我直接操作数组里的元素还是可以的，所以这里还加了另一个关键字private，防止从外部进行修改。此外，String 类本身也被添加了final关键字修饰，防止被继承后对属性进行修改。</p><p>到这里，我们就可以理解为什么 String 是不可变的了，那么在上面的代码进行二次赋值的过程中，发生了什么呢？答案很简单，前面的变量s只是一个 String 对象的引用，这里的重新赋值时将变量s指向了新的对象。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c49008a9-3f35-42cd-b851-f6a2382478b3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>上面白话了一大顿，其实是我们可以通过比较<code>hashCode</code>的方式来看一下引用指向的对象是否发生了改变，修改一下上面的代码，打印字符串的<code>hashCode</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s=<span class="string">"Hydra"</span>;</span><br><span class="line">    System.out.println(s+<span class="string">":  "</span>+s.hashCode());</span><br><span class="line">    s=<span class="string">"Trunks"</span>;</span><br><span class="line">    System.out.println(s+<span class="string">": "</span>+s.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果，发生了改变，证明指向的对象发生了改变：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b1f213da-223c-4246-aece-e9392a454941.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>那么，回到上面的问题，如果我想要改变一个 String 的值，而又不想把它重新指向其他对象的话，应该怎么办呢？答案是利用反射修改char数组的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">    String s=<span class="string">"Hydra"</span>;</span><br><span class="line">    System.out.println(s+<span class="string">":  "</span>+s.hashCode());</span><br><span class="line"></span><br><span class="line">    Field field = String.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    field.set(s,<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'T'</span>,<span class="string">'r'</span>,<span class="string">'u'</span>,<span class="string">'n'</span>,<span class="string">'k'</span>,<span class="string">'s'</span>&#125;);</span><br><span class="line">    System.out.println(s+<span class="string">": "</span>+s.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再对比一下<code>hashCode</code>，修改后和之前一样，对象没有发生任何变化：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\27f11d5a-4106-4aef-8df5-dc178d414470.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>最后，再啰嗦说一点题外话，这里看的是<code>jdk8</code>中<code>String</code>的源码，到这为止还是使用的<code>char</code>类型数组来存储字符，但是在<code>jdk9</code>中这个<code>char</code>数组已经被替换成了<code>byte</code>数组，能够使<code>String</code>对象占用的内存减少。</p><h4 id="第-3-题，创建了几个对象？"><a href="#第-3-题，创建了几个对象？" class="headerlink" title="第 3 题，创建了几个对象？"></a>第 3 题，创建了几个对象？</h4><p>相信不少小伙伴在面试中都遇到过这道经典面试题，下面这段代码中到底创建了几个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">"Hydra"</span>);</span><br></pre></td></tr></table></figure><p>其实真正想要回答好这个问题，要铺垫的知识点还真是不少。首先，我们需要了解 3 个关于常量池的概念，下面还是基于jdk8版本进行说明：</p><ul><li>class 文件常量池：在 class 文件中保存了一份常量池（Constant Pool），主要存储编译时确定的数据，包括代码中的字面量(literal)和符号引用</li><li>运行时常量池：位于方法区中，全局共享，class 文件常量池中的内容会在类加载后存放到方法区的运行时常量池中。除此之外，在运行期间可以将新的变量放入运行时常量池中，相对 class 文件常量池而言运行时常量池更具备动态性</li><li>字符串常量池：位于堆中，全局共享，这里可以先粗略的认为它存储的是 String 对象的直接引用，而不是直接存放的对象，具体的实例对象是在堆中存放</li></ul><p>可以用一张图来描述它们各自所处的位置：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\28f7d214-c451-4e77-abe9-e65343c4f428.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>接下来，我们来细说一下<strong>字符串常量池</strong>的结构，其实在 Hotspot JVM 中，字符串常量池StringTable的本质是一张HashTable，那么当我们说将一个字符串放入字符串常量池的时候，实际上放进去的是什么呢？</p><p>以字面量的方式创建 String 对象为例，字符串常量池以及堆栈的结构如下图所示（忽略了 jvm 中的各种OopDesc实例）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1d8eb77b-3fb3-4598-865c-ab6792ea866f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>实际上字符串常量池<code>HashTable</code>采用的是<strong>数组</strong>加<strong>链表</strong>的结构，链表中的节点是一个个的<code>HashTableEntry</code>，而<code>HashTableEntry</code>中的<code>value</code>则存储了堆上<code>String</code>对象的<strong>引用</strong>。</p><p>那么，下一个问题来了，这个字符串对象的引用是<strong>什么时候</strong>被放到字符串常量池中的？具体可为两种情况：</p><ul><li>使用字面量声明 String 对象时，也就是被双引号包围的字符串，在堆上创建对象，并驻留到字符串常量池中（注意这个用词）</li><li>调用intern()方法，当字符串常量池没有相等的字符串时，会保存该字符串的引用</li></ul><p><strong>注意！</strong>我们在上面用到了一个词<strong>驻留</strong>，这里对它进行一下规范。当我们说驻留一个字符串到字符串常量池时，指的是创建<code>HashTableEntry</code>，再使它的<code>value</code>指向堆上的 String 实例，并把<code>HashTableEntry</code>放入字符串常量池，而不是直接把 String 对象放入字符串常量池中。简单来说，可以理解为将 String 对象的引用保存在字符串常量池中。</p><p>我们把<code>intern()</code>方法放在后面细说，先主要看第一种情况，这里直接整理引用 R 大的结论：</p><blockquote><p>在类加载阶段，JVM 会在堆中创建对应这些 class 文件常量池中的字符串对象实例，并在字符串常量池中驻留其引用。</p><p>这一过程具体是在 resolve 阶段(个人理解就是 resolution 解析阶段)执行，但是并不是立即就创建对象并驻留了引用，因为在 JVM 规范里指明了 resolve 阶段可以是 lazy 的。CONSTANT_String 会在第一次引用该项的 ldc 指令被第一次执行到的时候才会 resolve。</p><p>就 HotSpot VM 的实现来说，加载类时字符串字面量会进入到运行时常量池，不会进入全局的字符串常量池，即在 StringTable 中并没有相应的引用，在堆中也没有对应的对象产生。</p></blockquote><p>这里大家可以暂时先记住这个结论，在后面还会用到。</p><p>在弄清楚上面几个概念后，我们再回过头来，先看看用<strong>字面量</strong>声明 String 的方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="string">"Hydra"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译生成的字节码文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(java.lang.String[]);</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=1, locals=2, args_size=1</span><br><span class="line">       0: ldc           #2                  // String Hydra</span><br><span class="line">       2: astore_1</span><br><span class="line">       3: return</span><br></pre></td></tr></table></figure><p>解释一下上面的字节码指令：</p><ul><li>0: ldc，查找后面索引为#2对应的项，#2表示常量在常量池中的位置。在这个过程中，会触发前面提到的lazy resolve，在 resolve 过程如果发现StringTable已经有了内容匹配的 String 引用，则直接返回这个引用，反之如果StringTable里没有内容匹配的 String 对象的引用，则会在堆里创建一个对应内容的 String 对象，然后在StringTable驻留这个对象引用，并返回这个引用，之后再压入操作数栈中</li><li>2: astore_1，弹出栈顶元素，并将栈顶引用类型值保存到局部变量 1 中，也就是保存到变量s中</li><li>3: return，执行void函数返回</li></ul><p>可以看到，在这种模式下，只有堆中创建了一个<code>&quot;Hydra&quot;</code>对象，在字符串常量池中驻留了它的引用。并且，如果再给字符串<code>s2、s3</code>也用字面量的形式赋值为<code>&quot;Hydra&quot;</code>，它们用的都是堆中的唯一这一个对象。</p><p>好了，再看一下以构造方法的形式创建字符串的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">"Hydra"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样反编译这段代码的字节码文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(java.lang.String[]);</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=3, locals=2, args_size=1</span><br><span class="line">       0: new           #2                  // class java/lang/String</span><br><span class="line">       3: dup</span><br><span class="line">       4: ldc           #3                  // String Hydra</span><br><span class="line">       6: invokespecial #4                  // Method java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span><br><span class="line">       9: astore_1</span><br><span class="line">      10: return</span><br></pre></td></tr></table></figure><p>看一下和之前不同的字节码指令部分：</p><ul><li>0: new，在堆上创建一个 String 对象，并将它的引用压入操作数栈，注意这时的对象还只是一个空壳，并没有调用类的构造方法进行初始化</li><li>3: dup，复制栈顶元素，也就是复制了上面的对象引用，并将复制后的对象引用压入栈顶。这里之所以要进行复制，是因为之后要执行的构造方法会从操作数栈弹出需要的参数和这个对象引用本身（这个引用起到的作用就是构造方法中的this指针），如果不进行复制，在弹出后会无法得到初始化后的对象引用</li><li>4: ldc，在堆上创建字符串对象，驻留到字符串常量池，并将字符串的引用压入操作数栈</li><li>6: invokespecial，执行 String 的构造方法，这一步执行完成后得到一个完整对象</li></ul><p>到这里，我们可以看到一共创建了<strong>两个</strong>String 对象，并且两个都是在堆上创建的，且字面量方式创建的 String 对象的引用被驻留到了字符串常量池中。而栈里的s只是一个变量，并不是实际意义上的对象，我们不把它包括在内。</p><p>其实想要验证这个结论也很简单，可以使用 idea 中强大的 debug 功能来直观的对比一下对象数量的变化，先看字面量创建 String 方式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\92144f5e-a19f-42d1-8629-9cadf2371688.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这个对象数量的计数器是在 debug 时，点击下方右侧Memory的Load classes弹出的。对比语句执行前后可以看到，只创建了一个 String 对象，以及一个 char 数组对象，也就是 String 对象中的value。</p><p>再看看构造方法创建 String 的方式：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\820121d0-ca33-44d4-8968-69d5a9c889f5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到，创建了两个 String 对象，一个 char 数组对象，也说明了两个 String 中的value指向了同一个 char 数组对象，符合我们上面从字节码指令角度解释的结果。</p><p>最后再看一下下面的这种情况，当字符串常量池已经驻留过某个字符串引用，再使用构造方法创建 String 时，创建了几个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">"Hydra"</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"Hydra"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是<strong>只创建一个对象</strong>，对于这种重复字面量的字符串，看一下反编译后的字节码指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">  stack=3, locals=3, args_size=1</span><br><span class="line">     0: ldc           #2                  // String Hydra</span><br><span class="line">     2: astore_1</span><br><span class="line">     3: new           #3                  // class java/lang/String</span><br><span class="line">     6: dup</span><br><span class="line">     7: ldc           #2                  // String Hydra</span><br><span class="line">     9: invokespecial #4                  // Method java/lang/String."&lt;init&gt;":(Ljava/lang/String;)V</span><br><span class="line">    12: astore_2</span><br><span class="line">    13: return</span><br></pre></td></tr></table></figure><p>可以看到两次执行<code>ldc</code>指令时后面索引相同，而<code>ldc</code>判断是否需要创建新的 String 实例的依据是根据在第一次执行这条指令时，<code>StringTable</code>是否已经保存了一个对应内容的 String 实例的引用。所以在第一次执行<code>ldc</code>时会创建 String 实例，而在第二次<code>ldc</code>就会直接返回而不需要再创建实例了。</p><h4 id="第-4-题，烧脑的-intern"><a href="#第-4-题，烧脑的-intern" class="headerlink" title="第 4 题，烧脑的 intern"></a>第 4 题，烧脑的 intern</h4><p>上面我们在研究字符串对象的引用如何驻留到字符串常量池中时，还留下了调用intern方法的方式，下面我们来具体分析。</p><p>从字面上理解intern这个单词，作为动词时它有<strong>禁闭、关押</strong>的意思，通过前面的介绍，与其说是将字符串关押到字符串常量池StringTable中，可能将它理解为<strong>缓存它的引用</strong>会更加贴切。</p><p>String 的intern()是一个本地方法，可以强制将 String 驻留进入字符串常量池，可以分为两种情况：</p><ul><li>如果字符串常量池中已经驻留了一个等于此 String 对象内容的字符串引用，则返回此字符串在常量池中的引用</li><li>否则，在常量池中创建一个引用指向这个 String 对象，然后返回常量池中的这个引用</li></ul><p>好了，我们下面看一下这段代码，它的运行结果应该是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="keyword">new</span> String(<span class="string">"Hydra"</span>);</span><br><span class="line">    String s2 = s1.intern();</span><br><span class="line">    System.out.println(s1 == s2);</span><br><span class="line">    System.out.println(s1 == <span class="string">"Hydra"</span>);</span><br><span class="line">    System.out.println(s2 == <span class="string">"Hydra"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>用一张图来描述它们的关系，就很容易明白了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\34a59f7f-c3ee-4fd9-ace8-8be54bc4838d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>其实有了第三题的基础，了解这个结构已经很简单了：</p><ul><li>在创建s1的时候，其实堆里已经创建了两个字符串对象StringObject1和StringObject2，并且在字符串常量池中驻留了StringObject2</li><li>当执行s1.intern()方法时，字符串常量池中已经存在内容等于”Hydra”的字符串StringObject2，直接返回这个引用并赋值给s2</li><li>s1和s2指向的是两个不同的 String 对象，因此返回 fasle</li><li>s2指向的就是驻留在字符串常量池的StringObject2，因此s2==”Hydra”为 true，而s1指向的不是常量池中的对象引用所以返回 false</li></ul><p>上面是常量池中已存在内容相等的字符串驻留的情况，下面再看看常量池中不存在的情况，看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="keyword">new</span> String(<span class="string">"Hy"</span>) + <span class="keyword">new</span> String(<span class="string">"dra"</span>);</span><br><span class="line">    s1.intern();</span><br><span class="line">    String s2 = <span class="string">"Hydra"</span>;</span><br><span class="line">    System.out.println(s1 == s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><p>简单分析一下这个过程，第一步会在堆上创建<code>&quot;Hy&quot;</code>和<code>&quot;dra&quot;</code>的字符串对象，并驻留到字符串常量池中。</p><p>接下来，完成字符串的拼接操作，前面我们说过，实际上 jvm 会把拼接优化成<code>StringBuilder</code>的<code>append</code>方法，并最终调用<code>toString</code>方法返回一个 String 对象。在完成字符串的拼接后，字符串常量池中并没有驻留一个内容等于<code>&quot;Hydra&quot;</code>的字符串。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c9b71f01-e4ca-45c3-9265-644b371c1f17.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>所以，执行<code>s1.intern()</code>时，会在字符串常量池创建一个引用，指向前面<code>StringBuilder</code>创建的那个字符串，也就是变量<code>s1</code>所指向的字符串对象。在《深入理解 Java 虚拟机》这本书中，作者对这进行了解释，因为从 jdk7 开始，字符串常量池就已经移到了堆中，那么这里就只需要在字符串常量池中记录一下首次出现的实例引用即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5e5d5bdb-26f3-4902-a91d-9ec1078351e2.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>最后，当执行<code>String s2 = &quot;Hydra&quot;</code>时，发现字符串常量池中已经驻留这个字符串，直接返回对象的引用，因此<code>s1</code>和<code>s2</code>指向的是相同的对象。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\38327ce5-7204-42d3-a21d-e5fe1ef60820.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="第-5-题，还是创建了几个对象？"><a href="#第-5-题，还是创建了几个对象？" class="headerlink" title="第 5 题，还是创建了几个对象？"></a>第 5 题，还是创建了几个对象？</h4><p>解决了前面数 String 对象个数的问题，那么我们接着加点难度，看看下面这段代码，创建了几个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">"a"</span>+<span class="string">"b"</span>+<span class="string">"c"</span>;</span><br></pre></td></tr></table></figure><p>先揭晓答案，只创建了一个对象！ 可以直观的对比一下源代码和反编译后的字节码文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\54ad8c18-d448-46b1-984c-5e86782ba458.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果使用前面提到过的 debug 小技巧，也可以直观的看到语句执行完后，只增加了一个 String 对象，以及一个 char 数组对象。并且这个字符串就是驻留在字符串常量池中的那一个，如果后面再使用字面量”abc”的方式声明一个字符串，指向的仍是这一个，堆中 String 对象的数量不会发生变化。</p><p>至于为什么源代码中字符串拼接的操作，在编译完成后会消失，直接呈现为一个拼接后的完整字符串，是因为在编译期间，应用了编译器优化中一种被称为<strong>常量折叠</strong>(Constant Folding)的技术。</p><blockquote><p>常量折叠会将<strong>编译期常量</strong>的加减乘除的运算过程在编译过程中折叠。编译器通过语法分析，会将常量表达式计算求值，并用求出的值来替换表达式，而不必等到运行期间再进行运算处理，从而在运行期间节省处理器资源。</p></blockquote><p>而上边提到的编译期常量的特点就是它的值在编译期就可以确定，并且需要完整满足下面的要求，才可能是一个编译期常量：</p><ul><li>被声明为final</li><li>基本类型或者字符串类型</li><li>声明时就已经初始化</li><li>使用<strong>常量表达式</strong>进行初始化</li></ul><p>下面我们通过几段代码加深对它的理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String h1 = <span class="string">"hello"</span>;</span><br><span class="line">    String h2 = <span class="string">"hello"</span>;</span><br><span class="line">    String s1 = h1 + <span class="string">"Hydra"</span>;</span><br><span class="line">    String s2 = h2 + <span class="string">"Hydra"</span>;</span><br><span class="line">    System.out.println((s1 == <span class="string">"helloHydra"</span>));</span><br><span class="line">    System.out.println((s2 == <span class="string">"helloHydra"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>代码中字符串<code>h1</code>和<code>h2</code>都使用常量赋值，区别在于是否使用了<code>final</code>进行修饰，对比编译后的代码，<code>s1</code>进行了折叠而<code>s2</code>没有，可以印证上面的理论，<code>final</code>修饰的字符串变量才有可能是编译期常量。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b244b25a-dda1-4981-9b43-810c8ecd9ef4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>再看一段代码，执行下面的程序，结果会返回什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String h =<span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">final</span> String h2 = h;</span><br><span class="line">    String s = h2 + <span class="string">"Hydra"</span>;</span><br><span class="line">    System.out.println(s==<span class="string">"helloHydra"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是<code>false</code>，因为虽然这里字符串h2被final修饰，但是初始化时没有使用常量表达式，因此它也不是编译期常量。那么，有的小伙伴就要问了，到底什么才是常量表达式呢？</p><p>在Oracle官网的文档中，列举了很多种情况，下面对常见的情况进行列举（除了下面这些之外官方文档上还列举了不少情况，如果有兴趣的话，可以自己查看）：</p><ul><li><p>基本类型和 String 类型的字面量</p></li><li><p>基本类型和 String 类型的强制类型转换</p></li><li><p>使用+或-或!等一元运算符（不包括++和–）进行计算</p></li><li><p>使用加减运算符+、-，乘除运算符*、 / 、% 进行计算</p></li><li><p>使用移位运算符 &gt;&gt;、 &lt;&lt;、 &gt;&gt;&gt;进行位移操作</p></li><li><p>……</p></li></ul><p>至于我们从文章一开始就提到的字面量（literals），是用于表达源代码中一个固定值的表示法，在 Java 中创建一个对象时需要使用new关键字，但是给一个基本类型变量赋值时不需要使用new关键字，这种方式就可以被称为字面量。Java 中字面量主要包括了以下类型的字面量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数型字面量：</span></span><br><span class="line"><span class="keyword">long</span> l=<span class="number">1L</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点类型字面量：</span></span><br><span class="line"><span class="keyword">float</span> f=<span class="number">11.1f</span>;</span><br><span class="line"><span class="keyword">double</span> d=<span class="number">11.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符和字符串类型字面量：</span></span><br><span class="line"><span class="keyword">char</span> c=<span class="string">'h'</span>;</span><br><span class="line">String s=<span class="string">"Hydra"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类型字面量：</span></span><br><span class="line"><span class="keyword">boolean</span> b=<span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>再说点题外话，和编译期常量相对的，另一种类型的常量是运行时常量，看一下下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String s1=<span class="string">"hello "</span>+<span class="string">"Hydra"</span>;</span><br><span class="line"><span class="keyword">final</span> String s2=UUID.randomUUID().toString()+<span class="string">"Hydra"</span>;</span><br></pre></td></tr></table></figure><p>编译器能够在编译期就得到<code>s1</code>的值是<code>hello Hydra</code>，不需要等到程序的运行期间，因此<code>s1</code>属于编译期常量。而对<code>s2</code>来说，虽然也被声明为<code>final</code>类型，并且在声明时就已经初始化，但使用的不是常量表达式，因此不属于编译期常量，这一类型的常量被称为运行时常量。</p><p>再看一下编译后的字节码文件中的常量池区域：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d52360ef-fed6-4cd5-a604-01109cb4162d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以看到常量池中只有一个 String 类型的常量<code>hello Hydra</code>，而<code>s2</code>对应的字符串常量则不在此区域。对编译器来说，运行时常量在编译期间无法进行折叠，编译器只会对尝试修改它的操作进行报错处理。</p><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>最后再强调一下，本文是基于jdk8进行测试，不同版本的jdk可能会有很大差异。例如jdk6之前，字符串常量池存储的是 String 对象实例，而在jdk7以后字符串常量池就改为存储引用，做了非常大的改变。</p><p>至于最后一题，其实 Hydra 在以前单独拎出来写过一篇文章，这次总结面试题把它归纳在了里面，省略了一些不重要的部分，大家如果觉得不够详细可以移步看看这篇：<strong>String s=”a”+”b”+”c”，到底创建了几个对象？</strong></p><p>那么，这次的分享就写到这里，我是 Hydra，我们下篇再见~</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><p>《深入理解 Java 虚拟机（第三版）》</p></li><li><p><a href="https://www.zhihu.com/question/55994121" target="_blank" rel="noopener">https://www.zhihu.com/question/55994121</a></p></li><li><p><a href="https://www.iteye.com/blog/rednaxelafx-774673#" target="_blank" rel="noopener">https://www.iteye.com/blog/rednaxelafx-774673#</a></p></li></ul><h2 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySQL-日志：常见的日志都有什么用？"><a href="#MySQL-日志：常见的日志都有什么用？" class="headerlink" title="MySQL 日志：常见的日志都有什么用？"></a>MySQL 日志：常见的日志都有什么用？</h3><h4 id="MySQL-中常见的日志有哪些？"><a href="#MySQL-中常见的日志有哪些？" class="headerlink" title="MySQL 中常见的日志有哪些？"></a>MySQL 中常见的日志有哪些？</h4><p>MySQL 中常见的日志类型主要有下面几类（针对的是 InnoDB 存储引擎）：</p><ul><li><p><strong>错误日志（error log） ：</strong>对 MySQL 的启动、运行、关闭过程进行了记录。</p></li><li><p><strong>二进制日志（binary log） ：</strong>主要记录的是更改数据库数据的 SQL 语句。</p></li><li><p><strong>一般查询日志（general query log） ：</strong>已建立连接的客户端发送给 MySQL 服务器的所有 SQL 记录，因为 SQL 的量比较大，默认是不开启的，也不建议开启。</p></li><li><p><strong>慢查询日志（slow query log） ：</strong>执行时间超过 long_query_time秒钟的查询，解决 SQL 慢查询问题的时候会用到。</p></li><li><p><strong>事务日志(redo log 和 undo log) ：</strong>redo log 是重做日志，undo log 是回滚日志。</p></li><li><p><strong>中继日志(relay log) ：</strong>relay log 是复制过程中产生的日志，很多方面都跟 binary log 差不多。不过，relay log 针对的是主从复制中的从库。</p></li><li><p><strong>DDL 日志(metadata log) ：</strong>DDL 语句执行的元数据操作。</p></li></ul><p>二进制日志 binlog （归档日志）和事务日志(redo log 和 undo log)比较重要，需要我们重点关注。</p><h4 id="慢查询日志有什么用？"><a href="#慢查询日志有什么用？" class="headerlink" title="慢查询日志有什么用？"></a>慢查询日志有什么用？</h4><p>慢查询日志记录了执行时间超过 long_query_time（默认是 10s）的所有查询，在我们解决 SQL 慢查询（SQL 执行时间过长）问题的时候经常会用到。</p><p>慢查询日志默认是关闭的，我们可以通过下面的命令将其开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL slow_query_log=ON</span><br></pre></td></tr></table></figure><p><code>long_query_time</code>参数定义了一个查询消耗多长时间才可以被定义为慢查询，默认是 10s，通过<code>SHOW VARIABLES LIKE &#39;%long_query_time%&#39;</code>命令即可查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'%long_query_time%'</span>;</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>并且，我们还可以对 <code>long_query_time</code>参数进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL long_query_time=1</span><br></pre></td></tr></table></figure><p>在实际项目中，慢查询日志可能会比较大，直接分析的话不太方便，我们可以借助 MySQL 官方的慢查询分析调优工具 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysqldumpslow.html" target="_blank" rel="noopener">mysqldumpslow</a>。</p><h4 id="binlog-主要记录了什么？"><a href="#binlog-主要记录了什么？" class="headerlink" title="binlog 主要记录了什么？"></a>binlog 主要记录了什么？</h4><p>MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。</p><p>binlog 有一个比较常见的应用场景就是主从复制，MySQL 主从复制依赖于 binlog 。另外，常见的一些同步 MySQL 数据到其他数据源的工具（比如 canal）的底层一般也是依赖 binlog 。</p><p>binlog 通过追加的方式进行写入，大小没有限制。并且，我们可以通过max_binlog_size参数设置每个 binlog 文件的最大容量，当文件大小达到给定值之后，会生成新的 binlog 文件来保存日志，不会出现前面写的日志被覆盖的情况。</p><p>关于主从复制的具体步骤和原理，推荐看看我写的<a href="https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html" target="_blank" rel="noopener">读写分离&amp;分库分表</a>这篇文章。</p><h4 id="redo-log-如何保证事务的持久性？"><a href="#redo-log-如何保证事务的持久性？" class="headerlink" title="redo log 如何保证事务的持久性？"></a>redo log 如何保证事务的持久性？</h4><p>我们知道 InnoDB 存储引擎是以页为单位来管理存储空间的，我们往 MySQL 插入的数据最终都是存在于页中的，准确点来说是数据页这种类型。为了减少磁盘 IO 开销，还有一个叫做 Buffer Pool(缓冲池) 的区域，存在于内存中。当我们的数据对应的页不存在于 Buffer Pool 中的话， MySQL 会先将磁盘上的页缓存到 Buffer Pool 中，这样后面我们直接操作的就是 Buffer Pool 中的页，这样大大提高了读写性能。</p><p>一个事务提交之后，我们对 Buffer Pool 中对应的页的修改可能还未持久化到磁盘。这个时候，如果 MySQL 突然宕机的话，这个事务的更改是不是直接就消失了呢？</p><p>很显然是不会的，如果是这样的话就明显违反了事务的持久性。</p><p>MySQL InnoDB 引擎使用 redo log 来保证事务的持久性。redo log 主要做的事情就是记录页的修改，比如某个页面某个偏移量处修改了几个字节的值以及具体被修改的内容是什么。redo log 中的每一条记录包含了表空间号、数据页号、偏移量、具体修改的数据，甚至还可能会记录修改数据的长度（取决于 redo log 类型）。</p><p>在事务提交时，我们会将 redo log 按照刷盘策略刷到磁盘上去，这样即使 MySQL 宕机了，重启之后也能恢复未能写入磁盘的数据，从而保证事务的持久性。也就是说，redo log 让 MySQL 具备了崩溃回复能力。</p><p>不过，我们也要注意设置正确的刷盘策略<code>innodb_flush_log_at_trx_commit</code> ，根据 MySQL 配置的刷盘策略的不同，MySQL 宕机之后可能会存在轻微的数据丢失问题。</p><p>刷盘策略<code>innodb_flush_log_at_trx_commit</code>的默认值为 1，设置为 1 的时候才不会丢失任何数据。为了保证事务的持久性，我们必须将其设置为 1。</p><p>下图是 MySQL 5.7 官方文档对于<code>innodb_flush_log_at_trx_commit</code>参数的详细介绍，我这里就不做过多阐述了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ccb9f5e2-301c-4075-b765-4d3006f5f3b2.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>redo log 采用循环写的方式进行写入，大小固定，当写到结尾时，会回到开头循环写日志，会出现前面写的日志被覆盖的情况。</p><h4 id="页修改之后为什么不直接刷盘呢？"><a href="#页修改之后为什么不直接刷盘呢？" class="headerlink" title="页修改之后为什么不直接刷盘呢？"></a>页修改之后为什么不直接刷盘呢？</h4><p>很多人可能要问了：为什么每次修改 Buffer Pool 中的页之后不直接刷盘呢？这样不就不需要 redo log 了嘛！</p><p>这种方式必然是不行的，性能非常差。最大的问题就是 InnoDB 页的大小一般为 16KB，而页又是磁盘和内存交互的基本单位。这就导致即使我们只修改了页中的几个字节数据，一次刷盘操作也需要将 16KB 大小的页整个都刷新到磁盘中。而且，这些修改的页可能并不相邻，也就是说这还是随机 IO。</p><p>采用 redo log 的方式就可以避免这种性能问题，因为 redo log 的刷盘性能很好。首先，redo log 的写入属于顺序 IO。 其次，一行 redo log 记录只占几十个字节。</p><p>另外，Buffer Pool 中的页（脏页）在某些情况下（比如 redo log 快写满了）也会进行刷盘操作。不过，这里的刷盘操作会合并写入，更高效地顺序写入到磁盘。</p><h4 id="binlog-和-redolog-有什么区别？"><a href="#binlog-和-redolog-有什么区别？" class="headerlink" title="binlog 和 redolog 有什么区别？"></a>binlog 和 redolog 有什么区别？</h4><ul><li>binlog 主要用于数据库还原，属于数据级别的数据恢复，主从复制是 binlog 最常见的一个应用场景。redolog 主要用于保证事务的持久性，属于事务级别的数据恢复。</li><li>redolog 属于 InnoDB 引擎特有的，binlog 属于所有存储引擎共有的，因为 binlog 是 MySQL 的 Server 层实现的。</li><li>redolog 属于物理日志，主要记录的是某个页的修改。binlog 属于逻辑日志，主要记录的是数据库执行的所有 DDL 和 DML 语句。</li><li>binlog 通过追加的方式进行写入，大小没有限制。redo log 采用循环写的方式进行写入，大小固定，当写到结尾时，会回到开头循环写日志。</li><li>……</li></ul><h4 id="undo-log-如何保证事务的原子性？"><a href="#undo-log-如何保证事务的原子性？" class="headerlink" title="undo log 如何保证事务的原子性？"></a>undo log 如何保证事务的原子性？</h4><p>每一个事务对数据的修改都会被记录到 undo log ，当执行事务过程中出现错误或者需要执行回滚操作的话，MySQL 可以利用 undo log 将数据恢复到事务开始之前的状态。</p><p>undo log 属于逻辑日志，记录的是 SQL 语句，比如说事务执行一条 DELETE 语句，那 undo log 就会记录一条相对应的 INSERT 语句。</p><h3 id="MySQL-索引：索引为什么使用-B-树？"><a href="#MySQL-索引：索引为什么使用-B-树？" class="headerlink" title="MySQL 索引：索引为什么使用 B+树？"></a><strong>MySQL 索引：索引为什么使用 B+树？</strong></h3><blockquote><p>相关面试题 ：</p><ul><li>MySQL 的索引结构为什么使用 B+树？</li><li>红黑树适合什么场景？</li></ul><p>转自：<a href="https://www.cnblogs.com/kismetv/p/11582214.html" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/11582214.html</a></p></blockquote><p>在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 B+树作索引结构(这里不考虑 hash 等其他索引)。本文将从最普通的二叉查找树开始，逐步说明各种树解决的问题以及面临的新问题，从而说明 MySQL 为什么选择 B+树作为索引结构。</p><h4 id="二叉查找树-BST-：不平衡"><a href="#二叉查找树-BST-：不平衡" class="headerlink" title="二叉查找树(BST)：不平衡"></a>二叉查找树(BST)：不平衡</h4><p>二叉查找树(BST，Binary Search Tree)，也叫二叉排序树，在二叉树的基础上需要满足：任意节点的左子树上所有节点值不大于根节点的值，任意节点的右子树上所有节点值不小于根节点的值。如下是一颗 BST(<a href="https://blog.csdn.net/qq_25940921/article/details/82183093" target="_blank" rel="noopener">图片来源</a>)。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>当需要快速查找时，将数据存储在 BST 是一种常见的选择，因为此时查询时间取决于树高，平均时间复杂度是 O(lgn)。然而，BST<strong>可能长歪而变得不平衡</strong>，如下图所示(<a href="https://blog.csdn.net/qq_25940921/article/details/82183093" target="_blank" rel="noopener">图片来源</a>)，此时 BST 退化为链表，时间复杂度退化为 O(n)。</p><p>为了解决这个问题，引入了平衡二叉树。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images(1)" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="平衡二叉树-AVL-：旋转耗时"><a href="#平衡二叉树-AVL-：旋转耗时" class="headerlink" title="平衡二叉树(AVL)：旋转耗时"></a>平衡二叉树(AVL)：旋转耗时</h4><p>AVL 树是严格的平衡二叉树，所有节点的左右子树高度差不能超过 1；AVL 树查找、插入和删除在平均和最坏情况下都是 O(lgn)。</p><p>AVL 实现平衡的关键在于旋转操作：插入和删除可能破坏二叉树的平衡，此时需要通过一次或多次树旋转来重新平衡这个树。当插入数据时，最多只需要 1 次旋转(单旋转或双旋转)；但是当删除数据时，会导致树失衡，AVL 需要维护从被删除节点到根节点这条路径上所有节点的平衡，旋转的量级为 O(lgn)。</p><p><strong>由于旋转的耗时，AVL树在删除数据时效率很低</strong>；在删除操作较多时，维护平衡所需的代价可能高于其带来的好处，因此 AVL 实际使用并不广泛。</p><h4 id="红黑树：树太高"><a href="#红黑树：树太高" class="headerlink" title="红黑树：树太高"></a>红黑树：树太高</h4><p>与 AVL 树相比，红黑树并不追求严格的平衡，而是大致的平衡：只是确保从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。从实现来看，红黑树最大的特点是每个节点都属于两种颜色(红色或黑色)之一，且节点颜色的划分需要满足特定的规则(具体规则略)。红黑树示例如下（<a href="https://www.jianshu.com/p/1dbbee88c9d9" target="_blank" rel="noopener">图片来源</a>）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images(2)" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>与 AVL 树相比，红黑树的查询效率会有所下降，这是因为树的平衡性变差，高度更高。但红黑树的删除效率大大提高了，因为红黑树同时引入了颜色，当插入或删除数据时，只需要进行 O(1)次数的旋转以及变色就能保证基本的平衡，不需要像 AVL 树进行 O(lgn)次数的旋转。总的来说，红黑树的统计性能高于 AVL。</p><p>因此，在实际应用中，AVL 树的使用相对较少，而红黑树的使用非常广泛。例如，Java 中的 TreeMap 使用红黑树存储排序键值对；Java8 中的 HashMap 使用链表+红黑树解决哈希冲突问题(当冲突节点较少时，使用链表，当冲突节点较多时，使用红黑树)。</p><p>对于数据在内存中的情况（如上述的 TreeMap 和 HashMap），红黑树的表现是非常优异的。<strong>但是对于数据在磁盘等辅助存储设备中的情况（如MySQL等数据库），红黑树并不擅长，因为红黑树长得还是太高了</strong>。当数据在磁盘中时，磁盘 IO 会成为最大的性能瓶颈，设计的目标应该是尽量减少 IO 次数；而树的高度越高，增删改查所需要的 IO 次数也越多，会严重影响性能。</p><h4 id="B-树：为磁盘而生"><a href="#B-树：为磁盘而生" class="headerlink" title="B 树：为磁盘而生"></a>B 树：为磁盘而生</h4><p>B 树也称 B-树(其中-不是减号)，是为磁盘等辅存设备设计的多路平衡查找树，与二叉树相比，B 树的每个非叶节点可以有多个子树。 因此，当总节点数量相同时，B 树的高度远远小于 AVL 树和红黑树(B 树是一颗“矮胖子”)，磁盘 IO 次数大大减少。</p><p>定义 B 树最重要的概念是阶数(Order)，对于一颗 m 阶 B 树，需要满足以下条件：</p><ul><li>每个节点最多包含 m 个子节点。</li><li>如果根节点包含子节点，则至少包含 2 个子节点；除根节点外，每个非叶节点至少包含 m/2 个子节点。</li><li>拥有 k 个子节点的非叶节点将包含 k - 1 条记录。</li><li>所有叶节点都在同一层中。</li></ul><p>可以看出，B 树的定义，主要是对非叶结点的子节点数量和记录数量的限制。</p><p>下图是一个 3 阶 B 树的例子（<a href="https://www.2cto.com/net/201808/773535.html" target="_blank" rel="noopener">图片来源</a>）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1174710%2F201909%2F1174710-20190925074904497-1088606861.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>B 树的优势除了树高小，还有对访问局部性原理的利用。所谓局部性原理，是指当一个数据被使用时，其附近的数据有较大概率在短时间内被使用。B 树将键相近的数据存储在同一个节点，当访问其中某个数据时，数据库会将该整个节点读到缓存中；当它临近的数据紧接着被访问时，可以直接在缓存中读取，无需进行磁盘 IO；换句话说，B 树的缓存命中率更高。</p><p>B 树在数据库中有一些应用，如 mongodb 的索引使用了 B 树结构。但是在很多数据库应用中，使用了是 B 树的变种 B+树。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><p>B+树也是多路平衡查找树，其与 B 树的区别主要在于：</p><ul><li>B 树中每个节点（包括叶节点和非叶节点）都存储真实的数据，B+树中只有叶子节点存储真实的数据，非叶节点只存储键。在 MySQL 中，这里所说的真实数据，可能是行的全部数据（如 Innodb 的聚簇索引），也可能只是行的主键（如 Innodb 的辅助索引），或者是行所在的地址（如 MyIsam 的非聚簇索引）。</li><li>B 树中一条记录只会出现一次，不会重复出现，而 B+树的键则可能重复重现——一定会在叶节点出现，也可能在非叶节点重复出现。</li><li>B+树的叶节点之间通过双向链表链接。</li><li>B 树中的非叶节点，记录数比子节点个数少 1；而 B+树中记录数与子节点个数相同。</li></ul><p>由此，B+树与 B 树相比，有以下优势：</p><ul><li><strong>更少的 IO 次数：</strong>B+树的非叶节点只包含键，而不包含真实数据，因此每个节点存储的记录个数比 B 数多很多（即阶 m 更大），因此 B+树的高度更低，访问时所需要的 IO 次数更少。此外，由于每个节点存储的记录数更多，所以对访问局部性原理的利用更好，缓存命中率更高。</li><li><strong>更适于范围查询：</strong>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li><li><strong>更稳定的查询效率：</strong>B 树的查询时间复杂度在 1 到树高之间(分别对应记录在根节点和叶节点)，而 B+树的查询复杂度则稳定为树高，因为所有数据都在叶节点。</li></ul><p>B+树也存在劣势：由于键会重复出现，因此会占用更多的空间。但是与带来的性能优势相比，空间劣势往往可以接受，因此 B+树的在数据库中的使用比 B 树更加广泛。</p><h4 id="感受-B-树的威力"><a href="#感受-B-树的威力" class="headerlink" title="感受 B+树的威力"></a>感受 B+树的威力</h4><p>前面说到，B 树/B+树与红黑树等二叉树相比，最大的优势在于树高更小。实际上，对于 Innodb 的 B+索引来说，树的高度一般在 2-4 层。下面来进行一些具体的估算。</p><p>树的高度是由阶数决定的，阶数越大树越矮；而阶数的大小又取决于每个节点可以存储多少条记录。Innodb 中每个节点使用一个页(page)，页的大小为 16KB，其中元数据只占大约 128 字节左右(包括文件管理头信息、页面头信息等等)，大多数空间都用来存储数据。</p><ul><li>对于非叶节点，记录只包含索引的键和指向下一层节点的指针。假设每个非叶节点页面存储 1000 条记录，则每条记录大约占用 16 字节；当索引是整型或较短的字符串时，这个假设是合理的。延伸一下，我们经常听到建议说索引列长度不应过大，原因就在这里：索引列太长，每个节点包含的记录数太少，会导致树太高，索引的效果会大打折扣，而且索引还会浪费更多的空间。</li><li>对于叶节点，记录包含了索引的键和值(值可能是行的主键、一行完整数据等，具体见前文)，数据量更大。这里假设每个叶节点页面存储 100 条记录(实际上，当索引为聚簇索引时，这个数字可能不足 100；当索引为辅助索引时，这个数字可能远大于 100；可以根据实际情况进行估算)。</li></ul><p>对于一颗 3 层 B+树，第一层(根节点)有 1 个页面，可以存储 1000 条记录；第二层有 1000 个页面，可以存储 10001000 条记录；第三层(叶节点)有 10001000 个页面，每个页面可以存储 100 条记录，因此可以存储 10001000100 条记录，即 1 亿条。而对于二叉树，存储 1 亿条记录则需要 26 层左右。</p><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p>最后，总结一下各种树解决的问题以及面临的新问题：</p><ul><li><p>二叉查找树(BST) ：解决了排序的基本问题，但是由于无法保证平衡，可能退化为链表；</p></li><li><p>平衡二叉树(AVL) ：通过旋转解决了平衡的问题，但是旋转操作效率太低；</p></li><li><p>红黑树 ：通过舍弃严格的平衡和引入红黑节点，解决了 AVL 旋转效率过低的问题，但是在磁盘等场景下，树仍然太高，IO 次数太多；</p></li><li><p>B 树 ：通过将二叉树改为多路平衡查找树，解决了树过高的问题；</p></li><li><p>B+树 ：在 B 树的基础上，将非叶节点改造为不存储数据的纯索引节点，进一步降低了树的高度；此外将叶节点使用指针连接成链表，范围查询更加高效。</p></li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><p>《MySQL 技术内幕：InnoDB 存储引擎》</p></li><li><p>《MySQL 运维内参》</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/54102723" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/54102723</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1425604" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1425604</a></p></li><li><p><a href="https://blog.csdn.net/whoamiyang/article/details/51926985" target="_blank" rel="noopener">https://blog.csdn.net/whoamiyang/article/details/51926985</a></p></li><li><p><a href="https://www.jianshu.com/p/37436ed14cc6" target="_blank" rel="noopener">https://www.jianshu.com/p/37436ed14cc6</a></p></li><li><p><a href="https://blog.csdn.net/CrankZ/article/details/83301702" target="_blank" rel="noopener">https://blog.csdn.net/CrankZ/article/details/83301702</a></p></li><li><p><a href="https://www.cnblogs.com/gaochundong/p/btree_and_bplustree.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaochundong/p/btree_and_bplustree.html</a></p></li></ul><h3 id="Redis-基础：为什么要用分布式缓存？"><a href="#Redis-基础：为什么要用分布式缓存？" class="headerlink" title="Redis 基础：为什么要用分布式缓存？"></a><strong>Redis 基础：为什么要用分布式缓存？</strong></h3><blockquote><p>相关面试题 ：</p><ul><li>为什么要用缓存？</li><li>本地缓存应该怎么做？</li><li>为什么要有分布式缓存?/为什么不直接用本地缓存?</li><li>多级缓存了解么？</li></ul></blockquote><h4 id="缓存的基本思想"><a href="#缓存的基本思想" class="headerlink" title="缓存的基本思想"></a>缓存的基本思想</h4><p>很多同学只知道缓存可以提高系统性能以及减少请求相应时间，但是，不太清楚缓存的本质思想是什么。</p><p>缓存的基本思想其实很简单，就是我们非常熟悉的空间换时间。不要把缓存想的太高大上，虽然，它的确对系统的性能提升的性价比非常高。</p><p>其实，我们在学习使用缓存的时候，你会发现缓存的思想实际在操作系统或者其他地方都被大量用到。 比如 CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。 再比如操作系统在 页表方案 基础之上引入了 快表 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache）。</p><p>我们知道，缓存中的数据通常存储于内存中，因此访问速度非常快。为了避免内存中的数据在重启或者宕机之后丢失，很多缓存中间件会利用磁盘做持久化。</p><p>也就是说，缓存相比较于我们常用的关系型数据库（比如 MySQL）来说访问速度要快非常多。为了避免用户请求数据库中的数据速度过于缓慢，我们可以在数据库之上增加一层缓存。</p><p>除了能够提高访问速度之外，缓存支持的并发量也要更大，有了缓存之后，数据库的压力也会随之变小。</p><h4 id="缓存的分类"><a href="#缓存的分类" class="headerlink" title="缓存的分类"></a>缓存的分类</h4><h5 id="本地缓存-1"><a href="#本地缓存-1" class="headerlink" title="本地缓存"></a>本地缓存</h5><h6 id="什么是本地缓存"><a href="#什么是本地缓存" class="headerlink" title="什么是本地缓存?"></a>什么是本地缓存?</h6><p>这个实际在很多项目中用的蛮多，特别是单体架构的时候。数据量不大，并且没有分布式要求的话，使用本地缓存还是可以的。</p><p>本地缓存位于应用内部，其最大的优点是应用存在于同一个进程内部，请求本地缓存的速度非常快，不存在额外的网络开销。</p><p>常见的单体架构图如下，我们使用 <strong>Nginx</strong> 来做<strong>负载均衡</strong>，部署两个相同的应用到服务器，两个服务使用同一个数据库，并且使用的是本地缓存。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\local-cache.png" alt="local-cache.png" title>                </div>                <div class="image-caption">local-cache.png</div>            </figure><h6 id="本地缓存的方案有哪些？"><a href="#本地缓存的方案有哪些？" class="headerlink" title="本地缓存的方案有哪些？"></a>本地缓存的方案有哪些？</h6><p><strong>1、JDK 自带的 HashMap 和 ConcurrentHashMap 了。</strong></p><p>ConcurrentHashMap 可以看作是线程安全版本的 HashMap ，两者都是存放 key/value 形式的键值对。但是，大部分场景来说不会使用这两者当做缓存，因为只提供了缓存的功能，并没有提供其他诸如过期时间之类的功能。一个稍微完善一点的缓存框架至少要提供：过期时间、淘汰机制、命中率统计这三点。</p><p><strong>2、 Ehcache 、 Guava Cache 、 Spring Cache 这三者是使用的比较多的本地缓存框架。</strong></p><ul><li><code>Ehcache</code> 的话相比于其他两者更加重量。不过，相比于 <code>Guava Cache</code>、 <code>Spring Cache</code> 来说，<code>Ehcache</code>支持可以嵌入到 hibernate 和 mybatis 作为多级缓存，并且可以将缓存的数据持久化到本地磁盘中、同时也提供了集群方案（比较鸡肋，可忽略）。</li><li><code>Guava Cache</code>和 <code>Spring Cache</code>两者的话比较像。<code>Guava</code>相比于<code>Spring Cache</code>的话使用的更多一点，它提供了 API 非常方便我们使用，同时也提供了设置缓存有效时间等功能。它的内部实现也比较干净，很多地方都和 <code>ConcurrentHashMap</code> 的思想有异曲同工之妙。</li><li>使用 <code>Spring Cache</code>的注解实现缓存的话，代码会看着很干净和优雅，但是很容易出现问题比如缓存穿透、内存溢出。</li></ul><p><strong>3、后起之秀 Caffeine。</strong></p><p>相比于<code>Guava</code> 来说<code>Caffeine</code> 在各个方面比如性能要更加优秀，一般建议使用其来替代<code>Guava</code>。并且， <code>Guava</code> 和 <code>Caffeine</code> 的使用方式很像！</p><h6 id="本地缓存有什么痛点？"><a href="#本地缓存有什么痛点？" class="headerlink" title="本地缓存有什么痛点？"></a>本地缓存有什么痛点？</h6><p>本地的缓存的优势非常明显：低依赖、轻量、简单、成本低。</p><p>但是，本地缓存存在下面这些缺陷：</p><ul><li><strong>本地缓存应用耦合，对分布式架构支持不友好</strong>，比如同一个相同的服务部署在多台机器上的时候，各个服务之间的缓存是无法共享的，因为本地缓存只在当前机器上有。</li><li><strong>本地缓存容量受服务部署所在的机器限制明显</strong>。 如果当前系统服务所耗费的内存多，那么本地缓存可用的容量就很少。</li></ul><h5 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h5><h6 id="什么是分布式缓存？"><a href="#什么是分布式缓存？" class="headerlink" title="什么是分布式缓存？"></a>什么是分布式缓存？</h6><p>我们可以把分布式缓存（Distributed Cache） 看作是一种内存数据库的服务，它的最终作用就是提供缓存数据的服务。</p><p>分布式缓存脱离于应用独立存在，多个应用可直接的共同使用同一个分布式缓存服务。</p><p>如下图所示，就是一个简单的使用分布式缓存的架构图。我们使用 Nginx 来做负载均衡，部署两个相同的应用到服务器，两个服务使用同一个数据库和缓存。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\distributed-cache.png" alt="distributed-cache.png" title>                </div>                <div class="image-caption">distributed-cache.png</div>            </figure><p>使用分布式缓存之后，缓存服务可以部署在一台单独的服务器上，即使同一个相同的服务部署在多台机器上，也是使用的同一份缓存。 并且，单独的分布式缓存服务的性能、容量和提供的功能都要更加强大。</p><p><strong>软件系统设计中没有银弹，往往任何技术的引入都像是把双刃剑。</strong> 你使用的方式得当，就能为系统带来很大的收益。否则，只是费了精力不讨好。</p><p>简单来说，为系统引入分布式缓存之后往往会带来下面这些问题：</p><ul><li><strong>系统复杂性增加 ：</strong>引入缓存之后，你要维护缓存和数据库的数据一致性、维护热点缓存、保证缓存服务的高可用等等。</li><li><strong>系统开发成本往往会增加 ：</strong>引入缓存意味着系统需要一个单独的缓存服务，这是需要花费相应的成本的，并且这个成本还是很贵的，毕竟耗费的是宝贵的内存。</li></ul><h6 id="分布式缓存的方案有哪些？"><a href="#分布式缓存的方案有哪些？" class="headerlink" title="分布式缓存的方案有哪些？"></a>分布式缓存的方案有哪些？</h6><p>分布式缓存的话，比较老牌同时也是使用的比较多的还是 <strong>Memcached</strong> 和 <strong>Redis</strong>。不过，现在基本没有看过还有项目使用 <strong>Memcached</strong> 来做缓存，都是直接用 <strong>Redis</strong>。</p><p>Memcached 是分布式缓存最开始兴起的那会，比较常用的。后来，随着 Redis 的发展，大家慢慢都转而使用更加强大的 Redis 了。</p><p>另外，腾讯也开源了一款类似于 Redis 的分布式高性能 KV 存储数据库，基于知名的开源项目 <a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">RocksDB</a> 作为存储引擎 ，100% 兼容 Redis 协议和 Redis4.0 所有数据模型，名为 <a href="https://github.com/Tencent/Tendis" target="_blank" rel="noopener">Tendis</a>。</p><p>关于 Redis 和 Tendis 的对比，腾讯官方曾经发过一篇文章：<a href="https://mp.weixin.qq.com/s/MeYkfOIdnU6LYlsGb24KjQ" target="_blank" rel="noopener">Redis vs Tendis：冷热混合存储版架构揭秘</a> ，可以简单参考一下。</p><p>从这个项目的 Github 提交记录可以看出，Tendis 开源版几乎已经没有被维护更新了，加上其关注度并不高，使用的公司也比较少。因此，不建议你使用 Tendis 来实现分布式缓存。</p><h5 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h5><p>我们这里只来简单聊聊 <strong>本地缓存 + 分布式缓存</strong> 的多级缓存方案。</p><p>这个时候估计有很多小伙伴就会问了：<strong>既然用了分布式缓存，为什么还要用本地缓存呢？</strong> 。</p><p>的确，一般情况下，我们也是不建议使用多级缓存的，这会增加维护负担（比如你需要保证一级缓存和二级缓存的数据一致性），并且，实际带来的提升效果对于绝大部分项目来说其实并不是很大。</p><p>多级缓存方案中，第一级缓存（L1）使用本地内存（比如 Caffeine)），第二级缓存（L2）使用分布式缓存（比如 Redis）。读取缓存数据的时候，我们先从 L1 中读取，读取不到的时候再去 L2 读取。这样可以降低 L2 的压力，减少 L2 的读次数。并且，本地内存的访问速度是最快的，不存在什么网络开销。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\multilevel-cache.png" alt="multilevel-cache.png" title>                </div>                <div class="image-caption">multilevel-cache.png</div>            </figure><p><a href="https://gitee.com/ld/J2Cache" target="_blank" rel="noopener">J2Cache</a> 就是一个基于本地内存和分布式缓存的两级 Java 缓存框架，感兴趣的同学可以研究一下。</p><h3 id="Redis-基础：常见的缓存更新策略有哪几种"><a href="#Redis-基础：常见的缓存更新策略有哪几种" class="headerlink" title="Redis 基础：常见的缓存更新策略有哪几种?"></a><strong>Redis 基础：常见的缓存更新策略有哪几种?</strong></h3><p>下面介绍到的三种模式各有优劣，不存在最佳模式，根据具体的业务场景选择适合自己的缓存读写模式即可！</p><h4 id="Cache-Aside-Pattern（旁路缓存模式）"><a href="#Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="Cache Aside Pattern（旁路缓存模式）"></a>Cache Aside Pattern（旁路缓存模式）</h4><p><strong>Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。</strong></p><p>Cache Aside Pattern 中服务端需要同时维系数据库（后文简称 db）和缓存（后文简称 cache），并且是以 db 的结果为准。</p><p>下面我们来看一下这个策略模式下的缓存读写步骤。</p><p><strong>写 ：</strong></p><ol><li>先更新 db；</li><li>直接删除 cache 。</li></ol><p>简单画了一张图帮助大家理解写的步骤。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\fd814571-c1ae-4f7e-aad8-5dac5b741de8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>读 :</strong></p><ol><li>从 cache 中读取数据，读取到就直接返回；</li><li>cache 中读取不到的话，就从 db 中读取数据返回；</li><li>再把 db 中读取到的数据放到 cache 中。</li></ol><p>简单画了一张图帮助大家理解读的步骤。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cfa0a217-53d2-45d8-b9e9-13970de9982c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>你仅仅了解了上面这些内容的话是远远不够的，我们还要搞懂其中的原理。</p><p>比如说面试官可能会问你：<strong>“为什么删除 cache，而不是更新 cache？”</strong></p><p>主要原因有两点：</p><ol><li><strong>对服务端资源造成浪费 ：</strong>删除 cache 更加直接，这是因为 cache 中存放的一些数据需要服务端经过大量的计算才能得出，会消耗服务端的资源，是一笔不晓得开销。如果频繁修改 db，就能会导致需要频繁更新 cache，而 cache 中的数据可能都没有被访问到。</li><li><strong>产生数据不一致问题 ：</strong>并发场景下，更新 cache 产生数据不一致性问题的概率会更大（后文会解释原因）。</li></ol><p>面试官很可能会追问：<strong>“在写数据的过程中，可以先删除 cache ，后更新 db 么？”</strong></p><p>答案： 那肯定是不行的！因为这样可能会造成 <strong>数据库（db）和缓存（Cache）数据不一致</strong>的问题。</p><p>举例：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。这个过程可以简单描述为：</p><ol><li><p>请求 1 先把 cache 中的 A 数据删除；</p></li><li><p>请求 2 从 db 中读取数据；</p></li><li><p>请求 1 再把 db 中的 A 数据更新。</p></li></ol><p>这就会导致请求 2 读取到的是旧值。</p><p>当你这样回答之后，面试官可能会紧接着就追问：<strong>“在写数据的过程中，先更新 db，后删除 cache 就没有问题了么？”</strong></p><p><strong>答案：</strong> 理论上来说还是可能会出现数据不一致性的问题，不过概率非常小，因为缓存的写入速度是比数据库的写入速度快很多。</p><p>举例：请求 1 先读数据 A，请求 2 随后写数据 A，并且数据 A 在请求 1 请求之前不在缓存中的话，也有可能产生数据不一致性的问题。这个过程可以简单描述为：</p><ol><li><p>请求 1 从 db 读数据 A；</p></li><li><p>请求 2 更新 db 中的数据 A（此时缓存中无数据 A ，故不用执行删除缓存操作 ）；</p></li><li><p>请求 1 将数据 A 写入 cache。</p></li></ol><p>这就会导致 cache 中存放的其实是旧值。</p><p>现在我们再来分析一下 <strong>Cache Aside Pattern 的缺陷。</strong></p><p><strong>缺陷 1：首次请求数据一定不在 cache 的问题</strong></p><p>解决办法：可以将热点数据可以提前放入 cache 中。</p><p><strong>缺陷 2：写操作比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。</strong></p><p>解决办法：</p><ul><li><p>数据库和缓存数据强一致场景 ：更新 db 的时候同样更新 cache，不过我们需要加一个锁/分布式锁来保证更新 cache 的时候不存在线程安全问题。</p></li><li><p>可以短暂地允许数据库和缓存数据不一致的场景 ：更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样的话就可以保证即使数据不一致的话影响也比较小。</p></li></ul><h4 id="Read-Write-Through-Pattern（读写穿透）"><a href="#Read-Write-Through-Pattern（读写穿透）" class="headerlink" title="Read/Write Through Pattern（读写穿透）"></a>Read/Write Through Pattern（读写穿透）</h4><p>Read/Write Through Pattern 中服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。</p><p>这种缓存读写策略小伙伴们应该也发现了在平时在开发过程中非常少见。抛去性能方面的影响，大概率是因为我们经常使用的分布式缓存 Redis 并没有提供 cache 将数据写入 db 的功能。</p><p><strong>写（Write Through）：</strong></p><ul><li><p>先查 cache，cache 中不存在，直接更新 db。</p></li><li><p>cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（<strong>同步更新 cache 和 db</strong>）。</p></li></ul><p>简单画了一张图帮助大家理解写的步骤。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\0126e23d-f0d1-4c30-a568-b60405b3dda8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>读(Read Through)：</strong></p><ul><li>从 cache 中读取数据，读取到就直接返回 。</li><li>读取不到的话，先从 db 加载，写入到 cache 后返回响应。</li></ul><p>简单画了一张图帮助大家理解读的步骤。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\e685e967-1655-4424-a75d-490101b52087.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Read-Through Pattern 实际只是在 Cache-Aside Pattern 之上进行了封装。在 Cache-Aside Pattern 下，发生读请求的时候，如果 cache 中不存在对应的数据，是由客户端自己负责把数据写入 cache，而 Read Through Pattern 则是 cache 服务自己来写入缓存的，这对客户端是透明的。</p><p>和 Cache Aside Pattern 一样， Read-Through Pattern 也有首次请求数据一定不再 cache 的问题，对于热点数据可以提前放入缓存中。</p><h4 id="Write-Behind-Pattern（异步缓存写入）"><a href="#Write-Behind-Pattern（异步缓存写入）" class="headerlink" title="Write Behind Pattern（异步缓存写入）"></a>Write Behind Pattern（异步缓存写入）</h4><p>Write Behind Pattern 和 Read/Write Through Pattern 很相似，两者都是由 cache 服务来负责 cache 和 db 的读写。</p><p>但是，两个又有很大的不同：<strong>Read/Write Through 是同步更新 cache 和 db，而 Write Behind 则是只更新缓存，不直接更新 db，而是改为异步批量的方式来更新 db。</strong></p><p>很明显，这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。</p><p>这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。</p><p>Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。</p><h3 id="Redis-Sentinel：如何实现自动化地故障转移？"><a href="#Redis-Sentinel：如何实现自动化地故障转移？" class="headerlink" title="Redis Sentinel：如何实现自动化地故障转移？"></a><strong>Redis Sentinel：如何实现自动化地故障转移？</strong></h3><p>普通的主从复制方案下，一旦 master 宕机，我们需要从 slave 中手动选择一个新的 master，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。人工干预大大增加了问题的处理时间以及出错的可能性。</p><p>我们可以借助 Redis 官方的 Sentinel（哨兵）方案来帮助我们解决这个痛点，实现自动化地故障切换。</p><p>建议带着下面这些重要的问题（面试常问）阅读：</p><ol><li>什么是 Sentinel？ 有什么用？</li><li>Sentinel 如何检测节点是否下线？主观下线与客观下线的区别?</li><li>Sentinel 是如何实现故障转移的？</li><li>为什么建议部署多个 sentinel 节点（哨兵集群）？</li><li>Sentinel 如何选择出新的 master（选举机制）?</li><li>如何从 Sentinel 集群中选择出 Leader ？</li><li>Sentinel 可以防止脑裂吗？</li></ol><h4 id="什么是-Sentinel？"><a href="#什么是-Sentinel？" class="headerlink" title="什么是 Sentinel？"></a>什么是 Sentinel？</h4><p><strong>Sentinel（哨兵）</strong> 只是 Redis 的一种运行模式 ，不提供读写服务，默认运行在 26379 端口上，依赖于 Redis 工作。Redis Sentinel 的稳定版本是在 Redis 2.8 之后发布的。</p><p>Redis 在 Sentinel 这种特殊的运行模式下，使用专门的命令表，也就是说普通模式运行下的 Redis 命令将无法使用。</p><p>通过下面的命令就可以让 Redis 以 Sentinel 的方式运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /path/to/sentinel.conf</span><br><span class="line">或者</span><br><span class="line">redis-server /path/to/sentinel.conf --sentinel</span><br></pre></td></tr></table></figure><p>Redis 源码中的<code>sentinel.conf</code>是用来配置 Sentinel 的，一个常见的最小配置如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 指定要监视的 master</span><br><span class="line">// 127.0.0.1 6379 为 master 地址</span><br><span class="line">// 2 表示当有 2 个 sentinel 认为 master 失效时，master 才算真正失效</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">// master 节点宕机多长时间才会被 sentinel 认为是失效</span><br><span class="line">sentinel down-after-milliseconds mymaster 60000</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line">sentinel monitor resque 192.168.1.3 6380 4</span><br><span class="line">sentinel down-after-milliseconds resque 10000</span><br><span class="line">sentinel failover-timeout resque 180000</span><br><span class="line">// 在发生主备切换时最多可以有 5 个 slave 同时对新的 master 进行同步</span><br><span class="line">sentinel parallel-syncs resque 5</span><br></pre></td></tr></table></figure><p>Redis Sentinel 实现 Redis 集群高可用，只是在主从复制实现集群的基础下，多了一个 Sentinel 角色来帮助我们监控 Redis 节点的运行状态并自动实现故障转移。</p><p>当 master 节点出现故障的时候， Sentinel 会帮助我们实现故障转移，自动根据一定的规则选出一个 slave 升级为 master，确保整个 Redis 系统的可用性。整个过程完全自动，不需要人工介入。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\redis-master-slave-sentinel.png" alt="redis-master-slave-sentinel.png" title>                </div>                <div class="image-caption">redis-master-slave-sentinel.png</div>            </figure><h4 id="Sentinel-有什么作用？"><a href="#Sentinel-有什么作用？" class="headerlink" title="Sentinel 有什么作用？"></a>Sentinel 有什么作用？</h4><p>根据 <a href="https://redis.io/topics/sentinel" target="_blank" rel="noopener">Redis Sentinel 官方文档</a>的介绍，sentinel 节点主要可以提供 4 个功能：</p><ul><li><strong>监控：</strong>监控所有 redis 节点（包括 sentinel 节点自身）的状态是否正常。</li><li><strong>故障转移：</strong>如果一个 master 出现故障，Sentinel 会帮助我们实现故障转移，自动将某一台 slave 升级为 master，确保整个 Redis 系统的可用性。</li><li><strong>通知 ：</strong>通知 slave 新的 master 连接信息，让它们执行 replicaof 成为新的 master 的 slave。</li><li><strong>配置提供 ：</strong>客户端连接 sentinel 请求 master 的地址，如果发生故障转移，sentinel 会通知新的 master 链接信息给客户端。</li></ul><p>Redis Sentinel 本身设计的就是一个分布式系统，建议多个 sentinel 节点协作运行。这样做的好处是：</p><ul><li>多个 sentinel 节点通过投票的方式来确定 sentinel 节点是否真的不可用，避免误判（比如网络问题可能会导致误判）。</li><li>Sentinel 自身就是高可用。</li></ul><p><strong>如果想要实现高可用，建议将哨兵 Sentinel 配置成单数且大于等于 3 台。</strong></p><p>一个最简易的 Redis Sentinel 集群如下所示（官方文档中的一个例子），其中：</p><ul><li>M1 表示 master，R2、R3 表示 slave；</li><li>S1、S2、S3 都是 sentinel；</li><li>quorum 表示判定 master 失效最少需要的仲裁节点数。这里的值为 2 ，也就是说当有 2 个 sentinel 认为 master 失效时，master 才算真正失效。</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       +<span class="comment">----+</span></span><br><span class="line">       | M1 |</span><br><span class="line">       | S1 |</span><br><span class="line">       +<span class="comment">----+</span></span><br><span class="line">          |</span><br><span class="line">+<span class="comment">----+    |    +----+</span></span><br><span class="line">| R2 |<span class="comment">----+----| R3 |</span></span><br><span class="line">| S2 |         | S3 |</span><br><span class="line">+<span class="comment">----+         +----+</span></span><br><span class="line"></span><br><span class="line">Configuration: quorum = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果 M1 出现问题，只要 S1、S2、S3 其中的两个投票赞同的话，就会开始故障转移工作，从 R2 或者 R3 中重新选出一个作为 master。</p><h4 id="Sentinel-如何检测节点是否下线？"><a href="#Sentinel-如何检测节点是否下线？" class="headerlink" title="Sentinel 如何检测节点是否下线？"></a><strong>Sentinel 如何检测节点是否下线？</strong></h4><blockquote><p>相关的问题：</p><ul><li>主观下线与客观下线的区别?</li><li>Sentinel 是如何实现故障转移的？</li><li>为什么建议部署多个 sentinel 节点（哨兵集群）？</li></ul></blockquote><p>Redis Sentinel 中有两个下线（Down）的概念：</p><ul><li><strong>主观下线(SDOWN) ：</strong>sentinel 节点认为某个 Redis 节点已经下线了（主观下线），但还不是很确定，需要其他 sentinel 节点的投票。</li><li><strong>客观下线(ODOWN) ：</strong>法定数量（通常为过半）的 sentinel 节点认定某个 Redis 节点已经下线（客观下线），那它就算是真的下线了。</li></ul><p>也就是说，<strong>主观下线</strong> 当前的 sentinel 自己认为节点宕机，客观下线是 sentinel 整体达成一致认为节点宕机。</p><p>每个 sentinel 节点以每秒钟一次的频率向整个集群中的 master、slave 以及其他 sentinel 节点发送一个 PING 命令。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\redis-master-slave-sentinel-ping.png" alt="redis-master-slave-sentinel-ping.png" title>                </div>                <div class="image-caption">redis-master-slave-sentinel-ping.png</div>            </figure><p>如果对应的节点超过规定的时间（down-after-millisenconds）没有进行有效回复的话，就会被其认定为是 <strong>主观下线(SDOWN)</strong> 。注意！这里的有效回复不一定是 PONG，可以是-LOADING 或者 -MASTERDOWN 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\redis-master-slave-sentinel-ping-sdown.png" alt="redis-master-slave-sentinel-ping-sdown.png" title>                </div>                <div class="image-caption">redis-master-slave-sentinel-ping-sdown.png</div>            </figure><p>如果被认定为主观下线的是 slave 的话， sentinel 不会做什么事情，因为 slave 下线对 Redis 集群的影响不大，Redis 集群对外正常提供服务。但如果是 master 被认定为主观下线就不一样了，sentinel 整体还要对其进行进一步核实，确保 master 是真的下线了。</p><p>所有 sentinel 节点要以每秒一次的频率确认 master 的确下线了，当法定数量（通常为过半）的 sentinel 节点认定 master 已经下线， master 才被判定为 <strong>客观下线(ODOWN)</strong> 。这样做的目的是为了防止误判，毕竟故障转移的开销还是比较大的，这也是为什么 Redis 官方推荐部署多个 sentinel 节点（哨兵集群）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\redis-master-slave-sentinel-ping-odown.png" alt="redis-master-slave-sentinel-ping-odown.png" title>                </div>                <div class="image-caption">redis-master-slave-sentinel-ping-odown.png</div>            </figure><p>随后， sentinel 中会有一个 Leader 的角色来负责故障转移，也就是自动地从 slave 中选出一个新的 master 并执行完相关的一些工作(比如通知 slave 新的 master 连接信息，让它们执行 replicaof 成为新的 master 的 slave)。</p><p>如果没有足够数量的 sentinel 节点认定 master 已经下线的话，当 master 能对 sentinel 的 PING 命令进行有效回复之后，master 也就不再被认定为主观下线，回归正常。</p><h4 id="Sentinel-如何选择出新的-master"><a href="#Sentinel-如何选择出新的-master" class="headerlink" title="Sentinel 如何选择出新的 master?"></a>Sentinel 如何选择出新的 master?</h4><p>slave 必须是在线状态才能参加新的 master 的选举，筛选出所有在线的 slave 之后，通过下面 3 个维度进行最后的筛选（优先级依次降低）：</p><ol><li><strong>slave 优先级 ：</strong>可以通过 slave-priority 手动设置 slave 的优先级，优先级越高得分越高，优先级最高的直接成为新的 master。如果没有优先级最高的，再判断复制进度。</li><li><strong>复制进度 ：</strong>Sentinel 总是希望选择出数据最完整（与旧 master 数据最接近）也就是复制进度最快的 slave 被提升为新的 master，复制进度越快得分也就越高。</li><li><strong>runid(运行 id) ：</strong>通常经过前面两轮筛选已经成果选出来了新的 master，万一真有多个 slave 的优先级和复制进度一样的话，那就 runid 小的成为新的 master，每个 redis 节点启动时都有一个 40 字节随机字符串作为运行 id。</li></ol><h4 id="如何从-Sentinel-集群中选择出-Leader-？"><a href="#如何从-Sentinel-集群中选择出-Leader-？" class="headerlink" title="如何从 Sentinel 集群中选择出 Leader ？"></a>如何从 Sentinel 集群中选择出 Leader ？</h4><p>我们前面说了，当 sentinel 集群确认有 master 客观下线了，就会开始故障转移流程，故障转移流程的第一步就是在 sentinel 集群选择一个 leader，让 leader 来负责完成故障转移。</p><p><strong>如何选择出 Leader 角色呢？</strong></p><p>这就需要用到分布式领域的 <strong>共识算法</strong> 了。简单来说，共识算法就是让分布式系统中的节点就一个问题达成共识。在 sentinel 选举 leader 这个场景下，这些 sentinel 要达成的共识就是谁才是 leader 。</p><p>大部分共识算法都是基于 Paxos 算法改进而来，在 sentinel 选举 leader 这个场景下使用的是 <a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/raft-algorithm.html" target="_blank" rel="noopener">Raft 算法</a>。这是一个比 Paxos 算法更易理解和实现的共识算法—Raft 算法。更具体点来说，Raft 是 Multi-Paxos 的一个变种，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现。</p><p>对于学有余力并且想要深入了解 Raft 算法实践以及 sentinel 选举 leader 的详细过程的同学，推荐阅读下面这两篇文章：</p><ul><li><a href="https://javaguide.cn/distributed-system/theorem&algorithm&protocol/raft-algorithm.html" target="_blank" rel="noopener">Raft 算法详解</a></li><li><a href="https://cloud.tencent.com/developer/article/1021467" target="_blank" rel="noopener">Raft 协议实战之 Redis Sentinel 的选举 Leader 源码解析</a></li></ul><h4 id="Sentinel-可以防止脑裂吗？"><a href="#Sentinel-可以防止脑裂吗？" class="headerlink" title="Sentinel 可以防止脑裂吗？"></a>Sentinel 可以防止脑裂吗？</h4><p>还是上面的例子，如果 M1 和 R2、R3 之间的网络被隔离，也就是发生了脑裂，M1 和 R2 、 R3 隔离在了两个不同的网络分区中。这意味着，R2 或者 R3 其中一个会被选为 master，这里假设为 R2。</p><p>但是！这样会出现问题了！！</p><p>如果客户端 C1 是和 M1 在一个网络分区的话，从网络被隔离到网络分区恢复这段时间，C1 写入 M1 的数据都会丢失，并且，C1 读取的可能也是过时的数据。这是因为当网络分区恢复之后，M1 将会成为 slave 节点。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">         +<span class="comment">----+</span></span><br><span class="line">         | M1 |</span><br><span class="line">         | S1 | &lt;- C1 (writes will be lost)</span><br><span class="line">         +<span class="comment">----+</span></span><br><span class="line">            |</span><br><span class="line">            /</span><br><span class="line">            /</span><br><span class="line">+<span class="comment">------+    |    +----+</span></span><br><span class="line">| [M2] |<span class="comment">----+----| R3 |</span></span><br><span class="line">| S2   |         | S3 |</span><br><span class="line">+<span class="comment">------+         +----+</span></span><br></pre></td></tr></table></figure><p>想要解决这个问题的话也不难，对 Redis 主从复制进行配置即可。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">min</span>-replicas-to-<span class="built_in">write</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">min</span>-replicas-<span class="built_in">max</span>-lag <span class="number">10</span></span><br></pre></td></tr></table></figure><p>下面对这两个配置进行解释：</p><ul><li><strong>min-replicas-to-write 1：</strong>用于配置写 master 至少写入的 slave 数量，设置为 0 表示关闭该功能。3 个节点的情况下，可以配置为 1 ，表示 master 必须写入至少 1 个 slave ，否则就停止接受新的写入命令请求。</li><li><strong>min-replicas-max-lag 10 ：</strong>用于配置 master 多长时间（秒）无法得到从节点的响应，就认为这个节点失联。我们这里配置的是 10 秒，也就是说 master 10 秒都得不到一个从节点的响应，就会认为这个从节点失联，停止接受新的写入命令请求。</li></ul><p>不过，这样配置会降低 Redis 服务的整体可用性，如果 2 个 slave 都挂掉，master 将会停止接受新的写入命令请求。</p><h3 id="Redis-Cluster：缓存的数据量太大怎么办？"><a href="#Redis-Cluster：缓存的数据量太大怎么办？" class="headerlink" title="Redis Cluster：缓存的数据量太大怎么办？"></a><strong>Redis Cluster：缓存的数据量太大怎么办？</strong></h3><p>来来来！一起来盘盘 Redis Cluster 常见的问题。如果你的项目用到了 Redis 的话（大部分人的项目都用到了 Redis 来做分布式缓存），为了能比别人更有亮点，Redis Cluster 是一个不错的选择。</p><p>这篇文章原本写了接近 8000 字，有点写嗨了，后面删减到了现在的 5000+ 字。为了帮助理解，我手绘了很多张图解，尽可能用大白话的语言来讲。</p><p>建议带着下面这些重要的问题（面试常问）阅读：</p><ul><li>为什么需要 Redis Cluster？解决了什么问题？有什么优势？</li><li>Redis Cluster 是如何分片的？</li><li>为什么 Redis Cluster 的哈希槽是 16384 个?</li><li>如何确定给定 key 的应该分布到哪个哈希槽中？</li><li>Redis Cluster 支持重新分配哈希槽吗？</li><li>Redis Cluster 扩容缩容期间可以提供服务吗？</li><li>Redis Cluster 中的节点是怎么进行通信的？</li></ul><h4 id="为什么需要-Redis-Cluster？"><a href="#为什么需要-Redis-Cluster？" class="headerlink" title="为什么需要 Redis Cluster？"></a>为什么需要 Redis Cluster？</h4><p>高并发场景下，使用 Redis 主要会遇到的两个问题：</p><ol><li><strong>缓存的数据量太大 ：</strong>实际缓存的数据量可以达到几十 G，甚至是成百上千 G；</li><li><strong>并发量要求太大 ：</strong>虽然 Redis 号称单机可以支持 10w 并发，但实际项目中，不可靠因素太多，就比如一些复杂的写/读操作就可能会让这个并发量大打折扣。而且，就算真的可以实际支持 10w 并发，达到瓶颈了，可能也没办法满足系统的实际需求。</li></ol><p>主从复制和 Redis Sentinel 这两种方案本质都是通过增加主库（master）的副本（slave）数量的方式来提高 Redis 服务的整体可用性和读吞吐量，都不支持横向扩展来缓解写压力以及解决缓存数据量过大的问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f682fc80-930c-4e35-978b-496b856d790b.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>对于这两种方案来说，如果写压力太大或者缓存数据量太大的话，我们可以考虑提高服务器硬件的配置。不过，提高硬件配置成本太高，能力有限，无法动态扩容缩容，局限性太大。从本质上来说，靠堆硬件配置的方式并没有实质性地解决问题，依然无法满足高并发场景下分布式缓存的要求。</p><p>通常情况下，更建议使用 <strong>Redis 切片集群</strong> 这种方案，更能满足高并发场景下分布式缓存的要求。</p><p>简单来说，<strong>Redis 切片集群</strong> 就是部署多台 Redis 主节点（master），这些节点之间平等，并没有主从之说，同时对外提供读/写服务。缓存的数据库相对均匀地分布在这些 Redis 实例上，客户端的请求通过路由规则转发到目标 master 上。</p><p>为了保障集群整体的高可用，我们需要保证集群中每一个 master 的高可用，可以通过主从复制给每个 master 配置一个或者多个从节点（slave）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\bd28bbbd-0ed4-46e6-ba94-aba9c730934d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>Redis 切片集群对于横向扩展非常友好，只需要增加 Redis 节点到集群中即可。</strong></p><p>在 Redis 3.0 之前，我们通常使用的是 <a href="https://github.com/twitter/twemproxy" target="_blank" rel="noopener">Twemproxy</a>、<a href="https://github.com/CodisLabs/codis" target="_blank" rel="noopener">Codis</a> 这类开源分片集群方案。Twemproxy、Codis 就相当于是上面的 Proxy 层，负责维护路由规则，实现负载均衡。</p><p>不过，Twemproxy、Codis 虽然未被淘汰，但官方已经没有继续维护了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\de254bdb-ab83-44f1-aff5-f5267f19a444.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>到了 Redis 3.0 的时候，Redis 官方推出了分片集群解决方案 <a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener">Redis Cluster</a> 。经过多个版本的持续完善，Redis Cluster 成为 Redis 切片集群的首选方案，满足绝大部分高并发业务场景需求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5c60bf36-e37b-4136-8986-584a88d8f17f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Redis Cluster 通过 <strong>分片（Sharding）</strong> 来进行数据管理，提供 <strong>主从复制（Master-Slave Replication）</strong>、<strong>故障转移（Failover）</strong> 等开箱即用的功能，可以非常方便地帮助我们解决 Redis 大数据量缓存以及 Redis 服务高可用的问题。</p><p>Redis Cluster 这种方案可以很方便地进行 <strong>横向拓展（Scale Out）</strong>，内置了开箱即用的解决方案。当 Redis Cluster 的处理能力达到瓶颈无法满足系统要求的时候，直接动态添加 Redis 节点到集群中即可。根据官方文档中的介绍，Redis Cluster 支持扩展到 1000 个节点。反之，当 Redis Cluster 的处理能力远远满足系统要求，同样可以动态删除集群中 Redis 节点，节省资源。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\bef6547a-7325-4cdc-8fa5-b3db66826be2.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>可以说，<strong>Redis Cluster 的动态扩容和缩容是其最大的优势</strong>。</p><p>虽说 Redis Cluster 可以扩展到 1000 个节点，但强烈不推荐这样做，应尽量避免集群中的节点过多。这是因为 Redis Cluster 中的各个节点基于 Gossip 协议 来进行通信共享信息，当节点过多时，Gossip 协议的效率会显著下降，通信成本剧增。</p><p>最后，总结一下 Redis Cluster 的主要优势：</p><ul><li>可以横向扩展缓解写压力和存储压力，支持动态扩容和缩容；</li><li>具备主从复制、故障转移（内置了 Sentinel 机制，无需单独部署 Sentinel 集群）等开箱即用的功能。</li></ul><h4 id="一个最基本的-Redis-Cluster-架构是怎样的？"><a href="#一个最基本的-Redis-Cluster-架构是怎样的？" class="headerlink" title="一个最基本的 Redis Cluster 架构是怎样的？"></a>一个最基本的 Redis Cluster 架构是怎样的？</h4><p>为了保证高可用，Redis Cluster 至少需要 3 个 master 以及 3 个 slave，也就是说每个 master 必须有 1 个 slave。master 和 slave 之间做主从复制，slave 会实时同步 master 上的数据。</p><p>不同于普通的 Redis 主从架构，这里的 slave 不对外提供读服务，主要用来保障 master 的高可用，当 master 出现故障的时候替代它。</p><p>如果 master 只有一个 slave 的话，master 宕机之后就直接使用这个 slave 替代 master 继续提供服务。假设 master1 出现故障，slave1 会直接替代 master1，保证 Redis Cluster 的高可用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\7fefb5f3-1978-432b-9a6b-3e1608d033df.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果 master 有多个 slave 的话，Redis Cluster 中的其他节点会从这个 master 的所有 slave 中选出一个替代 master 继续提供服务。Redis Cluster 总是希望数据最完整的 slave 被提升为新的 master。</p><p>Redis Cluster 是去中心化的（各个节点基于 Gossip 进行通信），任何一个 master 出现故障，其它的 master 节点不受影响，因为 key 找的是哈希槽而不是 Redis 节点。不过，Redis Cluster 至少要保证宕机的 master 有一个 slave 可用。</p><p>如果宕机的 master 无 slave 的话，为了保障集群的完整性，保证所有的哈希槽都指派给了可用的 master ，整个集群将不可用。这种情况下，还是想让集群保持可用的话，可以将cluster-require-full-coverage 这个参数设置成 no，cluster-require-full-coverage 表示需要 16384 个 slot 都正常被分配的时候 Redis Cluster 才可以对外提供服务。</p><p>如果我们想要添加新的节点比如 master4、master5 进入 Redis Cluster 也非常方便，只需要重新分配哈希槽即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d6eb12c9-d6a9-4f7b-b0b7-158b0d735042.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果我们想要移除某个 master 节点的话，需要先将该节点的哈希槽移动到其他节点上，这样才可以进行删除，不然会报错。</p><h4 id="Redis-Cluster-是如何分片的？"><a href="#Redis-Cluster-是如何分片的？" class="headerlink" title="Redis Cluster 是如何分片的？"></a><strong>Redis Cluster 是如何分片的？</strong></h4><blockquote><p>类似的问题：</p><ul><li>Redis Cluster 中的数据是如何分布的？</li><li>如何确定给定 key 的应该分布到哪个哈希槽中？</li></ul></blockquote><p>Redis Cluster 并没有使用一致性哈希，采用的是 哈希槽分区 ，每一个键值对都属于一个 hash slot（哈希槽） 。</p><p>Redis Cluster 通常有 16384 个哈希槽 ，要计算给定 key 应该分布到哪个哈希槽中，我们只需要先对每个 key 计算 CRC-16（XMODEM） 校验码，然后再对这个校验码对 16384(哈希槽的总数) 取模，得到的值即是 key 对应的哈希槽。</p><p>哈希槽的计算公式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HASH_SLOT = CRC16(key) mod NUMER_OF_SLOTS</span><br></pre></td></tr></table></figure><p>创建并初始化 Redis Cluster 的时候，Redis 会自动平均分配这 16384 个哈希槽到各个节点，不需要我们手动分配。如果你想自己手动调整的话，Redis Cluster 也内置了相关的命令比如<code>ADDSLOTS、ADDSLOTSRANGE</code>（后面会详细介绍到重新分配哈希槽相关的命令）。</p><p>假设集群有 3 个 Redis 节点组成，每个节点负责整个集群的一部分数据，哈希槽可能是这样分配的（这里只是演示，实际效果可能会有差异）：</p><ul><li>Node 1 ： 0 - 5500 的 hash slots</li><li>Node 2 ： 5501 - 11000 的 hash slots</li><li>Node 3 ： 11001 - 16383 的 hash slots</li></ul><p>在任意一个 master 节点上执行 CLUSTER SLOTS命令即可返回哈希槽和节点的映射关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7000&gt;&gt; CLUSTER SLOTS</span><br><span class="line"><span class="comment"># 哈希槽的范围</span></span><br><span class="line">1) 1) (<span class="built_in">integer</span>) 0</span><br><span class="line">   2) (<span class="built_in">integer</span>) 5500</span><br><span class="line">   <span class="comment"># master 的 ip 和端口号</span></span><br><span class="line">   3) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 7002</span><br><span class="line">   <span class="comment"># slave 的 ip 和端口号</span></span><br><span class="line">   4) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 8002</span><br><span class="line">2) 1) (<span class="built_in">integer</span>) 11001</span><br><span class="line">   2) (<span class="built_in">integer</span>) 16383</span><br><span class="line">   3) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 7000</span><br><span class="line">   4) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 8000</span><br><span class="line">3) 1) (<span class="built_in">integer</span>) 5501</span><br><span class="line">   2) (<span class="built_in">integer</span>) 11000</span><br><span class="line">   3) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 7001</span><br><span class="line">   4) 1) <span class="string">"127.0.0.1"</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 8001</span><br></pre></td></tr></table></figure><p>客户端连接 Redis Cluster 中任意一个 master 节点即可访问 Redis Cluster 的数据，当客户端发送命令请求的时候，需要先根据 key 通过上面的计算公示找到的对应的哈希槽，然后再查询哈希槽和节点的映射关系，即可找到目标节点。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\06f32493-52dc-4c53-8522-fb98e72da782.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果哈希槽确实是当前节点负责，那就直接响应客户端的请求返回结果，如果不由当前节点负责，就会返回 -MOVED 重定向错误，告知客户端当前哈希槽是由哪个节点负责，客户端向目标节点发送请求并更新缓存的哈希槽分配信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdatabase%2Fredis%2Fredis-cluster%2Fredis-cluster-3-find-hash-slot.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这个时候你可能就会疑问：<strong>为什么还会存在找错节点的情况呢？根据公式计算难道还会出错？</strong></p><p>这是因为 Redis Cluster 内部可能会重新分配哈希槽比如扩容缩容的时候（后文中有详细介绍到 Redis Cluster 的扩容和缩容问题），这就可能会导致客户端缓存的哈希槽分配信息会有误。</p><p>从上面的介绍中，我们可以简单总结出 Redis Cluster 哈希槽分区机制的优点：<strong>解耦了数据和节点之间的关系，提升了集群的横向扩展性和容错性。</strong></p><h4 id="为什么-Redis-Cluster-的哈希槽是-16384-个"><a href="#为什么-Redis-Cluster-的哈希槽是-16384-个" class="headerlink" title="为什么 Redis Cluster 的哈希槽是 16384 个?"></a>为什么 Redis Cluster 的哈希槽是 16384 个?</h4><p>CRC16 算法产生的校验码有 16 位，理论上可以产生 65536（2^16，0 ~ 65535）个值。为什么 Redis Cluster 的哈希槽偏偏选择的是 16384（2^14）个呢？</p><p>2015 年的时候，在 Redis 项目的 issues 区，已经有人提了类似的问题，地址：<a href="https://github.com/redis/redis/issues/2576。Redis" target="_blank" rel="noopener">https://github.com/redis/redis/issues/2576。Redis</a> 作者 antirez 巨佬本人专门对这个问题进行了回复。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image-20221017215237019.png" alt="image-20221017215237019" title>                </div>                <div class="image-caption">image-20221017215237019</div>            </figure><p>antirez 认为哈希槽是 16384（2 的 14 次方） 个的原因是：</p><ul><li>正常的心跳包会携带一个节点的完整配置，它会以幂等的方式更新旧的配置，这意味着心跳包会附带当前节点的负责的哈希槽的信息。假设哈希槽采用 16384 ,则占空间 2k(16384/8)。假设哈希槽采用 65536， 则占空间 8k(65536/8)，这是令人难以接受的内存占用。</li><li>由于其他设计上的权衡，Redis Cluster 不太可能扩展到超过 1000 个主节点。</li></ul><p>也就是说，65536 个固然可以确保每个主节点有足够的哈希槽，但其占用的空间太大。而且，Redis Cluster 的主节点通常不会扩展太多，16384 个哈希槽完全足够用了。</p><p><code>cluster.h</code>文件中定义了消息结构<code>clusterMsg</code>（源码地址：<a href="https://github.com/redis/redis/blob/7.0/src/cluster.h）" target="_blank" rel="noopener">https://github.com/redis/redis/blob/7.0/src/cluster.h）</a> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">// 省略部分字段</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// 本节点负责的哈希槽信息,16384/8 个 char 数组，一共为16384bit</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> myslots[CLUSTER_SLOTS/<span class="number">8</span>];</span><br><span class="line">    <span class="comment">// 集群的状态</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state;</span><br><span class="line">    <span class="comment">// 消息的内容</span></span><br><span class="line">    <span class="keyword">union</span> clusterMsgData data;</span><br><span class="line">&#125; clusterMsg;</span><br></pre></td></tr></table></figure><p><code>myslots</code>字段用于存储哈希槽信息， 属于无符号类型的 char 数组，数组长度为 16384/8 = 2048。C 语言中的 char 只占用一个字节，而 Java 语言中 char 占用两个字节，小伙伴们不要搞混了。</p><p>这里实际就是通过 bitmap 这种数据结构维护的哈希槽信息，每一个 bit 代表一个哈希槽，每个 bit 只能存储 0/1 。如果该位为 1，表示这个哈希槽是属于这个节点。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cb3b3001-6cd6-4bfc-b46e-16feb5258b6c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>消息传输过程中，会对 myslots 进行压缩，bitmap 的填充率越低，压缩率越高。bitmap 的填充率的值是 <strong>哈希槽总数/节点数</strong> ，如果哈希槽总数太大的话，bitmap 的填充率的值也会比较大。</p><p>最后，总结一下 Redis Cluster 的哈希槽的数量选择 16384 而不是 65536 的主要原因：</p><ul><li>哈希槽太大会导致心跳包太大，消耗太多带宽；</li><li>哈希槽总数越少，对存储哈希槽信息的 bitmap 压缩效果越好；</li><li>Redis Cluster 的主节点通常不会扩展太多，16384 个哈希槽已经足够用了。</li></ul><p>Redis Cluster 如何重新分配哈希槽？</p><p>如果你想自己手动调整的话，Redis Cluster 也内置了相关的命令：</p><ul><li>CLUSTER ADDSLOTS slot [slot …] : 把一组 hash slots 分配给接收命令的节点，时间复杂度为 O(N)，其中 N 是 hash slot 的总数；</li><li>CLUSTER ADDSLOTSRANGE start-slot end-slot [start-slot end-slot …] （Redis 7.0 后新加的命令）： 把指定范围的 hash slots 分配给接收命令的节点，类似于 ADDSLOTS 命令，时间复杂度为 O(N) 其中 N 是起始 hash slot 和结束 hash slot 之间的 hash slot 的总数。</li><li>CLUSTER DELSLOTS slot [slot …] : 从接收命令的节点中删除一组 hash slots；</li><li>CLUSTER FLUSHSLOTS ：移除接受命令的节点中的所有 hash slot；</li><li>CLUSTER SETSLOT slot MIGRATING node-id： 迁移接受命令的节点的指定 hash slot 到目标节点（node_id 指定）中；</li><li>CLUSTER SETSLOT slot IMPORTING node-id： 将目标节点（node_id 指定）中的指定 hash slot 迁移到接受命令的节点中；</li><li>……</li></ul><p>简单演示一下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 slot 1 2 3 4 5 分配给节点</span></span><br><span class="line">&gt; CLUSTER ADDSLOTS 1 2 3 4 5</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 可以使用 ADDSLOTSRANGE 命令完成一样的效果</span></span><br><span class="line">&gt; CLUSTER ADDSLOTSRANGE 1 5</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 从接收命令的节点中删除 hash slot 1000 1001 1002</span></span><br><span class="line">&gt; CLUSTER DELSLOTS 1000 1001 1002</span><br><span class="line"><span class="comment"># 迁移接受命令的节点的 hash slot 1005 到 node_id(一长串字符串)对应的节点中</span></span><br><span class="line">&gt; CLUSTER SETSLOT 1005 MIGRATING node_id(一长串字符串)</span><br><span class="line"><span class="comment"># 将node_id(一长串字符串)对应的节点中的 hash slot 1005 迁移到接受命令的节点中</span></span><br><span class="line">&gt; CLUSTER SETSLOT 1005 IMPORTING 92fd7c2a7b7b8933d1019e72a852f621f6b4faff</span><br></pre></td></tr></table></figure><h4 id="Redis-Cluster-扩容缩容期间可以提供服务吗？"><a href="#Redis-Cluster-扩容缩容期间可以提供服务吗？" class="headerlink" title="Redis Cluster 扩容缩容期间可以提供服务吗？"></a><strong>Redis Cluster 扩容缩容期间可以提供服务吗？</strong></h4><blockquote><p>类似的问题：</p><ul><li>如果客户端访问的 key 所属的槽正在迁移怎么办？</li><li>如何确定给定 key 的应该分布到哪个哈希槽中？</li></ul></blockquote><p><strong>Redis Cluster 扩容和缩容本质是进行重新分片，动态迁移哈希槽。</strong></p><p>为了保证 Redis Cluster 在扩容和缩容期间依然能够对外正常提供服务，Redis Cluster 提供了重定向机制，两种不同的类型：</p><ul><li>ASK 重定向</li><li>MOVED 重定向</li></ul><p>从客户端的角度来看，ASK 重定向是下面这样的：</p><ol><li>客户端发送请求命令，如果请求的 key 对应的哈希槽还在当前节点的话，就直接响应客户端的请求。</li><li>如果客户端请求的 key 对应的哈希槽当前正在迁移至新的节点，就会返回 -ASK 重定向错误，告知客户端要将请求发送到哈希槽被迁移到的目标节点。</li><li>客户端收到 -ASK 重定向错误后，将会临时（一次性）重定向，自动向目标节点发送一条 <a href="https://redis.io/commands/asking/" target="_blank" rel="noopener">ASKING</a> 命令。也就是说，接收到 ASKING 命令的节点会强制执行一次请求，下次再来需要重新提前发送 ASKING 命令。</li><li>客户端发送真正的请求命令。</li><li>ASK 重定向并不会同步更新客户端缓存的哈希槽分配信息，也就是说，客户端对正在迁移的相同哈希槽的请求依然会发送到原节点而不是目标节点。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ca358827-2d14-40cd-ab6a-64ec1ea21428.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果客户端请求的 key 对应的哈希槽应该迁移完成的话，就会返回 -MOVED 重定向错误，告知客户端当前哈希槽是由哪个节点负责，客户端向目标节点发送请求并更新缓存的哈希槽分配信息。</p><h4 id="Redis-Cluster-中的节点是怎么进行通信的？"><a href="#Redis-Cluster-中的节点是怎么进行通信的？" class="headerlink" title="Redis Cluster 中的节点是怎么进行通信的？"></a>Redis Cluster 中的节点是怎么进行通信的？</h4><p>Redis Cluster 是一个典型的分布式系统，分布式系统中的各个节点需要互相通信。既然要相互通信就要遵循一致的通信协议，Redis Cluster 中的各个节点基于 <strong>Gossip 协议</strong> 来进行通信共享信息，每个 Redis 节点都维护了一份集群的状态信息。</p><p>Redis Cluster 的节点之间会相互发送多种 Gossip 消息：</p><ul><li>MEET ：在 Redis Cluster 中的某个 Redis 节点上执行 CLUSTER MEET ip port 命令，可以向指定的 Redis 节点发送一条 MEET 信息，用于将其添加进 Redis Cluster 成为新的 Redis 节点。</li><li>PING/PONG ：Redis Cluster 中的节点都会定时地向其他节点发送 PING 消息，来交换各个节点状态信息，检查各个节点状态，包括在线状态、疑似下线状态 PFAIL 和已下线状态 FAIL。</li><li>FAIL ：Redis Cluster 中的节点 A 发现 B 节点 PFAIL ，并且在下线报告的有效期限内集群中半数以上的节点将 B 节点标记为 PFAIL，节点 A 就会向集群广播一条 FAIL 消息，通知其他节点将故障节点 B 标记为 FAIL 。</li><li>……</li></ul><p>有了 Redis Cluster 之后，不需要专门部署 Sentinel 集群服务了。Redis Cluster 相当于是内置了 Sentinel 机制，Redis Cluster 内部的各个 Redis 节点通过 Gossip 协议互相探测健康状态，在故障时可以自动切换。</p><p><code>cluster.h</code> 文件中定义了所有的消息类型（源码地址：<a href="https://github.com/redis/redis/blob/7.0/src/cluster.h）" target="_blank" rel="noopener">https://github.com/redis/redis/blob/7.0/src/cluster.h）</a> 。Redis 3.0 版本的时候只有 9 种消息类型，到了 7.0 版本的时候已经有 11 种消息类型了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意，PING 、 PONG 和 MEET 实际上是同一种消息。</span></span><br><span class="line"><span class="comment">// PONG 是对 PING 的回复，它的实际格式也为 PING 消息，</span></span><br><span class="line"><span class="comment">// 而 MEET 则是一种特殊的 PING 消息，用于强制消息的接收者将消息的发送者添加到集群中（如果节点尚未在节点列表中的话）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_PING 0          <span class="comment">/* Ping 消息 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_PONG 1          <span class="comment">/* Pong 用于回复Ping */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_MEET 2          <span class="comment">/* Meet 请求将某个节点添加到集群中 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_FAIL 3          <span class="comment">/* Fail 将某个节点标记为 FAIL */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_PUBLISH 4       <span class="comment">/* 通过发布与订阅功能广播消息 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST 5 <span class="comment">/* 请求进行故障转移操作，要求消息的接收者通过投票来支持消息的发送者 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK 6     <span class="comment">/* 消息的接收者同意向消息的发送者投票 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_UPDATE 7        <span class="comment">/* slots 已经发生变化，消息发送者要求消息接收者进行相应的更新 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_MFSTART 8       <span class="comment">/* 为了进行手动故障转移，暂停各个客户端 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_MODULE 9        <span class="comment">/* 模块集群API消息 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_PUBLISHSHARD 10 <span class="comment">/* 通过发布与订阅功能广播分片消息 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLUSTERMSG_TYPE_COUNT 11        <span class="comment">/* 消息总数 */</span></span></span><br></pre></td></tr></table></figure><p><code>cluster.h</code> 文件中定义了消息结构 <code>clusterMsg</code>（源码地址：<a href="https://github.com/redis/redis/blob/7.0/src/cluster.h）" target="_blank" rel="noopener">https://github.com/redis/redis/blob/7.0/src/cluster.h）</a> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> sig[<span class="number">4</span>];        <span class="comment">/* 标志位，"RCmb" (Redis Cluster message bus). */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> totlen;    <span class="comment">/* 消息总长度 */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> ver;       <span class="comment">/* 消息协议版本 */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> port;      <span class="comment">/* 端口 */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> type;      <span class="comment">/* 消息类型 */</span></span><br><span class="line">    <span class="keyword">char</span> sender[CLUSTER_NAMELEN];  <span class="comment">/* 消息发送节点的名字（ID） */</span></span><br><span class="line">    <span class="comment">// 本节点负责的哈希槽信息,16384/8 个 char 数组，一共为16384bit</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> myslots[CLUSTER_SLOTS/<span class="number">8</span>];</span><br><span class="line">    <span class="comment">// 如果消息发送者是一个从节点，那么这里记录的是消息发送者正在复制的主节点的名字</span></span><br><span class="line">    <span class="comment">// 如果消息发送者是一个主节点，那么这里记录的是 REDIS_NODE_NULL_NAME</span></span><br><span class="line">    <span class="comment">// （一个 40 字节长，值全为 0 的字节数组）</span></span><br><span class="line">    <span class="keyword">char</span> slaveof[CLUSTER_NAMELEN];</span><br><span class="line">    <span class="comment">// 省略部分属性</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// 集群的状态</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state;</span><br><span class="line">    <span class="comment">// 消息的内容</span></span><br><span class="line">    <span class="keyword">union</span> clusterMsgData data;</span><br><span class="line">&#125; clusterMsg;</span><br></pre></td></tr></table></figure><p><code>clusterMsgData</code>是一个联合体(union）,可以为 PING，MEET，PONG 、FAIL 等消息类型。当消息为 PING、MEET 和 PONG 类型时，都是 ping 字段是被赋值的，这也就解释了为什么我们上面说 PING 、 PONG 和 MEET 实际上是同一种消息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> clusterMsgData &#123;</span><br><span class="line">    <span class="comment">/* PING, MEET and PONG */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="comment">/* Array of N clusterMsgDataGossip structures */</span></span><br><span class="line">        clusterMsgDataGossip gossip[<span class="number">1</span>];</span><br><span class="line">    &#125; ping;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FAIL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        clusterMsgDataFail about;</span><br><span class="line">    &#125; fail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* PUBLISH */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        clusterMsgDataPublish msg;</span><br><span class="line">    &#125; publish;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* UPDATE */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        clusterMsgDataUpdate nodecfg;</span><br><span class="line">    &#125; update;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* MODULE */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        clusterMsgModule msg;</span><br><span class="line">    &#125; <span class="keyword">module</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h4><ul><li>Redis Cluster 官方规范：<a href="https://redis.io/docs/reference/cluster-spec/" target="_blank" rel="noopener">https://redis.io/docs/reference/cluster-spec/</a></li><li>Redis Cluster 官方教程：<a href="https://redis.io/topics/cluster-tutorial" target="_blank" rel="noopener">https://redis.io/topics/cluster-tutorial</a></li><li>Redis Cluster 官方公开 PDF 讲义：<a href="https://redis.io/presentation/Redis_Cluster.pdf" target="_blank" rel="noopener">https://redis.io/presentation/Redis_Cluster.pdf</a></li><li>Redis 集群详述：<a href="https://juejin.cn/post/7016865316240097287" target="_blank" rel="noopener">https://juejin.cn/post/7016865316240097287</a></li><li>Redis 专题：了解 Redis 集群，这篇就够了：<a href="https://juejin.cn/post/6949832776224866340" target="_blank" rel="noopener">https://juejin.cn/post/6949832776224866340</a></li><li>Redis Notes - Cluster mode：<a href="https://www.stevenchang.tw/blog/2020/12/08/redis-notes-cluster-mode" target="_blank" rel="noopener">https://www.stevenchang.tw/blog/2020/12/08/redis-notes-cluster-mode</a></li><li>带有详细注释的 Redis 3.0 代码（开源项目）：<a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="noopener">https://github.com/huangz1990/redis-3.0-annotated</a></li></ul><h3 id="Elasticsearch-常见面试题总结"><a href="#Elasticsearch-常见面试题总结" class="headerlink" title="Elasticsearch 常见面试题总结"></a><strong>Elasticsearch 常见面试题总结</strong></h3><p>大部分项目都会用到 Elasticsearch ，面试难免会被问到。于是，利用春节时间简单总结了一下 Elasticsearch 常见问题，希望对球友们有帮助。</p><p>少部分内容参考了 Elasticsearch 官方文档的描述，在此说明一下。</p><h4 id="Elasticsearch-基础"><a href="#Elasticsearch-基础" class="headerlink" title="Elasticsearch 基础"></a><strong>Elasticsearch 基础</strong></h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210201160425128.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="Elasticsearch-是什么？"><a href="#Elasticsearch-是什么？" class="headerlink" title="Elasticsearch 是什么？"></a>Elasticsearch 是什么？</h5><p>ElasticSearch 是一个开源的 分布式、RESTful 搜索和分析引擎，可以用来解决使用数据库进行模糊搜索时存在的性能问题，适用于所有类型的数据，包括文本、数字、地理空间、结构化和非结构化数据。</p><p>ElasticSearch 使用 Java 语言开发，基于 Lucence。ES 早期版本需要 JDK，在 7.X 版本后已经集成了 JDK，已无需第三方依赖。</p><p>Github 地址：<a href="https://github.com/elastic/elasticsearch" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch</a> 。</p><h5 id="Lucene-是什么？"><a href="#Lucene-是什么？" class="headerlink" title="Lucene 是什么？"></a>Lucene 是什么？</h5><p>Lucene 是一个 Java 语言编写的高性能、全功能的文本搜索引擎库，提供强大的索引和搜索功能，以及拼写检查、高亮显示和高级分析功能。</p><p>如果我们直接基于 Lucene 开发，会非常复杂。并且，Lucene 并没有分布式以及高可用的解决方案。像 ElasticSearch 就是基于 Lucene 开发的，封装了许多 Lucene 底层功能，提供了简单易用的 RestFul API 接口和多种语言的客户端，开箱即用，自带分布式以及高可用的解决方案。</p><p>Github 地址：<a href="https://github.com/apache/lucene" target="_blank" rel="noopener">https://github.com/apache/lucene</a></p><h5 id="Elasticsearch-可以帮助我们做什么？"><a href="#Elasticsearch-可以帮助我们做什么？" class="headerlink" title="Elasticsearch 可以帮助我们做什么？"></a>Elasticsearch 可以帮助我们做什么？</h5><p>举几个常见的例子：</p><ul><li><p>实现各种网站的关键词检索功能，比如电商网站的商品检索、维基百科的词条搜索、Github 的项目检索；</p></li><li><p>本地生活类 APP 比如美团基于你的定位实现附近的一些美食或者娱乐项目的推荐；</p></li><li><p>结合 Elasticsearch、Kibana、Beats 和 Logstash 这些 Elastic Stack 的组件实现一个功能完善的日志系统。</p></li><li><p>使用 Elasticsearch 作为地理信息系统 (GIS) 管理、集成和分析空间信息。</p></li><li><p>……</p><p>电商网站检索：</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F699e89ed90febc77dafa5875b0320d2d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>ELK 日志采集系统架构（负责日志的搜索)：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fff75430c69e043a044bef1a355023dfe.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="为什么需要-Elasticsearch？MySQL-不行吗？"><a href="#为什么需要-Elasticsearch？MySQL-不行吗？" class="headerlink" title="为什么需要 Elasticsearch？MySQL 不行吗？"></a>为什么需要 Elasticsearch？MySQL 不行吗？</h5><p>正是谓术业有专攻！Elasticsearch 主要为系统提供搜索功能， MySQL 这类传统关系型数据库主要为系统提供数据存储功能。</p><p>MySQL 虽然也能提供简单的搜索功能，但是搜索并不是它擅长的领域。</p><p>我们可以从下面两个方面来看：</p><p><strong>1)传统关系型数据库的痛点：</strong></p><ul><li>传统关系型数据库(如 MySQL )在大数据量下查询效率低下， 模糊匹配有可能导致全表扫描。</li><li>MySQL 全文索引只支持 CHAR，VARCHAR 或者 TEXT 字段类型，不支持分词器。</li></ul><p><strong>2)Elasticsearch 的优势 ：</strong></p><ul><li>支持多种数据类型，非结构化，数值，地理信息。</li><li>简单的 RESTful API，天生的兼容多语言开发。</li><li>提供更丰富的分词器，支持热点词汇查询。</li><li>近实时查询，Elasticsearch 每隔 1s 把数据存储至系统缓存中，且使用倒排索引提高检索效率。</li><li>支持相关性搜索，可以根据条件对结果进行打分。</li><li>天然分布式存储，使用分片支持更大的数据量。</li></ul><h5 id="Elasticsearch-中的基本概念"><a href="#Elasticsearch-中的基本概念" class="headerlink" title="Elasticsearch 中的基本概念"></a>Elasticsearch 中的基本概念</h5><ul><li><p>Index（索引） ： 作为名词理解的话，索引是一类拥有相似特征的文档的集合比如商品索引、商家索引、订单索引，有点类似于 MySQL 中的数据库表。作为动词理解的话，索引就是将一份文档保存在一个索引中。</p></li><li><p>Document（文档） ：可搜索最小单位，用于存储数据，一般为 JSON 格式。文档由一个或者多个字段(Field)组成，字段类型可以是布尔，数值，字符串、二进制、日期等数据类型。</p></li><li><p>Type（字段类型） : 每个文档在 ES 中都必须设定它的类型。ES 7.0 之前，一个 Index 可以有多个 Type。6.0 开始，Type 已经被 Deprecated。7.0 开始，一个索引只能创建一个 Type ：_doc。8.0 之后，Type 被完全删除，删除的原因看这里：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/removal-of-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/removal-of-types.html</a> 。</p></li><li><p>Mapping（映射） ：定义字段名称、数据类型、优化信息（比如是否索引)、分词器，有点类似于数据库中的表结构定义。一个 Index 对应一个 Mapping。</p></li><li><p>Node（节点） : 相当于一个 ES 实例，多个节点构成一个集群。</p></li><li><p>Cluster（集群） ：多个 ES 节点的集合，用于解决单个节点无法处理的搜索需求和数据存储需求。</p></li><li><p>Shard（分片）: Index（索引）被分为多个碎片存储在不同的 Node 节点上的分片中，以提高性能和吞吐量。</p></li><li><p>Replica（副本） ：Index 副本，每个 Index 有一个或多个副本，以提高拓展功能和吞吐量。</p></li><li><p>DSL(查询语言) ：基于 JSON 的查询语言，类似于 SQL 语句。</p></li></ul><p>MySQL 与 Elasticsearch 的概念简单类比：</p><table><thead><tr><th>MySQL</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>Table（表）</td><td>Index</td></tr><tr><td>Row（行）</td><td>Document</td></tr><tr><td>Column（列）</td><td>Field</td></tr><tr><td>Schema（约束）</td><td>Mapping</td></tr><tr><td>SQL（查询语言）</td><td>DSL</td></tr></tbody></table><h4 id="倒排索引和正排索引"><a href="#倒排索引和正排索引" class="headerlink" title="倒排索引和正排索引"></a><strong>倒排索引和正排索引</strong></h4><h5 id="倒排索引是什么？"><a href="#倒排索引是什么？" class="headerlink" title="倒排索引是什么？"></a><strong>倒排索引是什么？</strong></h5><p><strong>倒排索引</strong> 也被称作反向索引（inverted index），是用于提高数据检索速度的一种数据结构，空间消耗比较大。倒排索引首先将检索文档进行分词得到多个词语/词条，然后将词语和文档 ID 建立关联，从而提高检索效率。</p><blockquote><p>分词就是对一段文本，通过规则或者算法分出多个词，每个词作为搜索的最细粒度一个个单字或者单词。分词的目的主要是为了搜索，尤其在数据量大的情况下，分词的实现可以快速、高效的筛选出相关性高的文档内容。</p></blockquote><p>如下图所示，倒排索引使用 <strong>词语/词条（Term）</strong> 来作为索引关键字，并同时记录了哪些 <strong>文档（Document）</strong> 中有这个词语。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F6a90b193af22b397d3f8ef2b51064e6f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>文档（Document） ：用来搜索的数据，其中的每一条数据就是一个文档。例如一个商品信息、商家信息、一页网页的内容。</li><li>词语/词条（Term） ：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如 ‘’数据库索引可以大幅提高查询速度” 这段话被中文分词器 IK Analyzer 细粒度分词后得到[数据库,索引,可以,大幅,提高,查询,速度]。</li><li>词典（Term Dictionary） ：Term 的集合。</li></ul><p><strong>Lucene 就是基于倒排索引来做的全文检索，并且 ElasticSearch 还对倒排索引做了进一步优化。</strong></p><h5 id="倒排索引的创建和检索流程了解么？"><a href="#倒排索引的创建和检索流程了解么？" class="headerlink" title="倒排索引的创建和检索流程了解么？"></a>倒排索引的创建和检索流程了解么？</h5><p>这里只是简单介绍一下倒排索引的创建和检索流程，实际应用中，远比下面介绍的复杂，不过，大体原理还是一样的。</p><p><strong>倒排索引创建流程：</strong></p><ol><li><p>建立文档列表，每个文档都有一个唯一的文档 ID 与之对应。</p></li><li><p>通过分词器对文档进行分词，生成类似于 &lt;词语，文档ID&gt; 的一组组数据。</p></li><li><p>将词语作为索引关键字，记录下词语和文档的对应关系，也就是哪些文档中包含了该词语。</p></li></ol><p>这里可以记录更多信息比如词语的位置、词语出现的频率，这样可以方便高亮显示以及对搜索结果进行排序（后文会介绍到）。</p><p>Lucene 的倒排索引大致是下面这样的（图源：<a href="https://segmentfault.com/a/1190000037658997）：" target="_blank" rel="noopener">https://segmentfault.com/a/1190000037658997）：</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fbf95cdf34c3dd219e9d7422d74aa20b0.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>倒排索引检索流程：</strong></p><ol><li><p>根据分词查找对应文档 ID</p></li><li><p>根据文档 ID 找到文档</p></li></ol><h5 id="倒排索引由什么组成？"><a href="#倒排索引由什么组成？" class="headerlink" title="倒排索引由什么组成？"></a><strong>倒排索引由什么组成？</strong></h5><ul><li>单词字典 ：用于存储单词列表。一般用 B+Tree 或 Hash 拉链法存储，提高查询效率。</li><li>倒排列表 ：记录单词对应的文档集合。分为： <ul><li>DocID：即文档 id</li><li>TF : 单词出现频率，简称词频</li><li>Position：单词在文档中出现的位置，用于检索</li><li>Offset：偏移量，记录单词开始结束位置，用于高亮显示</li></ul></li></ul><h5 id="正排索引呢？"><a href="#正排索引呢？" class="headerlink" title="正排索引呢？"></a><strong>正排索引呢？</strong></h5><p>不同于倒排索引，正排索引将文档 ID 和分词建立关联。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fd5e0f71bf6b88948365765b3b3887f6c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>根据词语查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词语，查询效率较低。</p><h5 id="倒排索引和正排索引的区别是什么？"><a href="#倒排索引和正排索引的区别是什么？" class="headerlink" title="倒排索引和正排索引的区别是什么？"></a>倒排索引和正排索引的区别是什么？</h5><p><strong>正排索引：</strong></p><ul><li>优点：维护成本低，新增数据的时候，只要在末尾新增一个 ID</li><li>缺点：以 DocID 为索引，查询时需要扫描所有词语，一个一个比较，直至查到关键词，查询效率较低。</li></ul><p><strong>倒排索引：</strong></p><ul><li>优点：建立分词和 DocID 关系，大大提高查询效率</li><li>缺点：建立倒排索引的成本高。并且，维护起来也比较麻烦，因为文档的每次更新都意味着倒排索引的重建。还有一些搜索精度的问题，比如搜索dogs 和 dog 想要相同匹配结果，这时就需要合适的分词器了</li></ul><h5 id="Elasticsearch-可以针对某些地段不做索引吗？"><a href="#Elasticsearch-可以针对某些地段不做索引吗？" class="headerlink" title="Elasticsearch 可以针对某些地段不做索引吗？"></a>Elasticsearch 可以针对某些地段不做索引吗？</h5><p>文档会被序列化为字段组成的 JSON 格式保存在 ES 中。我们可以针对某些地段不做索引。</p><p>这样可以节省存储空间，但是，同时也会让字段无法被搜索。</p><h4 id="分词器-Analyzer"><a href="#分词器-Analyzer" class="headerlink" title="分词器(Analyzer)"></a>分词器(Analyzer)</h4><p>Analyzer 翻译成中文叫做分析器，不过，很多人一般习惯称呼其为分词器。</p><h5 id="分词器有什么用？"><a href="#分词器有什么用？" class="headerlink" title="分词器有什么用？"></a>分词器有什么用？</h5><p>分词器是搜索引擎的一个核心组件，负责对文档内容进行分词(在 ES 里面被称为 <strong>Analysis</strong>)，也就是将一个文档转换成 <strong>单词词典（Term Dictionary）</strong> 。单词词典是由文档中出现过的所有单词构成的字符串集合。为了满足不同的分词需求，分词器有很多种，不同的分词器分词逻辑可能会不一样。</p><h5 id="常用分词器有哪些"><a href="#常用分词器有哪些" class="headerlink" title="常用分词器有哪些?"></a>常用分词器有哪些?</h5><p>非中文分词器：</p><ul><li><p><strong>Standard Analyzer</strong>：标准分词器，也是默认分词器， 英文转换成小写， 中文只支持单字切分。</p></li><li><p><strong>Simple Analyzer</strong>：简单分词器，通过非字母字符来分割文本信息，英文大写转小写，非英文不进行分词。</p></li><li><p><strong>Stop Analyzer</strong> ：在 SimpleAnalyzer 基础上去除 the，a，is 等词，也就是加入了停用词。</p></li><li><p><strong>Whitespace Analyzer</strong> : 空格分词器，通过空格来分割文本信息，非英文不进行分词。</p></li></ul><p>上面这些也都是 ES 内置的分词器，详细介绍请看官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html。" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-analyzers.html。</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F3d900575010cb6c8c743e3a6f7ad01f1.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这个官方文档为每一个分词器都列举了对应的例子帮助理解，比如 Standard Analyzer 的例子是下面这样的。</p><ul><li><p>输入文本内容：<code>&quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</code></p></li><li><p>分词结果：<code>[ the, 2, quick, brown, foxes, jumped, over, the, lazy, dog&#39;s, bone ]</code></p></li></ul><p><strong>中文分词器：</strong></p><ul><li><p><strong>IK Analyzer（推荐）</strong>： 最常用的开源中文分词器，Github 地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik，包括两种分词模式：" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik，包括两种分词模式：</a> </p><ul><li><p><strong>ik_max_word</strong>：细粒度切分模式，会将文本做最细粒度的拆分，尽可能多的拆分出词语 。</p></li><li><p><strong>ik_smart</strong>：智能模式，会做最粗粒度的拆分，已被分出的词语将不会再次被其它词语占有。</p></li></ul></li><li><p><strong>Ansj</strong> ：基于 n-Gram+CRF+HMM 的中文分词的 Java 实现，分词速度达到每秒钟大约 200 万字左右（mac air 下测试），准确率能达到 96%以上。实现了中文分词、中文姓名识别、用户自定义词典、关键字提取、自动摘要、关键字标记等功能。Github 地址：<a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="noopener">https://github.com/NLPchina/ansj_seg</a> 。</p></li><li><p><strong>ICU Analyzer</strong>：提供 Unicode 支持，更好地支持亚洲语言。</p></li><li><p><strong>THULAC（THU Lexical Analyzer for Chinese）</strong> ： 清华大学推出的一套中文词法分析工具包，具有中文分词和词性标注功能。Github 地址：<a href="https://github.com/thunlp/THULAC-Python" target="_blank" rel="noopener">https://github.com/thunlp/THULAC-Python</a> 。</p></li><li><p><strong>Jcseg</strong> ：基于 mmseg 算法的一个轻量级中文分词器，同时集成了关键字提取，关键短语提取，关键句子提取和文章自动摘要等功能。Gitee 地址：<a href="https://gitee.com/lionsoul/jcseg" target="_blank" rel="noopener">https://gitee.com/lionsoul/jcseg</a> 。</p></li></ul><p>IK Analyzer 分词示例：</p><ul><li><p>输入文本内容：<code>&quot;数据库索引可以大幅提高查询速度&quot;</code></p></li><li><p>分词结果： </p><ul><li><p>细粒度切分模式：<code>[数据库,索引,可以,大幅,提高,查询,速度]</code></p></li><li><p>智能模式：<code>[数据库,数据,索引,可以,大幅,提高,查询,速度]</code></p></li></ul></li></ul><p><strong>其他分词器 ：</strong></p><ul><li><p><strong>Keyword Analyzer</strong> ：关键词分词器，输入文本等于输出文本。</p></li><li><p><strong>Fingerprint Analyzer</strong> ：指纹分析仪分词器，通过创建标记进行检测。</p></li></ul><p>上面这两个也是 ES 内置的分词器。</p><p>Keyword Analyzer 分词示例：</p><ul><li><p>输入文本内容：<code>&quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone.&quot;</code></p></li><li><p>分词结果：<code>[ The 2 QUICK Brown-Foxes jumped over the lazy dog&#39;s bone. ]</code></p></li></ul><h5 id="分词器由什么组成？"><a href="#分词器由什么组成？" class="headerlink" title="分词器由什么组成？"></a>分词器由什么组成？</h5><p>分析器由三种组件组成：</p><ul><li><strong>Charater Filters</strong>：处理原始文本，例如去除 HTMl 标签。</li><li><strong>Tokenizer</strong>：按分词器规则切分单词。</li><li><strong>Token Filters</strong>：对切分后的单词加工，包括转小写，切除停用词，添加近义词</li></ul><p>三者顺序：Character Filters —&gt; Tokenizer —&gt; Token Filter</p><p>三者个数：CharFilters（0 个或多个） + Tokenizer(一个) + TokenFilters(0 个或多个)</p><p>下图是默认分词器 Standard Analyzer 的分词流程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fsearch-engine%2Fes%2Fprocess-flow-of-standard-analyzer.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="Elasticsearch-如何基于拼音搜索？"><a href="#Elasticsearch-如何基于拼音搜索？" class="headerlink" title="Elasticsearch 如何基于拼音搜索？"></a>Elasticsearch 如何基于拼音搜索？</h5><p>对于中文内容来说，我们经常需要基于拼音来进行搜索。</p><p><strong>在 Elasticsearch 中如何来实现基于拼音来搜索的呢？</strong> 我们可以使用 <strong>拼音分词器</strong> ，拼音分词器用于汉字和拼音之间的转换，集成了 NLP 工具（<a href="https://github.com/NLPchina/nlp-lang），Github" target="_blank" rel="noopener">https://github.com/NLPchina/nlp-lang），Github</a> 地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin。" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-pinyin。</a></p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h4><h5 id="Elasticsearch-常见的数据类型有哪些？"><a href="#Elasticsearch-常见的数据类型有哪些？" class="headerlink" title="Elasticsearch 常见的数据类型有哪些？"></a>Elasticsearch 常见的数据类型有哪些？</h5><p><strong>常见类型：</strong></p><ul><li><p>关键词：<code>keyword</code> 、<code>constant_keyword</code>，和<code>wildcard</code></p></li><li><p>数值型：<code>long</code>,<code>integer</code>, <code>short</code>, <code>byte</code>, <code>double</code>, <code>float</code>,<code>half_float</code>,<code>scaled_float</code></p></li><li><p>布尔型：<code>boolean</code></p></li><li><p>日期型：<code>date</code>, <code>date_nanos</code></p></li><li><p>二进制：<code>binary</code></p></li></ul><p><strong>结构化数据类型：</strong></p><ul><li><p>范围型：<code>integer_range</code>, <code>float_range</code>,<code>long_range</code>, <code>double_range</code>, <code>date_range</code></p></li><li><p>ip 地址类型 ：<code>ip</code></p></li><li><p>软件版本 ：<code>version</code></p></li></ul><p><strong>文字搜索类型：</strong></p><ul><li><p>非结构化文本 ：<code>text</code></p></li><li><p>包含特殊标记的文本：<code>annotated-text</code></p></li><li><p>自动完成建议：<code>completion</code></p></li></ul><p><strong>对象和关系类型：</strong></p><ul><li><p>嵌套类型： <code>nested</code> 、<code>join</code></p></li><li><p>对象类型 ： <code>object</code>、<code>flattened</code></p></li></ul><p><strong>空间类型：</strong></p><ul><li><p>地理坐标类型 ：<code>geo_point</code></p></li><li><p>地理形状类型 ：<code>geo_shape</code></p></li></ul><p>Elasticsearch 官方文档中有详细介绍到各个数据类型的使用：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html</a> 。</p><h5 id="keyword-和-text-有什么区别？"><a href="#keyword-和-text-有什么区别？" class="headerlink" title="keyword 和 text 有什么区别？"></a><strong>keyword 和 text 有什么区别？</strong></h5><p><code>keyword</code>不走分词器，而 <code>text</code>会走分词器，使用<code>keyword</code> 关键字查询效率更高，一般在<code>fields</code>中定义<code>keyword</code>类型字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"name" : &#123;</span><br><span class="line">          "type" : "text",</span><br><span class="line">          "fields" : &#123;</span><br><span class="line">            "keyword" : &#123;</span><br><span class="line">              "type" : "keyword"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="Elasticsearch-是否有数组类型？"><a href="#Elasticsearch-是否有数组类型？" class="headerlink" title="Elasticsearch 是否有数组类型？"></a>Elasticsearch 是否有数组类型？</h5><p>在 Elasticsearch 中，没有专门的数组数据类型。默认情况下，任何字段都可以包含零个或多个值，但是，数组中的所有值必须具有相同的数据类型。</p><p>Elasticsearch 怎么修改索引字段类型？</p><h5 id="可以在-Mapping-中直接修改字段类型吗？"><a href="#可以在-Mapping-中直接修改字段类型吗？" class="headerlink" title="可以在 Mapping 中直接修改字段类型吗？"></a>可以在 Mapping 中直接修改字段类型吗？</h5><p>不可以！Elasticsearch 中的 Mapping 有点类似于数据库中的表结构定义，Mapping 中的字段类型只能增加不能修改，否则只能<code>reindex</code> 重新索引或者重新进行数据建模并导入数据。</p><h5 id="什么是-Nested-数据类型？有什么用？"><a href="#什么是-Nested-数据类型？有什么用？" class="headerlink" title="什么是 Nested 数据类型？有什么用？"></a>什么是 Nested 数据类型？有什么用？</h5><p>Elasticsearch 官方文档是这样介绍 Nested 数据类型的：</p><blockquote><p>The<code>nested</code> type is a specialised version of the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/object.html" target="_blank" rel="noopener">object</a> data type that allows arrays of objects to be indexed in a way that they can be queried independently of each other.</p><p>Nested （嵌套）类型是对象数据类型的特殊版本，它允许对象数组以一种可以相互独立查询的方式进行索引。</p></blockquote><p>Nested 数据类型可以避免 <strong>数组扁平化处理</strong>，多个数组的字段会做一个笛卡尔积，导致查询出不存在的数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 会导致查询John White也会匹配，将类型改为nested问题解决</span><br><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"group"</span> : <span class="string">"fans"</span>,</span><br><span class="line">  <span class="attr">"user"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"first"</span> : <span class="string">"John"</span>,</span><br><span class="line">      <span class="attr">"last"</span> :  <span class="string">"Smith"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"first"</span> : <span class="string">"Alice"</span>,</span><br><span class="line">      <span class="attr">"last"</span> :  <span class="string">"White"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将多个字段值合并为一个字段怎么做？"><a href="#将多个字段值合并为一个字段怎么做？" class="headerlink" title="将多个字段值合并为一个字段怎么做？"></a>将多个字段值合并为一个字段怎么做？</h5><p>使用 <code>copy_to</code> ，比如将 first_name 和 last_name 合并为 full_name ，但 full_name 不在查询结果中展示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"first_name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"copy_to"</span>: <span class="string">"full_name"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"last_name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="attr">"copy_to"</span>: <span class="string">"full_name"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"full_name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h4><h5 id="什么是-Mapping"><a href="#什么是-Mapping" class="headerlink" title="什么是 Mapping?"></a>什么是 Mapping?</h5><p>Mapping（映射）定义字段名称、数据类型、优化信息（比如是否索引)、分词器，有点类似于数据库中的表结构定义。一个 Index 对应一个 Mapping。</p><p>Mapping 分为动态 Mapping 和显示 Mapping 两种：</p><ul><li>动态 Mapping：根据待索引数据自动建立索引、自动定义映射类型。</li><li>显示 Mapping：手动控制字段的存储和索引方式比如哪些字符串字段应被视为全文字段。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 显示映射创建索引</span><br><span class="line">PUT /my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"age"</span>:    &#123; <span class="attr">"type"</span>: <span class="string">"integer"</span> &#125;,</span><br><span class="line">      <span class="attr">"email"</span>:  &#123; <span class="attr">"type"</span>: <span class="string">"keyword"</span>  &#125;,</span><br><span class="line">      <span class="attr">"name"</span>:   &#123; <span class="attr">"type"</span>: <span class="string">"text"</span>  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态 Mapping 使用起来比较简单，在初学 Elasticsearch 的时候可以使用。实际项目中，应该尽量手动定义映射关系。</p><h5 id="为什么插入数据不用指定-Mapping？"><a href="#为什么插入数据不用指定-Mapping？" class="headerlink" title="为什么插入数据不用指定 Mapping？"></a>为什么插入数据不用指定 Mapping？</h5><p>因为在写入文档时，如果索引不存在，Elasticsearch 会自动根据数据类型 <strong>自动推断 Mapping 信息</strong> （Dynamic Mapping），但有时候不是很准确。</p><h5 id="有自定义过-Mapping-吗？你是怎么做的？"><a href="#有自定义过-Mapping-吗？你是怎么做的？" class="headerlink" title="有自定义过 Mapping 吗？你是怎么做的？"></a>有自定义过 Mapping 吗？你是怎么做的？</h5><p>如果纯手写的话，工作量太大，还容易写错，所以可以参考以下步骤：</p><ol><li>创建临时 Index，插入一些临时数据；</li><li>访问 Mapping API ,获取相关 Mapping 定义；</li><li>在此基础上进行修改，如添加 keyword，nested类型；</li><li>删除临时 Index。</li></ol><h5 id="动态-Mapping-有几种属性配置？"><a href="#动态-Mapping-有几种属性配置？" class="headerlink" title="动态 Mapping 有几种属性配置？"></a>动态 Mapping 有几种属性配置？</h5><p>4 种，可在 <code>Mapping</code> 中配置 <code>dynamic = true/runtime/false/strict</code>（默认为<code>true</code>）。</p><ul><li><code>dynamic = true</code> : 新字段被添加到映射中（默认）</li><li><code>dynamic = runtime</code> 新字段作为运行时字段添加到映射中，这些字段未编入索引，并_source 在查询时加载。</li><li><code>dynamic = false</code> ：新字段将被忽略，这些字段不会被索引或可搜索</li><li><code>dynamic = strict</code> ： 如果检测到新字段，则会抛出异常并拒绝文档，新字段必须显式添加到映射中。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210201174121371.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MzM3Mjcy%2Csize_16%2Ccolor_FFFFFF%2Ct_70&sign=71f32bb2d51d9ff7110f4332ef27c7d138beaa9176d7c501e41c186a06be306f" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="动态-Mapping-如何防止字段无限增加？"><a href="#动态-Mapping-如何防止字段无限增加？" class="headerlink" title="动态 Mapping 如何防止字段无限增加？"></a>动态 Mapping 如何防止字段无限增加？</h5><blockquote><p>摘自官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-settings-limit.html" target="_blank" rel="noopener">Mapping limit settings</a> 。</p></blockquote><p>如果使用了动态映射，插入的每个新文档都可能引入新字段。在索引中定义太多字段会导致 <strong>映射爆炸</strong> ，从而导致内存不足的错误和难以恢复的情况。使用 <strong>映射限制设置</strong> 来限制字段映射的数量（手动或动态创建）并防止映射爆炸。</p><ul><li><code>index.mapping.total_fields.limit</code>：限制了索引中的字段最大数量。字段、对象映射以及字段别名计入此限制，默认值为 <strong>1000</strong>。限制的目的是为了防止映射和搜索变得太大。较高的值会导致性能下降和内存问题，尤其是在负载高或资源很少的集群中。</li><li><code>index.mapping.depth.limit</code>：字段的最大深度，以内部对象的数量来衡量。如果所有字段都在根对象级别定义，则深度为 1。如果有一个对象映射，则深度为 2 ，默认为 <strong>20</strong>。</li><li><code>index.mapping.nested_fields.limit：nested</code>索引中不同映射的最大数量，<code>nested</code>类型只应在需要相互独立地查询对象数组时使用，默认为 <strong>50</strong>。</li><li><code>index.mapping.nested_objects.limit</code>：单个文档可以包含的嵌套 JSON 对象（<code>nested</code>类型）的最大数量，默认为 <strong>10000</strong>。</li><li><code>index.mapping.field_name_length.limit</code>：设置字段名称的最大长度，默认为 <code>Long.MAX_VALUE</code>（无限制）。</li><li><code>index.mapping.dimension_fields.limit</code>：仅供 Elastic 内部使用，索引的最大时间序列维度数；默认为 <strong>16</strong>。</li></ul><h5 id="想要某个字段不被索引怎么做？"><a href="#想要某个字段不被索引怎么做？" class="headerlink" title="想要某个字段不被索引怎么做？"></a>想要某个字段不被索引怎么做？</h5><p>在 <code>Mapping</code>中设置属性 <code>index = false</code>，则该字段不可作为检索条件，但结果中还是包含该字段</p><p>与此相关的属性还有 <code>index_options</code>可以<strong>控制倒排索引记录内容</strong>，属性有：</p><ul><li><code>docs</code>: 只包括 docID</li><li><code>freqs</code>: 包括 docID/词频</li><li><code>options</code>：默认属性，docID/词频/位置</li><li><code>offsets</code>: docID/词频/位置/字符偏移量</li></ul><p>记录内容越多，占用空间越大，但是检索越精确</p><h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><h5 id="查询语句的分类？"><a href="#查询语句的分类？" class="headerlink" title="查询语句的分类？"></a>查询语句的分类？</h5><p><strong>1、请求体查询（最常用）</strong></p><p>将相关查询条件放在请求体中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /shirts/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"filter"</span>: [</span><br><span class="line">        &#123; <span class="string">"term"</span>: &#123; <span class="string">"color"</span>: <span class="string">"red"</span>   &#125;&#125;,</span><br><span class="line">        &#123; <span class="string">"term"</span>: &#123; <span class="string">"brand"</span>: <span class="string">"gucci"</span> &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求体查询又称为 <code>Query DSL (Domain Specific Language)</code>领域特定语言，包括：</p><ul><li>叶子查询：指定条件指定字段查询，包括<code>term</code><strong>分词查询和全文检索</strong>（<code>match，match_phrase</code>)</li><li>复合查询：可包含叶子查询语句和复合查询，主要包括<code>bool</code>和 <code>dis_max</code></li></ul><p><strong>2、请求 URI</strong></p><p>将相关查询条件放在 URI 中，这种方式不常用，了解即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /users/\_search?q=\*&amp;sort=age:asc&amp;pretty</span><br></pre></td></tr></table></figure><p><strong>3、类 SQL 检索</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /_sql?format=txt</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: <span class="string">"SELECT * FROM uint-2020-08-17 ORDER BY itemid DESC LIMIT 5"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能还不完备，不推荐使用。</p><h5 id="Term-查询和全文检索区别？"><a href="#Term-查询和全文检索区别？" class="headerlink" title="Term 查询和全文检索区别？"></a><strong>Term 查询和全文检索区别？</strong></h5><p>term 查询条件不做分词处理，只有查询词和文档中的词精确匹配才会被搜索到，一般用于<strong>非文本字段查询</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询用户名中含有关键词 “张寒” 的人</span></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"张寒"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文检索一般用于 <strong><code>文本查询</code></strong> ，会使用对应分词器，步骤为：分词-&gt;词项逐个查询-&gt;汇总多个词项得分。</p><h5 id="如何实现范围查询？"><a href="#如何实现范围查询？" class="headerlink" title="如何实现范围查询？"></a>如何实现范围查询？</h5><p>range 查询用于匹配在某一范围内的数值型、日期类型或者字符串型字段的文档，比如出生日期在 1996-01-01 到 2000-01-01 的人。使用 range 查询只能查询一个字段，不能作用在多个字段上。</p><p>range 查询支持的参数有以下几种：</p><ul><li><code>gt</code>大于，查询范围的最小值，也就是下界，但是不包含临界值。</li><li><code>gte</code>大于等于，和<code>gt</code> 的区别在于包含临界值。</li><li><code>lt</code>小于，查询范围的最大值，也就是上界，但是不包含临界值。</li><li><code>lte</code>小于等于，和<code>lt</code>的区别在于包含临界值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询出生日期在 1996-01-01 到 2000-01-01 的人</span></span><br><span class="line">GET users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;</span><br><span class="line">      <span class="string">"birthday"</span>: &#123;</span><br><span class="line">        <span class="string">"gte"</span>: <span class="string">"1996-01-01"</span>,</span><br><span class="line">        <span class="string">"lte"</span>: <span class="string">"2000-01-01"</span>,</span><br><span class="line">        <span class="string">"format"</span>: <span class="string">"yyyy-MM-dd"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Match-和-Match-phrase-区别？"><a href="#Match-和-Match-phrase-区别？" class="headerlink" title="Match 和 Match_phrase 区别？"></a>Match 和 Match_phrase 区别？</h5><p><code>match</code>查询多个检索词之间默认是 or 关系，可使用<code>operator</code>改为 and 关系</p><p><code>match_phrase</code> 查询多个检索词之间默认是 and 关系，并且词的位置关系影响搜索结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Ff82d8fe41a47fa739eee8cad7ebcb9d8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="Multi-match-有几种匹配策略，都有什么区别？"><a href="#Multi-match-有几种匹配策略，都有什么区别？" class="headerlink" title="Multi match 有几种匹配策略，都有什么区别？"></a>Multi match 有几种匹配策略，都有什么区别？</h5><p>Multi match 用于<strong>单条件多字段查询</strong>，有以下几种常用的匹配策略：</p><ul><li><code>best_fields</code>(默认) ：查询结果包含任一查询条件，但最终得分为<strong>最佳匹配字段得分</strong></li><li><code>most_fields</code>：查询结果包含任一查询条件，但最终得分 <strong>合并所有匹配字段得分</strong>，默认查询条件之间是 or 连接</li><li><code>cross_fields</code> ：跨字段匹配,解决了<code>most_fields</code> 查询词无法使用<code>and</code>连接的问题，匹配更加精确，<code>and</code>相当于整合多个字段为一个字段，但又不像 <code>copy_to</code> 占用存储空间。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询域为 title 和 description</span></span><br><span class="line"><span class="comment"># 匹配策略为 most_fields</span></span><br><span class="line">GET books/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"most_fields"</span>,</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"java 编程"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"title"</span>, <span class="string">"description"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bool-查询有几种查询子句？"><a href="#bool-查询有几种查询子句？" class="headerlink" title="bool 查询有几种查询子句？"></a>bool 查询有几种查询子句？</h5><p><code>bool</code>一般用于多条件多字段查询,可包含<code>match</code> ，<code>match_phrase</code> ，<code>term</code> 等简单查询语句，主要有以下 4 种查询子句</p><ul><li><code>must</code>: 结果必须匹配 <code>must</code>查询条件，贡献算分</li><li><code>should</code>： 结果应该匹配<code>should</code>子句查询的一个或多个，贡献算分</li><li><code>must_not</code>： 结果必须不能匹配该查询条件</li><li><code>filter</code>： 结果必须匹配该过滤条件，<strong>但不计算得分</strong>，可提高查询效率</li></ul><p>比如，你想在北京找一个有房或者有车 ，身高不低于 150 的女朋友，下面这条语句安排上。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">GET /users/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"gender"</span>: <span class="string">"female"</span> //性别必须为女</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"should"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"hasroom"</span>: <span class="string">"true"</span> //有房或者有车</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"match"</span>: &#123;</span><br><span class="line">            <span class="attr">"hascar"</span>: <span class="string">"true"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"must_not"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"range"</span>: &#123;</span><br><span class="line">            <span class="attr">"height"</span>: &#123;</span><br><span class="line">              <span class="attr">"gte"</span>: <span class="number">150</span> //身高不低于<span class="number">150</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filter"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"北京"</span> //必须北京，不过不算分</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a><strong>数据同步</strong></h4><h5 id="Elasticsearch-和-MySQL-同步的策略有哪些？"><a href="#Elasticsearch-和-MySQL-同步的策略有哪些？" class="headerlink" title="Elasticsearch 和 MySQL 同步的策略有哪些？"></a>Elasticsearch 和 MySQL 同步的策略有哪些？</h5><p>我们可以将同步类型分为 <strong>全量同步</strong>和<strong>增量同步</strong>。</p><p>全量同步即建好 Elasticsearch 索引后一次性导入 MySQL 所有数据。全量同步有很多现成的工具可以用比如 go-mysql-elasticsearch、Datax。</p><blockquote><p>go-mysql-elasticsearch 是一项将 MySQL 数据自动同步到 Elasticsearch 的服务，同样支持增量同步。Github 地址：<a href="https://github.com/go-mysql-org/go-mysql-elasticsearch" target="_blank" rel="noopener">https://github.com/go-mysql-org/go-mysql-elasticsearch</a> 。</p><p>DataX 是阿里云 DataWorks 数据集成 的开源版本，在阿里巴巴集团内被广泛使用的离线数据同步工具/平台。DataX 实现了包括 MySQL、Oracle、OceanBase、SqlServer、Postgre、HDFS、Hive、ADS、HBase、TableStore(OTS)、MaxCompute(ODPS)、Hologres、DRDS 等各种异构数据源之间高效的数据同步功能。Github 地址： <a href="https://github.com/alibaba/DataX。" target="_blank" rel="noopener">https://github.com/alibaba/DataX。</a></p></blockquote><p>另外，除了插件之外，像我们比较熟悉的 Canal 除了支持 binlog 实时增量同步 数据库之外也支持全量同步 。</p><p>增量同步即对 MySQL 中新增，修改，删除的数据进行同步:</p><ul><li><strong>同步双写</strong> ：修改数据时同步到 Elasticsearch。这种方式性能较差、存在丢数据风险且会耦合大量数据同步代码，一般不会使用。</li><li><strong>异步双写</strong> ：修改数据时，使用 MQ 异步写入 Elasticsearch 提高效率。这种方式引入了新的组件和服务，增加了系统整体复杂性。</li><li><strong>定时器</strong> ：定时同步数据到 Elasticsearch。这种方式时效性差，通常用于数据实时性不高的场景</li><li><strong>binlog 同步组件 Canal(推荐)</strong> ： 使用 Canal 可以做到业务代码完全解耦，API 完全解耦，零代码实现准实时同步, Canal 通过解析 MySQL 的 binlog 日志文件进行数据同步。</li></ul><p>关于增量同步的详细介绍，可以看这篇回答： <a href="https://www.zhihu.com/question/47600589/answer/2843488695" target="_blank" rel="noopener">https://www.zhihu.com/question/47600589/answer/2843488695</a> 。</p><h5 id="Canal-增量数据同步-Elasticsearch-的原理了解吗？"><a href="#Canal-增量数据同步-Elasticsearch-的原理了解吗？" class="headerlink" title="Canal 增量数据同步 Elasticsearch 的原理了解吗？"></a>Canal 增量数据同步 Elasticsearch 的原理了解吗？</h5><p>这个在 Canal 官方文档中有详细介绍到，原理非常简单：</p><ol><li>Canal 模拟 MySQL Slave 节点与 MySQL Master 节点的交互协议，把自己伪装成一个 MySQL Slave 节点，向 MySQL Master 节点请求 binlog；</li><li>MySQL Master 节点接收到请求之后，根据偏移量将新的 binlog 发送给 MySQL Slave 节点；</li><li>Canal 接收到 binlog 之后，就可以对这部分日志进行解析，获取主库的结构及数据变更。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F5c4a078f673d83329c5eb90bf9720de8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure>**Elasticsearch 集群**<h4 id="Elasticsearch-集群"><a href="#Elasticsearch-集群" class="headerlink" title="Elasticsearch 集群"></a><strong>Elasticsearch 集群</strong></h4><h5 id="Elasticsearch-集群是什么？有什么用？"><a href="#Elasticsearch-集群是什么？有什么用？" class="headerlink" title="Elasticsearch 集群是什么？有什么用？"></a>Elasticsearch 集群是什么？有什么用？</h5><p>单台 Elasticsearch 服务器负载能力和存储能力有限，很多时候通过增加服务器配置也没办法满足我们的要求。并且，单个 Elasticsearch 节点会存在单点风险，没有做到高可用。为此，我们需要搭建 Elasticsearch 集群。</p><p>Elasticsearch 集群说白了就是多个 Elasticsearch 节点的集合，这些节点共同协作，一起提供服务，这样就可以解决单台 Elasticsearch 服务器无法处理的搜索需求和数据存储需求。出于高可用方面的考虑，集群中节点数量建议 3 个以上，并且其中至少两个节点不是仅投票主节点（后文会介绍到）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fwww.dbi-services.com%2Fblog%2Fwp-content%2Fuploads%2Fsites%2F2%2F2022%2F01%2FElasticsearch-index-shards.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Elasticsearch 集群可以很方便地实现横向扩展，我们可以动态添加或者删除 Elasticsearch 节点。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p><h5 id="Elasticsearch-集群中的节点角色有哪些？"><a href="#Elasticsearch-集群中的节点角色有哪些？" class="headerlink" title="Elasticsearch 集群中的节点角色有哪些？"></a>Elasticsearch 集群中的节点角色有哪些？</h5><p>Elasticsearch 7.9 之前的版本中的节点类型：数据节点、协调节点、候选主节点、ingest 节点。在 Elasticsearch 7.9 以及之后，节点类型升级为节点角色（Node roles）。节点角色分的很细：数据节点角色、主节点角色、ingest 节点角色、热节点角色等。</p><p>节点角色主要是为了解决基于节点类型配置复杂和用户体验差的问题。</p><p>Elasticsearch 集群一般是由多个节点共同组成的分布式集群，节点之间互通，彼此配合，共同对外提供搜索和索引服务（节点之间能够将客户端请求转向到合适的节点）。不同的节点会负责不同的角色，有的负责一个，有的可能负责多个。</p><p>在 ES 中我们可以通过配置使一个节点有以下一个或多个角色：</p><ul><li><strong>主节点（Master-eligible node）</strong> ：集群层面的管理，例如创建或删除索引、跟踪哪些节点是集群的一部分，以及决定将哪些分片分配给哪些节点。任何不是仅投票主节点的合格主节点都可以通过主选举过程被选为主节点。 <ul><li><strong>专用备选主节点（Dedicated master-eligible node）</strong> ： Elasticsearch 集群中，设置了只能作为主节点的节点。设置专用主节点主要是为了保障集群增大时的稳定性，建议专用主节点个数至少为 3 个。</li><li><strong>仅投票主节点（Voting-only master-eligible node）</strong>: 仅参与主节点选举投票，不会被选为主节点，硬件配置可以较低。</li></ul></li><li><strong>数据节点（data node）</strong> ：数据存储和数据处理比如 CRUD、搜索、聚合。</li><li><strong>预处理节点（ingest node）</strong> ：执行由预处理管道组成的预处理任务。</li><li><strong>仅协调节点（coordinating only node）</strong> ：路由分发请求、聚集搜索或聚合结果。</li><li><strong>远程节点（Remote-eligible node）</strong> ：跨集群检索或跨集群复制。</li><li>……</li></ul><p>高可用性 (HA) 集群需要至少三个符合主节点条件的节点，其中至少两个节点不是仅投票主节点。即使其中一个节点发生故障，这样的集群也能够选举出一个主节点。</p><h5 id="分片是什么？有什么用？"><a href="#分片是什么？有什么用？" class="headerlink" title="分片是什么？有什么用？"></a>分片是什么？有什么用？</h5><blockquote><p>类似问题：Elasticsearch 集群中的数据是如何被分配的？</p></blockquote><p><strong>分片（Shard）</strong> 是集群数据的容器，Index（索引）被分为多个文档碎片存储在分片中，分片又被分配到集群内的各个节点里。当需要查询一个文档时，需要先找到其位于的分片。也就是说，分片是 Elasticsearch 在集群内分发数据的单位。</p><p>每个分片都是一个 Lucene 索引实例，您可以将其视作一个独立的搜索引擎，它能够对 Elasticsearch 集群中的数据子集进行索引并处理相关查询。</p><p><strong>整个 Elasticsearch 集群的核心就是对所有的分片执行分布存储，索引，负载，路由的工作。</strong></p><p>当集群规模扩大或者缩小时， Elasticsearch 会自动的在各节点中迁移分片，使得数据仍然均匀分布在集群里。Elasticsearch 在对数据进行再平衡时移动分片的速度取决于分片的大小和数量，以及网络和磁盘性能。</p><p>一个分片可以是 <strong>主分片（Primary Shard）</strong> 或者 <strong>副本分片（Replica Shard）</strong> 。一个副本分片只是一个主分片的拷贝。副本分片作为硬件故障时保护数据不丢失的冗余备份，并为搜索和返回文档等读操作提供服务。查询吞吐量可以随着副本分片数量的增加而增长，与此同时，使用分片副本还可以处理查询的发并量。</p><p>当我们写索引数据的时候，只能写在主分片上，然后再同步到副本分片。</p><p>当主分片出现问题的时候，会从可用的副本分片中选举一个新的主分片。在默认情况下，ElasticSearch 会为主分片创建一个副本分片。由于副本分片同样会占用资源，因此，不建议为一个主分片分配过多的副本分片，应该充分结合业务需求来选定副本分片的数量。</p><p><strong>从 Elasticsearch 版本 7 开始，每个索引的主分片数量的默认值为 1，默认的副本分片数为 0。在早期版本中，默认值为 5 个主分片。在生产环境中，副本分片数至少为 1。</strong></p><p>最后，简单总结一下：</p><ul><li>分片是 Elasticsearch 在集群内分发数据的单位。整个 Elasticsearch 集群的核心就是对所有的分片执行分布存储，索引，负载，路由的工作。</li><li>副本分片主要是为了提高可用性，由于副本分片同样会占用资源，不建议为一个主分片分配过多的副本分片。</li><li>当我们写索引数据的时候，只能写在主分片上，然后再同步到副本分片。</li><li>当主分片出现问题的时候，会从可用的副本分片中选举一个新的主分片。</li></ul><h5 id="查询文档时如何找到对应的分片？"><a href="#查询文档时如何找到对应的分片？" class="headerlink" title="查询文档时如何找到对应的分片？"></a>查询文档时如何找到对应的分片？</h5><p>我们需要查询一个文档的时候，需要先找到其位于那一个分片中。那究竟是如何知道一个文档应该存放在哪个分片中呢?</p><p>这个过程是根据路由公式来决定的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shard = hash(routing) % number_of_primary_shards</span><br></pre></td></tr></table></figure><p><code>routing</code>是一个可以配置的变量,默认是使用文档的 id。对 <code>routing</code>取哈希再除以<code>number_of_primary_shards</code>(索引创建时指定的分片总数)得到的余数就是对应的分片。</p><p>当一个查询请求到达 <strong>仅协调节点（coordinating only node）</strong> 后，仅协调节点会根据路由公式计算出目标分片，然后再将请求转发到目标分片的主分片节点上。</p><p>上面公式也解释了为什么我们要在创建索引的时候就确定好主分片的数量，并且不允许改变索引分片数。因为如果数量变化了, 那么所有之前路由的计算值都会无效，文档也再也找不到了。</p><h5 id="自定义路由有什么好处？"><a href="#自定义路由有什么好处？" class="headerlink" title="自定义路由有什么好处？"></a>自定义路由有什么好处？</h5><p>默认的路由规则会尽量保证数据会均匀地保存到每一个分片上面。这样做的好处是，一旦某个分片出了故障，ES 集群里的任何索引都不会出现一个文档都查不到的情况，所有索引都只会丢失故障分片上面存储的文档而已，这个给修复故障分片争取了时间。</p><p>不过，这种路由规则也有一个弊端，文档均匀分配到多个分片上面了，所以每次查询索引结果都需要向多个分片发送请求，然后再将这些分片返回的结果融合到一起返回到终端。很显然这样一来系统的压力就会增大很多，如果索引数据量不大的情况下，效率会非常差。</p><p>如果我们想要让某一类型的文档都被存储到同一分片的话，可以自定义路由规则。所有的文档 API 请求(get,index,delete,bulk,update)都接受一个叫做 routing 的路由参数，通过这个参数我们可以自定义文档到数据分片的映射规则。</p><h5 id="如何查看-Elasticsearch-集群健康状态？"><a href="#如何查看-Elasticsearch-集群健康状态？" class="headerlink" title="如何查看 Elasticsearch 集群健康状态？"></a>如何查看 Elasticsearch 集群健康状态？</h5><p>在 Kibana 控制台执行以下命令可以查看集群的健康状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cluster/health</span><br></pre></td></tr></table></figure><p>正常情况下，返回如下结果。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"es-cn-45xxxxxxxxxxxxk1q"</span>,</span><br><span class="line">  <span class="attr">"status"</span> : <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span> : <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span> : <span class="number">36</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span> : <span class="number">100.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口返回参数解释如下：</p><table><thead><tr><th>指标</th><th>含义</th></tr></thead><tbody><tr><td>cluster_name</td><td>集群的名称</td></tr><tr><td>status</td><td>集群的运行状况，基于其主要和副本分片的状态。</td></tr><tr><td>timed_out</td><td>如果 false 响应在 timeout 参数指定的时间段内返回（30s 默认情况下）</td></tr><tr><td>number_of_nodes</td><td>集群中的节点数</td></tr><tr><td>number_of_data_nodes</td><td>作为专用数据节点的节点数</td></tr><tr><td>active_primary_shards</td><td>活动主分区的数量</td></tr><tr><td>active_shards</td><td>活动主分区和副本分区的总数</td></tr><tr><td>relocating_shards</td><td>正在重定位的分片的数量</td></tr><tr><td>initializing_shards</td><td>正在初始化的分片数</td></tr><tr><td>unassigned_shards</td><td>未分配的分片数</td></tr><tr><td>delayed_unassigned_shards</td><td>其分配因超时设置而延迟的分片数</td></tr><tr><td>number_of_pending_tasks</td><td>尚未执行的集群级别更改的数量</td></tr><tr><td>number_of_in_flight_fetch</td><td>未完成的访存数量</td></tr><tr><td>task_max_waiting_in_queue_millis</td><td>自最早的初始化任务等待执行以来的时间（以毫秒为单位）</td></tr><tr><td>active_shards_percent_as_number</td><td>群集中活动碎片的比率，以百分比表示</td></tr></tbody></table><h5 id="Elasticsearch-集群健康状态有哪几种？"><a href="#Elasticsearch-集群健康状态有哪几种？" class="headerlink" title="Elasticsearch 集群健康状态有哪几种？"></a>Elasticsearch 集群健康状态有哪几种？</h5><p>Elasticsearch 集群健康状态分为三种：</p><ul><li><strong>GREEN</strong> （健康状态）：最健康的状态，集群中的主分片和副本分片都可用。</li><li><strong>YELLOW</strong> （预警状态）：主分片都可用，但存在副本分片不可能。</li><li><strong>RED</strong> （异常状态）：存在不可用的主分片，搜索结果可能会不完整。</li></ul><h5 id="如何分析-Elasticsearch-集群异常问题？"><a href="#如何分析-Elasticsearch-集群异常问题？" class="headerlink" title="如何分析 Elasticsearch 集群异常问题？"></a><strong>如何分析 Elasticsearch 集群异常问题？</strong></h5><p>1、找到异常索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看索引情况并根据返回找到状态异常的索引</span></span><br><span class="line">GET /_cat/indices?v&amp;health=yellow</span><br><span class="line">GET /_cat/indices?v&amp;health=red</span><br></pre></td></tr></table></figure><p>2、查看详细的异常信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /_cluster/allocation/<span class="keyword">explain</span></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">GET</span> /_cluster/allocation/<span class="keyword">explain</span>?pretty</span><br></pre></td></tr></table></figure><p>通过异常信息进一步分析问题的原因。</p><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a><strong>性能优化</strong></h4><h5 id="Elasticsearch-如何选择硬件配置？"><a href="#Elasticsearch-如何选择硬件配置？" class="headerlink" title="Elasticsearch 如何选择硬件配置？"></a>Elasticsearch 如何选择硬件配置？</h5><ul><li>部署 Elasticsearch 对于机器的 CPU 要求并不高，通常选择 2 核或者 4 核的就差不多了。</li><li>Elasticsearch 中的很多操作是比较消耗内存的，如果搜索需求比较大的话，建议选择 16GB 以上的内存。具体如何分配内存呢？通常是 50% 给 ES，50% 留给 Lucene。另外，建议禁止 swap。如果不禁止的话，当内存耗尽时，操作系统就会自动把内存中暂时不使用的数据交换到硬盘中，需要使用的时候再从硬盘交换到内存，频繁硬盘操作对性能影响是致命的。</li><li>磁盘的速度相对比较慢，尽量使用固态硬盘（SSD）。</li></ul><h5 id="Elasticsearch-索引优化策略有哪些？"><a href="#Elasticsearch-索引优化策略有哪些？" class="headerlink" title="Elasticsearch 索引优化策略有哪些？"></a>Elasticsearch 索引优化策略有哪些？</h5><ul><li>ES 提供了 Bulk API 支持批量操作，当我们有大量的写任务时，可以使用 Bulk 来进行批量写入。不过，使用 Bulk 请求时，每个请求尽量不要超过几十 M，因为太大会导致内存使用过大。</li><li>ES 默认副本数量为 3 个，这样可以提高可用性，但会影响写入索引的效率。某些业务场景下，可以设置副本数量为 1 或者 0，提高写入索引的效率。</li><li>ES 在写入数据的时候，采用延迟写入的策略，默认 1 秒之后将内存中 segment 数据刷新到磁盘中，此时我们才能将数据搜索出来。这就是为什么 Elasticsearch 提供的是近实时搜索功能。某些业务场景下，可以增加刷新时间间隔比如设置刷新时间间隔为 30s(<code>index.refresh_interval=30s</code>)，减少 segment 合并压力，提高写入索引的效率。</li><li>加大 <code>index_buffer_size</code>，这个是 ES 活跃分片共享的内存区，官方建议每个分片至少 512MB，且为 JVM 内存的 10%。</li><li>使用 ES 的默认 ID 生成策略或使用数字类型 ID 做为主键。</li><li>合理的配置使用 index 属性，<code>analyzed</code> 和 <code>not_analyzed</code>，根据业务需求来控制字段是否分词或不分词。只有<code>groupby</code>需求的字段，配置时就设置成 <code>not_analyzed</code>，以提高查询或聚类的效率。</li><li>加大 Flush 设置。 Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush，我们可以加大<code>index.translog.flush_threshold_size</code>，但必须为操作系统的文件缓存系统留下足够的空间。</li><li>……</li></ul><h5 id="Elasticsearch-查询优化策略有哪些？"><a href="#Elasticsearch-查询优化策略有哪些？" class="headerlink" title="Elasticsearch 查询优化策略有哪些？"></a>Elasticsearch 查询优化策略有哪些？</h5><ul><li>建立冷热索引库（可用固态硬盘存放热库数据，普通硬盘存放冷库数据），热库数据可以提前预热加载至内存，提高检索效率。</li><li>自定义路由规则，让某一类型的文档都被存储到同一分片。</li><li>使用 <code>copy_to</code> 将多个字段整合为一个。</li><li>控制字段的数量，业务中不使用的字段，就不要索引。</li><li>不要返回无用的字段，使用<code>_source</code>进行指定。</li><li>避免大型文档存储，默认最大长度为 100MB。</li><li>使用<code>keyword</code>数据类型，该类型不会走分词器，效率大大提高。</li><li>开启慢查询配置定位慢查询。</li><li>ES 查询的时候，使用 filter 查询会使用 query cache, 如果业务场景中的过滤查询比较多，建议将 querycache 设置大一些，以提高查询速度。</li><li>尽量避免分页过深。</li><li>增加分片副本提高查询吞吐量，避免使用通配符。</li><li>加大堆内存，ES 默认安装后设置的内存是 1GB，可以适当加大但不要超过物理内存的 50%，且最好不要超过 32GB。</li><li>分配一半物理内存给文件系统缓存，以便加载热点数据。</li><li>……</li></ul><h4 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h4><ul><li><p><a href="https://tech.meituan.com/2022/11/17/elasicsearch-optimization-practice-based-on-run-length-encoding.html" target="_blank" rel="noopener">美团外卖搜索基于 Elasticsearch 的优化实践 - 美团技术团队 - 2022</a></p></li><li><p><a href="https://cloud.tencent.com/developer/inventory/15367/article/1803943" target="_blank" rel="noopener">Elasticsearch 实战系列 - 腾讯大数据 SRE 工程师 - 2022</a></p></li><li><p><a href="https://juejin.cn/post/7073333873492361230" target="_blank" rel="noopener">由浅到深，入门搜索原理 - 掘金 - 2022</a></p></li><li><p><a href="https://juejin.cn/post/7134855425714815012" target="_blank" rel="noopener">ElasticSearch 文档分值 score 计算&amp;聚合搜索案例分析 - 政采云技术团队 - 2022</a></p></li><li><p><a href="https://segmentfault.com/a/1190000037658997" target="_blank" rel="noopener">Elasticsearch 如何做到快速检索 - 倒排索引的秘密 - 思否 - 2020</a></p></li><li><p><a href="https://www.cnblogs.com/jajian/p/11223992.html" target="_blank" rel="noopener">Elasticsearch 技术分析（九）：全文搜索引擎 Elasticsearch，这篇文章给讲透了！ - 博客园 - 2019</a></p></li></ul><h4 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h4><ul><li><p>Elasticsearch 官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html</a></p></li><li><p>Elasticsearch 中文指南：<a href="https://endymecy.gitbooks.io/elasticsearch-guide-chinese/content/index.html" target="_blank" rel="noopener">https://endymecy.gitbooks.io/elasticsearch-guide-chinese/content/index.html</a></p></li><li><p>Mastering Elasticsearch(中文版)：<a href="https://doc.yonyoucloud.com/doc/mastering-elasticsearch/index.html" target="_blank" rel="noopener">https://doc.yonyoucloud.com/doc/mastering-elasticsearch/index.html</a></p></li><li><p>Elasticsearch Service 相关概念 - 腾讯云：<a href="https://cloud.tencent.com/document/product/845/32086" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/845/32086</a></p></li><li><p>Node - Elasticsearch 官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html</a></p></li><li><p>倒排索引和正排索引：<a href="https://www.cnblogs.com/seaspring/p/14158851.html" target="_blank" rel="noopener">https://www.cnblogs.com/seaspring/p/14158851.html</a></p></li><li><p>Elasticsearch 有没有数组类型？有哪些坑？：<a href="https://mp.weixin.qq.com/s/FCjrn609vYU-URlhVfjD7A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/FCjrn609vYU-URlhVfjD7A</a></p></li><li><p>Elasticsearch 实现基于拼音搜索：<a href="https://www.cnblogs.com/huan1993/p/17053317.html" target="_blank" rel="noopener">https://www.cnblogs.com/huan1993/p/17053317.html</a></p></li><li><p>Elasticsearch 查询语句语法详解 ：<a href="https://www.cnblogs.com/Gaimo/p/16036853.html" target="_blank" rel="noopener">https://www.cnblogs.com/Gaimo/p/16036853.html</a></p></li><li><p>《Elasticsearch 权威指南》- 集群内的原理：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-cluster.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/distributed-cluster.html</a></p></li><li><p>Elasticsearch 分布式路由策略：<a href="https://zhuanlan.zhihu.com/p/386368763" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/386368763</a></p></li><li><p>How to Choose the Correct Number of Shards per Index in Elasticsearch：<a href="https://opster.com/guides/elasticsearch/capacity-planning/elasticsearch-number-of-shards/" target="_blank" rel="noopener">https://opster.com/guides/elasticsearch/capacity-planning/elasticsearch-number-of-shards/</a></p></li><li><p>Elasticsearch 集群异常状态（RED、YELLOW）原因分析：<a href="https://cloud.tencent.com/developer/article/1803943" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1803943</a></p></li><li><p>超详细的 Elasticsearch 高性能优化实践 ：<a href="https://cloud.tencent.com/developer/article/1436787" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1436787</a></p></li></ul><h2 id="常见框架"><a href="#常见框架" class="headerlink" title="常见框架"></a>常见框架</h2><h3 id="SpringBoot-常见面试题总结"><a href="#SpringBoot-常见面试题总结" class="headerlink" title="SpringBoot 常见面试题总结"></a><strong>SpringBoot 常见面试题总结</strong></h3><h4 id="剖析面试最常见问题之-Spring-Boot"><a href="#剖析面试最常见问题之-Spring-Boot" class="headerlink" title="剖析面试最常见问题之  Spring Boot"></a>剖析面试最常见问题之  Spring Boot</h4><p>市面上关于 Spring Boot 的面试题抄来抄去，毫无价值可言。</p><p>这篇文章，我会简单就自己这几年使用 Spring Boot 的一些经验，总结一些常见的面试题供小伙伴们自测和学习。少部分关于 Spring/Spring Boot 的介绍参考了官网，其他皆为原创。</p><h5 id="1-简单介绍一下-Spring-有啥缺点"><a href="#1-简单介绍一下-Spring-有啥缺点" class="headerlink" title="1. 简单介绍一下 Spring?有啥缺点?"></a>1. 简单介绍一下 Spring?有啥缺点?</h5><p>Spring 是重量级企业开发框架 <strong>Enterprise JavaBean（EJB）</strong> 的替代品，Spring 为企业级 Java 开发提供了一种相对简单的方法，通过 依赖注入 和 <strong>面向切面编程</strong> ，用简单的 <strong>Java 对象（Plain Old Java Object，POJO）</strong> 实现了 EJB 的功能</p><p><strong>虽然 Spring 的组件代码是轻量级的，但它的配置却是重量级的（需要大量 XML 配置） 。</strong></p><p>为此，Spring 2.5 引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式 XML 配置。Spring 3.0 引入了基于 Java 的配置，这是一种类型安全的可重构配置方式，可以代替 XML。</p><p>尽管如此，我们依旧没能逃脱配置的魔爪。开启某些 Spring 特性时，比如事务管理和 Spring MVC，还是需要用 XML 或 Java 进行显式配置。启用第三方库时也需要显式配置，比如基于 Thymeleaf 的 Web 视图。配置 Servlet 和过滤器（比如 Spring 的DispatcherServlet）同样需要在 web.xml 或 Servlet 初始化代码里进行显式配置。组件扫描减少了配置量，Java 配置让它看上去简洁不少，但 Spring 还是需要不少配置。</p><p>光配置这些 XML 文件都够我们头疼的了，占用了我们大部分时间和精力。除此之外，相关库的依赖非常让人头疼，不同库之间的版本冲突也非常常见。</p><h5 id="2-为什么要有-SpringBoot"><a href="#2-为什么要有-SpringBoot" class="headerlink" title="2. 为什么要有 SpringBoot?"></a>2. 为什么要有 SpringBoot?</h5><p>Spring 旨在简化 J2EE 企业应用程序开发。Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c7f84ba8-d183-4d3a-ad1a-5225c00c9247.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="3-说出使用-Spring-Boot-的主要优点"><a href="#3-说出使用-Spring-Boot-的主要优点" class="headerlink" title="3. 说出使用 Spring Boot 的主要优点"></a>3. 说出使用 Spring Boot 的主要优点</h5><ol><li>开发基于 Spring 的应用程序很容易。</li><li>Spring Boot 项目所需的开发或工程时间明显减少，通常会提高整体生产力。</li><li>Spring Boot 不需要编写大量样板代码、XML 配置和注释。</li><li>Spring 引导应用程序可以很容易地与 Spring 生态系统集成，如 Spring JDBC、Spring ORM、Spring Data、Spring Security 等。</li><li>Spring Boot 遵循“固执己见的默认配置”，以减少开发工作（默认配置可以修改）。</li><li>Spring Boot 应用程序提供嵌入式 HTTP 服务器，如 Tomcat 和 Jetty，可以轻松地开发和测试 web 应用程序。（这点很赞！普通运行 Java 程序的方式就能运行基于 Spring Boot web 项目，省事很多）</li><li>Spring Boot 提供命令行接口(CLI)工具，用于开发和测试 Spring Boot 应用程序，如 Java 或 Groovy。</li><li>Spring Boot 提供了多种插件，可以使用内置工具(如 Maven 和 Gradle)开发和测试 Spring Boot 应用程序。</li></ol><h5 id="4-什么是-Spring-Boot-Starters"><a href="#4-什么是-Spring-Boot-Starters" class="headerlink" title="4. 什么是 Spring Boot Starters?"></a>4. 什么是 Spring Boot Starters?</h5><p>Spring Boot Starters 是一系列依赖关系的集合，因为它的存在，项目的依赖之间的关系对我们来说变的更加简单了。</p><p>举个例子：在没有 Spring Boot Starters 之前，我们开发 REST 服务或 Web 应用程序时; 我们需要使用像 Spring MVC，Tomcat 和 Jackson 这样的库，这些依赖我们需要手动一个一个添加。但是，有了 Spring Boot Starters 我们只需要一个只需添加一个<strong>spring-boot-starter-web</strong>一个依赖就可以了，这个依赖包含的子依赖中包含了我们开发 REST 服务需要的所有依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-Spring-Boot-支持哪些内嵌-Servlet-容器？"><a href="#5-Spring-Boot-支持哪些内嵌-Servlet-容器？" class="headerlink" title="5. Spring Boot 支持哪些内嵌 Servlet 容器？"></a>5. Spring Boot 支持哪些内嵌 Servlet 容器？</h5><p>Spring Boot 支持以下嵌入式 Servlet 容器:</p><table><thead><tr><th>Name</th><th>Servlet Version</th></tr></thead><tbody><tr><td>Tomcat 9.0</td><td>4.0</td></tr><tr><td>Jetty 9.4</td><td>3.1</td></tr><tr><td>Undertow 2.0</td><td>4.0</td></tr></tbody></table><p>您还可以将 Spring 引导应用程序部署到任何 Servlet 3.1+兼容的 Web 容器中。</p><p>这就是你为什么可以通过直接像运行 普通 Java 项目一样运行 SpringBoot 项目。这样的确省事了很多，方便了我们进行开发，降低了学习难度。</p><h5 id="6-如何在-Spring-Boot-应用程序中使用-Jetty-而不是-Tomcat"><a href="#6-如何在-Spring-Boot-应用程序中使用-Jetty-而不是-Tomcat" class="headerlink" title="6. 如何在 Spring Boot 应用程序中使用 Jetty 而不是 Tomcat?"></a>6. 如何在 Spring Boot 应用程序中使用 Jetty 而不是 Tomcat?</h5><p>Spring Boot （spring-boot-starter-web）使用 Tomcat 作为默认的嵌入式 servlet 容器, 如果你想使用 Jetty 的话只需要修改pom.xml(Maven)或者build.gradle(Gradle)就可以了。</p><p><strong>Maven:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--从Web启动器依赖中排除Tomcat--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加Jetty依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Gradle:</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>) &#123;</span><br><span class="line">     exclude <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">module:</span> <span class="string">'spring-boot-starter-tomcat'</span></span><br><span class="line">&#125;</span><br><span class="line">compile(<span class="string">"org.springframework.boot:spring-boot-starter-jetty"</span>)</span><br></pre></td></tr></table></figure><p>说个题外话，从上面可以看出使用 Gradle 更加简洁明了，但是国内目前还是 Maven 使用的多一点，我个人觉得 Gradle 在很多方面都要好很多。</p><h5 id="7-介绍一下-SpringBootApplication-注解"><a href="#7-介绍一下-SpringBootApplication-注解" class="headerlink" title="7. 介绍一下@SpringBootApplication 注解"></a>7. 介绍一下@SpringBootApplication 注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot;</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出大概可以把 <code>@SpringBootApplication</code>看作是<code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code>注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：</p><ul><li><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</li><li><code>@ComponentScan</code>： 扫描被<code>@Component</code> (<code>@Service,@Controller</code>)注解的<code>bean</code>，注解默认会扫描该类所在的包下所有的类。</li><li><code>@Configuration</code>：允许在上下文中注册额外的<code>bean</code> 或导入其他配置类</li></ul><h5 id="8-Spring-Boot-的自动配置是如何实现的"><a href="#8-Spring-Boot-的自动配置是如何实现的" class="headerlink" title="8. Spring Boot 的自动配置是如何实现的?"></a>8. Spring Boot 的自动配置是如何实现的?</h5><p>这个是因为<code>@SpringBootApplication</code>注解的原因，在上一个问题中已经提到了这个注解。我们知道 <code>@SpringBootApplication</code>看作是 <code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code>注解的集合。</p><ul><li><code>@EnableAutoConfiguration</code>：启用 SpringBoot 的自动配置机制</li><li><code>@ComponentScan</code>： 扫描被<code>@Component (@Service,@Controller)</code>注解的 bean，注解默认会扫描该类所在的包下所有的类。</li><li><code>@Configuration</code>：允许在上下文中注册额外的 bean 或导入其他配置类</li></ul><p>@EnableAutoConfiguration是启动自动配置的关键，源码如下(建议自己打断点调试，走一遍基本的流程)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableAutoConfiguration</code> 注解通过 Spring 提供的 <code>@Import</code>注解导入了<code>AutoConfigurationImportSelector</code>类（<code>@Import</code> 注解可以导入配置类或者 Bean 到当前类中）。</p><p><code>AutoConfigurationImportSelector</code>类中<code>getCandidateConfigurations</code>方法会将所有自动配置类的信息以<code>List</code>的形式返回。这些配置信息会被 Spring 容器作 <code>bean</code>来管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置信息有了，那么自动配置还差什么呢？</p><p><code>@Conditional</code>注解。<code>@ConditionalOnClass</code>(指定的类必须存在于类路径下),<code>@ConditionalOnBean</code>(容器中是否有指定的 Bean)等等都是对<code>@Conditional</code>注解的扩展。</p><p>拿 Spring Security 的自动配置举个例子:<code>SecurityAutoConfiguration</code>中导入了<code>WebSecurityEnablerConfiguration</code>类，<code>WebSecurityEnablerConfiguration</code>源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityEnablerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebSecurityEnablerConfiguration</code>类中使用<code>@ConditionalOnBean</code>指定了容器中必须还有<code>WebSecurityConfigurerAdapter</code> 类或其实现类。所以，一般情况下 Spring Security 配置类都会去实现 <code>WebSecurityConfigurerAdapter</code>，这样自动将配置就完成了。</p><h5 id="9-开发-RESTful-Web-服务常用的注解有哪些？"><a href="#9-开发-RESTful-Web-服务常用的注解有哪些？" class="headerlink" title="9. 开发 RESTful Web 服务常用的注解有哪些？"></a>9. 开发 RESTful Web 服务常用的注解有哪些？</h5><p>Spring Bean 相关：</p><ul><li>@Autowired : 自动导入对象到类中，被注入进的类同样要被 Spring 容器管理。</li><li>@RestController : @RestController注解是@Controller和@ResponseBody的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器。</li><li>@Component ：通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component 注解标注。</li><li>@Repository : 对应持久层即 Dao 层，主要用于数据库相关操作。</li><li>@Service : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</li><li>@Controller : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 Service 层返回数据给前端页面。</li></ul><p><strong>处理常见的 HTTP 请求类型：</strong></p><ul><li>@GetMapping : GET 请求、</li><li>@PostMapping : POST 请求。</li><li>@PutMapping : PUT 请求。</li><li>@DeleteMapping : DELETE 请求。</li></ul><p>前后端传值：</p><ul><li>@RequestParam以及@Pathvairable ：@PathVariable用于获取路径参数，@RequestParam用于获取查询参数。</li><li>@RequestBody ：用于读取 Request 请求（可能是 POST,PUT,DELETE,GET 请求）的 body 部分并且 Content-Type 为 application/json 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上去。系统会使用HttpMessageConverter或者自定义的HttpMessageConverter将请求的 body 中的 json 字符串转换为 java 对象。</li></ul><p>详细介绍可以查看这篇文章：<a href="https://javaguide.cn/system-design/framework/spring/spring-common-annotations.html" target="_blank" rel="noopener">《Spring/Spring Boot 常用注解总结》</a> 。</p><h5 id="10-Spirng-Boot-常用的两种配置文件"><a href="#10-Spirng-Boot-常用的两种配置文件" class="headerlink" title="10. Spirng Boot 常用的两种配置文件"></a>10. Spirng Boot 常用的两种配置文件</h5><p>我们可以通过 application.properties或者 application.yml 对 Spring Boot 程序进行简单的配置。如果，你不进行配置的话，就是使用的默认配置。</p><h5 id="11-什么是-YAML？YAML-配置的优势在哪里"><a href="#11-什么是-YAML？YAML-配置的优势在哪里" class="headerlink" title="11. 什么是 YAML？YAML 配置的优势在哪里 ?"></a>11. 什么是 YAML？YAML 配置的优势在哪里 ?</h5><p>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。</p><p>相比于 Properties 配置的方式，YAML 配置的方式更加直观清晰，简介明了，有层次感。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\036f4674-44ca-42bb-91d5-9256452e6316.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>但是，YAML 配置的方式有一个缺点，那就是不支持 @PropertySource 注解导入自定义的 YAML 配置。</p><h5 id="12-Spring-Boot-常用的读取配置文件的方法有哪些？"><a href="#12-Spring-Boot-常用的读取配置文件的方法有哪些？" class="headerlink" title="12. Spring Boot 常用的读取配置文件的方法有哪些？"></a>12. Spring Boot 常用的读取配置文件的方法有哪些？</h5><p>我们要读取的配置文件application.yml 内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wuhan2020:</span> <span class="number">2020</span><span class="string">年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my-profile:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">Guide哥</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">koushuangbwcx@163.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">library:</span></span><br><span class="line"><span class="attr">  location:</span> <span class="string">湖北武汉加油中国加油</span></span><br><span class="line"><span class="attr">  books:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">天才基本法</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">时间的秩序</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">了不起的我</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？</span> <span class="string">如何走出人生的艰难时刻？</span></span><br></pre></td></tr></table></figure><h6 id="12-1-通过-value-读取比较简单的配置信息"><a href="#12-1-通过-value-读取比较简单的配置信息" class="headerlink" title="12.1. 通过 @value 读取比较简单的配置信息"></a>12.1. 通过 @value 读取比较简单的配置信息</h6><p>使用 <code>@Value(&quot;${property}&quot;)</code>读取比较简单的配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;wuhan2020&#125;"</span>)</span><br><span class="line">String wuhan2020;</span><br></pre></td></tr></table></figure><blockquote><p><strong>需要注意的是<code>@value</code>这种方式是不被推荐的，Spring 比较建议的是下面几种读取配置信息的方式。</strong></p></blockquote><h6 id="12-2-通过-ConfigurationProperties读取并与-bean-绑定"><a href="#12-2-通过-ConfigurationProperties读取并与-bean-绑定" class="headerlink" title="12.2. 通过@ConfigurationProperties读取并与 bean 绑定"></a>12.2. 通过@ConfigurationProperties读取并与 bean 绑定</h6><blockquote><p><strong>LibraryProperties 类上加了 <code>@Component</code> 注解，我们可以像使用普通 bean 一样将其注入到类中使用。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"library"</span>)</span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LibraryProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        String description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候你就可以像使用普通 bean 一样，将其注入到类中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide.readconfigproperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadConfigPropertiesApplication</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LibraryProperties library;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadConfigPropertiesApplication</span><span class="params">(LibraryProperties library)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.library = library;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ReadConfigPropertiesApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(library.getLocation());</span><br><span class="line">        System.out.println(library.getBooks());    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">湖北武汉加油中国加油</span><br><span class="line">[LibraryProperties.Book(name=天才基本法, description........]</span><br></pre></td></tr></table></figure><h6 id="12-3-通过-ConfigurationProperties读取并校验"><a href="#12-3-通过-ConfigurationProperties读取并校验" class="headerlink" title="12.3. 通过@ConfigurationProperties读取并校验"></a>12.3. 通过@ConfigurationProperties读取并校验</h6><p>我们先将<code>application.yml</code>修改为如下内容，明显看出这不是一个正确的 email 格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my-profile:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">Guide哥</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">koushuangbwcx@</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>ProfileProperties 类没有加 @Component 注解。我们在我们要使用ProfileProperties 的地方使用@EnableConfigurationProperties注册我们的配置 bean：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"my-profile"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfileProperties</span> </span>&#123;</span><br><span class="line">   <span class="meta">@NotEmpty</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Email</span></span><br><span class="line">   <span class="meta">@NotEmpty</span></span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//配置文件中没有读取到的话就用默认值</span></span><br><span class="line">   <span class="keyword">private</span> Boolean handsome = Boolean.TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide.readconfigproperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ProfileProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadConfigPropertiesApplication</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProfileProperties profileProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadConfigPropertiesApplication</span><span class="params">(ProfileProperties profileProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.profileProperties = profileProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ReadConfigPropertiesApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(profileProperties.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们的邮箱格式不正确，所以程序运行的时候就报错，根本运行不起来，保证了数据类型的安全性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under &apos;my-profile&apos; to cn.javaguide.readconfigproperties.ProfileProperties failed:</span><br><span class="line"></span><br><span class="line">    Property: my-profile.email</span><br><span class="line">    Value: koushuangbwcx@</span><br><span class="line">    Origin: class path resource [application.yml]:5:10</span><br><span class="line">    Reason: must be a well-formed email address</span><br></pre></td></tr></table></figure><p>我们把邮箱测试改为正确的之后再运行，控制台就能成功打印出读取到的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProfileProperties(name=Guide哥, email=koushuangbwcx@163.com, handsome=true)</span><br></pre></td></tr></table></figure><h6 id="12-4-PropertySource读取指定的-properties-文件"><a href="#12-4-PropertySource读取指定的-properties-文件" class="headerlink" title="12.4. @PropertySource读取指定的 properties 文件"></a>12.4. @PropertySource读取指定的 properties 文件</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:website.properties"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebSite webSite;</span><br><span class="line"></span><br><span class="line">System.out.println(webSite.getUrl());<span class="comment">//https://javaguide.cn/</span></span><br></pre></td></tr></table></figure><h5 id="13-Spring-Boot-加载配置文件的优先级了解么？"><a href="#13-Spring-Boot-加载配置文件的优先级了解么？" class="headerlink" title="13. Spring Boot 加载配置文件的优先级了解么？"></a>13. Spring Boot 加载配置文件的优先级了解么？</h5><p>Spring 读取配置文件也是有优先级的，直接上图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\823d9ef9-2f6d-4533-9c31-1ab278115937.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>更对内容请查看官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p><h5 id="14-常用的-Bean-映射工具有哪些？"><a href="#14-常用的-Bean-映射工具有哪些？" class="headerlink" title="14. 常用的 Bean 映射工具有哪些？"></a>14. 常用的 Bean 映射工具有哪些？</h5><p>我们经常在代码中会对一个数据结构封装成DO、SDO、DTO、VO等，而这些Bean中的大部分属性都是一样的，所以使用属性拷贝类工具可以帮助我们节省大量的 set 和 get 操作。</p><p>常用的 Bean 映射工具有：Spring BeanUtils、Apache BeanUtils、MapStruct、ModelMapper、Dozer、Orika、JMapper 。</p><p>由于 Apache BeanUtils 、Dozer 、ModelMapper 性能太差，所以不建议使用。MapStruct 性能更好而且使用起来比较灵活，是一个比较不错的选择。</p><h5 id="15-Spring-Boot-如何监控系统实际运行状况？"><a href="#15-Spring-Boot-如何监控系统实际运行状况？" class="headerlink" title="15. Spring Boot 如何监控系统实际运行状况？"></a>15. Spring Boot 如何监控系统实际运行状况？</h5><p>我们可以使用 Spring Boot Actuator 来对 Spring Boot 项目进行简单的监控。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>集成了这个模块之后，你的 Spring Boot 应用程序就自带了一些开箱即用的获取程序运行时的内部状态信息的 API。</p><p>比如通过 GET 方法访问 <code>/health</code>接口，你就可以获取应用程序的健康指标。</p><h5 id="16-Spring-Boot-如何做请求参数校验？"><a href="#16-Spring-Boot-如何做请求参数校验？" class="headerlink" title="16. Spring Boot 如何做请求参数校验？"></a>16. Spring Boot 如何做请求参数校验？</h5><p>数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。</p><p>Spring Boot 程序做请求参数校验的话只需要spring-boot-starter-web 依赖就够了，它的子依赖包含了我们所需要的东西。</p><h6 id="16-1-校验注解"><a href="#16-1-校验注解" class="headerlink" title="16.1. 校验注解"></a>16.1. 校验注解</h6><p><strong>JSR 提供的校验注解:</strong></p><ul><li>@Null 被注释的元素必须为 null</li><li>@NotNull 被注释的元素必须不为 null</li><li>@AssertTrue 被注释的元素必须为 true</li><li>@AssertFalse 被注释的元素必须为 false</li><li>@Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li>@Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li>@DecimalMin(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li>@DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li>@Size(max=, min=) 被注释的元素的大小必须在指定的范围内</li><li>@Digits (integer, fraction) 被注释的元素必须是一个数字，其值必须在可接受的范围内</li><li>@Past 被注释的元素必须是一个过去的日期</li><li>@Future 被注释的元素必须是一个将来的日期</li><li>@Pattern(regex=,flag=) 被注释的元素必须符合指定的正则表达式</li></ul><p><strong>Hibernate Validator 提供的校验注解：</strong></p><ul><li>@NotBlank(message =) 验证字符串非 null，且长度必须大于 0</li><li>@Email 被注释的元素必须是电子邮箱地址</li><li>@Length(min=,max=) 被注释的字符串的大小必须在指定的范围内</li><li>@NotEmpty 被注释的字符串的必须非空</li><li>@Range(min=,max=,message=) 被注释的元素必须在合适的范围内</li></ul><p><strong>使用示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"classId 不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String classId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size</span>(max = <span class="number">33</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"name 不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"((^Man$|^Woman$|^UGM$))"</span>, message = <span class="string">"sex 值不在可选范围"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"sex 不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"email 格式不正确"</span>)</span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"email 不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="16-2-验证请求体-RequestBody"><a href="#16-2-验证请求体-RequestBody" class="headerlink" title="16.2. 验证请求体(RequestBody)"></a>16.2. 验证请求体(RequestBody)</h6><p>我们在需要验证的参数上加上了<code>@Valid</code>注解，如果验证失败，它将抛出<code>MethodArgumentNotValidException</code>。默认情况下，Spring 会将此异常转换为 HTTP Status 400（错误请求）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Person&gt; <span class="title">getPerson</span><span class="params">(@RequestBody @Valid Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="16-3-验证请求参数-Path-Variables-和-Request-Parameters"><a href="#16-3-验证请求参数-Path-Variables-和-Request-Parameters" class="headerlink" title="16.3. 验证请求参数(Path Variables 和 Request Parameters)"></a>16.3. 验证请求参数(Path Variables 和 Request Parameters)</h6><p>一定一定不要忘记在类上加上 Validated 注解了，这个参数可以告诉 Spring 去校验方法参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/person/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Integer&gt; <span class="title">getPersonByID</span><span class="params">(@Valid @PathVariable(<span class="string">"id"</span>)</span> @<span class="title">Max</span><span class="params">(value = <span class="number">5</span>,message = <span class="string">"超过 id 的范围了"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/person"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">getPersonByName</span><span class="params">(@Valid @RequestParam(<span class="string">"name"</span>)</span> @<span class="title">Size</span><span class="params">(max = <span class="number">6</span>,message = <span class="string">"超过 name 的范围了"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多内容请参考我的原创： <a href="https://javaguide.cn/system-design/framework/spring/spring-common-annotations.html" target="_blank" rel="noopener">如何在 Spring/Spring Boot 中做参数校验？你需要了解的都在这里！</a></p><h5 id="17-如何使用-Spring-Boot-实现全局异常处理？"><a href="#17-如何使用-Spring-Boot-实现全局异常处理？" class="headerlink" title="17. 如何使用 Spring Boot 实现全局异常处理？"></a>17. 如何使用 Spring Boot 实现全局异常处理？</h5><p>可以使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常。</p><p>更多内容请参考我的原创 ：<a href="https://snailclimb.gitee.io/springboot-guide/#/./docs/advanced/springboot-handle-exception-plus" target="_blank" rel="noopener">Spring Boot 异常处理在实际项目中的应用</a></p><h5 id="18-Spring-Boot-中如何实现定时任务"><a href="#18-Spring-Boot-中如何实现定时任务" class="headerlink" title="18. Spring Boot 中如何实现定时任务 ?"></a>18. Spring Boot 中如何实现定时任务 ?</h5><p>我们使用 @Scheduled 注解就能很方便地创建一个定时任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(ScheduledTasks.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fixedRate：固定速率执行。每5秒执行一次。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTimeWithFixedRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Current Thread : &#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">        log.info(<span class="string">"Fixed Rate Task : The time is now &#123;&#125;"</span>, dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单纯依靠 <code>@Scheduled</code> 注解 还不行，我们还需要在 SpringBoot 中我们只需要在启动类上加上<code>@EnableScheduling</code> 注解，这样才可以启动定时任务。<code>@EnableScheduling</code>注解的作用是发现注解 <code>@Scheduled</code>的任务并在后台执行该任务。</p><h3 id="Netty-常见面试题总结"><a href="#Netty-常见面试题总结" class="headerlink" title="Netty 常见面试题总结"></a><strong>Netty 常见面试题总结</strong></h3><p>很多小伙伴搞不清楚为啥要学习 Netty ，正式今天这篇文章开始之前，简单说一下自己的看法：</p><ul><li>Netty 基于 NIO （NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO ），使用 Netty 可以极大地简化 TCP 和 UDP 套接字服务器等网络编程，并且性能以及安全性等很多方面都非常优秀。</li><li>我们平常经常接触的 Dubbo、RocketMQ、Elasticsearch、gRPC、Spark 等等热门开源项目都用到了 Netty。</li><li>大部分微服务框架底层涉及到网络通信的部分都是基于 Netty 来做的，比如说 Spring Cloud 生态系统中的网关 Spring Cloud Gateway。</li></ul><p>简单总结一下和 Netty 相关问题。</p><h4 id="BIO-NIO-和-AIO-有啥区别？"><a href="#BIO-NIO-和-AIO-有啥区别？" class="headerlink" title="BIO,NIO 和 AIO 有啥区别？"></a>BIO,NIO 和 AIO 有啥区别？</h4><p>👨‍💻面试官 ：先来简单介绍一下 BIO,NIO 和 AIO 3 者的区别吧！</p><p>🙋 我 ：好的！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ca80695a-53b5-48a4-b54d-b2fa021ebc69.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li><strong>BIO (Blocking I/O):</strong> 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li><strong>NIO (Non-blocking/New I/O):</strong> NIO 是一种同步非阻塞的 I/O 模型，于 Java 1.4 中引入，对应 java.nio包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li><strong>AIO (Asynchronous I/O):</strong> AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</li></ul><p>关于 IO 模型更详细的介绍，你可以看这篇文章：<a href="https://javaguide.cn/java/io/io-model.html" target="_blank" rel="noopener">《常见的 IO 模型有哪些？Java 中的 BIO、NIO、AIO 有啥区别？》</a> 这篇文章。</p><h4 id="Netty-是什么？"><a href="#Netty-是什么？" class="headerlink" title="Netty 是什么？"></a>Netty 是什么？</h4><p>👨‍💻面试官 ：那你再来介绍一下自己对 Netty 的认识吧！小伙子。</p><p>🙋 我 ：好的！那我就简单用 3 点来概括一下 Netty 吧！</p><ol><li>Netty 是一个 基于 NIO 的 client-server(客户端服务器)框架，使用它可以快速简单地开发网络应用程序。</li><li>它极大地简化并优化了 TCP 和 UDP 套接字服务器等网络编程,并且性能以及安全性等很多方面甚至都要更好。</li><li>支持多种协议 如 FTP，SMTP，HTTP 以及各种二进制和基于文本的传统协议。</li></ol><p>用官方的总结就是：<strong>Netty 成功地找到了一种在不妥协可维护性和性能的情况下实现易于开发，性能，稳定性和灵活性的方法。</strong></p><p>网络编程我愿意称中 Netty 为王 。</p><h4 id="为啥不直接用-NIO-呢"><a href="#为啥不直接用-NIO-呢" class="headerlink" title="为啥不直接用 NIO 呢?"></a>为啥不直接用 NIO 呢?</h4><p>👨‍💻面试官 ：你上面也说了 Netty 基于 NIO，那为啥不直接用 NIO 呢?。</p><p>不用 NIO 主要是因为 NIO 的编程模型复杂而且存在一些 BUG，并且对编程功底要求比较高。下图就是一个典型的使用 NIO 进行编程的案例：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F65cda835ebfc0909924fc3cdb88099a7.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>而且，NIO 在面对断连重连、包丢失、粘包等问题时处理过程非常复杂。Netty 的出现正是为了解决这些问题，更多关于 Netty 的特点可以看下面的内容。</p><h4 id="为什么要用-Netty？"><a href="#为什么要用-Netty？" class="headerlink" title="为什么要用 Netty？"></a>为什么要用 Netty？</h4><p>👨‍💻面试官 ：为什么要用 Netty 呢？能不能说一下自己的看法。</p><p>🙋 我 ：因为 Netty 具有下面这些优点，并且相比于直接使用 JDK 自带的 NIO 相关的 API 来说更加易用。</p><ul><li>统一的 API，支持多种传输类型，阻塞和非阻塞的。</li><li>简单而强大的线程模型。</li><li>自带编解码器解决 TCP 粘包/拆包问题。</li><li>自带各种协议栈。</li><li>真正的无连接数据包套接字支持。</li><li>比直接使用 Java 核心 API 有更高的吞吐量、更低的延迟、更低的资源消耗和更少的内存复制。</li><li>安全性不错，有完整的 SSL/TLS 以及 StartTLS 支持。</li><li>社区活跃</li><li>成熟稳定，经历了大型项目的使用和考验，而且很多开源项目都使用到了 Netty， 比如我们经常接触的 Dubbo、RocketMQ 等等。</li><li>……</li></ul><h4 id="Netty-应用场景了解么？"><a href="#Netty-应用场景了解么？" class="headerlink" title="Netty 应用场景了解么？"></a>Netty 应用场景了解么？</h4><p>👨‍💻面试官 ：能不能通俗地说一下使用 Netty 可以做什么事情？</p><p>🙋 我 ：凭借自己的了解，简单说一下吧！理论上来说，NIO 可以做的事情 ，使用 Netty 都可以做并且更好。Netty 主要用来做网络通信 :</p><ol><li>作为 RPC 框架的网络通信工具 ： 我们在分布式系统中，不同服务节点之间经常需要相互调用，这个时候就需要 RPC 框架了。不同服务节点的通信是如何做的呢？可以使用 Netty 来做。比如我调用另外一个节点的方法的话，至少是要让对方知道我调用的是哪个类中的哪个方法以及相关参数吧！</li><li>实现一个自己的 HTTP 服务器 ：通过 Netty 我们可以自己实现一个简单的 HTTP 服务器，这个大家应该不陌生。说到 HTTP 服务器的话，作为 Java 后端开发，我们一般使用 Tomcat 比较多。一个最基本的 HTTP 服务器可要以处理常见的 HTTP Method 的请求，比如 POST 请求、GET 请求等等。</li><li>实现一个即时通讯系统 ： 使用 Netty 我们可以实现一个可以聊天类似微信的即时通讯系统，这方面的开源项目还蛮多的，可以自行去 Github 找一找。</li><li>实现消息推送系统 ：市面上有很多消息推送系统都是基于 Netty 来做的。</li><li>……</li></ol><h4 id="那些开源项目用到了-Netty"><a href="#那些开源项目用到了-Netty" class="headerlink" title="那些开源项目用到了 Netty?"></a>那些开源项目用到了 Netty?</h4><p>我们平常经常接触的 Dubbo、RocketMQ、Elasticsearch、gRPC 等等都用到了 Netty。</p><p>可以说大量的开源项目都用到了 Netty，所以掌握 Netty 有助于你更好的使用这些开源项目并且让你有能力对其进行二次开发。</p><p>实际上还有很多很多优秀的项目用到了 Netty,Netty 官方也做了统计，统计结果在这里：<a href="https://netty.io/wiki/related-projects.html" target="_blank" rel="noopener">https://netty.io/wiki/related-projects.html</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Ffcd551063cc03f0b8afb238f6a569fde.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="介绍一下-Netty-的核心组件？"><a href="#介绍一下-Netty-的核心组件？" class="headerlink" title="介绍一下 Netty 的核心组件？"></a>介绍一下 Netty 的核心组件？</h4><p>👨‍💻面试官 ：Netty 核心组件有哪些？分别有什么作用？</p><p>🙋 我 ：表面上，嘴上开始说起 Netty 的核心组件有哪些，实则，内心已经开始 mmp 了，深度怀疑这面试官是存心搞我啊！</p><p>简单介绍 Netty 最核心的一些组件（对于每一个组件这里不详细介绍）。通过下面这张图你可以将我提到的这些 Netty 核心组件串联起来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Ff2f7557a44dbb95963b8ddd6a0960bb9.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="Bytebuf（字节容器）"><a href="#Bytebuf（字节容器）" class="headerlink" title="Bytebuf（字节容器）"></a>Bytebuf（字节容器）</h5><p><strong>网络通信最终都是通过字节流进行传输的。 ByteBuf 就是 Netty 提供的一个字节容器，其内部是一个字节数组。</strong> 当我们通过 Netty 传输数据的时候，就是通过 ByteBuf 进行的。</p><p>我们可以将 ByteBuf 看作是 Netty 对 Java NIO 提供了 ByteBuffer 字节容器的封装和抽象。</p><p>有很多小伙伴可能就要问了 ： <strong>为什么不直接使用 Java NIO 提供的 ByteBuffer 呢？</strong></p><p>因为 ByteBuffer 这个类使用起来过于复杂和繁琐。</p><h5 id="Bootstrap-和-ServerBootstrap（启动引导类）"><a href="#Bootstrap-和-ServerBootstrap（启动引导类）" class="headerlink" title="Bootstrap 和 ServerBootstrap（启动引导类）"></a>Bootstrap 和 ServerBootstrap（启动引导类）</h5><p><strong><code>Bootstrap</code>是客户端的启动引导类/辅助类</strong>，具体使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//创建客户端启动引导/辅助类：Bootstrap</span></span><br><span class="line">    Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">    <span class="comment">//指定线程模型</span></span><br><span class="line">    b.group(group).</span><br><span class="line">            ......</span><br><span class="line">    <span class="comment">// 尝试建立连接</span></span><br><span class="line">    ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line">    f.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 优雅关闭相关线程组资源</span></span><br><span class="line">    group.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>ServerBootstrap</code> 是服务端的启动引导类/辅助类</strong>，具体使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class="line">    EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">    EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class="line">        ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">        <span class="comment">//3.给引导类配置两大线程组,确定了线程模型</span></span><br><span class="line">        b.group(bossGroup, workerGroup).</span><br><span class="line">               ......</span><br><span class="line">        <span class="comment">// 6.绑定端口</span></span><br><span class="line">        ChannelFuture f = b.bind(port).sync();</span><br><span class="line">        <span class="comment">// 等待连接关闭</span></span><br><span class="line">        f.channel().closeFuture().sync();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//7.优雅关闭相关线程组资源</span></span><br><span class="line">        bossGroup.shutdownGracefully();</span><br><span class="line">        workerGroup.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的示例中，我们可以看出：</p><ol><li>Bootstrap 通常使用 connect() 方法连接到远程的主机和端口，作为一个 Netty TCP 协议通信中的客户端。另外，Bootstrap 也可以通过 bind() 方法绑定本地的一个端口，作为 UDP 协议通信中的一端。</li><li>ServerBootstrap通常使用 bind() 方法绑定本地的端口上，然后等待客户端的连接。</li><li>Bootstrap 只需要配置一个线程组— EventLoopGroup ,而 ServerBootstrap需要配置两个线程组— EventLoopGroup ，一个用于接收连接，一个用于具体的 IO 处理。</li></ol><h5 id="Channel（网络操作抽象类）"><a href="#Channel（网络操作抽象类）" class="headerlink" title="Channel（网络操作抽象类）"></a>Channel（网络操作抽象类）</h5><p><code>Channel</code> 接口是 Netty 对网络操作抽象类。通过 <code>Channel</code>我们可以进行 I/O 操作。</p><p>一旦客户端成功连接服务端，就会新建一个 Channel 同该用户端进行绑定，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  通过 Bootstrap 的 connect 方法连接到服务端</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Channel <span class="title">doConnect</span><span class="params">(InetSocketAddress inetSocketAddress)</span> </span>&#123;</span><br><span class="line">     CompletableFuture&lt;Channel&gt; completableFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">     bootstrap.connect(inetSocketAddress).addListener((ChannelFutureListener) future -&gt; &#123;</span><br><span class="line">         <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">             completableFuture.complete(future.channel());</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> completableFuture.get();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>比较常用的<code>Channel</code>接口实现类是 ：</p><ul><li>NioServerSocketChannel（服务端）</li><li>NioSocketChannel（客户端）</li></ul><p>这两个<code>Channel</code>可以和 BIO 编程模型中的<code>ServerSocket</code>以及<code>Socket</code>两个概念对应上。</p><h5 id="EventLoop（事件循环）"><a href="#EventLoop（事件循环）" class="headerlink" title="EventLoop（事件循环）"></a>EventLoop（事件循环）</h5><h6 id="EventLoop-介绍"><a href="#EventLoop-介绍" class="headerlink" title="EventLoop 介绍"></a>EventLoop 介绍</h6><p>这么说吧！EventLoop（事件循环）接口可以说是 Netty 中最核心的概念了！</p><p>《Netty 实战》这本书是这样介绍它的：</p><blockquote><p>EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件。</p></blockquote><p>是不是很难理解？说实话，我学习 Netty 的时候看到这句话是没太能理解的。</p><p>说白了，<strong>EventLoop 的主要作用实际就是责监听网络事件并调用事件处理器进行相关 I/O 操作（读写）的处理</strong>。</p><h6 id="Channel-和-EventLoop-的关系"><a href="#Channel-和-EventLoop-的关系" class="headerlink" title="Channel 和 EventLoop 的关系"></a>Channel 和 EventLoop 的关系</h6><p>那 Channel 和 EventLoop 直接有啥联系呢？</p><p><strong>Channel 为 Netty 网络操作(读写等操作)抽象类，EventLoop 负责处理注册到其上的Channel 的 I/O 操作，两者配合进行 I/O 操作。</strong></p><h6 id="EventloopGroup-和-EventLoop-的关系"><a href="#EventloopGroup-和-EventLoop-的关系" class="headerlink" title="EventloopGroup 和 EventLoop 的关系"></a>EventloopGroup 和 EventLoop 的关系</h6><p>EventLoopGroup 包含多个 EventLoop（每一个 EventLoop 通常内部包含一个线程），它管理着所有的 EventLoop 的生命周期。</p><p>并且，<strong>EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理，即 Thread 和 EventLoop 属于 1 : 1 的关系，从而保证线程安全</strong>。</p><p>下图是 Netty <strong>NIO</strong> 模型对应的<code>EventLoop</code> 模型。通过这个图应该可以将<code>EventloopGroup、EventLoop、 Channel</code>三者联系起来。</p><p>​    <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F6e1e15c1448cc2bf5d9c24446f3c515b.png&sign=cc48ba24302d0ef7ab3a604d6ce6e27aec3adb38f07b9adfbf1757299bb3bbe2" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure></p><h5 id="ChannelHandler（消息处理器）-和-ChannelPipeline（ChannelHandler-对象链表）"><a href="#ChannelHandler（消息处理器）-和-ChannelPipeline（ChannelHandler-对象链表）" class="headerlink" title="ChannelHandler（消息处理器） 和 ChannelPipeline（ChannelHandler 对象链表）"></a><strong>ChannelHandler（消息处理器） 和 ChannelPipeline（ChannelHandler 对象链表）</strong></h5><p>下面这段代码使用过 Netty 的小伙伴应该不会陌生，我们指定了序列化编解码器以及自定义的 ChannelHandler 处理消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b.group(eventLoopGroup)</span><br><span class="line">        .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> NettyKryoDecoder(kryoSerializer, RpcResponse.class));</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> NettyKryoEncoder(kryoSerializer, RpcRequest.class));</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> KryoClientHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong><code>ChannelHandler</code>是消息的具体处理器，主要负责处理客户端/服务端接收和发送的数据。</strong></p><p>当 Channel 被创建时，它会被自动地分配到它专属的 <code>ChannelPipeline</code>。 一个<code>Channel</code>包含一个 <code>ChannelPipeline</code>。 <code>ChannelPipeline</code> 为 <code>ChannelHandler</code> 的链，一个 <code>pipeline</code>上可以有多个<code>ChannelHandler</code>。</p><p>我们可以在 <code>ChannelPipeline</code>上通过 <code>addLast()</code>方法添加一个或者多个<code>ChannelHandler</code>（一个数据或者事件可能会被多个 Handler 处理） 。当一个 <code>ChannelHandler</code>处理完之后就将数据交给下一个 <code>ChannelHandler</code>。</p><p>当 <code>ChannelHandler</code> 被添加到的<code>ChannelPipeline</code> 它得到一个 <code>ChannelHandlerContext</code>，它代表一个 <code>ChannelHandler</code> 和 <code>ChannelPipeline</code>之间的“绑定”。 <code>ChannelPipeline</code> 通过 <code>ChannelHandlerContext</code>来间接管理 <code>ChannelHandler</code> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images(1)-166606199525910" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="ChannelFuture（操作执行结果）"><a href="#ChannelFuture（操作执行结果）" class="headerlink" title="ChannelFuture（操作执行结果）"></a><strong>ChannelFuture（操作执行结果）</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelFuture</span> <span class="keyword">extends</span> <span class="title">Future</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Channel <span class="title">channel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">addListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="keyword">super</span> Void&gt;&gt; var1)</span></span>;</span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">    <span class="function">ChannelFuture <span class="title">sync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Netty 中所有的 I/O 操作都为异步的，我们不能立刻得到操作是否执行成功。</p><p>不过，你可以通过 <code>ChannelFuture</code>接口的 <code>addListener()</code>方法注册一个 <code>ChannelFutureListener</code>，当操作执行成功或者失败时，监听就会自动触发返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ChannelFuture f = b.connect(host, port).addListener(future -&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"连接成功!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.err.println(<span class="string">"连接失败!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).sync();</span><br></pre></td></tr></table></figure><p>并且，你还可以通过ChannelFuture 的 channel() 方法获取连接相关联的Channel 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Channel channel = f.channel();</span><br></pre></td></tr></table></figure><p>另外，我们还可以通过 ChannelFuture 接口的 sync()方法让异步的操作编程同步的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind()是异步的，但是，你可以通过 sync()方法将其变为同步。</span></span><br><span class="line">ChannelFuture f = b.bind(port).sync();</span><br></pre></td></tr></table></figure><h4 id="NioEventLoopGroup-默认的构造函数会起多少线程？"><a href="#NioEventLoopGroup-默认的构造函数会起多少线程？" class="headerlink" title="NioEventLoopGroup 默认的构造函数会起多少线程？"></a>NioEventLoopGroup 默认的构造函数会起多少线程？</h4><p>👨‍💻面试官 ：看过 Netty 的源码了么？NioEventLoopGroup 默认的构造函数会起多少线程呢？</p><p>🙋 我 ：嗯嗯！看过部分。</p><p>回顾我们在上面写的服务器端的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br></pre></td></tr></table></figure><p>为了搞清楚<code>NioEventLoopGroup</code>默认的构造函数 到底创建了多少个线程，我们来看一下它的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无参构造函数。</span></span><br><span class="line"><span class="comment"> * nThreads:0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用下一个构造方法</span></span><br><span class="line">    <span class="keyword">this</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executor：null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//继续调用下一个构造方法</span></span><br><span class="line">    <span class="keyword">this</span>(nThreads, (Executor) <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间省略部分构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RejectedExecutionHandler（）：RejectedExecutionHandlers.reject()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NioEventLoopGroup</span><span class="params">(<span class="keyword">int</span> nThreads, Executor executor, <span class="keyword">final</span> SelectorProvider selectorProvider,<span class="keyword">final</span> SelectStrategyFactory selectStrategyFactory)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//开始调用父类的构造函数</span></span><br><span class="line">    <span class="keyword">super</span>(nThreads, executor, selectorProvider, selectStrategyFactory, RejectedExecutionHandlers.reject());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直向下走下去的话，你会发现在 <code>MultithreadEventLoopGroup</code> 类中有相关的指定线程数的代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从1，系统属性，CPU核心数*2 这三个值中取出一个最大的</span></span><br><span class="line"><span class="comment">//可以得出 DEFAULT_EVENT_LOOP_THREADS 的值为CPU核心数*2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_EVENT_LOOP_THREADS = Math.max(<span class="number">1</span>, SystemPropertyUtil.getInt(<span class="string">"io.netty.eventLoopThreads"</span>, NettyRuntime.availableProcessors() * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被调用的父类构造函数，NioEventLoopGroup 默认的构造函数会起多少线程的秘密所在</span></span><br><span class="line"><span class="comment">// 当指定的线程数nThreads为0时，使用默认的线程数DEFAULT_EVENT_LOOP_THREADS</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MultithreadEventLoopGroup</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory, Object... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(nThreads == <span class="number">0</span> ? DEFAULT_EVENT_LOOP_THREADS : nThreads, threadFactory, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，我们发现 <code>NioEventLoopGroup</code> 默认的构造函数实际会起的线程数为 <strong>CPU核心数*2</strong>。</p><p>另外，如果你继续深入下去看构造函数的话，你会发现每个<code>NioEventLoopGroup</code>对象内部都会分配一组<code>NioEventLoop</code>，其大小是<code>nThreads</code>, 这样就构成了一个线程池， 一个<code>NIOEventLoop</code>和一个线程相对应，这和我们上面说的<code>EventloopGroup</code>和 <code>EventLoop</code>关系这部分内容相对应。</p><h4 id="Reactor-线程模型"><a href="#Reactor-线程模型" class="headerlink" title="Reactor 线程模型"></a>Reactor 线程模型</h4><p>👨‍💻面试官 ：大部分网络框架都是基于 Reactor 模式设计开发的。你先聊聊 Reactor 线程模型吧！</p><p>🙋 我 ：好的呀！</p><p>Reactor 是一种经典的线程模型，Reactor 模式基于事件驱动，特别适合处理海量的 I/O 事件。</p><p>Reactor 线程模型分为单线程模型、多线程模型以及主从多线程模型。</p><blockquote><p>以下图片来源于网络，原出处不明，如有侵权请联系我。</p></blockquote><h5 id="单线程-Reactor"><a href="#单线程-Reactor" class="headerlink" title="单线程 Reactor"></a>单线程 Reactor</h5><p>所有的 IO 操作都由同一个 NIO 线程处理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fe5493f74f5ed16c462c36654170e16ae.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>单线程 Reactor 的优点是对系统资源消耗特别小，但是，没办法支撑大量请求的应用场景并且处理请求的时间可能非常慢，毕竟只有一个线程在工作嘛！所以，一般实际项目中不会使用单线程 Reactor 。</strong></p><p>为了解决这些问题，演进出了 Reactor 多线程模型。</p><h5 id="多线程-Reactor"><a href="#多线程-Reactor" class="headerlink" title="多线程 Reactor"></a>多线程 Reactor</h5><p>一个线程负责接受请求,一组 NIO 线程处理 IO 操作<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F0e694ecd1399d78b8983f22fc0e2341e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><strong>大部分场景下多线程 Reactor 模型是没有问题的，但是在一些并发连接数比较多（如百万并发）的场景下，一个线程负责接受客户端请求就存在性能问题了。</strong></p><p>为了解决这些问题，演进出了主从多线程 Reactor 模型。</p><h5 id="主从多线程-Reactor"><a href="#主从多线程-Reactor" class="headerlink" title="主从多线程 Reactor"></a>主从多线程 Reactor</h5><p>一组 NIO 线程负责接受请求，一组 NIO 线程处理 IO 操作。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F4059d7d2e2d73b876774ce7e55cc819c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="Netty-线程模型了解么？"><a href="#Netty-线程模型了解么？" class="headerlink" title="Netty 线程模型了解么？"></a>Netty 线程模型了解么？</h4><p>👨‍💻面试官 ：说一下 Netty 线程模型吧！</p><p>🙋 我 ：大部分网络框架都是基于 Reactor 模式设计开发的。</p><blockquote><p>Reactor 模式基于事件驱动，采用多路复用将事件分发给相应的 Handler 处理，非常适合处理海量 IO 的场景。</p></blockquote><p>在 Netty 主要靠 <code>NioEventLoopGroup</code> 线程池来实现具体的线程模型的 。</p><p>我们实现服务端的时候，一般会初始化两个线程组：</p><ol><li><strong>bossGroup :</strong>接收连接。</li><li><strong>workerGroup ：</strong>负责具体的处理，交由对应的 Handler 处理。</li></ol><p>下面我们来详细看一下 Netty 中的线程模型吧！</p><h5 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h5><p>一个线程需要执行处理所有的 <code>accept、read、decode、process、encode、send</code> 事件。对于高负载、高并发，并且对性能要求比较高的场景不适用。</p><p>对应到 Netty 代码是下面这样的</p><blockquote><p>使用 NioEventLoopGroup 类的无参构造函数设置线程数量的默认值就是 <strong>CPU 核心数 *2</strong> 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.eventGroup既用于处理客户端连接，又负责具体的处理。</span></span><br><span class="line">EventLoopGroup eventGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//2.创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">          boobtstrap.group(eventGroup, eventGroup)</span><br><span class="line">          <span class="comment">//......</span></span><br></pre></td></tr></table></figure><h5 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h5><p>一个 Acceptor 线程只负责监听客户端的连接，一个 NIO 线程池负责具体处理： accept、read、decode、process、encode、send 事件。满足绝大部分应用场景，并发连接量不大的时候没啥问题，但是遇到并发连接大的时候就可能会出现问题，成为性能瓶颈。</p><p>对应到 Netty 代码是下面这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//2.创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class="line">  ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">  <span class="comment">//3.给引导类配置两大线程组,确定了线程模型</span></span><br><span class="line">  b.group(bossGroup, workerGroup)</span><br><span class="line">    <span class="comment">//......</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d142a1cd-45b5-446c-96fd-9627c4f7741c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="主从多线程模型"><a href="#主从多线程模型" class="headerlink" title="主从多线程模型"></a>主从多线程模型</h5><p>从一个 主线程 NIO 线程池中选择一个线程作为 Acceptor 线程，绑定监听端口，接收客户端连接的连接，其他线程负责后续的接入认证等工作。连接建立完成后，Sub NIO 线程池负责具体处理 I/O 读写。如果多线程模型无法满足你的需求的时候，可以考虑使用主从多线程模型 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//2.创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class="line">  ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">  <span class="comment">//3.给引导类配置两大线程组,确定了线程模型</span></span><br><span class="line">  b.group(bossGroup, workerGroup)</span><br><span class="line">    <span class="comment">//......</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\a1b38b45-dc8b-4af7-9053-92df542f2179.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="Netty-服务端和客户端的启动过程了解么？"><a href="#Netty-服务端和客户端的启动过程了解么？" class="headerlink" title="Netty 服务端和客户端的启动过程了解么？"></a>Netty 服务端和客户端的启动过程了解么？</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.bossGroup 用于接收连接，workerGroup 用于具体的处理</span></span><br><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//2.创建服务端启动引导/辅助类：ServerBootstrap</span></span><br><span class="line">    ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">    <span class="comment">//3.给引导类配置两大线程组,确定了线程模型</span></span><br><span class="line">    b.group(bossGroup, workerGroup)</span><br><span class="line">            <span class="comment">// (非必备)打印日志</span></span><br><span class="line">            .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">            <span class="comment">// 4.指定 IO 模型</span></span><br><span class="line">            .channel(NioServerSocketChannel.class)</span><br><span class="line">            .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                    ChannelPipeline p = ch.pipeline();</span><br><span class="line">                    <span class="comment">//5.可以自定义客户端消息的业务处理逻辑</span></span><br><span class="line">                    p.addLast(<span class="keyword">new</span> HelloServerHandler());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">// 6.绑定端口,调用 sync 方法阻塞知道绑定完成</span></span><br><span class="line">    ChannelFuture f = b.bind(port).sync();</span><br><span class="line">    <span class="comment">// 7.阻塞等待直到服务器Channel关闭(closeFuture()方法获取Channel 的CloseFuture对象,然后调用sync()方法)</span></span><br><span class="line">    f.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//8.优雅关闭相关线程组资源</span></span><br><span class="line">    bossGroup.shutdownGracefully();</span><br><span class="line">    workerGroup.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单解析一下服务端的创建过程具体是怎样的：</p><p>1.首先你创建了两个 NioEventLoopGroup 对象实例：bossGroup 和 workerGroup。</p><ul><li>bossGroup : 用于处理客户端的 TCP 连接请求。</li><li>workerGroup ： 负责每一条连接的具体读写数据的处理逻辑，真正负责 I/O 读写操作，交由对应的 Handler 处理。</li></ul><p>举个例子：我们把公司的老板当做 bossGroup，员工当做 workerGroup，bossGroup 在外面接完活之后，扔给 workerGroup 去处理。一般情况下我们会指定 bossGroup 的 线程数为 1（并发连接量不大的时候） ，workGroup 的线程数量为 <strong>CPU 核心数 *2</strong> 。另外，根据源码来看，使用 NioEventLoopGroup 类的无参构造函数设置线程数量的默认值就是 <strong>CPU 核心数 *2</strong> 。</p><p>2.接下来 我们创建了一个服务端启动引导/辅助类： ServerBootstrap，这个类将引导我们进行服务端的启动工作。</p><p>3.通过 .group() 方法给引导类 ServerBootstrap 配置两大线程组，确定了线程模型。</p><p>通过下面的代码，我们实际配置的是多线程模型，这个在上面提到过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br></pre></td></tr></table></figure><p>4.通过channel()方法给引导类 ServerBootstrap指定了 IO 模型为NIO</p><ul><li>NioServerSocketChannel ：指定服务端的 IO 模型为 NIO，与 BIO 编程模型中的ServerSocket对应 </li><li>NioSocketChannel : 指定客户端的 IO 模型为 NIO， 与 BIO 编程模型中的Socket对应 </li></ul><p>5.通过 .childHandler()给引导类创建一个ChannelInitializer ，然后指定了服务端消息的业务处理逻辑 HelloServerHandler对象</p><p>6.调用 ServerBootstrap 类的 bind()方法绑定端口 </p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个 NioEventLoopGroup 对象实例</span></span><br><span class="line">EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//2.创建客户端启动引导/辅助类：Bootstrap</span></span><br><span class="line">    Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">    <span class="comment">//3.指定线程组</span></span><br><span class="line">    b.group(group)</span><br><span class="line">            <span class="comment">//4.指定 IO 模型</span></span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">            .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ChannelPipeline p = ch.pipeline();</span><br><span class="line">                    <span class="comment">// 5.这里可以自定义消息的业务处理逻辑</span></span><br><span class="line">                    p.addLast(<span class="keyword">new</span> HelloClientHandler(message));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">// 6.尝试建立连接</span></span><br><span class="line">    ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line">    <span class="comment">// 7.等待连接关闭（阻塞，直到Channel关闭）</span></span><br><span class="line">    f.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    group.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析一下客户端的创建流程：</p><p>1.创建一个 NioEventLoopGroup 对象实例</p><p>2.创建客户端启动的引导类是 Bootstrap</p><p>3.通过 .group() 方法给引导类 Bootstrap 配置一个线程组</p><p>4.通过channel()方法给引导类 Bootstrap指定了 IO 模型为NIO</p><p>5.通过 .childHandler()给引导类创建一个ChannelInitializer ，然后指定了客户端消息的业务处理逻辑 HelloClientHandler 对象</p><p>6.调用 Bootstrap 类的 connect()方法进行连接，这个方法需要指定两个参数：</p><ul><li>inetHost : ip 地址</li><li>inetPort : 端口号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">connect</span><span class="params">(String inetHost, <span class="keyword">int</span> inetPort)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.connect(InetSocketAddress.createUnresolved(inetHost, inetPort));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">connect</span><span class="params">(SocketAddress remoteAddress)</span> </span>&#123;</span><br><span class="line">    ObjectUtil.checkNotNull(remoteAddress, <span class="string">"remoteAddress"</span>);</span><br><span class="line">    <span class="keyword">this</span>.validate();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.doResolveAndConnect(remoteAddress, <span class="keyword">this</span>.config.localAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>connect</code> 方法返回的是一个 <code>Future</code> 类型的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelFuture</span> <span class="keyword">extends</span> <span class="title">Future</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说这个方是异步的，我们通过 <code>addListener</code> 方法可以监听到连接是否成功，进而打印出连接信息。具体做法很简单，只需要对代码进行以下改动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ChannelFuture f = b.connect(host, port).addListener(future -&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">    System.out.println(<span class="string">"连接成功!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.err.println(<span class="string">"连接失败!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).sync();</span><br></pre></td></tr></table></figure><h4 id="什么是-TCP-粘包-拆包-有什么解决办法呢？"><a href="#什么是-TCP-粘包-拆包-有什么解决办法呢？" class="headerlink" title="什么是 TCP 粘包/拆包?有什么解决办法呢？"></a>什么是 TCP 粘包/拆包?有什么解决办法呢？</h4><p>👨‍💻面试官 ：什么是 TCP 粘包/拆包?</p><p>🙋 我 ：TCP 粘包/拆包 就是你基于 TCP 发送数据的时候，出现了多个字符串“粘”在了一起或者一个字符串被“拆”开的问题。比如你多次发送：“你好,你真帅啊！哥哥！”，但是客户端接收到的可能是下面这样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\54e900aa-bf51-41dd-8673-c21eae472f2f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>👨‍💻面试官 ：那有什么解决办法呢?</p><p>🙋 我 ：</p><p><strong>1.使用 Netty 自带的解码器</strong></p><ul><li>LineBasedFrameDecoder : 发送端发送数据包的时候，每个数据包之间以换行符作为分隔，LineBasedFrameDecoder 的工作原理是它依次遍历 ByteBuf 中的可读字节，判断是否有换行符，然后进行相应的截取。</li><li>DelimiterBasedFrameDecoder : 可以自定义分隔符解码器，LineBasedFrameDecoder 实际上是一种特殊的 DelimiterBasedFrameDecoder 解码器。</li><li>FixedLengthFrameDecoder: 固定长度解码器，它能够按照指定的长度对消息进行相应的拆包。如果不够指定的长度，则空格补全</li><li>LengthFieldBasedFrameDecoder：基于长度字段的解码器，发送的数据中有数据长度相关的信息。</li></ul><p><strong>2.自定义序列化编解码器</strong></p><p>在 Java 中自带的有实现 Serializable 接口来实现序列化，但由于它性能、安全性等原因一般情况下是不会被使用到的。</p><p>通常情况下，我们使用 Protostuff、Hessian2、json 序列方式比较多，另外还有一些序列化性能非常好的序列化方式也是很好的选择：</p><ul><li>专门针对 Java 语言的：Kryo，FST 等等</li><li>跨语言的：Protostuff（基于 protobuf 发展而来），ProtoBuf，Thrift，Avro，MsgPack 等等</li></ul><blockquote><p>由于篇幅问题，这部分内容会在后续的文章中详细分析介绍<del>~</del></p></blockquote><h4 id="Netty-长连接、心跳机制了解么？"><a href="#Netty-长连接、心跳机制了解么？" class="headerlink" title="Netty 长连接、心跳机制了解么？"></a>Netty 长连接、心跳机制了解么？</h4><p>👨‍💻面试官 ：TCP 长连接和短连接了解么？</p><p>🙋 我 ：我们知道 TCP 在进行读写之前，server 与 client 之间必须提前建立一个连接。建立连接的过程，需要我们常说的三次握手，释放/关闭连接的话需要四次挥手。这个过程是比较消耗网络资源并且有时间延迟的。</p><p>所谓，短连接说的就是 server 端 与 client 端建立连接之后，读写完成之后就关闭掉连接，如果下一次再要互相发送消息，就要重新连接。短连接的优点很明显，就是管理和实现都比较简单，缺点也很明显，每一次的读写都要建立连接必然会带来大量网络资源的消耗，并且连接的建立也需要耗费时间。</p><p>长连接说的就是 client 向 server 双方建立连接之后，即使 client 与 server 完成一次读写，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。长连接的可以省去较多的 TCP 建立和关闭的操作，降低对网络资源的依赖，节约时间。对于频繁请求资源的客户来说，非常适用长连接。</p><p>👨‍💻面试官 ：为什么需要心跳机制？Netty 中心跳机制了解么？</p><p>🙋 我 ：</p><p>在 TCP 保持长连接的过程中，可能会出现断网等网络异常出现，异常发生的时候， client 与 server 之间如果没有交互的话，它们是无法发现对方已经掉线的。为了解决这个问题, 我们就需要引入 <strong>心跳机制</strong> 。</p><p>心跳机制的工作原理是: 在 client 与 server 之间在一定时间内没有数据交互时, 即处于 idle 状态时, 客户端或服务器就会发送一个特殊的数据包给对方, 当接收方收到这个数据报文后, 也立即发送一个特殊的数据报文, 回应发送方, 此即一个 PING-PONG 交互。所以, 当某一端收到心跳消息后, 就知道了对方仍然在线, 这就确保 TCP 连接的有效性.</p><p>TCP 实际上自带的就有长连接选项，本身是也有心跳包机制，也就是 TCP 的选项：SO_KEEPALIVE。 但是，TCP 协议层面的长连接灵活性不够。所以，一般情况下我们都是在应用层协议上实现自定义心跳机制的，也就是在 Netty 层面通过编码实现。通过 Netty 实现心跳机制的话，核心类是 IdleStateHandler 。</p><h4 id="Netty-的零拷贝了解么？"><a href="#Netty-的零拷贝了解么？" class="headerlink" title="Netty 的零拷贝了解么？"></a>Netty 的零拷贝了解么？</h4><p>👨‍💻面试官 ：讲讲 Netty 的零拷贝？</p><p>🙋 我 ：</p><p>维基百科是这样介绍零拷贝的：</p><blockquote><p>零复制（英语：Zero-copy；也译零拷贝）技术是指计算机执行操作时，CPU 不需要先将数据从某处内存复制到另一个特定区域。这种技术通常用于通过网络传输文件时节省 CPU 周期和内存带宽。</p></blockquote><p>在 OS 层面上的 Zero-copy 通常指避免在 用户态(User-space) 与 内核态(Kernel-space) 之间来回拷贝数据。而在 Netty 层面 ，零拷贝主要体现在对于数据操作的优化。</p><p>Netty 中的零拷贝体现在以下几个方面</p><ol><li>使用 Netty 提供的 CompositeByteBuf 类, 可以将多个ByteBuf 合并为一个逻辑上的 ByteBuf, 避免了各个 ByteBuf 之间的拷贝。</li><li>ByteBuf 支持 slice 操作, 因此可以将 ByteBuf 分解为多个共享同一个存储区域的 ByteBuf, 避免了内存的拷贝。</li><li>通过 FileRegion 包装的FileChannel.tranferTo 实现文件传输, 可以直接将文件缓冲区的数据发送到目标 Channel, 避免了传统通过循环 write 方式导致的内存拷贝问题.</li></ol><h4 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h4><ul><li>netty 学习系列二：NIO Reactor 模型 &amp; Netty 线程模型：<a href="https://www.jianshu.com/p/38b56531565d" target="_blank" rel="noopener">https://www.jianshu.com/p/38b56531565d</a></li><li>《Netty 实战》</li><li>Netty 面试题整理(2):<a href="https://metatronxl.github.io/2019/10/22/Netty-面试题整理-二/" target="_blank" rel="noopener">https://metatronxl.github.io/2019/10/22/Netty-面试题整理-二/</a></li><li>Netty（3）—源码 NioEventLoopGroup:<a href="https://www.cnblogs.com/qdhxhz/p/10075568.html" target="_blank" rel="noopener">https://www.cnblogs.com/qdhxhz/p/10075568.html</a></li><li>对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解: <a href="https://www.cnblogs.com/xys1228/p/6088805.html" target="_blank" rel="noopener">https://www.cnblogs.com/xys1228/p/6088805.html</a></li></ul><h2 id="分布式-amp-微服务"><a href="#分布式-amp-微服务" class="headerlink" title="分布式&amp;微服务"></a>分布式&amp;微服务</h2><h3 id="服务治理：为什么需要服务注册与发现？"><a href="#服务治理：为什么需要服务注册与发现？" class="headerlink" title="服务治理：为什么需要服务注册与发现？"></a><strong>服务治理：为什么需要服务注册与发现？</strong></h3><p>服务注册与发现是分布式以及微服务系统的基石，搞懂它的作用和基本原理对于我们来说非常重要！</p><h4 id="为什么需要服务注册与发现？"><a href="#为什么需要服务注册与发现？" class="headerlink" title="为什么需要服务注册与发现？"></a>为什么需要服务注册与发现？</h4><p>微服务架构下，一个系统通常由多个微服务组成（比如电商系统可能分为用户服务、商品服务、订单服务等服务），一个用户请求可能会需要多个服务参与，这些服务之间互相配合以维持系统的正常运行。</p><p>在没有服务注册与发现机制之前，每个服务会将其依赖的其他服务的地址信息写死在配置文件里（参考单体架构）。假设我们系统中的订单服务访问量突然变大，我们需要对订单服务进行扩容，也就是多部署一些订单服务来分担处理请求的压力。这个时候，我们需要手动更新所有依赖订单服务的服务节点的地址配置信息。同理，假设某个订单服务节点突然宕机，我们又要手动更新对应的服务节点信息。更新完成之后，还要手动重启这些服务，整个过程非常麻烦且容易出错。</p><p>有了服务注册与发现机制之后，就不需要这么麻烦了，由注册中心负责维护可用服务的列表，通过注册中心动态获取可用服务的地址信息。如果服务信息发生变更，注册中心会将变更推送给相关联的服务，更新服务地址信息，无需手动更新，也不需要重启服务，这些对开发者来说完全是无感的。</p><p>服务注册与发现可以帮助我们实现服务的优雅上下线，从而实现服务的弹性扩缩容。</p><p>除此之外，服务注册与发现机制还有一个非常重要的功能：<strong>不可用服务剔除</strong> 。简单来说，注册中心会通过 <strong>心跳机制</strong> 来检测服务是否可用，如果服务不可用的话，注册中心会主动剔除该服务并将变更推送给相关联的服务，更新服务地址信息。</p><p>最后，我们再来总结补充一下，一个完备的服务注册与发现应该具备的功能：</p><ul><li>服务注册以及服务查询（最基本的）</li><li>服务状态变更通知、服务健康检查、不可用服务剔除</li><li>服务权重配置（权重越高被访问的频率越高）</li></ul><h4 id="服务注册与发现的基本流程是怎样的？"><a href="#服务注册与发现的基本流程是怎样的？" class="headerlink" title="服务注册与发现的基本流程是怎样的？"></a>服务注册与发现的基本流程是怎样的？</h4><blockquote><p>这个问题等价于问服务注册与发现的原理。</p></blockquote><p>每个服务节点在启动运行的时候，会向注册中心注册服务，也就是将自己的地址信息（ip、端口以及服务名字等信息的组合）上报给注册中心，注册中心负责将地址信息保存起来，这就是 <strong>服务注册</strong>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666275736996-6a3442bd-e8d5-4e4c-9878-1df1c1ef7f08.png" alt="service-registration.png" title>                </div>                <div class="image-caption">service-registration.png</div>            </figure><p>一个服务节点如果要调用另外一个<strong>服务节点</strong>，会直接拿着服务的信息找注册中心要对方的地址信息，这就是 服务发现 。通常情况下，服务节点拿到地址信息之后，还会在本地缓存一份，保证在注册中心宕机时仍然可以正常调用服务。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666275749034-48b29e36-6fe9-4915-a0bd-774b79ded766.png" alt="service-discovery.png" title>                </div>                <div class="image-caption">service-discovery.png</div>            </figure><p>如果服务信息发生变更，注册中心会将变更推送给相关联的服务，更新服务地址信息。</p><p>为了保证服务地址列表中都是可用服务的地址信息，注册中心通常会通过 <strong>心跳机制</strong> 来检测服务是否可用，如果服务不可用的话，注册中心会主动剔除该服务并将变更推送给相关联的服务，更新服务地址信息。</p><p>最后，再来一张图简单总结一下服务注册与发现（一个服务既可能是服务提供者也可能是服务消费者）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666275758824-30812e9e-4bf6-46c7-a17f-9f2e2ea9c175.png" alt="service-registration-and-discovery.png" title>                </div>                <div class="image-caption">service-registration-and-discovery.png</div>            </figure><h4 id="常见的注册中心有哪些？"><a href="#常见的注册中心有哪些？" class="headerlink" title="常见的注册中心有哪些？"></a>常见的注册中心有哪些？</h4><blockquote><p>我这里跟多的是从面试角度来说，各类注册中心的详细对比，可以看这篇文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTU5NzQ1Mw==&mid=2247486918&idx=1&sn=5651cd0b4b9c8e68bcfa55c00c0950d6&chksm=cf034f24f874c632511684057337a744c54702543ec3690aa06dbf4bbaf980b2828f52276c9b&scene=21#wechat_redirect" target="_blank" rel="noopener">5 种注册中心如何选型？从原理给你解读！ - 楼仔 - 2022</a> ，非常详细。</p></blockquote><p>比较常用的注册中心有 ZooKeeper、Eureka、Nacos，这三个都是使用 Java 语言开发，相对来说，更适合 Java 技术栈一些。其他的还有像 ETCD、Consul，这里就不做介绍了。</p><p>首先，咱们来看 ZooKeeper，大部分同学应该对它不陌生。严格意义上来说，ZooKeeper 设计之初并不是未来做注册中心的，只是前几年国内使用 Dubbo 的场景下比较喜欢使用它来做注册中心。</p><p>对于 CAP 理论来说，<strong>ZooKeeper 保证的是 CP</strong>。 任何时刻对 ZooKeeper 的读请求都能得到一致性的结果，但是， ZooKeeper 不保证每次请求的可用性比如在 Leader 选举过程中或者半数以上的机器不可用的时候服务就是不可用的。</p><p><strong>针对注册中心这个场景来说，重要的是可用性，AP 会更合适一些</strong>。 ZooKeeper 更适合做分布式协调服，注册中心就交给专业的来做吧！</p><p>其次，我们再来看看 Eureka，一款非常值得研究的注册中心。Eureka 是 Netflix 公司开源的一个注册中心，配套的还有 Feign、Ribbon、Zuul、Hystrix 等知名的微服务系统构建所必须的组件。</p><p>对于 CAP 理论来说，<strong>Eureka 保证的是 AP</strong>。 Eureka 集群只要有一台 Eureka 正常服务，整个注册中心就是可用的，只是查询到的数据可能是过期的（集群中的各个节点异步方式同步数据，不保证强一致性）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2FSpringCloudNetflix.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>不过，可惜的是，Spring Cloud 2020.0.0 版本移除了 Netflix 除 Eureka 外的所有组件。</p><p><strong>那为什么 Spring Cloud 这么急着移除 Netflix 的组件呢？</strong> 主要是因为在 2018 年的时候，Netflix 宣布其开源的核心组件 Hystrix、Ribbon、Zuul、Eureka 等进入维护状态，不再进行新特性开发，只修 BUG。于是，Spring 官方不得不考虑移除 Netflix 的组件。</p><p>我这里也不推荐使用 Eureka 作为注册中心，阿里开源的 Nacos 或许是更好的选择。</p><p>最后，我们再来看看 Nacos，一款即可以用来做注册中心，又可以用来做配置中心的优秀项目。</p><p>Nacos 属实是后起之秀，借鉴吸收了其他注册中心的有点，与 Spring Boot 、Dubbo、Spring Cloud、Kubernetes 无缝对接，兼容性很好。并且，<strong>Nacos 不仅支持 CP 也支持 AP</strong>。</p><p>Nacos 性能强悍（比 Eureka 能支持更多的服务实例），易用性较强（文档丰富、数据模型简单且自带后台管理界面），支持 99.9% 高可用。</p><p>对于 Java 技术栈来说，个人是比较推荐使用 Nacos 来做注册中心。</p><h3 id="服务治理：分布式下如何进行配置管理？"><a href="#服务治理：分布式下如何进行配置管理？" class="headerlink" title="服务治理：分布式下如何进行配置管理？"></a><strong>服务治理：分布式下如何进行配置管理？</strong></h3><h4 id="为什么要用配置中心？"><a href="#为什么要用配置中心？" class="headerlink" title="为什么要用配置中心？"></a>为什么要用配置中心？</h4><p>微服务下，业务的发展一般会导致服务数量的增加，进而导致程序配置（服务地址、数据库参数等等）增多。传统的配置文件的方式已经无法满足当前需求，主要有下面几点原因：</p><ul><li>安全性得不到保障：配置放在代码库中容易泄露。</li><li>时效性不行：修改配置需要重启服务才能生效。</li><li>不支持权限控制 ：没有对配置的修改、发布等操作进行严格的权限控制。</li><li>不支持配置集中管理 ： 配置文件过于分散，不方便管理。</li><li>……</li></ul><p>另外，配置中心通常会自带版本跟踪，会记录配置的修改记录，记录的内容包括修改人、修改时间、修改内容等等。</p><p>虽然通过 Git 版本管理我们也能追溯配置的修改记录，但是配置中心提供的配置版本管理功能更全面。并且，配置中心通常会在配置版本管理的基础上支持配置一键回滚。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fapolloconfig%2Fapollo%40master%2Fdoc%2Fimages%2Fgray-release%2Fview-release-history.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>一些功能更全面的配置中心比如<code>Apollo</code>甚至还支持灰度发布。</p><h4 id="常见的配置中心有哪些？"><a href="#常见的配置中心有哪些？" class="headerlink" title="常见的配置中心有哪些？"></a>常见的配置中心有哪些？</h4><p><a href="https://cloud.spring.io/spring-cloud-config/reference/html/" target="_blank" rel="noopener">Spring Cloud Config</a>、<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">Nacos</a> 、<a href="https://github.com/apolloconfig/apollo" target="_blank" rel="noopener">Apollo</a>、K8s ConfigMap 、<a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">Disconf</a> 、<a href="https://github.com/Qihoo360/QConf" target="_blank" rel="noopener">Qconf</a> 都可以用来做配置中心。</p><p>Disconf 和 Qconf 已经没有维护，生态也并不活跃，并不建议使用，在做配置中心技术选型的时候可以跳过。</p><p>如果你的技术选型是 Kubernetes 的话，可以考虑使用 K8s ConfigMap 来作为配置中心。</p><p>Apollo 和 Nacos 我个人更喜欢，两者都是国内公司开源的知名项目，项目社区都比较活跃且都还在维护中。Nacos 是阿里开源的，Apollo 是携程开源的。Nacos 使用起来比较简单，并且还可以直接用来做服务发现及管理。Apollo 只能用来做配置管理，使用相对复杂一些。</p><p>如果你的项目仅仅需要配置中心的话，建议使用 Apollo 。如果你的项目需要配置中心的同时还需要服务发现及管理的话，那就更建议使用 Nacos。</p><p>Spring Cloud Config 属于 Spring Cloud 生态组件，可以和 Spring Cloud 体系无缝整合。由于基于 Git 存储配置，因此 Spring Cloud Config 的整体设计很简单。</p><h4 id="Apollo-vs-Nacos-vs-Spring-Cloud-Config"><a href="#Apollo-vs-Nacos-vs-Spring-Cloud-Config" class="headerlink" title="Apollo vs Nacos vs Spring Cloud Config"></a>Apollo vs Nacos vs Spring Cloud Config</h4><table><thead><tr><th>功能点</th><th>Apollo</th><th>Nacos</th><th>Spring Cloud Config</th></tr></thead><tbody><tr><td>配置界面</td><td>支持</td><td>支持</td><td>无（需要通过 Git 操作）</td></tr><tr><td>配置实时生效</td><td>支持(HTTP 长轮询 1s 内)</td><td>支持(HTTP 长轮询 1s 内)</td><td>重启生效，或手动 refresh 生效</td></tr><tr><td>版本管理</td><td>支持</td><td>支持</td><td>支持（依赖 Git）</td></tr><tr><td>权限管理</td><td>支持</td><td>支持</td><td>支持（依赖 Git）</td></tr><tr><td>灰度发布</td><td>支持</td><td>支持（Nacos 1.1.0 版本开始支持灰度配置）</td><td>不支持</td></tr><tr><td>配置回滚</td><td>支持</td><td>支持</td><td>支持（依赖 Git）</td></tr><tr><td>告警通知</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>多语言</td><td>主流语言，Open API</td><td>主流语言，Open API</td><td>只支持 Spring 应用</td></tr><tr><td>多环境</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>监听查询</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>Apollo 和 Nacos 提供了更多开箱即用的功能，更适合用来作为配置中心。</p><p>Nacos 使用起来比较简单，并且还可以直接用来做服务发现及管理。Apollo 只能用来做配置管理，使用相对复杂一些。</p><p>Apollo 在配置管理方面做的更加全面，就比如说虽然 Nacos 在 1.1.0 版本开始支持灰度配置，但 Nacos 的灰度配置功能实现的比较简单，Apollo 实现的灰度配置功能就相对更完善一些。不过，Nacos 提供的配置中心功能已经可以满足绝大部分项目的需求了。</p><h4 id="一个完备配置中心需要具备哪些功能？"><a href="#一个完备配置中心需要具备哪些功能？" class="headerlink" title="一个完备配置中心需要具备哪些功能？"></a>一个完备配置中心需要具备哪些功能？</h4><p>如果我们需要自己设计一个配置中心的话，需要考虑哪些东西呢？</p><p>简单说说我的看法：</p><ul><li><strong>权限控制</strong> ：配置的修改、发布等操作需要严格的权限控制。</li><li><strong>日志记录</strong> ： 配置的修改、发布等操需要记录完整的日志，便于后期排查问题。</li><li><strong>配置推送</strong> ： 推送模式通常由两种： <ul><li>推 ：实时性变更，配置更新后推送给应用。需要应用和配置中心保持长连接，复杂度高。</li><li>拉 ：实时性较差，应用隔一段时间手动拉取配置。</li><li>推拉结合</li></ul></li><li><strong>灰度发布</strong> ：支持配置只推给部分应用。</li><li><strong>易操作</strong> ： 提供 Web 界面方便配置修改和发布。</li><li><strong>版本跟踪</strong> ：所有的配置发布都有版本概念，从而可以方便的支持配置的回滚。</li><li><strong>支持配置回滚</strong> ： 我们一键回滚配置到指定的位置，这个需要和版本跟踪结合使用。</li><li>……</li></ul><h4 id="以-Apollo-为例介绍配置中心的设计"><a href="#以-Apollo-为例介绍配置中心的设计" class="headerlink" title="以 Apollo 为例介绍配置中心的设计"></a><strong>以 Apollo 为例介绍配置中心的设计</strong></h4><h5 id="Apollo-介绍"><a href="#Apollo-介绍" class="headerlink" title="Apollo 介绍"></a>Apollo 介绍</h5><p>根据 Apollo 官方介绍：</p><blockquote><p><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">Apollo</a>（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p>服务端基于 Spring Boot 和 Spring Cloud 开发，打包后可以直接运行，不需要额外安装 Tomcat 等应用容器。</p><p>Java 客户端不依赖任何框架，能够运行于所有 Java 运行时环境，同时对 Spring/Spring Boot 环境也有较好的支持。</p></blockquote><p>Apollo 特性：</p><ul><li><strong>配置修改实时生效（热发布）</strong> （1s 即可接收到最新配置）</li><li><strong>灰度发布</strong> （配置只推给部分应用）</li><li><strong>部署简单</strong> （只依赖 MySQL）</li><li><strong>跨语言</strong> （提供了 HTTP 接口，不限制编程语言）</li><li>……</li></ul><p>关于如何使用 Apollo 可以查看 <a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide" target="_blank" rel="noopener">Apollo 官方使用指南</a>。</p><p>相关阅读：</p><ul><li><a href="https://mp.weixin.qq.com/s/Ge14UeY9Gm2Hrk--E47eJQ" target="_blank" rel="noopener">Apollo 在有赞的实践</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&mid=2247484920&idx=1&sn=76d91ce217bf508aa2ee7156e1ba0994&source=41#wechat_redirect" target="_blank" rel="noopener">分布式配置中心选型，为什么选择 Apollo？—微观技术-2021-04-23</a></li></ul><h5 id="Apollo-架构解析"><a href="#Apollo-架构解析" class="headerlink" title="Apollo 架构解析"></a>Apollo 架构解析</h5><p>官方给出的 Apollo 基础模型非常简单：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fa75ccb863e4a401d947c87bb14af7dc3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ol><li><p>用户通过 Apollo 配置中心修改/发布配置，</p></li><li><p>Apollo 配置中心通知应用配置已经更改</p></li><li><p>应用访问 Apollo 配置中心获取最新的配置</p></li></ol><p>官方给出的架构图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F79c7445f9dbc45adb45699d40ef50f44.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li><strong>Client 端（客户端，用于应用获取配置）流程</strong> ：Client 通过域名走 slb（软件负载均衡）访问 Meta Server，Meta Server 访问 Eureka 服务注册中心获取 Config Service 服务列表（IP+Port）。有了 IP+Port，我们就能访问 Config Service 暴露的服务比如通过 GET 请求获取配置的接口（<code>/configs/{appId}/{clusterName}/{namespace:.+}</code>）即可获取配置。</li><li><strong>Portal 端（UI 界面，用于可视化配置管理）流程</strong> ：Portal 端通过域名走 slb（软件负载均衡）访问 Meta Server，Meta Server 访问 Eureka 服务注册中心获取 Admin Service 服务列表（IP+Port）。有了 IP+Port，我们就能访问 Admin Service 暴露的服务比如通过 POST 请求访问发布配置的接口（<code>/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/releases</code>）即可发布配置。</li></ul><p>另外，杨波老师的<a href="https://mp.weixin.qq.com/s/-hUaQPzfsl9Lm3IqQW3VDQ" target="_blank" rel="noopener">微服务架构~携程 Apollo 配置中心架构剖析</a>这篇文章对 Apollo 的架构做了简化，值得一看。</p><p>我会从上到下依次介绍架构图中涉及到的所有角色的作用。</p><h6 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h6><p>Apollo 官方提供的客户端，目前有 Java 和.Net 版本。非 Java 和.Net 应用可以通过调用 HTTP 接口来使用 Apollo。</p><p>Client 的作用主要就是提供一些开箱即用的方法方便应用获取以及实时更新配置。</p><p>比如你通过下面的几行代码就能获取到 someKey 对应的实时最新的配置值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Config config = ConfigService.getAppConfig();</span><br><span class="line">String someKey = <span class="string">"someKeyFromDefaultNamespace"</span>;</span><br><span class="line">String someDefaultValue = <span class="string">"someDefaultValueForTheKey"</span>;</span><br><span class="line">String value = config.getProperty(someKey, someDefaultValue);</span><br></pre></td></tr></table></figure><p>再比如你通过下面的代码就能监听配置变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Config config = ConfigService.getAppConfig();</span><br><span class="line">config.addChangeListener(<span class="keyword">new</span> ConfigChangeListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(ConfigChangeEvent changeEvent)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="Portal"><a href="#Portal" class="headerlink" title="Portal"></a>Portal</h6><p>Portal 实际就是一个帮助我们修改和发布配置的 UI 界面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fe63ef8dc739548e8b504632b151ba4c7.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h6 id="（Software）-Load-Balancer"><a href="#（Software）-Load-Balancer" class="headerlink" title="（Software） Load Balancer"></a>（Software） Load Balancer</h6><p>为了实现 MetaServer 的高可用，MetaServer 通常以集群的形式部署。</p><p>Client/Portal 直接访问 （Software） Load Balancer ，然后，再由其进行负载均衡和流量转发。</p><h6 id="Meta-Server"><a href="#Meta-Server" class="headerlink" title="Meta Server"></a>Meta Server</h6><p>为了实现跨语言使用，通常的做法就是暴露 HTTP 接口。为此，Apollo 引入了 MetaServer。</p><p>Meta Server 其实就是 Eureka 的 Proxy，作用就是将 Eureka 的服务发现接口以 HTTP 接口的形式暴露出来。 这样的话，我们通过 HTTP 请求就可以访问到 Config Service 和 AdminService。</p><p>通常情况下，我们都是建议基于 Meta Server 机制来实现 Config Service 的服务发现，这样可以实现 Config Service 的高可用。不过， 你也可以选择跳过 MetaServer，直接指定 Config Service 地址（apollo-client 0.11.0 及以上版本）。</p><h6 id="Config-Service"><a href="#Config-Service" class="headerlink" title="Config Service"></a>Config Service</h6><p>主要用于 Client 对配置的获取以及实时更新。</p><h6 id="Admin-Service"><a href="#Admin-Service" class="headerlink" title="Admin Service"></a>Admin Service</h6><p>主要用于 Portal 对配置的更新。</p><h4 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h4><ul><li>Nacos 1.2.0 权限控制介绍和使用：<a href="https://nacos.io/zh-cn/blog/nacos" target="_blank" rel="noopener">https://nacos.io/zh-cn/blog/nacos</a> 1.2.0 guide.html</li><li>Nacos 1.1.0 发布，支持灰度配置和地址服务器模式：<a href="https://nacos.io/zh-cn/blog/nacos" target="_blank" rel="noopener">https://nacos.io/zh-cn/blog/nacos</a> 1.1.0.html</li><li>Apollo 常见问题解答：<a href="https://www.apolloconfig.com/#/zh/faq/faq" target="_blank" rel="noopener">https://www.apolloconfig.com/#/zh/faq/faq</a></li><li>微服务配置中心选型比较：<a href="https://www.itshangxp.com/spring-cloud/spring-cloud-config-center/" target="_blank" rel="noopener">https://www.itshangxp.com/spring-cloud/spring-cloud-config-center/</a></li></ul><h3 id="服务治理：分布式事务解决方案有哪些？"><a href="#服务治理：分布式事务解决方案有哪些？" class="headerlink" title="服务治理：分布式事务解决方案有哪些？"></a><strong>服务治理：分布式事务解决方案有哪些？</strong></h3><p><strong>网上已经有很多关于分布式事务的文章了，为啥还要写一篇？</strong></p><ol><li><p>第一是我觉得大部分文章理解起来挺难的，不太适合一些经验不多的小伙伴。这篇文章我的目标就是让即使是没啥工作经验的小伙伴们都能真正看懂分布式事务。</p></li><li><p>第二是我觉得大部分文章介绍的不够详细，很对分布式事务相关比较重要的概念都没有提到。</p></li></ol><p>开始聊分布式事务之前，我们先来回顾一下事务相关的概念。</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>我们设想一个场景，这个场景中我们需要插入多条相关联的数据到数据库，不幸的是，这个过程可能会遇到下面这些问题：</p><ul><li>数据库中途突然因为某些原因挂掉了。</li><li>客户端突然因为网络原因连接不上数据库了。</li><li>并发访问数据库时，多个线程同时写入数据库，覆盖了彼此的更改。</li><li>……</li></ul><p>上面的任何一个问题都可能会导致数据的不一致性。为了保证数据的一致性，系统必须能够处理这些问题。事务就是我们抽象出来简化这些问题的首选机制。事务的概念起源于数据库，目前，已经成为一个比较广泛的概念。</p><p><strong>何为事务？</strong> 一言蔽之，<strong>事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p><p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作，这两个操作必须都成功或者都失败。</p><ol><li>将小明的余额减少 1000 元</li><li>将小红的余额增加 1000 元。</li></ol><p>事务会把这两个操作就可以看成逻辑上的一个整体，这个整体包含的操作要么都成功，要么都要失败。这样就不会出现小明余额减少而小红的余额却并没有增加的情况。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image-20230214132043857.png" alt="image-20230214132043857" title>                </div>                <div class="image-caption">image-20230214132043857</div>            </figure><h4 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h4><p>大多数情况下，我们在谈论事务的时候，如果没有特指<strong>分布式事务</strong>，往往指的就是<strong>数据库事务</strong>。</p><p>数据库事务在我们日常开发中接触的最多了。如果你的项目属于单体架构的话，你接触到的往往就是数据库事务了。</p><p><strong>那数据库事务有什么作用呢？</strong></p><p>简单来说，数据库事务可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。构成这个逻辑上的整体的这些数据库操作遵循：<strong>要么全部执行成功,要么全部不执行 。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启一个事务</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="comment"># 多条 SQL 语句</span></span><br><span class="line">SQL1,SQL2...</span><br><span class="line"><span class="comment">## 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666839474634-c00929d5-49c2-4d89-8aeb-2c9eebd75712.png" alt="数据库事务示意图.png" title>                </div>                <div class="image-caption">数据库事务示意图.png</div>            </figure><p>另外，关系型数据库（例如：<code>MySQL</code>、<code>SQL Server</code>、<code>Oracle</code> 等）事务都有 <strong>ACID</strong> 特性：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fmysql%2FACID-167635307295839.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ol><li><strong>原子性</strong>（Atomicity） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性</strong>（Consistency）： 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li><li><strong>隔离性</strong>（Isolation）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性</strong>（Durabilily）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><p>🌈 这里要额外补充一点：<strong>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！</strong> 想必大家也和我一样，被 ACID 这个概念被误导了很久! 我也是看周志明老师的公开课<a href="https://time.geekbang.org/opencourse/intro/100064201" target="_blank" rel="noopener">《周志明的软件架构课》</a>才搞清楚的（多看好书！！！）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image-20230214132224195.png" alt="image-20230214132224195" title>                </div>                <div class="image-caption">image-20230214132224195</div>            </figure><p>另外，DDIA 也就是 <a href="https://book.douban.com/subject/30329536/" target="_blank" rel="noopener">《Designing Data-Intensive Application（数据密集型应用系统设计）》</a> 的作者在他的这本书中如是说：</p><blockquote><p>Atomicity, isolation, and durability are properties of the database, whereas consis‐ tency (in the ACID sense) is a property of the application. The application may rely on the database’s atomicity and isolation properties in order to achieve consistency, but it’s not up to the database alone.</p><p>翻译过来的意思是：原子性，隔离性和持久性是数据库的属性，而一致性（在 ACID 意义上）是应用程序的属性。应用可能依赖数据库的原子性和隔离属性来实现一致性，但这并不仅取决于数据库。因此，字母 C 不属于 ACID 。</p></blockquote><p>《Designing Data-Intensive Application（数据密集型应用系统设计）》这本书强推一波，值得读很多遍！豆瓣有接近 90% 的人看了这本书之后给了五星好评。另外，中文翻译版本已经在 Github 开源，地址：<a href="https://github.com/Vonng/ddia" target="_blank" rel="noopener">https://github.com/Vonng/ddia</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210526162552353.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>数据事务的实现原理呢？</strong></p><p>我们这里以 MySQL 的 InnoDB 引擎为例来简单说一下。</p><p>MySQL InnoDB 引擎使用 <strong>redo log(重做日志)</strong> 保证事务的<strong>持久性</strong>，使用 <strong>undo log(回滚日志)</strong> 来保证事务的<strong>原子性</strong>。MySQL InnoDB 引擎通过 <strong>锁机制</strong>、<strong>MVCC</strong> 等手段来保证事务的隔离性（ 默认支持的隔离级别是 <strong>REPEATABLE-READ</strong> ）。</p><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><p>微服务架构下，一个系统被拆分为多个小的微服务。每个微服务都可能存在不同的机器上，并且每个微服务可能都有一个单独的数据库供自己使用。这种情况下，一组操作可能会涉及到多个微服务以及多个数据库。举个例子：电商系统中，你创建一个订单往往会涉及到订单服务（订单数加一）、库存服务（库存减一）等等服务，这些服务会有供自己单独使用的数据库。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-with-two-services.png&sign=49a53a4f4598f7373bae90515fd1a2c4a4ed0e44184a8ad6a20aada34ca560fb" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>那么如何保证这一组操作要么都执行成功，要么都执行失败呢？</strong></p><p>这个时候单单依靠数据库事务就不行了！我们就需要引入 <strong>分布式事务</strong> 这个概念了！</p><p>实际上，只要跨数据库的场景都需要用到引入分布式事务。比如说单个数据库的性能达到瓶颈或者数据量太大的时候，我们需要进行 分库。分库之后，同一个数据库中的表分布在了不同的数据库中，如果单个操作涉及到多个数据库，那么数据库自带的事务就无法满足我们的要求了。</p><p>一言蔽之，<strong>分布式事务的终极目标就是保证系统中多个相关联的数据库中的数据的一致性！</strong></p><p>那既然分布式事务也属于事务，理论上就应该准守事物的 ACID 四大特性。但是，考虑到性能、可用性等各方面因素，我们往往是无法完全满足 ACID 的，只能选择一个比较折中的方案。</p><p>针对分布式事务，又诞生了一些新的理论。</p><h4 id="分布式事务基础理论"><a href="#分布式事务基础理论" class="headerlink" title="分布式事务基础理论"></a><strong>分布式事务基础理论</strong></h4><h5 id="CAP-理论和-BASE-理论"><a href="#CAP-理论和-BASE-理论" class="headerlink" title="CAP 理论和 BASE 理论"></a>CAP 理论和 BASE 理论</h5><p>CAP 理论和 BASE 理论是分布式领域非常非常重要的两个理论。不夸张地说，只要问到分布式相关的内容，面试官几乎是必定会问这两个分布式相关的理论。</p><p>不论是你面试也好，工作也罢，都非常有必要将这两个理论搞懂，并且能够用自己的理解给别人讲出来。</p><p>我这里就不多提这两个理论了，不了解的小伙伴，可以看我前段时间写过的一篇相关的文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247495298&idx=1&sn=965be0f54ab44bda818656db1f21a39f&chksm=cea1a149f9d6285f1169413ab7663ca2a9c1a8440a5ae5816566eb66b20e4d86f5db1002f66c&token=657875872&lang=zh_CN#rd" target="_blank" rel="noopener">《CAP 和 BASE 理论了解么？可以结合实际案例说下不？》</a> 。</p><h5 id="一致性的-3-种级别"><a href="#一致性的-3-种级别" class="headerlink" title="一致性的 3 种级别"></a>一致性的 3 种级别</h5><p>我们可以把对于系统一致性的要求分为下面 3 种级别：</p><ul><li><strong>强一致性</strong> ：系统写入了什么，读出来的就是什么。</li><li><strong>弱一致性</strong> ：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。</li><li><strong>最终一致性</strong> ：弱一致性的升级版。系统会保证在一定时间内达到数据一致的状态，</li></ul><p>除了上面这 3 个比较常见的一致性级别之外，还有读写一致性、因果一致性等一致性模型，具体可以参考<a href="https://es.cs.uni-kl.de/publications/datarsg/Senf13.pdf" target="_blank" rel="noopener">《Operational Characterization of Weak Memory Consistency Models》</a>这篇论文。因为日常工作中这些一致性模型很少见，我这里就不多做阐述（因为我自己也不是特别了解 😅）。</p><p>业界比较推崇是 <strong>最终一致性</strong>，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。</p><h5 id="柔性事务"><a href="#柔性事务" class="headerlink" title="柔性事务"></a>柔性事务</h5><p>互联网应用最关键的就是要保证高可用， 计算式系统几秒钟之内没办法使用都有可能造成数百万的损失。在此场景下，一些大佬们在 CAP 理论和 BASE 理论的基础上，提出了 <strong>柔性事务</strong> 的概念。 <strong>柔性事务追求的是最终一致性。</strong></p><p>实际上，柔性事务就是 <strong>BASE 理论 +业务实践</strong>。 柔性事务追求的目标是：我们根据自身业务特性，通过适当的方式来保证系统数据的最终一致性。 像 <strong>TCC、 Saga、MQ 事务 、本地消息表</strong> 就属于柔性事务。</p><h5 id="刚性事务"><a href="#刚性事务" class="headerlink" title="刚性事务"></a>刚性事务</h5><p>与柔性事务相对的就是 <strong>刚性事务</strong> 了。前面我们说了，<strong>柔性事务追求的是最终一致性</strong> 。那么，与之对应，刚性事务追求的就是 <strong>强一致性</strong>。像<strong>2PC 、3PC</strong> 就属于刚性事务。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-solution-summary.png&sign=1d3e071788d14785e0177c96a4c6387a6ad3dd37625f5b7a5a9c0f3201868067" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h4><p>分布式事务的解决方案有很多，比如：<strong>2PC、3PC、TCC、本地消息表、MQ 事务（Kafka 和 RocketMQ 都提供了事务相关功能） 、Saga</strong> 等等。</p><p>2PC、3PC 属于业务代码无侵入方案，都是基于 XA 规范衍生出来的实现，XA 规范是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准。TCC、Saga 属于业务侵入方案，MQ 事务依赖于使用消息队列的场景，本地消息表不支持回滚。</p><p>这些方案的适用场景有所区别，我们需要根据具体的场景选择适合自己项目的解决方案。</p><p>开始介绍 2PC 和 3PC 之前，我们先来介绍一下 2PC 和 3PC 涉及到的一些角色（XA 规范的角色组成）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fxa-specification-roles.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li><strong>AP（Application Program）</strong>：应用程序本身。</li><li><strong>RM（Resource Manager）</strong> ：资源管理器，也就是事务的参与者，绝大部分情况下就是指数据库（后文会以关系型数据库为例），一个分布式事务往往涉及到多个 RM。</li><li><strong>TM（Transaction Manager）</strong> ：事务管理器，负责管理全局事务，分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚、失败恢复等。</li></ul><h5 id="2PC（两阶段提交协议）"><a href="#2PC（两阶段提交协议）" class="headerlink" title="2PC（两阶段提交协议）"></a><strong>2PC（两阶段提交协议）</strong></h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666839398805-8d026011-316f-497a-9c11-e5a2e4a4b669.png" alt="2pc-work-flow.png" title>                </div>                <div class="image-caption">2pc-work-flow.png</div>            </figure><p>2PC（Two-Phase Commit）这三个字母的含义:</p><ul><li><strong>2</strong> -&gt; 指代事务提交的 2 个阶段</li><li><strong>P</strong>-&gt; Prepare (准备阶段)</li><li><strong>C</strong> -&gt;Commit（提交阶段）</li></ul><p>2PC 将事务的提交过程分为 2 个阶段：<strong>准备阶段</strong> 和 <strong>提交阶段</strong> 。</p><h6 id="准备阶段-Prepare"><a href="#准备阶段-Prepare" class="headerlink" title="准备阶段(Prepare)"></a>准备阶段(Prepare)</h6><p>准备阶段的核心是“询问”事务参与者执行本地数据库事务操作是否成功。</p><p>准备阶段的工作流程：</p><ol><li><strong>事务协调者/管理者（后文简称 TM）</strong> 向所有涉及到的 <strong>事务参与者（后文简称 RM）</strong> 发送消息询问：“你是否可以执行事务操作呢？”，并等待其答复。</li><li><strong>RM</strong> 接收到消息之后，开始执行本地数据库事务预操作比如写 redo log/undo log 日志，<strong>此时并不会提交事务</strong> 。</li><li><strong>RM</strong> 如果执行本地数据库事务操作成功，那就回复“Yes”表示我已就绪，否则就回复“No”表示我未就绪。</li></ol><h6 id="提交阶段-Commit"><a href="#提交阶段-Commit" class="headerlink" title="提交阶段(Commit)"></a>提交阶段(Commit)</h6><p>提交阶段的核心是“询问”事务参与者提交本地事务是否成功。</p><p>当所有事务参与者都是“就绪”状态的话：</p><ol><li><strong>TM</strong> 向所有参与者发送消息：“你们可以提交事务啦！”（<strong>Commit 消息</strong>）</li><li><strong>RM</strong> 接收到 <strong>Commit 消息</strong> 后执行 <strong>提交本地数据库事务</strong> 操作，执行完成之后 <strong>释放整个事务期间所占用的资源</strong>。</li><li><strong>RM</strong> 回复：“事务已经提交” （<strong>ACK 消息</strong>）。</li><li><strong>TM</strong> 收到所有 <strong>事务参与者</strong> 的 <strong>ACK 消息</strong> 之后，整个分布式事务过程正式结束。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-2pc-ready.png&sign=513d60918c71581a01b67490b0c565cbf884db266ad905ec52ce09377eca9b76" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>当任一事务参与者是“未就绪”状态的话：</p><ol><li><strong>TM</strong> 向所有参与者发送消息：“你们可以执行回滚操作了！”（<strong>Rollback 消息</strong>）。</li><li><strong>RM</strong> 接收到 <strong>Rollback 消息</strong> 后执行 <strong>本地数据库事务回滚</strong> 执行完成之后 <strong>释放整个事务期间所占用的资源</strong>。</li><li><strong>RM</strong> 回复：“事务已经回滚” （<strong>ACK 消息</strong>）。</li><li><strong>TM</strong> 收到所有 <strong>RM</strong> 的 <strong>ACK 消息</strong> 之后，中断事务。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-2pc-not-ready.png&sign=b05caeeb0d69ef8255689bf378c5bb046108ff3b94f06d91c514d09b2b485f3c" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h6 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h6><p>简单总结一下 <strong>2PC</strong> 两阶段中比较重要的一些点：</p><ol><li><strong>准备阶段</strong> 的主要目的是测试 <strong>RM</strong> 能否执行 <strong>本地数据库事务</strong> 操作（!!!注意：这一步并不会提交事务）。</li><li><strong>提交阶段</strong> 中 <strong>TM</strong> 会根据 <strong>准备阶段</strong> 中 <strong>RM</strong> 的消息来决定是执行事务提交还是回滚操作。</li><li><strong>提交阶段</strong> 之后一定会结束当前的分布式事务</li></ol><p><strong>2PC 的优点：</strong></p><ul><li>实现起来非常简单，各大主流数据库比如 MySQL、Oracle 都有自己实现。</li><li>针对的是数据强一致性。不过，仍然可能存在数据不一致的情况。</li></ul><p><strong>2PC 存在的问题：</strong></p><ul><li><strong>同步阻塞</strong> ：事务参与者会在正式提交事务之前会一直占用相关的资源。比如用户小明转账给小红，那其他事务也要操作用户小明或小红的话，就会阻塞。</li><li><strong>数据不一致</strong> ：由于网络问题或者TM宕机都有可能会造成数据不一致的情况。比如在第2阶段（提交阶段），部分网络出现问题导致部分参与者收不到 Commit/Rollback 消息的话，就会导致数据不一致。</li><li><strong>单点问题</strong> ： TM在其中也是一个很重要的角色，如果TM在准备(Prepare)阶段完成之后挂掉的话，事务参与者就会一直卡在提交(Commit)阶段。</li></ul><h5 id="3PC（三阶段提交协议）"><a href="#3PC（三阶段提交协议）" class="headerlink" title="3PC（三阶段提交协议）"></a><strong>3PC（三阶段提交协议）</strong></h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666839392078-2129a477-9728-4d28-8b47-8aa4fd74570c.png" alt="3pc-work-flow.png" title>                </div>                <div class="image-caption">3pc-work-flow.png</div>            </figure><p>3PC 是人们在 2PC 的基础上做了一些优化得到的。3PC 把 2PC 中的 <strong>准备阶段(Prepare)</strong> 做了进一步细化，分为 2 个阶段：</p><ul><li>准备阶段(CanCommit)</li><li>预提交阶段(PreCommit)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-3pc-ready.png&sign=8368a51b88493f73dbfe67cf0efcb82a02ea4ef098a5ab7873911e1865802e2f" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h6 id="准备阶段-CanCommit"><a href="#准备阶段-CanCommit" class="headerlink" title="准备阶段(CanCommit)"></a>准备阶段(CanCommit)</h6><p>这一步不会执行事务操作，只是向 RM 发送 <strong>准备请求</strong> ，顺便询问一些信息比如事务参与者能否执行本地数据库事务操作。RM 回复“Yes”、“No”或者直接超时。</p><p>如果任一 RM 回复“No”或者直接超时的话，就中断事务（向所有参与者发送“Abort”消息），否则进入 <strong>预提交阶段(PreCommit)</strong> 。</p><h6 id="预提交阶段-PreCommit"><a href="#预提交阶段-PreCommit" class="headerlink" title="预提交阶段(PreCommit)"></a>预提交阶段(PreCommit)</h6><p>TM 向所有涉及到的 RM 发送 <strong>预提交请求</strong> ，RM 回复“Yes”、“No”（最后的反悔机会）或者直接超时。</p><p>如果任一 RM 回复“No”或者直接超时的话，就中断事务（向所有事务参与者发送“abort”消息），否则进入 <strong>执行事务提交阶段（DoCommit）</strong> 。</p><p>当所有 RM 都返回“Yes”之后， RM 才会执行本地数据库事务预操作比如写 redo log/undo log 日志。</p><h6 id="执行事务提交阶段（DoCommit）"><a href="#执行事务提交阶段（DoCommit）" class="headerlink" title="执行事务提交阶段（DoCommit）"></a>执行事务提交阶段（DoCommit）</h6><p><strong>执行事务提交（DoCommit）</strong> 阶段就开始进行真正的事务提交。</p><p>TM 向所有涉及到的 RM 发送 <strong>执行事务提交请求</strong> ，RM 收到消息后开始正式提交事务，并在完成事务提交后释放占用的资源。</p><p>如果 TM 收到所有 RM 正确提交事务的消息的话，表示事务正常完成。如果任一 RM 没有正确提交事务或者超时的话，就中断事务，TM 向所有 RM 发送“Abort”消息。RM 接收到 Abort 请求后，执行本地数据库事务回滚，后面的步骤就和 2PC 中的类似了。</p><h6 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h6><p><strong>3PC 除了将2PC 中的准备阶段(Prepare) 做了进一步细化之外，还做了哪些改进？</strong></p><p>3PC 还同时在事务管理者和事务参与者中引入了 <strong>超时机制</strong> ，如果在一定时间内没有收到事务参与者的消息就默认失败，进而避免事务参与者一直阻塞占用资源。2PC 中只有事务管理者才拥有超时机制，当事务参与者长时间无法与事务协调者通讯的情况下（比如协调者挂掉了），就会导致无法释放资源阻塞的问题。</p><p>不过，3PC 并没有完美解决 2PC 的阻塞问题，引入了一些新问题比如性能糟糕，而且，依然存在数据不一致性问题。因此，3PC 的实际应用并不是很广泛，多数应用会选择通过复制状态机解决 2PC 的阻塞问题。</p><h5 id="TCC（补偿事务）"><a href="#TCC（补偿事务）" class="headerlink" title="TCC（补偿事务）"></a>TCC（补偿事务）</h5><p>TCC 属于目前比较火的一种柔性事务解决方案。TCC 这个概念最早诞生于数据库专家帕特 · 赫兰德（Pat Helland）于 2007 发表的 <a href="https://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf" target="_blank" rel="noopener">《Life beyond Distributed Transactions: an Apostate’s Opinion》</a> 这篇论文，感兴趣的小伙伴可以阅读一下这篇论文。</p><p>简单来说，TCC 是 Try、Confirm、Cancel 三个词的缩写，它分为三个阶段：</p><ol><li><strong>Try（尝试）阶段</strong> : 尝试执行。完成业务检查，并预留好必需的业务资源。</li><li><strong>Confirm（确认）阶段</strong> ：确认执行。当所有事务参与者的 Try 阶段执行成功就会执行 Confirm ，Confirm 阶段会处理 Try 阶段预留的业务资源。否则，就会执行 Cancel 。</li><li><strong>Cancel（取消）阶段</strong> ：取消执行，释放 Try 阶段预留的业务资源。</li></ol><p>每个阶段由业务代码控制，这样可以避免长事务，性能更好。</p><p>我们拿转账场景来说：</p><ol><li><strong>Try（尝试）阶段</strong> : 在转账场景下，Try 要做的事情是就是检查账户余额是否充足，预留的资源就是转账资金。</li><li><strong>Confirm（确认）阶段</strong> ： 如果 Try 阶段执行成功的话，Confirm 阶段就会执行真正的扣钱操作。</li><li><strong>Cancel（取消）阶段</strong> ：释放 Try 阶段预留的转账资金。</li></ol><p>一般情况下，当我们使用<code>TCC</code>模式的时候，需要自己实现 <code>try</code>, <code>confirm</code>, <code>cancel</code>这三个方法，来达到最终一致性。</p><p>正常情况下，会执行 <code>try</code>, <code>confirm</code> 方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-tcc-confirm.png&sign=82dc875113cad8430e870b66d153590ac5736da4e7bba748ec2422fd79137ecf" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>出现异常的话，会执行 <code>try</code>,<code>cancel</code> 方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-tcc-cancel.png&sign=33784c922ea4e16f29df6d994d4a6947299170634a68cbc30e13299b8ca5a133" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Try 阶段出现问题的话，可以执行 Cancel。<strong>那如果 Confirm 或者 Cancel 阶段失败了怎么办呢？</strong></p><p>TCC 会记录事务日志并持久化事务日志到某种存储介质上比如本地文件、关系型数据库、Zookeeper，事务日志包含了事务的执行状态，通过事务执行状态可以判断出事务是提交成功了还是提交失败了，以及具体失败在哪一步。如果发现是 Confirm 或者 Cancel 阶段失败的话，会进行重试，继续尝试执行 Confirm 或者 Cancel 阶段的逻辑。重试的次数通常为 6 次，如果超过重试的次数还未成功执行的话，就需要人工介入处理了。</p><p>如果代码没有特殊 Bug 的话，Confirm 或者 Cancel 阶段出现问题的概率是比较小的。</p><p><strong>事务日志会被删除吗？</strong> 会的。如果事务提交成功（没有抛出任何异常），就可以删除对应的事务日志，节省资源。</p><p><strong>TCC 模式不需要依赖于底层数据资源的事务支持，但是需要我们手动实现更多的代码</strong>，属于 <strong>侵入业务代码 的一种分布式解决方案</strong>。</p><p>TCC 事务模型的思想类似 2PC，我简单花了一张图对比一下二者。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2F2pc-vs-tcc.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>TCC 和 2PC/3PC 有什么区别呢？</strong></p><ul><li><p>2PC/3PC 依靠数据库或者存储资源层面的事务，TCC 主要通过修改业务代码来实现。</p></li><li><p>2PC/3PC 属于业务代码无侵入的，TCC 对业务代码有侵入。</p></li><li><p>2PC/3PC 追求的是强一致性，在两阶段提交的整个过程中，一直会持有数据库的锁。TCC 追求的是最终一致性，不会一直持有各个业务资源的锁。</p></li></ul><p>针对 TCC 的实现，业界也有一些不错的开源框架。不同的框架对于 TCC 的实现可能略有不同，不过大致思想都一样。</p><ol><li><p><a href="https://github.com/liuyangming/ByteTCC" target="_blank" rel="noopener">ByteTCC</a> : ByteTCC 是基于 Try-Confirm-Cancel（TCC）机制的分布式事务管理器的实现。 相关阅读：<a href="https://www.bytesoft.org/how-to-impl-tcc/" target="_blank" rel="noopener">关于如何实现一个 TCC 分布式事务框架的一点思考</a></p></li><li><p><a href="https://seata.io/zh-cn/index.html" target="_blank" rel="noopener">Seata</a> :Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p></li><li><p><a href="https://gitee.com/shuaiqiyu/hmily" target="_blank" rel="noopener">Hmily</a> : 金融级分布式事务解决方案。</p></li></ol><h5 id="MQ-事务"><a href="#MQ-事务" class="headerlink" title="MQ 事务"></a>MQ 事务</h5><p>RocketMQ 、 Kafka、Pulsar 、QMQ 都提供了事务相关的功能。事务允许事件流应用将消费，处理，生产消息整个过程定义为一个原子操作。</p><p>这里我们拿 RocketMQ 来说（图源：《消息队列高手课》）。相关阅读：<a href="https://rocketmq.apache.org/docs/transaction-example/" target="_blank" rel="noopener">RocketMQ 事务消息参考文档</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F2021060810404597.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ol><li>MQ 发送方（比如物流服务）在消息队列上开启一个事务，然后发送一个“半消息”给 MQ Server/Broker。事务提交之前，半消息对于 MQ 订阅方/消费者（比如第三方通知服务）不可见</li><li>“半消息”发送成功的话，MQ 发送方就开始执行本地事务。</li><li>MQ 发送方的本地事务执行成功的话，“半消息”变成正常消息，可以正常被消费。MQ 发送方的本地事务执行失败的话，会直接回滚。</li></ol><p>从上面的流程中可以看出，MQ 的事务消息使用的是两阶段提交（2PC），简单来说就是咱先发送半消息，等本地事务执行成功之后，半消息才变为正常消息。</p><p><strong>如果 MQ 发送方提交或者回滚事务消息时失败怎么办？</strong></p><p>RocketMQ 中的 Broker 会定期去 MQ 发送方上反查这个事务的本地事务的执行情况，并根据反查结果决定提交或者回滚这个事务。</p><p>事务反查机制的实现依赖于我们业务代码实现的对应的接口，比如你要查看创建物流信息的本地事务是否执行成功的话，直接在数据库中查询对应的物流信息是否存在即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210608114710962.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果正常消息没有被正确消费怎么办呢？</p><p>消息消费失败的话，RocketMQ 会自动进行消费重试。如果超过最大重试次数这个消息还是没有正确消费，RocketMQ 就会认为这个消息有问题，然后将其放到 死信队列。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210608120207740.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>进入死信队列的消费一般需要人工处理，手动排查问题。</p><p><strong>QMQ</strong>  的事务消息就没有 RocketMQ 实现的那么复杂了，它借助了数据库自带的事务功能。其核心思想其实就是 eBay 提出的 <strong>本地消息表</strong> 方案，将分布式事务拆分成本地事务进行处理。</p><p>我们维护一个本地消息表用来存放消息发送的状态，保存消息发送情况到本地消息表的操作和业务操作要在一个事务里提交。这样的话，业务执行成功代表消息表也写入成功。</p><p>然后，我们再单独起一个线程定时轮询消息表，把没处理的消息发送到消息中间件。</p><p>消息发送成功后，更新消息状态为成功或者直接删除消息。</p><p>RocketMQ 的事务消息方案中，如果消息队列挂掉，数据库事务就无法执行了，整个应用也就挂掉了。</p><p>QMQ 的事务消息方案中，即使消息队列挂了也不会影响数据库事务的执行。</p><p>因此，QMQ 实现的方案能更加适应于大多数业务。不过，这种方法同样适用于其他消息队列，只能说 QMQ 封装的更好，开箱即用罢了！</p><p>相关阅读： <a href="https://mp.weixin.qq.com/s/cBx1l1zaThN6_808fMl27g" target="_blank" rel="noopener">面试官：RocketMQ 分布式事务消息的缺点？</a></p><h5 id="Saga"><a href="#Saga" class="headerlink" title="Saga"></a><strong>Saga</strong></h5><p>Saga 绝对可以说是历史非常悠久了，Saga 事务理论在 1987 年 Hector &amp; Kenneth 在 ACM 发表的论文 <a href="https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf" target="_blank" rel="noopener">《Sagas》</a> 中就被提出了，早于分布式事务概念的提出。</p><p>Saga 属于长事务解决方案，其核心思想是将长事务拆分为多个本地短事务（本地短事务序列）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.yuque.com/api/filetransfer/images?url=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fdistributed-system%2Fdistributed-transaction%2Fdistributed-transaction-saga.png&sign=5d87613d39f415516e1cd40263a0cfc871c4340eb9fa34d7fe13647f167de18b" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>长事务 —&gt; T1,T2 ~ Tn 个本地短事务</li><li>每个短事务都有一个补偿动作 —&gt; C1,C2 ~ Cn</li></ul><p>下图来自于 <a href="https://docs.microsoft.com/zh-cn/azure/architecture/reference-architectures/saga/saga" target="_blank" rel="noopener">微软技术文档—Saga 分布式事务</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2F20210611101344496.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果 T1,T2 ~ Tn 这些短事务都能顺利完成的话，整个事务也就顺利结束，否则，将采取恢复模式。</p><p><strong>反向恢复 ：</strong></p><ul><li>简介：如果 Ti 短事务提交失败，则补偿所有已完成的事务（一直执行 Ci 对 Ti 进行补偿）。</li><li>执行顺序：T1，T2，…，Ti（失败），Ci（补偿），…，C2，C1。</li></ul><p><strong>正向恢复 ：</strong></p><ul><li>简介：如果 Ti 短事务提交失败，则一直对 Ti 进行重试，直至成功为止。</li><li>执行顺序：T1，T2，…，Ti（失败），Ti（重试）…，Ti+1，…，Tn。</li></ul><p>和 TCC 类似，Saga 正向操作与补偿操作都需要业务开发者自己实现，因此也属于 <strong>侵入业务代码</strong> 的一种分布式解决方案。和 TCC 很大的一点不同是 Saga 没有“Try” 动作，它的本地事务 Ti 直接被提交。因此，性能非常高！</p><p>理论上来说，补偿操作一定能够执行成功。不过，当网络出现问题或者服务器宕机的话，补偿操作也会执行失败。这种情况下，往往需要我们进行人工干预。并且，为了能够提高容错性（比如 Saga 系统本身也可能会崩溃），保证所有的短事务都得以提交或补偿，我们还需要将这些操作通过日志记录下来（Saga log，类似于数据库的日志机制）。这样，Saga 系统恢复之后，我们就知道短事务执行到哪里了或者补偿操作执行到哪里了。</p><p>另外，因为 Saga 没有进行“Try” 动作预留资源，所以不能保证隔离性。这也是 Saga 比较大的一个缺点。</p><p>针对 Saga 的实现，业界也有一些不错的开源框架。不同的框架对于 Saga 的实现可能略有不同，不过大致思想都一样。</p><ol><li><a href="https://github.com/apache/servicecomb-pack" target="_blank" rel="noopener">ServiceComb Pack</a> ：微服务应用的数据最终一致性解决方案。</li><li><a href="https://seata.io/zh-cn/index.html" target="_blank" rel="noopener">Seata</a> :Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</li></ol><h4 id="分布式事务开源项目"><a href="#分布式事务开源项目" class="headerlink" title="分布式事务开源项目"></a>分布式事务开源项目</h4><ol><li><a href="http://seata.io/zh-cn/" target="_blank" rel="noopener">Seata</a> ：Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。经历过双 11 的实战考验。</li><li><a href="https://gitee.com/dromara/hmily" target="_blank" rel="noopener">Hmily</a> ：Hmily 是一款高性能，零侵入，金融级分布式事务解决方案，目前主要提供柔性事务的支持，包含 <code>TCC</code>, <code>TAC</code>(自动生成回滚<code>SQL</code>) 方案，未来还会支持 XA 等方案。个人开发项目，目前在京东数科重启，未来会成为京东数科的分布式事务解决方案。</li><li><a href="https://gitee.com/dromara/Raincat" target="_blank" rel="noopener">Raincat</a> : 2 阶段提交分布式事务中间件。</li><li><a href="https://gitee.com/dromara/myth" target="_blank" rel="noopener">Myth</a> : 采用消息队列解决分布式事务的开源框架, 基于 Java 语言来开发（JDK1.8），支持 Dubbo，SpringCloud,Motan 等 rpc 框架进行分布式事务。</li></ol><h3 id="服务治理：监控系统如何做？"><a href="#服务治理：监控系统如何做？" class="headerlink" title="服务治理：监控系统如何做？"></a><strong>服务治理：监控系统如何做？</strong></h3><blockquote><p>个人学习笔记，大部分内容整理自书籍、博客和官方文档。</p><p>相关文章 &amp;书籍：</p><ul><li><a href="https://www.jianshu.com/p/302ba018082a" target="_blank" rel="noopener">监控系统选型，这篇不可不读！</a></li><li><a href="https://logz.io/blog/prometheus-vs-nagios-metrics/" target="_blank" rel="noopener">rometheus vs Nagios</a></li><li><a href="https://www.cnblogs.com/hunternet/p/14270218.html" target="_blank" rel="noopener">2020 年工作上的最大收获——监控告警体系</a></li><li><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">《Prometheus 操作指南》</a></li></ul><p>相关视频：</p><ul><li><a href="https://www.imooc.com/learn/1231" target="_blank" rel="noopener">使用Prometheus实践基于Spring Boot监控告警体系</a></li><li><a href="https://www.bilibili.com/video/BV11f4y1A7aF" target="_blank" rel="noopener">Prometheus &amp; Grafana -陈嘉鹏 [尚硅谷大数据]</a></li></ul></blockquote><h4 id="监控系统有什么用？"><a href="#监控系统有什么用？" class="headerlink" title="监控系统有什么用？"></a>监控系统有什么用？</h4><p>建立完善的监控体系主要是为了：</p><ul><li><strong>长期趋势分析</strong> ：通过对监控样本数据的持续收集和统计，对监控指标进行长期趋势分析。例如，通过对磁盘空间增长率的判断，我们可以提前预测在未来什么时间节点上需要对资源进行扩容。</li><li><strong>数据可视化</strong> ：通过可视化仪表盘能够直接获取系统的运行状态、资源使用情况、以及服务运行状态等直观的信息。</li><li><strong>预知故障和告警</strong> : 当系统出现或者即将出现故障时，监控系统需要迅速反应并通知管理员，从而能够对问题进行快速的处理或者提前预防问题的发生，避免出现对业务的影响。</li><li><strong>辅助定位故障、性能调优、容量规划以及自动化运维</strong></li></ul><p><strong>出任何线上事故，先不说其他地方有问题，监控部分一定是有问题的。</strong></p><p><strong>如何才能更好地使用监控使用？</strong></p><ol><li><strong>了解监控对象的工作原理</strong>：要做到对监控对象有基本的了解，清楚它的工作原理。比如想对 JVM 进行监控，你必须清楚 JVM 的堆内存结构和垃圾回收机制。</li><li><strong>确定监控对象的指标</strong>：清楚使用哪些指标来刻画监控对象的状态？比如想对某个接口进行监控，可以采用请求量、耗时、超时量、异常量等指标来衡量。</li><li><strong>定义合理的报警阈值和等级</strong>：达到什么阈值需要告警？对应的故障等级是多少？不需要处理的告警不是好告警，可见定义合理的阈值有多重要，否则只会降低运维效率或者让监控系统失去它的作用。</li><li><strong>建立完善的故障处理流程</strong>：收到故障告警后，一定要有相应的处理流程和 oncall 机制，让故障及时被跟进处理。</li></ol><h4 id="常见的监控对象和指标有哪些？"><a href="#常见的监控对象和指标有哪些？" class="headerlink" title="常见的监控对象和指标有哪些？"></a>常见的监控对象和指标有哪些？</h4><ul><li><p><strong>硬件监</strong>控 ：电源状态、CPU 状态、机器温度、风扇状态、物理磁盘、raid 状态、内存状态、网卡状态</p></li><li><p><strong>服务器基础监控</strong> ：CPU、内存、磁盘、网络</p></li><li><p><strong>数据库监控</strong> ：数据库连接数、QPS、TPS、并行处理的会话数、缓存命中率、主从延时、锁状态、慢查询</p></li><li><p><strong>中间件监控</strong> ： </p><ul><li>Nginx：活跃连接数、等待连接数、丢弃连接数、请求量、耗时、5XX 错误率</li><li>Tomcat：最大线程数、当前线程数、请求量、耗时、错误量、堆内存使用情况、GC 次数和耗时</li><li>缓存 ：成功连接数、阻塞连接数、已使用内存、内存碎片率、请求量、耗时、缓存命中率</li><li>消息队列：连接数、队列数、生产速率、消费速率、消息堆积量</li></ul></li><li><p><strong>应用监控</strong> ： </p><ul><li>HTTP 接口：URL 存活、请求量、耗时、异常量</li><li>RPC 接口：请求量、耗时、超时量、拒绝量</li><li>JVM ：GC 次数、GC 耗时、各个内存区域的大小、当前线程数、死锁线程数</li><li>线程池：活跃线程数、任务队列大小、任务执行耗时、拒绝任务数</li><li>连接池：总连接数、活跃连接数</li><li>日志监控：访问日志、错误日志</li><li>业务指标：视业务来定，比如 PV、订单量等</li></ul></li></ul><h4 id="监控的基本流程了解吗？"><a href="#监控的基本流程了解吗？" class="headerlink" title="监控的基本流程了解吗？"></a>监控的基本流程了解吗？</h4><p>无论是开源的监控系统还是自研的监控系统，监控的整个流程大同小异，一般都包括以下模块：</p><ul><li><strong>数据采集</strong>：采集的方式有很多种，包括日志埋点进行采集（通过 Logstash、Filebeat 等进行上报和解析），JMX 标准接口输出监控指标，被监控对象提供 REST API 进行数据采集（如 Hadoop、ES），系统命令行，统一的 SDK 进行侵入式的埋点和上报等。</li><li><strong>数据传输</strong>：将采集的数据以 TCP、UDP 或者 HTTP 协议的形式上报给监控系统，有主动 Push 模式，也有被动 Pull 模式。</li><li><strong>数据存储</strong>：有使用 MySQL、Oracle 等 RDBMS 存储的，也有使用时序数据库 RRDTool、OpentTSDB、InfluxDB 存储的，还有使用 HBase 存储的。</li><li><strong>数据展示</strong>：数据指标的图形化展示。</li><li><strong>监控告警</strong>：灵活的告警设置，以及支持邮件、短信、IM 等多种通知通道。</li></ul><h4 id="监控系统需要满足什么要求？"><a href="#监控系统需要满足什么要求？" class="headerlink" title="监控系统需要满足什么要求？"></a>监控系统需要满足什么要求？</h4><ul><li><strong>实时监控&amp;告警</strong> ：监控系统对业务服务系统实时监控，如果产生系统异常及时告警给相关人员。</li><li><strong>高可用</strong> ：要保障监控系统的可用性</li><li><strong>故障容忍</strong> ：监控系统不影响业务系统的正常运行，监控系统挂了，应用正常运行。</li><li><strong>可扩展</strong> ：支持分布式、跨 IDC 部署，横向扩展。</li><li><strong>可视化</strong> ：自带可视化图标、支持对接各类可视化组件比如 Grafana 。</li></ul><h4 id="监控系统技术选型有哪些？如何选择？"><a href="#监控系统技术选型有哪些？如何选择？" class="headerlink" title="监控系统技术选型有哪些？如何选择？"></a>监控系统技术选型有哪些？如何选择？</h4><h5 id="老牌监控系统"><a href="#老牌监控系统" class="headerlink" title="老牌监控系统"></a>老牌监控系统</h5><p>Zabbix 和 Nagios 相继出现在 1998 年和 1999 年，目前已经被淘汰，不太建议使用，Prometheus 是更好的选择。</p><h6 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h6><ul><li><strong>介绍</strong> ：老牌监控的优秀代表。产品成熟，监控功能很全面，采集方式丰富（支持 Agent、SNMP、JMX、SSH 等多种采集方式，以及主动和被动的数据传输方式），使用也很广泛，差不多有 70%左右的互联网公司都曾使用过 Zabbix 作为监控解决方案。</li><li><strong>开发语言</strong> ： C</li><li><strong>数据存储</strong> ： Zabbix 存储在 MySQL 上，也可以存储在其他数据库服务。Zabbix 由于使用了关系型数据存储时序数据，所以在监控大规模集群时常常在数据存储方面捉襟见肘。所以从 Zabbix 4.2 版本后开始支持 TimescaleDB 时序数据库，不过目前成熟度还不高。</li><li><strong>数据采集方式</strong> : Zabbix 通过 SNMP、Agent、ICMP、SSH、IPMI 等对系统进行数据采集。Zabbix 采用的是 Push 模型（客户端发送数据给服务端）。</li><li><strong>数据展示</strong> ：自带展示界面，也可以对接 Grafana。</li><li><strong>评价</strong> ：不太建议使用 Zabbix，性能可能会成为监控系统的瓶颈。并且，应用层监控支持有限、二次开发难度大（基于 c 语言）、数据模型不强大。</li></ul><p>相关阅读：<a href="http://www.sunrisenan.com/docs/zabbix" target="_blank" rel="noopener">《zabbix 运维手册》</a></p><h6 id="Nagios"><a href="#Nagios" class="headerlink" title="Nagios"></a>Nagios</h6><ul><li><strong>介绍</strong> ：Nagios 能有效监控 Windows、Linux 和 UNIX 的主机状态（CPU、内存、磁盘等），以及交换机、路由器等网络设备（SMTP、POP3、HTTP 和 NNTP 等），还有 Server、Application、Logging，用户可自定义监控脚本实现对上述对象的监控。Nagios 同时提供了一个可选的基于浏览器的 Web 界面，以方便系统管理人员查看网络状态、各种系统问题以及日志等。</li><li><strong>开发语言</strong> ： C</li><li><strong>数据存储</strong> ： MySQL 数据库</li><li><strong>数据采集方式</strong> : 通过各种插件采集数据</li><li><strong>数据展示</strong> ：自带展示界面，不过功能简单。</li><li><strong>评价</strong> ：不符合当前监控系统的要求，而且，Nagios 免费版本的功能非常有限，运维管理难度非常大。</li></ul><h5 id="新一代监控系统"><a href="#新一代监控系统" class="headerlink" title="新一代监控系统"></a>新一代监控系统</h5><p>相比于老牌监控系统，新一代监控系统有明显的优势，比如：灵活的数据模型、更成熟的时序数据库、强大的告警功能。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666351430977-06aeb3f0-ac03-4916-a6ac-4574fb979b42.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><h6 id="Open-Falcon"><a href="#Open-Falcon" class="headerlink" title="Open-Falcon"></a>Open-Falcon</h6><ul><li><strong>介绍</strong> ：小米 2015 年开源的企业级监控工具，在架构设计上吸取了 Zabbix 的经验，同时很好地解决了 Zabbix 的诸多痛点。Github 地址：<a href="https://github.com/open-falcon" target="_blank" rel="noopener">https://github.com/open-falcon</a> 。官方文档：<a href="https://book.open-falcon.org/" target="_blank" rel="noopener">https://book.open-falcon.org/</a> 。</li><li><strong>开发语言</strong> ：Go、Python。</li><li><strong>数据存储</strong> ： 环型数据库，支持对接时序数据库 OpenTSDB。</li><li><strong>数据采集方式</strong> : 自动发现，支持 falcon-agent、snmp、支持用户主动 push、用户自定义插件支持、opentsdb data model like（timestamp、endpoint、metric、key-value tags）。Open-Falcon 和 Zabbix 采用的都是 Push 模型（客户端发送数据给服务端）。</li><li><strong>数据展示</strong> ：自带展示界面，也可以对接 Grafana。</li><li><strong>评价</strong> ：用户集中在国内，流行度一般，生态一般。</li></ul><p>Open-Falcon 架构图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666351431508-d051cfb1-a325-44dc-b551-588c3ae0ce2d.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><strong>Falcon-agent</strong> ：采集模块。类似 Zabbix 的 agent，Kubernetes 自带监控体系中的 cAdvisor，Nagios 中的 Plugin，使用 Go 语言开发，用于采集主机上的各种指标数据。</li><li><strong>Hearthbeat server</strong> ：心跳服务。每个 Agent 都会周期性地通过 RPC 方式将自己地状态上报给 HBS，主要包括主机名、主机 IP、Agent 版本和插件版本，Agent 还会从 HBS 获取自己需要执行的采集任务和自定义插件。</li><li><strong>Transfer</strong> ：负责监控 agent 发送的监控数据，并对数据进行处理，在过滤后通过一致性 Hash 算法将数据发送到 Judge 或者 Graph。为了支持存储大量的历史数据，Transfer 还支持 OpenTSDB。Transfer 本身没有状态，可以随意扩展。</li><li><strong>Jedge</strong> ：告警模块。Transfer 转发到 Judge 的数据会触发用户设定的告警规则，如果满足，则会触发邮件、微信或者回调接口。这里为了避免重复告警，引入了 Redis 暂存告警，从而完成告警合并和抑制。</li><li><strong>Graph</strong> ：RRD 数据上报、归档、存储的组件。Graph 在收到数据以后，会以 RRDtool 的数据归档方式存储数据，同时提供 RPC 方式的监控查询接口。</li><li><strong>API</strong> ： 查询模块。主要提供查询接口，不但可以从 Grapg 里面读取数据，还可以对接 MySQL，用于保存告警、用户等信息。</li><li><strong>Dashboard</strong> ： 监控数据展示面板。由 Python 开发而成，提供 Open-Falcon 的数据和告警展示，监控数据来自 Graph，Dashboard 允许用户自定义监控面板。</li><li><strong>Aggregator</strong> : 聚合模块。聚合某集群下所有机器的某个指标的值，提供一种集群视角的监控体验。 通过定时从 Graph 获取数据，按照集群聚合产生新的监控数据并将监控数据发送到 Transfer。</li></ul><h6 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h6><ul><li><strong>介绍</strong> ：Prometheus 受启发于 Google 的 Brogmon 监控系统，由前 Google 员工 2015 年正式发布。截止到 2021 年 9 月 2 日，Prometheus 在 Github 上已经收获了 38.5k+ Star，600+位 Contributors。 Github 地址：<a href="https://github.com/prometheus" target="_blank" rel="noopener">https://github.com/prometheus</a> 。</li><li><strong>开发语言</strong> ：Go</li><li><strong>数据存储</strong> ： Prometheus 自研一套高性能的时序数据库，并且还支持外接时序数据库。</li><li><strong>数据采集方式</strong> : Prometheus 的基本原理是通过 HTTP 协议周期性抓取被监控组件的状态，任意组件只要提供对应的 HTTP 接口就可以接入监控。Prometheus 在收集数据时，采用的 Pull 模型（服务端主动去客户端拉取数据）</li><li><strong>数据展示</strong> ：自带展示界面，也可以对接 Grafana。</li><li><strong>评价</strong> ：目前国内外使用最广泛的一个监控系统，生态也非常好，成熟稳定！</li></ul><p><strong>Prometheus 特性 ：</strong></p><ul><li>开箱即用的各种服务发现机制，可以<strong>自动发现监控端点</strong>；</li><li>专为监控指标数据设计的<strong>高性能时序数据库 TSDB</strong>；</li><li>强大易用的查询语言<strong>PromQL</strong>以及丰富的<strong>聚合函数</strong>；</li><li>可以配置灵活的告警规则，支持<strong>告警收敛（分组、抑制、静默）、多级路由</strong>等等高级功能；</li><li><strong>生态完善</strong>，有各种现成的开源 Exporter 实现，实现自定义的监控指标也非常简单。</li></ul><p><strong>Prometheus 基本架构 ：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1666351430632-4fe8a2cc-0036-4b4b-a4c1-b055c34df407.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><strong>Prometheus Server</strong>：核心组件，用于收集、存储监控数据。它同时支持静态配置和通过 Service Discovery 动态发现来管理监控目标，并从监控目标中获取数据。此外，Prometheus Server 也是一个时序数据库，它将监控数据保存在本地磁盘中，并对外提供自定义的 PromQL 语言实现对数据的查询和分析。</li><li><strong>Exporter</strong>：用来采集数据，作用类似于 agent，区别在于 Prometheus 是基于 Pull 方式拉取采集数据的，因此，Exporter 通过 HTTP 服务的形式将监控数据按照标准格式暴露给 Prometheus Server，社区中已经有大量现成的 Exporter 可以直接使用，用户也可以使用各种语言的 client library 自定义实现。</li><li><strong>Push gateway</strong>：主要用于瞬时任务的场景，防止 Prometheus Server 来 pull 数据之前此类 Short-lived jobs 就已经执行完毕了，因此 job 可以采用 push 的方式将监控数据主动汇报给 Push gateway 缓存起来进行中转。</li><li>当告警产生时，Prometheus Server 将告警信息推送给 Alert Manager，由它发送告警信息给接收方。</li><li>Prometheus 内置了一个简单的 web 控制台，可以查询配置信息和指标等，而实际应用中我们通常会将 Prometheus 作为 Grafana 的数据源，创建仪表盘以及查看指标。</li></ul><p>推荐一本 Prometheus 的开源书籍<a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">《Prometheus 操作指南》</a>。</p><h4 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h4><ul><li>监控是一项长期建设的事情，一开始就想做一个 All In One 的监控解决方案，我觉得没有必要。从成本角度考虑，在初期直接使用开源的监控方案即可，先解决有无问题。 </li><li>Zabbix、Open-Falcon 和 Prometheus 都支持和 Grafana 做快速集成，想要美观且强大的可视化体验，可以和 Grafana 进行组合。 </li><li>Open-Falcon 的核心优势在于数据分片功能，能支撑更多的机器和监控项；Prometheus 则是容器监控方面的标配，有 Google 和 k8s 加持。 </li></ul><h3 id="服务治理：分布式下如何进行日志管理？"><a href="#服务治理：分布式下如何进行日志管理？" class="headerlink" title="服务治理：分布式下如何进行日志管理？"></a><strong>服务治理：分布式下如何进行日志管理？</strong></h3><p>因为日志系统在询问项目经历的时候经常会被问到，所以，我就写了这篇文章。</p><p>这是一篇日志系统常见概念的扫盲篇~不会涉及到具体架构的日志系统的搭建过程。旨在帮助对于日志系统不太了解的小伙伴，普及一些日志系统常见的概念。</p><h4 id="何为日志？"><a href="#何为日志？" class="headerlink" title="何为日志？"></a>何为日志？</h4><p>在我看来，日志就是系统对某些行为的一些记录，这些行为包括：系统出现错误（定位问题、解决问题）、记录关键的业务信息（定位问题、解决问题）、记录操作行为（保障安全）等等。</p><p>按照较为官方的话来说：“日志是带时间戳的基于时间序列的机器数据，包括 IT 系统信息（服务器、网络设备、操作系统、应用软件）、物联网各种传感器信息。日志可以反映用户/机器的行为，是真实的数据”。</p><h4 id="为何要用日志系统？"><a href="#为何要用日志系统？" class="headerlink" title="为何要用日志系统？"></a>为何要用日志系统？</h4><p>没有日志系统之前，我们的日志可能分布在多台服务器上。每次需要查看日志，我们都需要登录每台机器。然后，使用 <code>grep</code>、<code>wc</code> 等 Linux 命令来对日志进行搜索。这个过程是非常麻烦并且耗时的！并且，日志量不大的时候，这个速度还能忍受。当日志量比较多的时候，整个过程就是非常慢。</p><p>从上面我的描述中，你已经发现，没有对日志实现集中管理，主要给我们带来了下面这几点问题：</p><ol><li>开发人员登录线上服务器查看日志比较麻烦并且存在安全隐患</li><li>日志数据比较分散，难以维护，不方便检索。</li><li>日志数量比较大的时候，查询速度比较慢。</li><li>无法对日志数据进行可视化展示。</li></ol><p><strong>日志系统就是为了对日志实现集中管理。它也是一个系统，不过主要是负责处理日志罢了。</strong></p><h4 id="一个最基本的日志系统要做哪些事情？"><a href="#一个最基本的日志系统要做哪些事情？" class="headerlink" title="一个最基本的日志系统要做哪些事情？"></a>一个最基本的日志系统要做哪些事情？</h4><p>为了解决没有日志系统的时候，存在的一些问题，一直最基本的 <strong>日志系统需要做哪些事情呢？</strong></p><ol><li><p><strong>采集日志</strong> ：支持多种日志格式以及数据源的采集。</p></li><li><p><strong>日志数据清洗/处理</strong> ：采集到的原始日志数据需要首先清洗/处理一波。</p></li><li><p><strong>存储</strong> ：为了方便对清洗后的日志进行处理，我们可以对接多种存储方式比如 ElasticSearch（日志检索） 、Hadoop(离线数据分析)。</p></li><li><p><strong>展示与搜素</strong> ：支持可视化地展示日志，并且能够根据关键词快速的定位到日志并查看日志上下文。</p></li><li><p><strong>告警</strong> ：支持对接常见的监控系统。</p></li></ol><p>我专门画了一张图，展示一下日志系统处理日志的一个基本流程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F39558d5db0fab7865088a9ab3626f575.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>另外，一些比较高大上的日志系统甚至还支持 <strong>实时分析、离线分析</strong> 等功能</p><h4 id="ELK-了解么？"><a href="#ELK-了解么？" class="headerlink" title="ELK 了解么？"></a>ELK 了解么？</h4><p>ELK 是目前使用的比较多的一个开源的日志系统解决方案，背靠是 <a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elastic</a> 这家专注搜索的公司。</p><h5 id="ELK-老三件套"><a href="#ELK-老三件套" class="headerlink" title="ELK 老三件套"></a>ELK 老三件套</h5><p>最原始的时候，ELK 是由 3 个开源项目的首字母构成，分别是 <strong>E</strong>lasticsearch 、<strong>L</strong>ogstash、<strong>K</strong>ibana。</p><p>下图是一个最简单的 <strong>ELK 日志系统架构 ：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F7dc144a91d2afa1126889d250fb3ac03.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我们分别来介绍一下这些开源项目以及它们在这个日志系统中起到的作用：</p><ul><li><strong>Logstash</strong> ：Logstash 主要用于日志的搜集、分析和过滤，支持对多种日志类型进行处理。在 ELK 日志系统中，Logstash 负责日志的收集和清洗。</li><li><strong>Elasticsearch</strong> ：ElasticSearch 一款使用 <strong>Java</strong> 语言开发的搜索引擎，基于 <strong>Lucence</strong> 。可以解决使用数据库进行模糊搜索时存在的性能问题，提供海量数据近实时的检索体验。在 ELK 日志系统中，Elasticsearch 负责日志的搜素。</li><li><strong>Kibana</strong> ：Kibana 是专门设计用来与 Elasticsearch 协作的，可以自定义多种表格、柱状图、饼状图、折线图对存储在 Elasticsearch 中的数据进行深入挖掘分析与可视化。 ELK 日志系统中，Logstash 主要负责对从 Elasticsearch 中搜索出来的日志进行可视化展示。</li></ul><h5 id="新一代-ELK-架构"><a href="#新一代-ELK-架构" class="headerlink" title="新一代 ELK 架构"></a>新一代 ELK 架构</h5><p>ELK 属于比较老牌的一款日志系统解决方案，这个方案存在一个问题就是：<strong>Logstash 对资源消耗过高。</strong></p><p>于是， Elastic 推出了 Beats 。Beats 基于名为<a href="https://github.com/elastic/beats/tree/master/libbeat" target="_blank" rel="noopener">libbeat</a>的 Go 框架，一共包含 8 位成员。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fc16f973d5532a0a4f0d686ee6645b67f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这个时候，ELK 已经不仅仅代表 <strong>E</strong>lasticsearch 、<strong>L</strong>ogstash、<strong>K</strong>ibana 这 3 个开源项目了。</p><p>Elastic 官方将 ELK 重命名为 <strong>Elastic Stack</strong>（Elasticsearch、Kibana、Beats 和 Logstash）。但是，大家目前仍然习惯将其成为 ELK 。</p><p>Elastic 的官方文档是这样描述的（由 Chrome 插件 Mate Translate 提供翻译功能）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F274a1a229d2e5dff517e065ecf7b436e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>现在的 ELK 架构变成了这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fff75430c69e043a044bef1a355023dfe-167635397809056.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Beats 采集的数据可以直接发送到 Elasticsearch 或者在 Logstash 进一步处理之后再发送到 Elasticsearch。</p><p>Beats 的诞生，也大大地扩展了老三件套版本的 ELK 的功能。Beats 组件除了能够通过 Filebeat 采集日志之外，还能通过 Metricbeat 采集服务器的各种指标，通过 Packetbeat 采集网络数据。</p><p>我们不需要将 Beats 都用上，一般对于一个基本的日志系统，只需要 <strong>Filebeat</strong> 就够了。</p><p>根据<a href="https://www.elastic.co/cn/beats/filebeat" target="_blank" rel="noopener">Filebeat 官方介绍</a>：</p><blockquote><p>Filebeat 是一个轻量型日志采集器。无论您是从安全设备、云、容器、主机还是 OT 进行数据收集，Filebeat 都将为您提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。</p></blockquote><p>Filebeat 是 Elastic Stack 的一部分，能够与 Logstash、Elasticsearch 和 Kibana 无缝协作。</p><p>Filebeat 能够轻松地将数据传送到 Logstash（对日志进行处理）、Elasticsearch（日志检索）、甚至是 Kibana （日志展示）中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Fc697787897052b1b8270c9904a7b06c8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Filebeat 只是对日志进行采集，无法对日志进行处理。日志具体的处理往往还是要交给 Logstash 来做。</p><p>更多关于 Filebeat 的内容，你可以看看 <a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html" target="_blank" rel="noopener">Filebeat 官方文档教程</a>。</p><h5 id="Filebeat-Logstash-Elasticsearch-Kibana-架构概览"><a href="#Filebeat-Logstash-Elasticsearch-Kibana-架构概览" class="headerlink" title="Filebeat+Logstash+Elasticsearch+Kibana 架构概览"></a>Filebeat+Logstash+Elasticsearch+Kibana 架构概览</h5><p>下图一个最基本的 Filebeat+Logstash+Elasticsearch+Kibana 架构图，图片来源于：<a href="https://www.technolush.com/blog/the-elk-stack-using-filebeat" target="_blank" rel="noopener">《The ELK Stack ( Elasticsearch, Logstash, and Kibana ) Using Filebeat》</a>。</p><p>Filebeat 替代 Logstash 采集日志，具体的日志处理还是由 Logstash 来做。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F22f3304f9800c1a49ce1f5c610da262d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>针对上图的日志系统架构图，有下面几个可优化点：</p><ol><li>在 Kibana 和用户之间，使用 Nginx 来做反向代理，免用户直接访问 Kibana 服务器，提高安全性。</li><li>Filebeat 和 Logstash 之间增加一层消息队列比如 Kafka、RabbitMQ。Filebeat 负责将收集到的数据写入消息队列，Logstash 取出数据做进一步处理。</li></ol><h5 id="EFK"><a href="#EFK" class="headerlink" title="EFK"></a>EFK</h5><p>EFK 中的 F 代表的是 <a href="https://github.com/fluent/fluentd" target="_blank" rel="noopener">Fluentd</a>。下图是一个最简单的 <strong>EFK 日志系统架构 ：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F8005ba7b087ad3e00643e5f1c4a854b4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Fluentd 是一款开源的日志收集器，使用 Ruby 编写，其提供的功能和 Logstash 差不多。但是，要更加轻量，性能也更优越，内存占用也更低。具体使用教程，可以参考<a href="https://mp.weixin.qq.com/s/sXYDIJpIhPsVGNkSCIaNfQ" target="_blank" rel="noopener">《性能优越的轻量级日志收集工具，微软、亚马逊都在用！》</a>。</p><h4 id="轻量级日志系统-Loki"><a href="#轻量级日志系统-Loki" class="headerlink" title="轻量级日志系统 Loki"></a>轻量级日志系统 Loki</h4><p>上面介绍到的 ELK 日志系统方案功能丰富，稳定可靠。不过，对资源的消耗也更大，成本也更高。而且，用过 ELK 日志系统的小伙伴肯定会发现其实很多功能压根都用不上。</p><p>因此，就有了 Loki，这是一个 Grafana Labs 团队开源的小巧易用的日志系统，原生支持 Grafana。</p><p>并且，Loki 专门为 Prometheus 和 Kubernetes 用户做了相关优化比如 Loki 特别适合存储Kubernetes Pod 日志。</p><blockquote><p>项目地址：<a href="https://github.com/grafana/loki/" target="_blank" rel="noopener">https://github.com/grafana/loki/</a></p></blockquote><p>官方的介绍也比较有意思哈！<code>Like Prometheus,But For Logs</code>. （类似于 Prometheus 的日志系统，不过主要是为日志服务的）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2Ff6df2d0349aad765e9c924ec469f5d59.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>根据官网 ，Loki 的架构如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fimg-blog.csdnimg.cn%2Fc629732c94614af8a474006aab05099d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Loki 的整个架构非常简单，主要有 3 个组件组成：</p><ul><li>Loki 是主服务器，负责存储日志和处理查询。</li><li>Promtail 是代理，负责收集日志并将其发送给 Loki 。</li><li>Grafana 用于 UI 展示。</li></ul><p>Loki 提供了详细的使用文档，上手相对来说比较容易。并且，目前其流行度还是可以的。你可以很方便在网络上搜索到有关 Loki 的博文。</p><h4 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h4><p>这篇文章我主要介绍了日志系统相关的知识，包括：</p><ul><li>何为日志？</li><li>为何要用日志系统？一个基本的日志系统要做哪些事情？</li><li>ELK、EFK</li><li>轻量级日志系统 Loki</li></ul><p>另外，大部分图片都是我使用 draw.io 来绘制的。一些技术名词的图标，我们可以直接通过 Google 图片搜索即可，方法： 技术名词+图标（示例：Logstash icon）</p><h4 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h4><ol><li>ELK 架构和 Filebeat 工作原理详解：<a href="https://developer.ibm.com/zh/articles/os-cn-elk-filebeat/" target="_blank" rel="noopener">https://developer.ibm.com/zh/articles/os-cn-elk-filebeat/</a></li><li>ELK Introduction-elastic 官方 ：<a href="https://elastic-stack.readthedocs.io/en/latest/introduction.html" target="_blank" rel="noopener">https://elastic-stack.readthedocs.io/en/latest/introduction.html</a></li><li>ELK Stack Tutorial: Learn Elasticsearch, Logstash, and Kibana ：<a href="https://www.guru99.com/elk-stack-tutorial.html" target="_blank" rel="noopener">https://www.guru99.com/elk-stack-tutorial.html</a></li></ol><h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h2><h3 id="高可用：如何设计一个高可用系统？"><a href="#高可用：如何设计一个高可用系统？" class="headerlink" title="高可用：如何设计一个高可用系统？"></a><strong>高可用：如何设计一个高可用系统？</strong></h3><p>一篇短小的文章，面试经常遇到的这个问题。本文主要包括下面这些内容：</p><ol><li><p>高可用的定义</p></li><li><p>哪些情况可能会导致系统不可用？</p></li><li><p>有些提高系统可用性的方法？只是简单的提一嘴，更具体内容在后续的文章中介绍，就拿限流来说，你需要搞懂：何为限流？如何限流？为什么要限流？如何做呢？说一下原理？。</p></li></ol><h4 id="什么是高可用？可用性的判断标准是啥？"><a href="#什么是高可用？可用性的判断标准是啥？" class="headerlink" title="什么是高可用？可用性的判断标准是啥？"></a>什么是高可用？可用性的判断标准是啥？</h4><p>高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。</p><p>一般情况下，我们使用多少个 9 来评判一个系统的可用性，比如 99.9999% 就是代表该系统在所有的运行时间中只有 0.0001% 的时间是不可用的，这样的系统就是非常非常高可用的了！当然，也会有系统如果可用性不太好的话，可能连 9 都上不了。</p><h4 id="哪些情况会导致系统不可用？"><a href="#哪些情况会导致系统不可用？" class="headerlink" title="哪些情况会导致系统不可用？"></a>哪些情况会导致系统不可用？</h4><ol><li><p>黑客攻击；</p></li><li><p>硬件故障，比如服务器坏掉。</p></li><li><p>并发量/用户请求量激增导致整个服务宕掉或者部分服务不可用。</p></li><li><p>代码中的坏味道导致内存泄漏或者其他问题导致程序挂掉。</p></li><li><p>网站架构某个重要的角色比如 Nginx 或者数据库突然不可用。</p></li><li><p>自然灾害或者人为破坏。</p></li><li><p>……</p></li></ol><h4 id="有哪些提高系统可用性的方法？"><a href="#有哪些提高系统可用性的方法？" class="headerlink" title="有哪些提高系统可用性的方法？"></a>有哪些提高系统可用性的方法？</h4><h5 id="1-注重代码质量，测试严格把关"><a href="#1-注重代码质量，测试严格把关" class="headerlink" title="1. 注重代码质量，测试严格把关"></a>1. 注重代码质量，测试严格把关</h5><p>我觉得这个是最最最重要的，代码质量有问题比如比较常见的内存泄漏、循环依赖都是对系统可用性极大的损害。大家都喜欢谈限流、降级、熔断，但是我觉得从代码质量这个源头把关是首先要做好的一件很重要的事情。如何提高代码质量？比较实际可用的就是 CodeReview，不要在乎每天多花的那 1 个小时左右的时间，作用可大着呢！</p><p>另外，安利这个对提高代码质量有实际效果的宝贝：</p><ol><li><p>sonarqube ：保证你写出更安全更干净的代码！（ps: 目前所在的项目基本都会用到这个插件）。</p></li><li><p>Alibaba 开源的 Java 诊断工具 Arthas 也是很不错的选择。</p></li><li><p>IDEA 自带的代码分析等工具进行代码扫描也是非常非常棒的。</p></li></ol><h5 id="2-使用集群，减少单点故障"><a href="#2-使用集群，减少单点故障" class="headerlink" title="2.使用集群，减少单点故障"></a>2.使用集群，减少单点故障</h5><p>先拿常用的 Redis 举个例子！我们如何保证我们的 Redis 缓存高可用呢？答案就是使用集群，避免单点故障。当我们使用一个 Redis 实例作为缓存的时候，这个 Redis 实例挂了之后，整个缓存服务可能就挂了。使用了集群之后，即使一台 Redis 实例，不到一秒就会有另外一台 Redis 实例顶上。</p><h5 id="3-限流"><a href="#3-限流" class="headerlink" title="3.限流"></a>3.限流</h5><p>流量控制（flow control），其原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。——来自 alibaba-<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a> 的 wiki。</p><h5 id="4-超时和重试机制设置"><a href="#4-超时和重试机制设置" class="headerlink" title="4.超时和重试机制设置"></a>4.超时和重试机制设置</h5><p>一旦用户请求超过某个时间的得不到响应，就抛出异常。这个是非常重要的，很多线上系统故障都是因为没有进行超时设置或者超时设置的方式不对导致的。我们在读取第三方服务的时候，尤其适合设置超时和重试机制。一般我们使用一些 RPC 框架的时候，这些框架都自带的超时重试的配置。如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法在处理请求。重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。</p><h5 id="5-熔断机制"><a href="#5-熔断机制" class="headerlink" title="5.熔断机制"></a>5.熔断机制</h5><p>超时和重试机制设置之外，熔断机制也是很重要的。 熔断机制说的是系统自动收集所依赖服务的资源使用情况和性能指标，当所依赖的服务恶化或者调用失败次数达到某个阈值的时候就迅速失败，让当前系统立即切换依赖其他备用服务。 比较常用的是流量控制和熔断降级框架是 Netflix 的 Hystrix 和 alibaba 的 Sentinel。</p><h5 id="6-异步调用"><a href="#6-异步调用" class="headerlink" title="6.异步调用"></a>6.异步调用</h5><p>异步调用的话我们不需要关心最后的结果，这样我们就可以用户请求完成之后就立即返回结果，具体处理我们可以后续再做，秒杀场景用这个还是蛮多的。但是，使用异步之后我们可能需要 <strong>适当修改业务流程进行配合，比如用户在提交订单之后，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功</strong>。除了可以在程序中实现异步之外，我们常常还使用消息队列，消息队列可以通过异步处理提高系统性能（削峰、减少响应所需时间）并且可以降低系统耦合性。</p><h5 id="7-使用缓存"><a href="#7-使用缓存" class="headerlink" title="7.使用缓存"></a>7.使用缓存</h5><p>如果我们的系统属于并发量比较高的话，如果我们单纯使用数据库的话，当大量请求直接落到数据库可能数据库就会直接挂掉。使用缓存缓存热点数据，因为缓存存储在内存中，所以速度相当地快！</p><h5 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h5><ol><li><p>核心应用和服务优先使用更好的硬件</p></li><li><p>监控系统资源使用情况增加报警设置。</p></li><li><p>注意备份，必要时候回滚。</p></li><li><p>灰度发布： 将服务器集群分成若干部分，每天只发布一部分机器，观察运行稳定没有故障，第二天继续发布一部分机器，持续几天才把整个集群全部发布完毕，期间如果发现问题，只需要回滚已发布的一部分服务器即可</p></li><li><p>定期检查/更换硬件： 如果不是购买的云服务的话，定期还是需要对硬件进行一波检查的，对于一些需要更换或者升级的硬件，要及时更换或者升级。</p></li><li><p>…..(想起来再补充！也欢迎各位欢迎补充！)</p></li></ol><h3 id="高可用：负载均衡的常见算法有哪些？"><a href="#高可用：负载均衡的常见算法有哪些？" class="headerlink" title="高可用：负载均衡的常见算法有哪些？"></a><strong>高可用：负载均衡的常见算法有哪些？</strong></h3><blockquote><p>相关面试题 ：</p><ul><li>服务端负载均衡一般怎么做？</li><li>四层负载均衡和七层负载均衡的区别？</li><li>负载均衡的常见算法有哪些？</li><li>七层负载均衡常见解决方案有哪些？</li><li>客户端负载均衡的常见解决方案有哪些？</li></ul></blockquote><h4 id="什么是负载均衡？"><a href="#什么是负载均衡？" class="headerlink" title="什么是负载均衡？"></a>什么是负载均衡？</h4><p><strong>负载均衡</strong> 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。</p><p>下图是<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》</a> 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访问商品服务请求的分流，我们用到了负载均衡。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\9b350f26-1d2e-4764-8d83-2df06f61afb6.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>负载均衡是一种比较常用且实施起来较为简单的提高系统并发能力和可靠性的手段，不论是单体架构的系统还是微服务架构的系统几乎都会用到。</p><h4 id="负载均衡通常分为哪两种？"><a href="#负载均衡通常分为哪两种？" class="headerlink" title="负载均衡通常分为哪两种？"></a>负载均衡通常分为哪两种？</h4><p>负载均衡可以简单分为 <strong>服务端负载均衡</strong> 和 <strong>客户端负载均衡</strong> 这两种。</p><p>服务端负载均衡涉及到的知识点更多，工作中遇到的也比较多，因为，我会花更多时间来介绍。</p><h5 id="服务端负载均衡"><a href="#服务端负载均衡" class="headerlink" title="服务端负载均衡"></a>服务端负载均衡</h5><p>服务端负载均衡 主要应用在 系统外部请求 和 网关层 之间，可以使用 软件 或者 硬件 实现。</p><p>下图是我画的一个简单的基于 Nginx 的服务端负载均衡示意图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5843341e-b6ae-4f3d-8d10-f9984208e0a1.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>硬件负载均衡</strong> 通过专门的硬件设备（比如 <strong>F5、A10、Array</strong> ）实现负载均衡功能。</p><p>硬件负载均衡的优势是性能很强且稳定，缺点就是实在是太贵了。像基础款的 F5 最低也要 20 多万，绝大部分公司是根本负担不起的，业务量不大的话，真没必要非要去弄个硬件来做负载均衡，用软件负载均衡就足够了！</p><p>在我们日常开发中，一般很难接触到硬件负载均衡，接触的比较多的还是 <strong>软件负载均衡</strong> 。软件负载均衡通过软件（比如 <strong>LVS、Nginx、HAproxy</strong> ）实现负载均衡功能，性能虽然差一些，但价格便宜啊！像基础款的 Linux 服务器也就几千，性能好一点的 2~3 万的就很不错了。</p><p>根据 OSI 模型，服务端负载均衡还可以分为：</p><ul><li>二层负载均衡</li><li>三层负载均衡</li><li>四层负载均衡</li><li>七层负载均衡</li></ul><p>最常见的是四层和七层负载均衡，因此，本文也是重点介绍这两种负载均衡。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\923e3076-de6e-4d9e-aaaa-b48f0736f5ee.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li><strong>四层负载均衡</strong> 工作在 OSI 模型第四层，也就是传输层，这一层的主要协议是 TCP/UDP，负载均衡器在这一层能够看到数据包里的源端口地址以及目的端口地址，会基于这些信息通过一定的负载均衡算法将数据包转发到后端真实服务器。</li><li><strong>七层负载均衡</strong> 工作在 OSI 模型第七层，也就是应用层，这一层的主要协议是 HTTP 。这一层的负载均衡比四层负载均衡路由网络请求的方式更加复杂，它会读取报文的数据部分（比如说我们的 HTTP 部分的报文），然后根据读取到的数据内容（如 URL、Cookie）做出负载均衡决策。</li></ul><p>七层负载均衡比四层负载均衡会消耗更多的性能，不过，也相对更加灵活，能够更加智能地路由网络请求，比如说你可以根据请求的内容进行优化如缓存、压缩、加密。</p><p>简单来说，<strong>四层负载均衡性能更强，七层负载均衡功能更强！</strong></p><p>在工作中，我们通常会使用 <strong>Nginx</strong> 来做七层负载均衡，LVS(Linux Virtual Server 虚拟服务器， Linux 内核的 4 层负载均衡)来做四层负载均衡。关于 Nginx 的常见知识点总结，<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》</a> 中「技术面试题篇」中已经有对应的内容了，感兴趣的小伙伴可以去看看。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\6d7f20f5-6a7c-4b75-a65b-c664c7793b98.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>不过，LVS 这个绝大部分公司真用不上，像阿里、百度、腾讯、eBay 等大厂才会使用到，用的最多的还是 Nginx。</p><h5 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h5><p><strong>客户端负载均衡</strong> 主要应用于系统内部的不同的服务之间，可以使用现成的负载均衡组件来实现。</p><p>在客户端负载均衡中，客户端会自己维护一份服务器的地址列表，发送请求之前，客户端会根据对应的负载均衡算法来选择具体某一台服务器处理请求。</p><p>客户端负载均衡器和服务运行在同一个进程或者说 Java 程序里，不存在额外的网络开销。不过，客户端负载均衡的实现会受到编程语言的限制，比如说 Spring Cloud Load Balancer 就只能用于 Java 语言。</p><p>Java 领域主流的微服务框架 Dubbo、Spring Cloud 等都内置了开箱即用的客户端负载均衡实现。Dubbo 属于是默认自带了负载均衡功能，Spring Cloud 是通过组件的形式实现的负载均衡，属于可选项，比较常用的是 Spring Cloud Load Balancer（官方，推荐） 和 Ribbon（Netflix，已被启用）。</p><p>下图是我画的一个简单的基于 Spring Cloud Load Balancer（Ribbon 也类似） 的客户端负载均衡示意图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c9319f3b-5227-4b1c-9b0a-293aaa305927.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="负载均衡常见的算法有哪些？"><a href="#负载均衡常见的算法有哪些？" class="headerlink" title="负载均衡常见的算法有哪些？"></a>负载均衡常见的算法有哪些？</h4><h5 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h5><p><strong>随机法</strong> 是最简单粗暴的负载均衡算法。</p><p>如果没有配置权重的话，所有的服务器被访问到的概率都是相同的。如果配置权重的话，权重越高的服务器被访问的概率就越大。</p><p>未加权重的随机算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权随机算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p><p>不过，随机算法有一个比较明显的缺陷：部分机器在一段时间之内无法被随机到，毕竟是概率算法，就算是大家权重一样， 也可能会出现这种情况。</p><p>于是，<strong>轮询法</strong> 来了！</p><h5 id="轮询法"><a href="#轮询法" class="headerlink" title="轮询法"></a>轮询法</h5><p>轮询法是挨个轮询服务器处理，也可以设置权重。</p><p>如果没有配置权重的话，每个请求按时间顺序逐一分配到不同的服务器处理。如果配置权重的话，权重越高的服务器被访问的次数就越多。</p><p>未加权重的轮询算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权轮询算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p><h5 id="一致性-Hash-法"><a href="#一致性-Hash-法" class="headerlink" title="一致性 Hash 法"></a>一致性 Hash 法</h5><p>相同参数的请求总是发到同一台服务器处理，比如同个 IP 的请求。</p><h5 id="最小连接法"><a href="#最小连接法" class="headerlink" title="最小连接法"></a>最小连接法</h5><p>当有新的请求出现时，遍历服务器节点列表并选取其中活动连接数最小的一台服务器来响应当前请求。活动连接数可以理解为当前正在处理的请求数。</p><p>最小连接法可以尽可能最大地使请求分配更加合理化，提高服务器的利用率。不过，这种方法实现起来也最复杂，需要监控每一台服务器处理的请求连接数。</p><h4 id="七层负载均衡可以怎么做？"><a href="#七层负载均衡可以怎么做？" class="headerlink" title="七层负载均衡可以怎么做？"></a>七层负载均衡可以怎么做？</h4><p>简单介绍两种项目中常用的七层负载均衡解决方案：DNS 解析和反向代理。</p><p>除了我介绍的这两种解决方案之外，HTTP 重定向等手段也可以用来实现负载均衡，不过，相对来说，还是 DNS 解析和反向代理用的更多一些，也更推荐一些。</p><h5 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h5><p>DNS 解析是比较早期的七层负载均衡实现方式，非常简单。</p><p>DNS 解析实现负载均衡的原理是这样的：在 DNS 服务器中为同一个主机记录配置多个 IP 地址，这些 IP 地址对应不同的服务器。当用户请求域名的时候，DNS 服务器采用轮询算法返回 IP 地址，这样就实现了轮询版负载均衡。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\42ee5022-c625-4c6d-99ef-cb98a463aff1.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>现在的 DNS 解析几乎都支持 IP 地址的权重配置，这样的话，在服务器性能不等的集群中请求分配会更加合理化。像我自己目前正在用的阿里云 DNS 就支持权重配置。</p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c9d995d5-b6cc-4388-ad36-b43cf7e573f3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure>反向代理</h5><p>客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端。对外暴露的是反向代理服务器地址，隐藏了真实服务器 IP 地址。反向代理“代理”的是目标服务器，这一个过程对于客户端而言是透明的。</p><p>Nginx 就是最常用的反向代理服务器，它可以将接收到的客户端请求以一定的规则（负载均衡策略）均匀地分配到这个服务器集群中所有的服务器上。</p><p>反向代理负载均衡同样属于七层负载均衡。</p><h4 id="客户端负载均衡通常是怎么做的？"><a href="#客户端负载均衡通常是怎么做的？" class="headerlink" title="客户端负载均衡通常是怎么做的？"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3bf9d0c4-b460-4b2c-91bb-2284fe8a5c19.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure>客户端负载均衡通常是怎么做的？</h4><p>我们上面也说了，客户端负载均衡可以使用现成的负载均衡组件来实现。</p><p><strong>Netflix Ribbon</strong> 和 <strong>Spring Cloud Load Balancer</strong> 就是目前 Java 生态最流行的两个负载均衡组件。</p><p>我更建议你使用 Spring 官方的 Spring Cloud LoadBalancer。Spring Cloud 2020.0.0 版本移除了 Netflix 除 Eureka 外的所有组件。Spring Cloud Hoxton.M2 是第一个支持 Spring Cloud Load Balancer 来替代 Netfix Ribbon 的版本。</p><p>我们早期学习微服务，肯定接触过 Netflix 公司开源的 Feign、Ribbon、Zuul、Hystrix、Eureka 等知名的微服务系统构建所必须的组件，直到现在依然有非常非常多的公司在使用这些组件。不夸张地说，Netflix 公司引领了 Java 技术栈下的微服务发展。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b2ac43ef-f3d1-44cf-8f11-e398a9dec838.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>那为什么 Spring Cloud 这么急着移除 Netflix 的组件呢？</strong> 主要是因为在 2018 年的时候，Netflix 宣布其开源的核心组件 Hystrix、Ribbon、Zuul、Eureka 等进入维护状态，不再进行新特性开发，只修 BUG。于是，Spring 官方不得不考虑移除 Netflix 的组件。</p><p><strong>Spring Cloud Alibaba</strong> 是一个不错的选择，尤其是对于国内的公司和个人开发者来说。</p><h4 id="参考-8"><a href="#参考-8" class="headerlink" title="参考"></a>参考</h4><ul><li><p>干货 | eBay 的 4 层软件负载均衡实现：<a href="https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/bZMxLTECOK3mjdgiLbHj-g</a></p></li><li><p>HTTP Load Balancing（Nginx 官方文档）：<a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/" target="_blank" rel="noopener">https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/</a></p></li><li><p>深入浅出负载均衡 - vivo 互联网技术：<a href="https://www.cnblogs.com/vivotech/p/14859041.html" target="_blank" rel="noopener">https://www.cnblogs.com/vivotech/p/14859041.html</a></p></li></ul><h3 id="高性能：池化技术的应用场景"><a href="#高性能：池化技术的应用场景" class="headerlink" title="高性能：池化技术的应用场景"></a><strong>高性能：池化技术的应用场景</strong></h3><h4 id="池化技术简介"><a href="#池化技术简介" class="headerlink" title="池化技术简介"></a>池化技术简介</h4><p>简单来说，池化技术就是将可重复利用的对象比如连接、线程统一管理起来。线程池、数据库连接池、HTTP、Redis 连接池等等都是对池化技术的应用。</p><p>通常来说，池化技术所管理的对象，无论是连接还是线程，<strong>它们的创建过程都比较耗时，也比较消耗系统资源</strong> 。所以，我们把它们放在一个池子里统一管理起来，以达到 <strong>提升性能和资源复用的目的</strong> 。</p><p>从上面对池化技术的介绍，我们可以得出池化技术的核心思想是空间换时间。它的核心策略是使用已经创建好的对象来减少频繁创建对象的性能开销，同时还可以对对象进行统一的管理。</p><p>不过，池化技术也不是并非没有缺点的。如果池子中的对象没有被充分利用的话，也会造成多余的内存浪费（相对于池化技术的优点来说的话，这个缺点几乎可以被忽略）。</p><h4 id="池化技术常见应用"><a href="#池化技术常见应用" class="headerlink" title="池化技术常见应用"></a>池化技术常见应用</h4><p>线程池和数据库连接池我们平时开发过程中应该接触的非常多。因此，我会以线程池和数据库连接池为例来介绍池化技术的实际应用。</p><h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p>正如其名，线程池主要负责创建和管理线程。</p><p>没有线程池的时候，我们每次用到线程就需要单独创建，用完了之后再销毁。然而，创建线程和销毁线程是比较耗费资源和时间的操作。</p><p>有了线程池之后，我们可以重复利用已创建的线程降低线程创建和销毁造成的消耗。并且，线程池还可以方便我们对线程进行统一的管理。</p><p>我们拿 JDK 1.5 中引入的原生线程池 ThreadPoolExecutor 来举例说明。</p><p><strong>ThreadPoolExecutor 有 3 个最重要的参数：</strong></p><ul><li><p><strong>corePoolSize :</strong> 核心线程数线程数定义了最小可以同时运行的线程数量。</p></li><li><p><strong>maximumPoolSize :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p></li><li><p><strong>workQueue:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\eb286a4d-846b-48b8-881a-39cfdeb577fc.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><blockquote><p>线程池 <code>ThreadPoolExecutor</code> 不是上来就是直接初始化 <code>corePoolSize</code>个线程，而是有任务来了才创建线程处理任务。</p></blockquote><p>假如我们需要提交任务给线程池执行的话，整个步骤是这样的：</p><ol><li>提交新任务</li><li>判断线程池线程数是否少于 coreThreadCount ，是的话就创新线程处理任务，否则的话就将任务丢到队列中等待执行。</li><li>当队列中的任务满了之后，继续创建线程，直到线程数量达到 maxThreadCount。</li><li>当线程数量达到 maxThreadCount还是有任务提交，那我们就直接按照拒绝策略处理。</li></ol><p>可以看出，JDK 自带的线程池 ThreadPoolExecutor 会优先将处理不过来的任务放到队列中去，而不是创建更多的线程来处理任务。只有当队列中的等待执行的任务满了之后，线程池才会创建线程，直到线程数达到 maximumPoolSize 。如果任务执行时间过长的话，还会很容易造成队列中的任务堆积。</p><p>并且，当线程数大于核心线程数时，如果线程等待 keepAliveTime 没有任务处理的话，该线程会被回收，直到线程数缩小到核心线程数才不会继续对线程进行回收。</p><p>可以看出，JDK 自带的的这个线程池 ThreadPoolExecutor 比较适合执行 CPU 密集型的任务，不太适合执行 I/O 密集型任务。</p><p><strong>为什么这样说呢？</strong> 因此执行 CPU 密集型的任务时 CPU 比较繁忙，只需要创建和 CPU 核数相当的线程就好了，多了反而会造成线程上下文切换。</p><p><strong>如何判断是 CPU 密集任务还是 IO 密集任务？</strong> CPU 密集型简单理解就是利用 CPU 计算能力的任务比如你在内存中对大量数据进行排序。但凡涉及到网络读取，文件读取这类都是 IO 密集型，这类任务的特点是 CPU 计算耗费时间相比于等待 IO 操作完成的时间来说很少，大部分时间都花在了等待 IO 操作完成上。</p><p>在看极客时间的专栏<a href="http://gk.link/a/10r1C" target="_blank" rel="noopener">《深入拆解 Tomcat &amp; Jetty》</a>的时候，我了解到：<strong>Tomcat 扩展了原生的 Java 线程池，来满足 Web 容器高并发的需求。</strong></p><p>简单来说，Tomcat 自定义线程池继承了 JDK 线程池 java.util.concurrent.ThreadPoolExecutor 重写了部分方法的逻辑（主要是 execute() 方法）。Tomcat 还通过继承 LinkedBlockingQueue 重写 offer() 方法实现了自定义的队列。</p><p>这些改变使得 Tomcat 的线程池在任务量大的情况下会优先创建线程，而不是直接将不能处理的任务放到队列中。</p><p>Tomcat 自定义线程池的使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建定制版的任务队列</span></span><br><span class="line">TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue(maxQueueSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建定制版的线程工厂</span></span><br><span class="line">TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(namePrefix,daemon,getThreadPriority());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建定制版的线程池</span></span><br><span class="line">ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), maxIdleTime, TimeUnit.MILLISECONDS,taskqueue, tf);</span><br></pre></td></tr></table></figure><p>下面我们来详细看看 Tomcat 的线程池做了哪些改变。</p><p>Tomcat 的线程池通过重写 <code>ThreadPoolExecutor</code> 的 <code>execute()</code>方法实现了自己的任务处理逻辑。Tomcat 的线程池在线程总数达到最大时，不是立即执行拒绝策略，而是再尝试向自定义的任务队列添加任务，添加失败后再执行拒绝策略。那具体如何实现呢，其实很简单，我们来看一下 Tomcat 线程池的<code>execute()</code>方法的核心代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">concurrent</span>.<span class="title">ThreadPoolExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">      submittedCount.incrementAndGet();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//调用Java原生线程池的execute去执行任务</span></span><br><span class="line">          <span class="keyword">super</span>.execute(command);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RejectedExecutionException rx) &#123;</span><br><span class="line">         <span class="comment">//如果总线程数达到maximumPoolSize，Java原生线程池执行拒绝策略</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">super</span>.getQueue() <span class="keyword">instanceof</span> TaskQueue) &#123;</span><br><span class="line">              <span class="keyword">final</span> TaskQueue queue = (TaskQueue)<span class="keyword">super</span>.getQueue();</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">//继续尝试把任务放到Tomcat自定义的任务队列中去</span></span><br><span class="line">                  <span class="keyword">if</span> (!queue.force(command, timeout, unit)) &#123;</span><br><span class="line">                      submittedCount.decrementAndGet();</span><br><span class="line">                      <span class="comment">//如果这个队列也满了，插入失败，执行拒绝策略。</span></span><br><span class="line">                      <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"..."</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到重点的地方了！Tomcat 自定义队列<code>TaskQueue</code> 重写了 <code>LinkedBlockingQueue</code> 的<code>offer</code>方法，这是关键所在！</p><p>当提交的任务数量大于当前的线程数的时候，<code>offer()</code>会返回 false，线程池会去创建新的线程，而不是等到任务队列满了之后再创建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> <span class="keyword">extends</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">Runnable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">  <span class="comment">//线程池调用任务队列的方法时，当前线程数肯定已经大于核心线程数了</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(Runnable o)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 没有找到 Tomcat 扩展线程池的话，直接调用父类的offer方法</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.parent == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.offer(o);</span><br><span class="line">      <span class="comment">//如果线程数已经到了最大值，不能创建新线程了，只能把任务添加到任务队列。</span></span><br><span class="line">      <span class="keyword">if</span> (parent.getPoolSize() == parent.getMaximumPoolSize())</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.offer(o);</span><br><span class="line">      <span class="comment">//执行到这里，表明当前线程数大于核心线程数，并且小于最大线程数。</span></span><br><span class="line">      <span class="comment">//表明是可以创建新线程的，那到底要不要创建呢？分两种情况：</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//1. 如果已提交的任务数小于当前线程数，表示还有空闲线程，无需创建新线程</span></span><br><span class="line">      <span class="keyword">if</span> (parent.getSubmittedCount()&lt;=(parent.getPoolSize()))</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.offer(o);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2. 如果已提交的任务数大于当前线程数，线程不够用了，返回false去创建新线程</span></span><br><span class="line">      <span class="keyword">if</span> (parent.getPoolSize()&lt;parent.getMaximumPoolSize())</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//默认情况下总是把任务添加到任务队列</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.offer(o);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LinkedBlockingQueue</code> 默认情况下长度是没有限制的，Tomcat 自定义队列定义了一个<code>capacity</code>变量来限制队列长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span> <span class="keyword">extends</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">Runnable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TaskQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(capacity);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TaskQueue</code> 的 <code>capacity</code>的默认值是 <code>Integer.MAX_VALUE</code> ，也就是说默认情况下 Tomcat 的任务队列是没有长度限制的。不过，你可以通过设置 <code>maxQueueSize</code>参数来限制任务队列的长度。</p><p>如果你想要获取更多关于线程的介绍的话，建议阅读我写的下面这几篇文章：</p><ul><li><a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary.html" target="_blank" rel="noopener">Java 线程池详解</a></li><li><a href="https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html" target="_blank" rel="noopener">Java 线程池最佳实践</a></li></ul><h5 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a><strong>数据库连接池</strong></h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f45c04f4-f2fb-493f-be41-3d7376f7d29f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>数据库连接池属于连接池，类似于 HTTP、Redis 连接池，它们的实现原理类似。连接池的结构示意图，如下所示（图片来自：<a href="http://gk.link/a/10u4d" target="_blank" rel="noopener">《Java 业务开发常见错误 100 例》</a>）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images-166608888908056" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>连接池负责连接的管理包括连接的建立、空闲连接回收等工作。</p><p>我们这里以数据库连接池为例来详细介绍。</p><p>没有数据库线程池之前，我们接收到一个需要用到数据库的请求，通常是这样来访问数据库的：</p><ol><li>装载数据库驱动程序；</li><li>通过 JDBC 建立数据库连接；</li><li>访问数据库，执行 SQL 语句；</li><li>断开数据库连接。</li></ol><p>假如我们为每一个请求都建立一次数据库连接然后再断开连接是非常耗费资源和时间的。因为，<strong>建立和断开数据库连接本身就是比较耗费资源和时间的操作</strong>。</p><p>如果我们频繁进行数据库连接的建立和断开操作的话，势必会影响到系统的性能。当请求太多的话，系统甚至会因为创建太多数据库连接而直接宕机。</p><p>因此，有了数据库连接池来管理我们的数据库连接。当有请求的时候，我们现在数据库连接池中检查是否有空闲的数据库连接，如果有的话，直接分配给它。</p><p>如果我们需要获取数据库连接，整个步骤是这样的：</p><ol><li>系统首先检查空闲池内有没有空闲的数据库连接。</li><li>如果有的话，直接获取。</li><li>如果没有的话，先检查数据库连接池的是否达到所允许的最大连接数，没达到的话就新建一个数据库连接，否则就等待一定的时间（timeout）看是否有数据库连接被释放。</li><li>如果等待时间超过一定的时间（timeout）还是没有数据库连接被释放的话，就会获取数据库连接失败。</li></ol><p>实际开发中，我们使用 HikariCP 这个线程的数据库连接池比较多，SpringBoot 2.0 将它设置为默认的数据源连接池。</p><p>HikariCP 为了性能的提升（号称是史上性能最好的数据库连接池），做了非常多的优化，比如 HikariCP 自定义 FastStatementList 来代替 ArrayList 、自定义 ConcurrentBag 来提高并发读写的效率，再比如 HikariCP 通过 Javassist 来优化并精简字节码。</p><p>想要继续深入了解 HikariCP 原理的小伙伴，可以看看下面这两篇文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/4ty3MrsymRsdz0BSB_lfyw" target="_blank" rel="noopener">SpringBoot 2.0 中 HikariCP 数据库连接池原理解析 - vivo 互联网技术</a></li><li><a href="https://mp.weixin.qq.com/s/xM4r8fHQAwmgpX02F51N2A" target="_blank" rel="noopener">HikariCP 的这波优化，太炸裂了！</a></li></ul><p>HikariCP 是性能超强，在监控方面的话，数据库连接池 Druid 做的不错。</p><h4 id="池化技术注意事项"><a href="#池化技术注意事项" class="headerlink" title="池化技术注意事项"></a>池化技术注意事项</h4><ul><li><p>池子的最大值和最小值的设置很重要，初期可以依据经验来设置，后面还是需要根据实际运行情况做调整。</p></li><li><p>池子中的对象需要在使用之前预先初始化完成，这叫做池子的预热，比方说使用线程池时就需要预先初始化所有的核心线程。如果池子未经过预热可能会导致系统重启后产生比较多的慢请求。</p></li></ul><h4 id="参考-9"><a href="#参考-9" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://gk.link/a/10u4d" target="_blank" rel="noopener">《Java 业务开发常见错误 100 例：04 | 连接池：别让连接池帮了倒忙》</a></p></li><li><p><a href="http://gk.link/a/10r1C" target="_blank" rel="noopener">《深入拆解 Tomcat &amp; Jetty》：17 | Executor 组件：Tomcat 如何扩展 Java 线程池？</a></p></li></ul><h3 id="高性能：零拷贝为什么能提升性能？"><a href="#高性能：零拷贝为什么能提升性能？" class="headerlink" title="高性能：零拷贝为什么能提升性能？"></a><strong>高性能：零拷贝为什么能提升性能？</strong></h3><blockquote><p><strong>相关面试题</strong> ：</p><ul><li>简单描述一下传统的 IO 执行流程，有什么缺陷？</li><li>什么是零拷贝？</li><li>零拷贝实现的几种方式</li><li>Java 提供的零拷贝方式</li></ul><p>作者：程序员田螺 ，公众号：捡田螺的小男孩</p><p>《Java 面试指北》已获授权并对其内容进行了完善。</p></blockquote><p>零拷贝算是一个老生常谈的问题啦，很多顶级框架都用到了零拷贝来提升性能，比如我们经常接触到的 Kafka 、RocketMQ、Netty 。</p><p>搞懂零拷贝不仅仅可以让自己对这些框架的认识更进一步，还可以让自己在面试中更游刃有余。毕竟，面试中对于零拷贝的考察非常常见，尤其是大厂。</p><p>通常情况下，面试官不会直接提问零拷贝，他会先问你 Kafka/RocketMQ/Netty 为什么快，然后你回答到了零拷贝之后，他再去挖掘你对零拷贝的认识。</p><h4 id="1-什么是零拷贝"><a href="#1-什么是零拷贝" class="headerlink" title="1.什么是零拷贝"></a>1.什么是零拷贝</h4><p>零拷贝字面上的意思包括两个，“零”和“拷贝”：</p><ul><li><p><strong>“拷贝” ：</strong>就是指数据从一个存储区域转移到另一个存储区域。</p></li><li><p><strong>“零” ：</strong>表示次数为 0，它表示拷贝数据的次数为 0。</p></li></ul><p>合起来，那 <strong>零拷贝</strong> 就是不需要将数据从一个存储区域复制到另一个存储区域。</p><blockquote><p>零拷贝是指计算机执行 IO 操作时，CPU 不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少上下文切换以及 CPU 的拷贝时间。它是一种I/O操作优化技术。</p></blockquote><h4 id="2-传统-IO-的执行流程"><a href="#2-传统-IO-的执行流程" class="headerlink" title="2. 传统 IO 的执行流程"></a>2. 传统 IO 的执行流程</h4><p>做服务端开发的小伙伴，文件下载功能应该实现过不少了吧。如果你实现的是一个 Web 程序，前端请求过来，服务端的任务就是：将服务端主机磁盘中的文件从已连接的 socket 发出去。关键实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((n = read(diskfd, buf, BUF_SIZE)) &gt; <span class="number">0</span>)</span><br><span class="line">    write(sockfd, buf , n);</span><br></pre></td></tr></table></figure><p>传统的 IO 流程，包括 read 和 write 的过程。</p><ul><li><code>read</code>：把数据从磁盘读取到内核缓冲区，再拷贝到用户缓冲区。</li><li><code>write</code>：先把数据写入到 socket 缓冲区，最后写入网卡设备。</li></ul><p>流程图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\bceba348-2c09-4f54-9b8f-601267af36ea.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>用户应用进程调用 read 函数，向操作系统发起 IO 调用，<strong>上下文从用户态转为内核态（切换 1）</strong></li><li>DMA 控制器把数据从磁盘中，读取到内核缓冲区。</li><li>CPU 把内核缓冲区数据，拷贝到用户应用缓冲区，<strong>上下文从内核态转为用户态（切换 2）</strong>，read 函数返回</li><li>用户应用进程通过 write 函数，发起 IO 调用，<strong>上下文从用户态转为内核态（切换 3）</strong></li><li>CPU 将应用缓冲区中的数据，拷贝到 socket 缓冲区</li><li>DMA 控制器把数据从 socket 缓冲区，拷贝到网卡设备，<strong>上下文从内核态切换回用户态（切换 4）</strong>，write 函数返回</li></ul><p>从流程图可以看出，传统 IO 的读写流程，包括了 4 次上下文切换（4 次用户态和内核态的切换），4 次数据拷贝<strong>（两次 CPU 拷贝以及两次的 DMA 拷贝)</strong>，什么是 DMA 拷贝呢？我们一起来回顾下，零拷贝涉及的<strong>操作系统知识点</strong>哈。</p><h4 id="3-零拷贝相关的知识点回顾"><a href="#3-零拷贝相关的知识点回顾" class="headerlink" title="3. 零拷贝相关的知识点回顾"></a>3. 零拷贝相关的知识点回顾</h4><h5 id="3-1-内核空间和用户空间"><a href="#3-1-内核空间和用户空间" class="headerlink" title="3.1 内核空间和用户空间"></a>3.1 内核空间和用户空间</h5><p>我们电脑上跑着的应用程序，其实是需要经过<strong>操作系统</strong>，才能做一些特殊操作，如磁盘文件读写、内存的读写等等。因为这些都是比较危险的操作，<strong>不可以由应用程序乱来</strong>，只能交给底层操作系统来。</p><p>因此，操作系统为每个进程都分配了内存空间，一部分是用户空间，一部分是内核空间。<strong>内核空间是操作系统内核访问的区域，是受保护的内存空间，而用户空间是用户应用程序访问的内存区域</strong>。 以 32 位操作系统为例，它会为每一个进程都分配了<strong>4G</strong>(2 的 32 次方)的内存空间。</p><ul><li><p><strong>内核空间</strong> ：主要提供进程调度、内存分配、连接硬件资源等功能</p></li><li><p><strong>用户空间</strong> ：提供给各个程序进程的空间，它不具有访问内核空间资源的权限，如果应用程序需要使用到内核空间的资源，则需要通过系统调用来完成。进程从用户空间切换到内核空间，完成相关操作后，再从内核空间切换回用户空间。</p></li></ul><h5 id="3-2-什么是用户态、内核态"><a href="#3-2-什么是用户态、内核态" class="headerlink" title="3.2 什么是用户态、内核态"></a>3.2 什么是用户态、内核态</h5><ul><li><p>如果进程运行于内核空间，被称为进程的内核态</p></li><li><p>如果进程运行于用户空间，被称为进程的用户态。</p></li></ul><h5 id="3-3-什么是上下文切换"><a href="#3-3-什么是上下文切换" class="headerlink" title="3.3 什么是上下文切换"></a>3.3 什么是上下文切换</h5><p>什么是上下文？</p><blockquote><p>它是指，先把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。</p></blockquote><p>一般我们说的<strong>上下文切换</strong>，就是指内核（操作系统的核心）在 CPU 上对进程或者线程进行切换。进程从用户态到内核态的转变，需要通过系统调用来完成。<strong>系统调用</strong>的过程，会发生<strong>CPU 上下文的切换</strong>。</p><blockquote><p>CPU 寄存器里原来用户态的指令位置，需要先保存起来。接着，为了执行内核态代码，CPU 寄存器需要更新为内核态指令的新位置。最后才是跳转到内核态运行内核任务。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\5c24acef-d868-4390-b34e-1a6ff0db56a8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="3-4-虚拟内存"><a href="#3-4-虚拟内存" class="headerlink" title="3.4 虚拟内存"></a>3.4 虚拟内存</h5><p>现代操作系统使用虚拟内存，即虚拟地址取代物理地址，使用虚拟内存可以有 2 个好处：</p><ul><li>虚拟内存空间可以远远大于物理内存空间</li><li>多个虚拟内存可以指向同一个物理地址</li></ul><p>正是<strong>多个虚拟内存可以指向同一个物理地址</strong>，可以把内核空间和用户空间的虚拟地址映射到同一个物理地址，这样的话，就可以减少 IO 的数据拷贝次数啦，示意图如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\7dc30533-b32c-4c6c-8dcd-86e0cb898a13.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="3-5-DMA-技术"><a href="#3-5-DMA-技术" class="headerlink" title="3.5 DMA 技术"></a>3.5 DMA 技术</h5><p>DMA，英文全称是 <strong>Direct Memory Access</strong>，即直接内存访问。<strong>DMA</strong>本质上是一块主板上独立的芯片，允许外设设备和内存存储器之间直接进行 IO 数据传输，其过程<strong>不需要 CPU 的参与</strong>。</p><p>我们一起来看下 IO 流程，DMA 帮忙做了什么事情.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3022007b-849e-4c12-a10e-bc30853eae2c.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>用户应用进程调用 read 函数，向操作系统发起 IO 调用，进入阻塞状态，等待数据返回。</li><li>CPU 收到指令后，对 DMA 控制器发起指令调度。</li><li>DMA 收到 IO 请求后，将请求发送给磁盘；</li><li>磁盘将数据放入磁盘控制缓冲区，并通知 DMA</li><li>DMA 将数据从磁盘控制器缓冲区拷贝到内核缓冲区。</li><li>DMA 向 CPU 发出数据读完的信号，把工作交换给 CPU，由 CPU 负责将数据从内核缓冲区拷贝到用户缓冲区。</li><li>用户应用进程由内核态切换回用户态，解除阻塞状态</li></ul><p>可以发现，DMA 做的事情很清晰啦，它<strong>主要就是帮忙 CPU 转发一下 IO 请求，以及拷贝数据</strong>。为什么需要它的？</p><blockquote><p>主要就是效率，它帮忙 CPU 做事情，这时候，CPU 就可以闲下来去做别的事情，提高了 CPU 的利用效率。大白话解释就是，CPU 老哥太忙太累啦，所以他找了个小弟（名叫 DMA） ，替他完成一部分的拷贝工作，这样 CPU 老哥就能着手去做其他事情。</p></blockquote><h4 id="4-零拷贝实现的几种方式"><a href="#4-零拷贝实现的几种方式" class="headerlink" title="4. 零拷贝实现的几种方式"></a>4. 零拷贝实现的几种方式</h4><p>零拷贝并不是没有拷贝数据，而是减少用户态/内核态的切换次数以及 CPU 拷贝的次数。零拷贝实现有多种方式，分别是</p><ul><li><p>mmap+write</p></li><li><p>sendfile</p></li><li><p>带有 DMA 收集拷贝功能的 sendfile</p></li></ul><h5 id="4-1-mmap-write-实现的零拷贝"><a href="#4-1-mmap-write-实现的零拷贝" class="headerlink" title="4.1 mmap+write 实现的零拷贝"></a>4.1 mmap+write 实现的零拷贝</h5><p>mmap 的函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags, <span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>addr</code> ：指定映射的虚拟内存地址</li><li><code>length</code> ：映射的长度</li><li><code>prot</code> ：映射内存的保护模式</li><li><code>flags</code> ：指定映射的类型</li><li><code>fd</code> : 进行映射的文件句柄</li><li><code>offset</code> : 文件偏移量</li></ul><p>前面一小节，零拷贝相关的知识点回顾，我们介绍了<strong>虚拟内存</strong>，可以把内核空间和用户空间的虚拟地址映射到同一个物理地址，从而减少数据拷贝次数！mmap 就是用了虚拟内存这个特点，它将内核中的读缓冲区与用户空间的缓冲区进行映射，所有的 IO 都在内核中完成。</p><p><code>mmap+write</code>实现的零拷贝流程如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\284a94cf-b9d8-432f-95cc-8eaca35375e3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>用户进程通过mmap方法向操作系统内核发起 IO 调用，上下文从用户态切换为内核态。</li><li>CPU 利用 DMA 控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li>上下文从内核态切换回用户态，mmap 方法返回。</li><li>用户进程通过write方法向操作系统内核发起 IO 调用，上下文从用户态切换为内核态。</li><li>CPU 将内核缓冲区的数据拷贝到的 socket 缓冲区。</li><li>CPU 利用 DMA 控制器，把数据从 socket 缓冲区拷贝到网卡，上下文从内核态切换回用户态，write 调用返回。</li></ul><p>可以发现，mmap+write实现的零拷贝，I/O 发生了<strong>4</strong>次用户空间与内核空间的上下文切换，以及 3 次数据拷贝。其中 3 次数据拷贝中，包括了<strong>2 次 DMA 拷贝和 1 次 CPU 拷贝</strong>。</p><p>mmap是将读缓冲区的地址和用户缓冲区的地址进行映射，内核缓冲区和应用缓冲区共享，所以节省了一次 CPU 拷贝‘’并且用户进程内存是<strong>虚拟的</strong>，只是<strong>映射</strong>到内核的读缓冲区，可以节省一半的内存空间。</p><h5 id="4-2-sendfile-实现的零拷贝"><a href="#4-2-sendfile-实现的零拷贝" class="headerlink" title="4.2 sendfile 实现的零拷贝"></a>4.2 sendfile 实现的零拷贝</h5><p>sendfile是 Linux2.1 内核版本后引入的一个系统调用函数，API 如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> sendfile(<span class="keyword">int</span> out_fd, <span class="keyword">int</span> in_fd, <span class="keyword">off_t</span> *offset, <span class="keyword">size_t</span> count);</span><br></pre></td></tr></table></figure><ul><li><code>out_fd</code> :为待写入内容的文件描述符，一个 socket 描述符。，</li><li><code>in_fd</code> :为待读出内容的文件描述符，必须是真实的文件，不能是 socket 和管道。</li><li><code>offset</code> ：指定从读入文件的哪个位置开始读，如果为 NULL，表示文件的默认起始位置。</li><li><code>count</code>：指定在 fdout 和 fdin 之间传输的字节数。</li></ul><p><code>sendfile</code>表示在两个文件描述符之间传输数据，它是在<strong>操作系统内核中</strong>操作的，<strong>避免了数据从内核缓冲区和用户缓冲区之间的拷贝操作</strong>，因此可以使用它来实现零拷贝。</p><p><code>sendfile</code>实现的零拷贝流程如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\16c11043-d549-4285-bd6b-71a08cbcf2dc.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ol><li>用户进程发起 sendfile 系统调用，<strong>上下文（切换 1）从用户态转向内核态</strong></li><li>DMA 控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li>CPU 将读缓冲区中数据拷贝到 socket 缓冲区</li><li>DMA 控制器，异步把数据从 socket 缓冲区拷贝到网卡，</li><li><strong>上下文（切换 2）从内核态切换回用户态，</strong>sendfile 调用返回。</li></ol><p>可以发现，sendfile实现的零拷贝，I/O 发生了2次用户空间与内核空间的上下文切换，以及 3 次数据拷贝。其中 3 次数据拷贝中，包括了<strong>2 次 DMA 拷贝和 1 次 CPU 拷贝</strong>。那能不能把 CPU 拷贝的次数减少到 0 次呢？有的，即带有DMA收集拷贝功能的sendfile！</p><h5 id="4-3-sendfile-DMA-scatter-gather-实现的零拷贝"><a href="#4-3-sendfile-DMA-scatter-gather-实现的零拷贝" class="headerlink" title="4.3 sendfile+DMA scatter/gather 实现的零拷贝"></a>4.3 sendfile+DMA scatter/gather 实现的零拷贝</h5><p>linux 2.4 版本之后，对sendfile做了优化升级，引入 SG-DMA 技术，其实就是对 DMA 拷贝加入了scatter/gather操作，它可以直接从内核空间缓冲区中将数据读取到网卡。使用这个特点搞零拷贝，即还可以多省去一次 <strong>CPU 拷贝</strong>。</p><p>sendfile+DMA scatter/gather 实现的零拷贝流程如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\9829cd04-9801-4b0f-94d8-13f029dcc401.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ol><li>用户进程发起 sendfile 系统调用，<strong>上下文（切换 1）从用户态转向内核态</strong></li><li>DMA 控制器，把数据从硬盘中拷贝到内核缓冲区。</li><li>CPU 把内核缓冲区中的<strong>文件描述符信息</strong>（包括内核缓冲区的内存地址和偏移量）发送到 socket 缓冲区</li><li>DMA 控制器根据文件描述符信息，直接把数据从内核缓冲区拷贝到网卡</li><li><strong>上下文（切换 2）从内核态切换回用户态</strong>，sendfile 调用返回。</li></ol><p>可以发现，sendfile+DMA scatter/gather实现的零拷贝，I/O 发生了2次用户空间与内核空间的上下文切换，以及 2 次数据拷贝。其中 2 次数据拷贝都是包<strong>DMA 拷贝</strong>。这就是真正的 <strong>零拷贝（Zero-copy)</strong> 技术，全程都没有通过 CPU 来搬运数据，所有的数据都是通过 DMA 来进行传输的。</p><h4 id="5-java-提供的零拷贝方式"><a href="#5-java-提供的零拷贝方式" class="headerlink" title="5. java 提供的零拷贝方式"></a>5. java 提供的零拷贝方式</h4><ul><li><p>Java NIO 对 mmap 的支持</p></li><li><p>Java NIO 对 sendfile 的支持</p></li></ul><h5 id="5-1-Java-NIO-对-mmap-的支持"><a href="#5-1-Java-NIO-对-mmap-的支持" class="headerlink" title="5.1 Java NIO 对 mmap 的支持"></a>5.1 Java NIO 对 mmap 的支持</h5><p>Java NIO 有一个MappedByteBuffer的类，可以用来实现内存映射。它的底层是调用了 Linux 内核的<strong>mmap</strong>的 API。</p><p><strong>mmap</strong> 的小 <strong>demo</strong>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MmapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileChannel readChannel = FileChannel.open(Paths.get(<span class="string">"./jay.txt"</span>), StandardOpenOption.READ);</span><br><span class="line">            MappedByteBuffer data = readChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">40</span>);</span><br><span class="line">            FileChannel writeChannel = FileChannel.open(Paths.get(<span class="string">"./siting.txt"</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line">            <span class="comment">//数据传输</span></span><br><span class="line">            writeChannel.write(data);</span><br><span class="line">            readChannel.close();</span><br><span class="line">            writeChannel.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-Java-NIO-对-sendfile-的支持"><a href="#5-2-Java-NIO-对-sendfile-的支持" class="headerlink" title="5.2 Java NIO 对 sendfile 的支持"></a>5.2 Java NIO 对 sendfile 的支持</h5><p>FileChannel 的<code>transferTo()/transferFrom()</code>，底层就是 sendfile() 系统调用函数。Kafka 这个开源项目就用到它，平时面试的时候，回答面试官为什么这么快，就可以提到零拷贝<code>sendfile</code>这个点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">transferFrom</span><span class="params">(FileChannel fileChannel, <span class="keyword">long</span> position, <span class="keyword">long</span> count)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> fileChannel.transferTo(position, count, socketChannel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sendfile 的小 demo</strong>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileChannel readChannel = FileChannel.open(Paths.get(<span class="string">"./jay.txt"</span>), StandardOpenOption.READ);</span><br><span class="line">            <span class="keyword">long</span> len = readChannel.size();</span><br><span class="line">            <span class="keyword">long</span> position = readChannel.position();</span><br><span class="line"></span><br><span class="line">            FileChannel writeChannel = FileChannel.open(Paths.get(<span class="string">"./siting.txt"</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line">            <span class="comment">//数据传输</span></span><br><span class="line">            readChannel.transferTo(position, len, writeChannel);</span><br><span class="line">            readChannel.close();</span><br><span class="line">            writeChannel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考与感谢"><a href="#参考与感谢" class="headerlink" title="参考与感谢"></a>参考与感谢</h4><ul><li><a href="https://juejin.cn/post/6887469050515947528" target="_blank" rel="noopener">框架篇：小白也能秒懂的 Linux 零拷贝原理</a></li><li><a href="https://juejin.cn/post/6844903949359644680#heading-11" target="_blank" rel="noopener">深入剖析 Linux IO 原理和几种零拷贝机制的实现</a></li><li><a href="https://mp.weixin.qq.com/s/sG0rviJlhVtHzGfd5NoqDQ" target="_blank" rel="noopener">阿里二面：什么是 mmap？</a></li></ul><h3 id="高性能：有哪些常见的-SQL-优化手段？"><a href="#高性能：有哪些常见的-SQL-优化手段？" class="headerlink" title="高性能：有哪些常见的 SQL 优化手段？"></a><strong>高性能：有哪些常见的 SQL 优化手段？</strong></h3><h4 id="避免使用-SELECT"><a href="#避免使用-SELECT" class="headerlink" title="避免使用 SELECT *"></a>避免使用 SELECT *</h4><ul><li><p>SELECT * 会消耗更多的 CPU。</p></li><li><p>SELECT * 无用字段增加网络带宽资源消耗，增加数据传输时间，尤其是大字段（如 varchar、blob、text）。</p></li><li><p>SELECT * 无法使用 MySQL 优化器覆盖索引的优化（基于 MySQL 优化器的“覆盖索引”策略又是速度极快，效率极高，业界极为推荐的查询优化方式）</p></li><li><p>SELECT &lt;字段列表&gt; 可减少表结构变更带来的影响。</p></li></ul><h4 id="分页优化"><a href="#分页优化" class="headerlink" title="分页优化"></a>分页优化</h4><p>普通的分页在数据量小的时候耗费时间还是比较短的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`score`</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10000</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>如果数据量变大，达到百万甚至是千万级别，普通的分页耗费的时间就非常长了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`score`</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">1000000</span>, <span class="number">10</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`score`</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">10</span>, <span class="number">1000000</span></span><br></pre></td></tr></table></figure><p><strong>如何优化呢？</strong> 可以将上述 SQL 语句修改为子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> &gt;= (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">LIMIT</span> <span class="number">1000000</span>, <span class="number">1</span>) <span class="keyword">LIMIT</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>我们先查询出 limit 第一个参数对应的主键值，再根据这个主键值再去过滤并 limit，这样效率会更快。</p><p>阿里巴巴《Java 开发手册》中也有对应的描述：</p><blockquote><p>利用延迟关联或者子查询优化超多分页场景。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\31fff0d5-d320-496c-80e9-0e94c77085ba.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>不过，子查询的结果会产生一张新表，会影响性能，应该尽量避免大量使用子查询。</p><p>除了子查询之外，还以采用延迟查询的方式来优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> a, (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="string">`cus_order`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`score`</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">1000000</span>, <span class="number">10</span>) b <span class="keyword">where</span> a.id = b.id</span><br></pre></td></tr></table></figure><p>我们先提取对应的主键，再将这个主键表与原数据表关联。</p><p>相关阅读：</p><ul><li><p><a href="https://juejin.cn/post/6863668253898735629" target="_blank" rel="noopener">面试官：一千万数据，怎么快速查询？</a></p></li><li><p><a href="https://juejin.cn/post/6985478936683610149" target="_blank" rel="noopener">【得物技术】MySQL 深分页优化</a></p></li></ul><h4 id="尽量避免多表做-join"><a href="#尽量避免多表做-join" class="headerlink" title="尽量避免多表做 join"></a>尽量避免多表做 join</h4><p>阿里巴巴《Java 开发手册》中有这样一段描述：</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致;多表关联查询时，保证被关联 的字段需要有索引。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\95c48321-1dde-4f09-b87f-1600a1767328.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>join 的效率比较低，主要原因是因为其使用嵌套循环（Nested Loop）来实现关联查询，三种不同的实现效率都不是很高：</p><ul><li><strong>Simple Nested-Loop Join ：</strong>没有进过优化，直接使用笛卡尔积实现 join，逐行遍历/全表扫描，效率最低。</li><li><strong>Block Nested-Loop Join ：</strong>利用 JOIN BUFFER 进行优化，性能受到 JOIN BUFFER 大小的影响，相比于 Simple Nested-Loop Join 性能有所提升。不过，如果两个表的数据过大的话，无论如何优化，Block Nested-Loop Join 对性能的提升都非常有限。</li><li><strong>Index Nested-Loop Join ：</strong>在必要的字段上增加索引，使 join 的过程中可以使用到这个索引，这样可以让 Block Nested-Loop Join 转换为 Index Nested-Loop Join，性能得到进一步提升。</li></ul><p>实际业务场景避免多表 join 常见的做法有两种：</p><ol><li><strong>单表查询后在内存中自己做关联 ：</strong>对数据库做单表查询，再根据查询结果进行二次查询，以此类推，最后再进行关联。</li><li><strong>数据冗余</strong>，把一些重要的数据在表中做冗余，尽可能地避免关联查询。很笨的一张做法，表结构比较稳定的情况下才会考虑这种做法。进行冗余设计之前，思考一下自己的表结构设计的是否有问题。</li></ol><p>更加推荐第一种，这种在实际项目中的使用率比较高，除了性能不错之外，还有如下优势：</p><ol><li><strong>拆分后的单表查询代码可复用性更高 ：</strong>join 联表 SQL 基本不太可能被复用。</li><li><strong>单表查询更利于后续的维护 ：</strong>不论是后续修改表结构还是进行分库分表，单表查询维护起来都更容易。</li></ol><p>不过，如果系统要求的并发量不大的话，我觉得多表 join 也是没问题的。很多公司内部复杂的系统，要求的并发量不高，很多数据必须 join 5 张以上的表才能查出来。</p><p>知乎上也有关于这个问题的讨论：<a href="https://www.zhihu.com/question/68258877" target="_blank" rel="noopener">MySQL 多表关联查询效率高点还是多次单表查询效率高，为什么？</a>，感兴趣的可以看看。</p><h4 id="建议不要使用外键与级联"><a href="#建议不要使用外键与级联" class="headerlink" title="建议不要使用外键与级联"></a>建议不要使用外键与级联</h4><p>阿里巴巴《Java 开发手册》中有这样一段描述：</p><blockquote><p>不得使用外键与级联，一切外键概念必须在应用层解决。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cb62034b-da57-41d5-92ad-41e22eaa75c8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>网络上已经有非常多分析外键与级联缺陷的文章了，个人认为不建议使用外键主要是因为对分库分表不友好，性能方面的影响其实是比较小的。</p><h4 id="选择合适的字段类型"><a href="#选择合适的字段类型" class="headerlink" title="选择合适的字段类型"></a>选择合适的字段类型</h4><p>存储字节越小，占用也就空间越小，性能也越好。</p><p><strong>a.某些字符串可以转换成数字类型存储比如可以将 IP 地址转换成整形数据。</strong></p><p>数字是连续的，性能更好，占用空间也更小。</p><p>MySQL 提供了两个方法来处理 ip 地址</p><ul><li>INET_ATON() ： 把 ip 转为无符号整型 (4-8 位)</li><li>INET_NTOA() :把整型的 ip 转为地址</li></ul><p>插入数据前，先用 INET_ATON() 把 ip 地址转为整型，显示数据时，使用 INET_NTOA() 把整型的 ip 地址转为地址显示即可。</p><p><strong>b.对于非负型的数据 (如自增 ID,整型 IP，年龄) 来说,要优先使用无符号整型来存储。</strong></p><p>无符号相对于有符号可以多出一倍的存储空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SIGNED INT -2147483648~2147483647</span><br><span class="line">UNSIGNED INT 0~4294967295</span><br></pre></td></tr></table></figure><p><strong>c.小数值类型（比如年龄、状态表示如 0/1）优先使用 TINYINT 类型。</strong></p><p><strong>d.对于日期类型来说， DateTime 类型耗费空间更大且没有时区信息，建议使用 Timestamp。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d56a9859-9cd0-4e6f-bb82-564c31a7e4bf.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>e.金额字段用 decimal，避免精度丢失。</strong></p><p><strong>f.尽量使用自增 id 作为主键。</strong></p><p>如果主键为自增 id 的话，每次都会将数据加在 B+树尾部（本质是双向链表），时间复杂度为 O(1)。在写满一个数据页的时候，直接申请另一个新数据页接着写就可以了。</p><p>如果主键是非自增 id 的话，为了让新加入数据后 B+树的叶子节点还能保持有序，它就需要往叶子结点的中间找，查找过程的时间复杂度是 O(lgn)。如果这个也被写满的话，就需要进行页分裂。页分裂操作需要加悲观锁，想能非常低。</p><p>不过， 像分库分表这类场景就不建议使用自增 id 作为主键，应该使用分布式 ID 比如 uuid 。</p><p>相关阅读：<a href="https://mp.weixin.qq.com/s/vNRIFKjbe7itRTxmq-bkAA" target="_blank" rel="noopener">数据库主键一定要自增吗？有哪些场景不建议自增？</a>。</p><h4 id="尽量用-UNION-ALL-代替-UNION"><a href="#尽量用-UNION-ALL-代替-UNION" class="headerlink" title="尽量用 UNION ALL 代替 UNION"></a>尽量用 UNION ALL 代替 UNION</h4><p>UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作，更耗时，更消耗 CPU 资源。</p><p>UNION ALL 不会再对结果集进行去重操作，获取到的数据包含重复的项。</p><p>不过，如果实际业务场景中不允许产生重复数据的话，还是可以使用 UNION。</p><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><p>对于数据库中的数据更新，如果能使用批量操作就要尽量使用，减少请求数据库的次数，提高性能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反例</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`cus_order`</span> (<span class="string">`id`</span>, <span class="string">`score`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">426547</span>, <span class="string">'user1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`cus_order`</span> (<span class="string">`id`</span>, <span class="string">`score`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">33</span>, <span class="string">'user2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`cus_order`</span> (<span class="string">`id`</span>, <span class="string">`score`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">293854</span>, <span class="string">'user3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正例</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="string">`cus_order`</span> (<span class="string">`id`</span>, <span class="string">`score`</span>, <span class="string">`name`</span>) <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">426547</span>, <span class="string">'user1'</span>),(<span class="number">1</span>, <span class="number">33</span>, <span class="string">'user2'</span>),(<span class="number">1</span>, <span class="number">293854</span>, <span class="string">'user3'</span>);</span><br></pre></td></tr></table></figure><h4 id="Show-Profile-分析-SQL-执行性能"><a href="#Show-Profile-分析-SQL-执行性能" class="headerlink" title="Show Profile 分析 SQL 执行性能"></a>Show Profile 分析 SQL 执行性能</h4><p>为了更精准定位一条 SQL 语句的性能问题，需要清楚地知道这条 SQL 语句运行时消耗了多少系统资源。 <a href="https://dev.mysql.com/doc/refman/5.7/en/show-profile.html" target="_blank" rel="noopener">SHOW PROFILE</a> 和 <a href="https://dev.mysql.com/doc/refman/5.7/en/show-profiles.html" target="_blank" rel="noopener">SHOW PROFILES</a> 展示 SQL 语句的资源使用情况，展示的消息包括 CPU 的使用，CPU 上下文切换，IO 等待，内存使用等。</p><p>MySQL 在 5.0.37 版本之后才支持 Profiling，<code>select @@have_profiling</code> 命令返回 <code>YES</code> 表示该功能可以使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> mysql&gt; SELECT @@have_profiling;</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| @@have_profiling |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">| YES              |</span><br><span class="line">+<span class="comment">------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意 ：</strong><code>SHOW PROFILE</code>和 <code>SHOW PROFILES</code>已经被弃用，未来的 MySQL 版本中可能会被删除，取而代之的是使用 <a href="https://dev.mysql.com/doc/refman/8.0/en/performance-schema.html" target="_blank" rel="noopener">Performance Schema</a>。在该功能被删除之前，我们简单介绍一下其基本使用方法。</p></blockquote><p>想要使用 <code>Profiling</code>，请确保你的 <code>profiling</code> 是开启（on）的状态。</p><p>你可以通过<code>SHOW VARIABLES</code>命令查看其状态：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d04dff39-e986-4058-b4e0-bbab811adcbb.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>也可以通过 <code>SELECT @@profiling</code>命令进行查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT @@profiling;</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| @@profiling |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">|           0 |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>默认情况下，<code>Profiling</code>是关闭（off）的状态，你直接通过<code>SET @@profiling=1</code>命令即可开启。</p><p>开启成功之后，我们执行几条 SQL 语句。执行完成之后，使用 SHOW PROFILES 可以展示当前 Session 下所有 SQL 语句的简要的信息包括 Query_ID（SQL 语句的 ID 编号） 和 Duration（耗时）。</p><p>具体能收集多少个 SQL，由参数<code>profiling_history_size</code>决定，默认值为 15，最大值为 100。如果设置为 0，等同于关闭 Profiling。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\88c4b321-48e0-4997-b5d1-ae280a81a4b3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果想要展示一个 SQL 语句的执行耗时细节，可以使用<code>SHOW PROFILE</code> 命令。</p><p><code>SHOW PROFILE</code>命令的具体用法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROFILE [<span class="keyword">type</span> [, <span class="keyword">type</span>] ... ]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">QUERY</span> n]</span><br><span class="line">    [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span> [<span class="keyword">OFFSET</span> <span class="keyword">offset</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>: &#123;</span><br><span class="line">    <span class="keyword">ALL</span></span><br><span class="line">  | <span class="keyword">BLOCK</span> IO</span><br><span class="line">  | <span class="keyword">CONTEXT</span> SWITCHES</span><br><span class="line">  | CPU</span><br><span class="line">  | IPC</span><br><span class="line">  | <span class="keyword">MEMORY</span></span><br><span class="line">  | PAGE FAULTS</span><br><span class="line">  | <span class="keyword">SOURCE</span></span><br><span class="line">  | SWAPS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行<code>SHOW PROFILE</code>命令时，可以加上类型子句，比如 CPU、IPC、MEMORY 等，查看具体某类资源的消耗情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROFILE CPU,IPC <span class="keyword">FOR</span> <span class="keyword">QUERY</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>如果不加 <code>FOR QUERY {n}</code>子句，默认展示最新的一次 SQL 的执行情况，加了 <code>FOR QUERY {n}</code>，表示展示 Query_ID 为 n 的 SQL 的执行情况。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f94f1d3e-80ab-44cc-b254-ed03b0fc7141.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="优化慢-SQL"><a href="#优化慢-SQL" class="headerlink" title="优化慢 SQL"></a>优化慢 SQL</h4><p>为了优化慢 SQL ，我们首先要找到哪些 SQL 语句执行速度比较慢。</p><p>MySQL 慢查询日志是用来记录 MySQL 在执行命令中，响应时间超过预设阈值的 SQL 语句。因此，通过分析慢查询日志我们就可以找出执行速度比较慢的 SQL 语句。</p><p>出于性能层面的考虑，慢查询日志功能默认是关闭的，你可以通过以下命令开启：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启慢查询日志功能</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log = <span class="string">'ON'</span>;</span><br><span class="line"><span class="comment"># 慢查询日志存放位置</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file = <span class="string">'/var/lib/mysql/ranking-list-slow.log'</span>;</span><br><span class="line"><span class="comment"># 无论是否超时，未被索引的记录也会记录下来。</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_queries_not_using_indexes = <span class="string">'ON'</span>;</span><br><span class="line"><span class="comment"># 慢查询阈值（秒），SQL 执行超过这个阈值将被记录在日志中。</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> long_query_time = <span class="number">1</span>;</span><br><span class="line"><span class="comment"># 慢查询仅记录扫描行数大于此参数的 SQL</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> min_examined_row_limit = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>设置成功之后，使用<code>show variables like &#39;slow%&#39;;</code> 命令进行查看。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">| Variable_name       | Value                                |</span><br><span class="line">+<span class="comment">---------------------+--------------------------------------+</span></span><br><span class="line">| slow_launch_time    | 2                                    |</span><br><span class="line">| slow_query_log      | ON                                   |</span><br><span class="line">| slow_query_log_file | /var/lib/mysql/ranking-list-slow.log |</span><br><span class="line">+<span class="comment">---------------------+--------------------------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>我们故意在百万数据量的表(未使用索引)中执行一条排序的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`score`</span>,<span class="string">`name`</span> <span class="keyword">FROM</span> <span class="string">`cus_order`</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">`score`</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>确保自己有对应目录的访问权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /var/lib/mysql/</span><br></pre></td></tr></table></figure><p>查看对应的慢查询日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/mysql/ranking-list-slow.log</span><br></pre></td></tr></table></figure><p>我们刚刚故意执行的 SQL 语句已经被慢查询日志记录了下来：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Time: 2022-10-09T08:55:37.486797Z</span><br><span class="line"># User@Host: root[root] @  [172.17.0.1]  Id:    14</span><br><span class="line"># Query_time: 0.978054  Lock_time: 0.000164 Rows_sent: 999999  Rows_examined: 1999998</span><br><span class="line">SET timestamp=1665305736;</span><br><span class="line">SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;</span><br></pre></td></tr></table></figure><p>这里对日志中的一些信息进行说明：</p><ul><li>Time ：被日志记录的代码在服务器上的运行时间。</li><li>User@Host：谁执行的这段代码。</li><li>Query_time：这段代码运行时长。</li><li>Lock_time：执行这段代码时，锁定了多久。</li><li>Rows_sent：慢查询返回的记录。</li><li>Rows_examined：慢查询扫描过的行数。</li></ul><p>实际项目中，慢查询日志通常会比较复杂，我们需要借助一些工具对其进行分析。像 MySQL 内置的 mysqldumpslow 工具就可以把相同的 SQL 归为一类，并统计出归类项的执行次数和每次执行的耗时等一系列对应的情况。</p><p>找到了慢 SQL 之后，我们可以通过 <code>EXPLAIN</code>命令分析对应的 <code>SELECT</code> 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;</span><br><span class="line">+<span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+</span></span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra          |</span><br><span class="line">+<span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+</span></span><br><span class="line">|  1 | SIMPLE      | cus_order | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 997572 |   100.00 | Using filesort |</span><br><span class="line">+<span class="comment">----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>比较重要的字段说明：</p><ul><li>select_type ：查询的类型，常用的取值有 SIMPLE（普通查询，即没有联合查询、子查询）、PRIMARY（主查询）、UNION（UNION 中后面的查询）、SUBQUERY（子查询）等。</li><li>table ：表示查询涉及的表或衍生表。</li><li>type ：执行方式，判断查询是否高效的重要参考指标，结果值从差到好依次是：ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system。</li><li>rows : SQL 要查找到结果集需要扫描读取的数据行数，原则上 rows 越少越好。</li><li>……</li></ul><p>关于 Explain 的详细介绍，请看这篇文章：<a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">MySQL 性能优化神器 Explain 使用分析 - 永顺</a>。</p><h4 id="正确使用索引"><a href="#正确使用索引" class="headerlink" title="正确使用索引"></a>正确使用索引</h4><p>正确使用索引可以大大加快数据的检索速度（大大减少检索的数据量）。</p><h5 id="选择合适的字段创建索引"><a href="#选择合适的字段创建索引" class="headerlink" title="选择合适的字段创建索引"></a>选择合适的字段创建索引</h5><ul><li><p><strong>不为 NULL 的字段 ：</strong>索引字段的数据应该尽量不为 NULL，因为对于数据为 NULL 的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为 NULL，建议使用 0,1,true,false 这样语义较为清晰的短值或短字符作为替代。</p></li><li><p><strong>被频繁查询的字段 ：</strong>我们创建索引的字段应该是查询操作非常频繁的字段。</p></li><li><p><strong>被作为条件查询的字段 ：</strong>被作为 WHERE 条件查询的字段，应该被考虑建立索引。</p></li><li><p><strong>频繁需要排序的字段 ：</strong>索引已经排序，这样查询可以利用索引的排序，加快排序查询时间。</p></li><li><p><strong>被经常频繁用于连接的字段 ：</strong>经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</p></li></ul><h5 id="被频繁更新的字段应该慎重建立索引"><a href="#被频繁更新的字段应该慎重建立索引" class="headerlink" title="被频繁更新的字段应该慎重建立索引"></a>被频繁更新的字段应该慎重建立索引</h5><p>虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。 如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。</p><h5 id="尽可能的考虑建立联合索引而不是单列索引"><a href="#尽可能的考虑建立联合索引而不是单列索引" class="headerlink" title="尽可能的考虑建立联合索引而不是单列索引"></a>尽可能的考虑建立联合索引而不是单列索引</h5><p>因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗 B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。</p><h5 id="注意避免冗余索引"><a href="#注意避免冗余索引" class="headerlink" title="注意避免冗余索引"></a>注意避免冗余索引</h5><p>冗余索引指的是索引的功能相同，能够命中索引(a, b)就肯定能命中索引(a) ，那么索引(a)就是冗余索引。如（name,city ）和（name ）这两个索引就是冗余索引，能够命中前者的查询肯定是能够命中后者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。</p><h5 id="考虑在字符串类型的字段上使用前缀索引代替普通索引"><a href="#考虑在字符串类型的字段上使用前缀索引代替普通索引" class="headerlink" title="考虑在字符串类型的字段上使用前缀索引代替普通索引"></a>考虑在字符串类型的字段上使用前缀索引代替普通索引</h5><p>前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。</p><h5 id="避免索引失效"><a href="#避免索引失效" class="headerlink" title="避免索引失效"></a>避免索引失效</h5><p>索引失效也是慢查询的主要原因之一，常见的导致索引失效的情况有下面这些：</p><ul><li><p>使用 SELECT * 进行查询;</p></li><li><p>创建了组合索引，但查询条件未准守最左匹配原则;</p></li><li><p>在索引列上进行计算、函数、类型转换等操作;</p></li><li><p>% 开头的 LIKE 查询比如 like ‘%abc’;;</p></li><li><p>查询条件中使用 or，且 or 的前后条件中有一个列没有索引，涉及的索引都不会被使用到;</p></li><li><p>发生<a href="https://javaguide.cn/database/mysql/index-invalidation-caused-by-implicit-conversion.html" target="_blank" rel="noopener">隐式转换</a>;</p></li><li><p>……</p></li></ul><h5 id="删除长期未使用的索引"><a href="#删除长期未使用的索引" class="headerlink" title="删除长期未使用的索引"></a>删除长期未使用的索引</h5><p>删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗 MySQL 5.7 可以通过查询 sys 库的 schema_unused_indexes 视图来查询哪些索引从未被使用</p><h4 id="参考-10"><a href="#参考-10" class="headerlink" title="参考"></a>参考</h4><ul><li><p>MySQL 8.2 Optimizing SQL Statements：<a href="https://dev.mysql.com/doc/refman/8.0/en/statement-optimization.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/statement-optimization.html</a></p></li><li><p>为什么阿里巴巴禁止数据库中做多表 join - Hollis：<a href="https://mp.weixin.qq.com/s/GSGVFkDLz1hZ1OjGndUjZg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/GSGVFkDLz1hZ1OjGndUjZg</a></p></li><li><p>MySQL 的 COUNT 语句，竟然都能被面试官虐的这么惨 - Hollis：<a href="https://mp.weixin.qq.com/s/IOHvtel2KLNi-Ol4UBivbQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/IOHvtel2KLNi-Ol4UBivbQ</a></p></li><li><p>MySQL 性能优化神器 Explain 使用分析：<a href="https://segmentfault.com/a/1190000008131735" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008131735</a></p></li><li><p>如何使用 MySQL 慢查询日志进行性能优化 ：<a href="https://kalacloud.com/blog/how-to-use-mysql-slow-query-log-profiling-mysqldumpslow/" target="_blank" rel="noopener">https://kalacloud.com/blog/how-to-use-mysql-slow-query-log-profiling-mysqldumpslow/</a></p></li></ul><h3 id="高可用：降级和熔断有什么区别？"><a href="#高可用：降级和熔断有什么区别？" class="headerlink" title="高可用：降级和熔断有什么区别？"></a><strong>高可用：降级和熔断有什么区别？</strong></h3><h4 id="什么是降级？"><a href="#什么是降级？" class="headerlink" title="什么是降级？"></a>什么是降级？</h4><p>降级是从系统功能优先级的角度考虑如何应对系统故障。</p><p>服务降级指的是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</p><p>降级服务的特征如下 ：</p><ol><li><p>原因：整体负荷超出整体负载承受能力。</p></li><li><p>目的：保证重要或基本服务正常运行，非重要服务延迟使用或暂停使用</p></li><li><p>大小：降低服务粒度，要考虑整体模块粒度的大小，将粒度控制在合适的范围内</p></li><li><p>可控性：在服务粒度大小的基础上增加服务的可控性，后台服务开关的功能是一项必要配置（单机可配置文件，其他可领用数据库和缓存），可分为手动控制和自动控制。</p></li><li><p>次序：一般从外围延伸服务开始降级，需要有一定的配置项，重要性低的优先降级，比如可以分组设置等级 1-10，当服务需要降级到某一个级别时，进行相关配置</p></li></ol><h5 id="降级方式有哪些？"><a href="#降级方式有哪些？" class="headerlink" title="降级方式有哪些？"></a>降级方式有哪些？</h5><ul><li><p>延迟服务：比如发表了评论，重要服务，比如在文章中显示正常，但是延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行。</p></li><li><p>在粒度范围内关闭服务（片段降级或服务功能降级）：比如关闭相关文章的推荐，直接关闭推荐区</p></li><li><p>页面异步请求降级：比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；</p></li><li><p>页面跳转（页面降级）：比如可以有相关文章推荐，但是更多的页面则直接跳转到某一个地址</p></li><li><p>写降级：比如秒杀抢购，我们可以只进行 Cache 的更新，然后异步同步扣减库存到 DB，保证最终一致性即可，此时可以将 DB 降级为 Cache。</p></li><li><p>读降级：比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景。</p></li></ul><h5 id="服务降级有哪些分类？"><a href="#服务降级有哪些分类？" class="headerlink" title="服务降级有哪些分类？"></a>服务降级有哪些分类？</h5><p>降级按照是否自动化可分为：</p><ul><li><p>自动开关降级（超时、失败次数、故障、限流）</p></li><li><p>人工开关降级（秒杀、电商大促等）</p></li></ul><p>自动降级分类又分为 :</p><ol><li><p>超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p></li><li><p>失败次数降级：主要是一些不稳定的 api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p></li><li><p>故障降级：比如要调用的远程服务挂掉了（网络故障、DNS 故障、http 服务返回错误的状态码、rpc 服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p></li><li><p>限流降级：当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）</p></li></ol><h4 id="大规模分布式系统如何降级？"><a href="#大规模分布式系统如何降级？" class="headerlink" title="大规模分布式系统如何降级？"></a>大规模分布式系统如何降级？</h4><p>在大规模分布式系统中，经常会有成百上千的服务。在大促前往往会根据业务的重要程度和业务间的关系批量降级。这就需要技术和产品提前对业务和系统进行梳理，根据梳理结果确定哪些服务可以降级，哪些服务不可以降级，降级策略是什么，降级顺序怎么样。大型互联网公司基本都会有自己的降级平台，大部分降级都在平台上操作，比如手动降级开关，批量降级顺序管理，熔断阈值动态设置，限流阈值动态设置等等。</p><h4 id="什么是熔断？"><a href="#什么是熔断？" class="headerlink" title="什么是熔断？"></a>什么是熔断？</h4><p>熔断是应对微服务雪崩效应的一种链路保护机制，类似股市、保险丝</p><p>微服务之间的数据交互是通过远程调用来完成的。服务 A 调用服务 B，服务 B 调用服务 C，某一时间链路上对服务 C 的调用响应时间过长或者服务 C 不可用，随着时间的增长，对服务 C 的调用也越来越多，然后服务 C 崩溃了，但是链路调用还在，对服务 B 的调用也在持续增多，然后服务 B 崩溃，随之 A 也崩溃，导致雪崩效应</p><p>服务熔断是应对雪崩效应的一种微服务链路保护机制。例如在高压电路中，如果某个地方的电压过高，熔断器就会熔断，对电路进行保护。同样，在微服务架构中，熔断机制也是起着类似的作用。当调用链路的某个微服务不可用或者响应时间太长时，会进行服务熔断，不再有该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。</p><p>服务熔断的作用类似于我们家用的保险丝，当某服务出现不可用或响应超时的情况时，为了防止整个系统出现雪崩，暂时停止对该服务的调用。</p><h4 id="降级和熔断有什么区别？"><a href="#降级和熔断有什么区别？" class="headerlink" title="降级和熔断有什么区别？"></a>降级和熔断有什么区别？</h4><p>熔断和降级是两个比较容易混淆的概念，两者的含义并不相同。</p><p>降级的目的在于应对系统自身的故障，而熔断的目的在于应对当前系统依赖的外部系统或者第三方系统的故障。</p><h4 id="有哪些现成解决方案？"><a href="#有哪些现成解决方案？" class="headerlink" title="有哪些现成解决方案？"></a>有哪些现成解决方案？</h4><p>Spring Cloud 官方目前推荐的熔断器组件如下：</p><ul><li><p>Hystrix</p></li><li><p>Resilience4J</p></li><li><p>Sentinel</p></li><li><p>Spring Retry</p></li></ul><p>我们单独拎出 Sentinel 和 Hystrix 来说一下（没记错的话，Hystrix 目前已经没有维护了。）。</p><p>Hystrix 是 Netflix 开源的熔断降级组件，<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a> 是阿里中间件团队开源的一款不光具有熔断降级功能，同时还支持系统负载保护的组件。</p><p>简单来说，两者都是主要做熔断降级的 ，那么两者到底有啥异同呢？该如何选择呢？</p><p>Sentinel 的 wiki 中已经详细描述了其与 Hystrix 的区别，地址：<a href="https://github.com/alibaba/Sentinel/wiki/Sentinel-与-Hystrix-的对比。" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/Sentinel-与-Hystrix-的对比。</a></p><p>下面这个详细的表格就来自 Sentinel 的 wiki。</p><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离/信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间或失败比率</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速器模式</td><td>不支持</td></tr><tr><td>系统负载保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC 等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table><p>如果你想了解 Sentinel、Hystrix、resilience4j 三者的对比的话，可以查看 Sentinel 的相关 wiki ：<a href="https://github.com/alibaba/Sentinel/wiki/Guideline:-从-Hystrix-迁移到-Sentinel#功能对比。" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/Guideline:-从-Hystrix-迁移到-Sentinel#功能对比。</a></p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><p><a href="https://www.maro.ink/2018/06/08/fu-wu-jiang-ji-fang-an/" target="_blank" rel="noopener">服务降级方案</a></p></li><li><p><a href="https://gudaoxuri.gitbook.io/microservices-architecture/wei-fu-wu-hua-zhi-ji-shu-jia-gou/services-circuit" target="_blank" rel="noopener">服务熔断处理</a></p></li></ul><h4 id="参考-11"><a href="#参考-11" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://suprisemf.github.io/2018/08/03/高并发之服务降级与熔断/" target="_blank" rel="noopener">高并发之服务降级与熔断</a></p></li><li><p><a href="https://www.modb.pro/db/43433" target="_blank" rel="noopener">揭开服务降级的面纱！！！</a></p></li></ul><h3 id="高可用：灰度发布和回滚有什么用？"><a href="#高可用：灰度发布和回滚有什么用？" class="headerlink" title="高可用：灰度发布和回滚有什么用？"></a><strong>高可用：灰度发布和回滚有什么用？</strong></h3><blockquote><p>这部分内容为可选内容，你也可以选择不进行学习。</p><p>相关面试题 ：</p><ul><li>什么是灰度发布？有什么好处？</li><li>你的项目是如何做灰度发布的？</li><li>为什么灰度发布又被称为金丝雀发布呢？</li><li>回滚通常的做法是怎样的呢？</li></ul></blockquote><h4 id="灰度发布与回滚（可选）"><a href="#灰度发布与回滚（可选）" class="headerlink" title="灰度发布与回滚（可选）"></a>灰度发布与回滚（可选）</h4><p>线上的系统通常情况下会一直迭代更新下去，这意味着我们需要不断发布新版本来替换老版本。<strong>如何保证新版本稳定运行呢</strong>？ 必要的测试必不可少，但灰度发布与回滚也是两个制胜法宝！</p><h5 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h5><h6 id="灰度发布介绍"><a href="#灰度发布介绍" class="headerlink" title="灰度发布介绍"></a>灰度发布介绍</h6><p><strong>灰度发布（又名金丝雀发布）</strong> 是一种平滑发布新版本系统的方式。</p><p>我举一个简单的例子，大家一看应该就明白灰度发布的思想了。</p><p>假如我们有一个服务器集群，每个用户固定访问服务器集群中的某一台服务器，当我们需要发布新版本或者上新功能的时候，我们可以将服务器集群分成若干部分，每天只发布新版本到一部分服务器，这样的话，就有一部分用户可以使用最新版本。发布之后，我们需要观察新版本的服务器运行是否稳定且没有故障。如果没问题的话，我们第二天继续发布一部分服务器，通常需要持续几天才把整个集群全部发布完毕。期间如果发现有问题的话，只需要回滚已发布的那部分服务器即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image-166609093307872.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><p>上面列举的这个例子其实是灰度发布常用的一种方式 - <strong>AB 测试</strong>。AB 测试的思想就是就是把用户分成两组，一组用户使用 A 方案（新版本），一组用户使用 B 方案（老版本）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image(1)-166609094571574.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><p>另外，这个例子是通过服务器来区分的用户，比较粗暴，而且在一些情况下无法使用。一般情况下，我们是建议在进行灰度发布之前对系统用户进行筛选，根据用户的相关信息和各项指标（比如活跃度，违规次数）来筛选出一批可以优先使用新版的用户。我们只需要通过一些手段将这些用户的请求定向到新版本服务即可！为了直观对新版本服务的稳定性进行观测，灰度发布的正确完成还需要依赖可靠的 监控系统 。</p><p>好了！相信前面的介绍已经让你搞清了灰度发布是个什么东西。下面，我们来简单总结一下灰度发布的思想： <strong>简单来说，灰度发布的思想就是先分配一小部分请求流量到新版本，看看有没有问题，没问题的话，再一点点地增加流量，最终让所有流量都切换到新版本。</strong></p><p><strong>为什么灰度发布又被称为金丝雀发布呢？</strong></p><p>金丝雀也被称为瓦斯报警鸟，对于有毒气体非常敏感，在 90 年代的时候经常被拿来检测毒气（有点残忍，后来被禁止了）。为了避免金丝雀直接被毒死了，人们想到了一个办法，把金丝雀放在一个可以控制通气口气体流量的笼子，需要金丝雀预警的时候把通气口慢慢打开，如果笼子中的金丝雀被毒气毒晕，关闭通气口然后让往笼子里充氧气抢救一下金丝雀。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1164f4af-9b0f-4991-a694-11e2bfd3abb1.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>金丝雀预警毒气通过控制通气口气体流量来减小潜在的毒气对金丝雀的影响，金丝雀发布通过控制发布的新版本的使用范围来减小潜在的问题对整体服务的影响，两者思想非常类似。</p><p>很多程序员有可能也是为了纪念那些因为毒气而牺牲的金丝雀才把这种发布方式冠上了金丝雀的名称。</p><h6 id="灰度发布常见方案"><a href="#灰度发布常见方案" class="headerlink" title="灰度发布常见方案"></a>灰度发布常见方案</h6><p>这里介绍几种比较常见的方案，对于 Java 后端开发来说，我觉得了解就行了，一般在公司里这种事情一般是由 Devops 团队来做的。</p><p>1、基于 Nginx+OpenResty+Redis+Lua 实现流量动态分流来实现灰度发布，新浪的 <a href="https://github.com/CNSRE/ABTestingGateway" target="_blank" rel="noopener">ABTestingGateway</a> 就是这种基于这种方案的一个开源项目。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image(2)-166609100201077.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><p>2、使用 Jenkins + Nginx 实现灰度发布策，具体做法可以参考：<a href="https://juejin.cn/post/6844904110601273357" target="_blank" rel="noopener">手把手教你搭建一个灰度发布环境</a> 。这种方案的原理和第一种类似，都是通过对 Nginx 文件的修改来实现流量的定向分流。类似地，如果你用到了其他网关比如 Spring Cloud Gateway 的话，思路也是一样的。另外， Spring Cloud Gateway 配合 Spring Cloud LoadBalancer（官方推荐）/Ribbon 也可以实现简单的灰度发布，核心思想也还是自定义负载均衡策略来分流。</p><p>3、基于 <a href="https://www.apolloconfig.com/" target="_blank" rel="noopener">Apollo</a> 动态更新配置加上其自带的灰度发布策略来实现灰度发布。</p><p>这种方法也是通过修改灰度发布配置的方式来实现灰度发布，如果灰度的配置测试没问题的话，再全量发布配置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\13a7b586-e6be-48f1-abc6-101212576293.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>具体做法可以参考：</p><ul><li><a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide?id=五、灰度发布使用指南" target="_blank" rel="noopener">灰度发布使用指南 - 官方文档</a></li><li><a href="https://github.com/dangnianchuntian/gray" target="_blank" rel="noopener">灰度实战基础之 Apollo</a></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image(3)-166609102389080.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><p>4、通过一些现成的工具来做，比如说 <a href="https://www.rainbond.com/" target="_blank" rel="noopener">Rainbond</a>（云原生应用管理平台）就自带了灰度发布解决方案并且还支持滚动发布和蓝绿发布。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image(4)-166609103233882.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><p>5、Flagger</p><p>这是之前看马若飞老师的《Service Mesh 实战》这门课的时候看到的一个方法。</p><p>Flagger 是一种渐进式交付工具，可自动控制 Kubernetes 上应用程序的发布过程。通过指标监控和运行一致性测试，将流量逐渐切换到新版本，降低在生产环境中发布新软件版本导致的风险。</p><p>Flagger 可以使用 Service Mesh（App Mesh，Istio，Linkerd）或 Ingress Controller（Contour，Gloo，Nginx）来实现多种部署策略（金丝雀发布，A/B 测试，蓝绿发布）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\66a6ca67-7a4e-4169-b1d0-a0081de7e485.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="回滚机制"><a href="#回滚机制" class="headerlink" title="回滚机制"></a>回滚机制</h5><p>光有灰度发布还不够，如果在灰度发布过程中（灰度期）发现了新版本有问题，我们还需要有回滚机制来应对。类似于数据库事务回滚，系统发布回滚就是将新版本回退到老版本。</p><p><strong>回滚通常的做法是怎样的呢？</strong></p><ol><li>提前备份老版本，新版本遇到问题之后，重新部署老版本。</li><li>同时部署一套新版本，一套旧版本，两者规模相同新版本出问题之后，流量全部走老版本（蓝绿发布）。</li></ol><p>正如余春龙老师在《软件架构设计：大型网站技术架构与业务架构融合之道》这本书中写道：</p><blockquote><p>既然无法避免系统变更，我们能做的就是让这个过程尽可能平滑、受控，这就是灰度与回滚策略。</p></blockquote><p>不过， <strong>灰度发布和回滚也不是银弹，毕竟计算机世界压根不存在银弹。</strong></p><p>在一些要求非常严格的系统（如交易系统、消防系统、医疗系统）中，灰度发布和回滚使用不当就会带来非常严重的生产问题。</p><h4 id="参考-12"><a href="#参考-12" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://insights.thoughtworks.cn/canary-deployment/" target="_blank" rel="noopener">漫谈金丝雀部署-Thoughtworks 洞见</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MTY5NTk4Ng==&mid=2247489100&idx=1&sn=eab291eb345c074114d946b732e037eb&source=41#wechat_redirect" target="_blank" rel="noopener">金丝雀发布、滚动发布、蓝绿发布到底有什么差别？关键点是什么？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Qbr3TEif_ZiD9tBpIwwdNw" target="_blank" rel="noopener">基于 Flagger 和 Nginx-Ingress 实现金丝雀发布</a></p></li></ul><h4 id="文章推荐-1"><a href="#文章推荐-1" class="headerlink" title="文章推荐"></a>文章推荐</h4><ul><li><p><a href="https://tech.youzan.com/gray-deloyments-and-blue-green-deployments-practices-in-youzan/" target="_blank" rel="noopener">有赞灰度发布与蓝绿发布实践 - 有赞技术</a></p></li><li><p><a href="https://developer.aliyun.com/article/787754" target="_blank" rel="noopener">如何设计可靠的灰度方案 - 阿里技术</a></p></li><li><p><a href="https://testerhome.com/topics/15746?order_by=like&" target="_blank" rel="noopener">什么是灰度发布，以及灰度发布 A/B 测试</a></p></li><li><p><a href="https://tool.lu/en_US/deck/jw/detail" target="_blank" rel="noopener">美团收银灰度发布设计与实践</a></p></li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h3 id="Tomcat-常见面试题总结"><a href="#Tomcat-常见面试题总结" class="headerlink" title="Tomcat 常见面试题总结"></a><strong>Tomcat 常见面试题总结</strong></h3><blockquote><p>本文内容主要整理自：</p><ul><li>《深入拆解 Tomcat &amp; Jetty》</li><li>《Tomcat 架构解析》</li></ul><p>感谢这两份资料，尤其是《深入拆解 Tomcat &amp; Jetty》，写的非常赞，看了之后收货颇多。</p><p>虽然这篇文章的内容大部分都不是我的原创，但整理重要的知识点和面试题同样花了不少心思，希望对你有帮助！</p></blockquote><h4 id="Tomcat-介绍"><a href="#Tomcat-介绍" class="headerlink" title="Tomcat 介绍"></a><strong>Tomcat 介绍</strong></h4><h5 id="什么是-Web-容器？"><a href="#什么是-Web-容器？" class="headerlink" title="什么是 Web 容器？"></a>什么是 Web 容器？</h5><p>早期的 Web 应用主要用于浏览新闻等静态页面，HTTP 服务器（比如 Apache、Nginx）向浏览器返回静态 HTML，浏览器负责解析 HTML，将结果呈现给用户。</p><p>随着互联网的发展，我们已经不满足于仅仅浏览静态页面，还希望通过一些交互操作，来获取动态结果，因此也就需要一些扩展机制能够让 HTTP 服务器调用服务端程序。</p><p>于是 Sun 公司推出了 Servlet 技术。你可以把 Servlet 简单理解为运行在服务端的 Java 小程序，但是 Servlet 没有 main 方法，不能独立运行，因此必须把它部署到 Servlet 容器中，由容器来实例化并调用 Servlet。</p><p>Tomcat 就是 一个 Servlet 容器。为了方便使用，Tomcat 同时具有 HTTP 服务器的功能。</p><p>因此 Tomcat 就是一个“HTTP 服务器 + Servlet 容器”，我们也叫它 Web 容器。</p><h5 id="什么是-Tomcat"><a href="#什么是-Tomcat" class="headerlink" title="什么是 Tomcat?"></a>什么是 Tomcat?</h5><p>简单来说，Tomcat 就是一个“HTTP 服务器 + Servlet 容器”，我们通常也称呼 Tomcat 为 Web 容器。</p><ul><li><p>HTTP 服务器 ：处理 HTTP 请求并响应结果。</p></li><li><p>Servlet 容器 ：HTTP 服务器将请求交给 Servlet 容器处理，Servlet 容器会将请求转发到具体的 Servlet（Servlet 容器用来加载和管理业务类）。</p></li></ul><h5 id="HTTP-服务器工作原理了解吗？"><a href="#HTTP-服务器工作原理了解吗？" class="headerlink" title="HTTP 服务器工作原理了解吗？"></a><strong>HTTP 服务器工作原理了解吗？</strong></h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\7e8f7798-0eb9-47d1-9a10-1252deea4926.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ol><li>用户通过浏览器进行了一个操作，比如输入网址并回车，或者是点击链接，接着浏览器获取了这个事件。</li><li>浏览器向服务端发出 TCP 连接请求。</li><li>服务程序接受浏览器的连接请求，并经过 TCP 三次握手建立连接。</li><li>浏览器将请求数据打包成一个 HTTP 协议格式的数据包。</li><li>浏览器将该数据包推入网络，数据包经过网络传输，最终达到端服务程序。</li><li>服务端程序拿到这个数据包后，同样以 HTTP 协议格式解包，获取到客户端的意图。</li><li>得知客户端意图后进行处理，比如提供静态文件或者调用服务端程序获得动态结果。</li><li>服务器将响应结果（可能是 HTML 或者图片等）按照 HTTP 协议格式打包。</li><li>服务器将响应数据包推入网络，数据包经过网络传输最终达到到浏览器。</li><li>浏览器拿到数据包后，以 HTTP 协议的格式解包，然后解析数据，假设这里的数据是 HTML。</li><li>浏览器将 HTML 文件展示在页面上。</li></ol><h5 id="什么是-Servlet-有什么作用？"><a href="#什么是-Servlet-有什么作用？" class="headerlink" title="什么是 Servlet?有什么作用？"></a>什么是 Servlet?有什么作用？</h5><p>Servlet 指的是任何实现了 <code>Servlet</code> 接口的类。Servlet 主要用于处理客户端传来的 HTTP 请求，并返回一个响应。</p><p>Servlet 接口定义了下面五个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res）<span class="keyword">throws</span> ServletException, IOException;</span></span></span><br><span class="line"><span class="function"><span class="params">    </span></span></span><br><span class="line"><span class="function"><span class="params">    String getServletInfo()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最重要是的<code>service</code>方法，具体业务类在这个方法里实现业务的具体处理逻辑。</p><p>Servlet 容器会根据 <code>web.xml</code> 文件中的映射关系，调用相应的 Servlet，Servlet 将处理的结果返回给 Servlet 容器，并通过 HTTP 服务器将响应传输给客户端。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1d453c9f-b91f-4e86-bd32-c8947e65e982.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>几乎所有的 Java Web 框架（比如 Spring）都是基于 Servlet 的封装。</p><h5 id="Tomcat-是如何创建-Servlet-的？"><a href="#Tomcat-是如何创建-Servlet-的？" class="headerlink" title="Tomcat 是如何创建 Servlet 的？"></a>Tomcat 是如何创建 Servlet 的？</h5><p>当容器启动时，会读取在 webapps 目录下所有的 web 应用中的 web.xml 文件，然后对 xml 文件进行解析，并读取 servlet 注册信息。然后，将每个应用中注册的 Servlet 类都进行加载，并通过 反射的方式实例化。（有时候也是在第一次请求时实例化）。</p><p><code>&lt;load-on-startup&gt;</code>元素是 <code>&lt;servlet&gt;</code>元素的一个子元素，它用于指定 Servlet 被加载的时机和顺序。在 <code>&lt;load-on-startup&gt;</code>元素中，设置的值必须是一个整数。如果这个值是一个负数，或者没有设定这个元素，Servlet 容器将在客户端首次请求这个 Servlet 时加载它;如果这个值是正整数或 0，Servlet 容器将在 Web 应用启动时加载并初始化 Servlet，并且 <code>&lt;load-on-startup&gt;</code>的值越小，它对应的 Servlet 就越先被加载。</p><p>具体配置方式如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  cn.itcast.firstapp.servlet.HelloWorldServlet</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置Servlet在Web应用启动时初始化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--HelloWorldServlet在Tomcat启动时就被自动加载并且初始化了。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorldServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloWorldServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Tomcat-文件夹"><a href="#Tomcat-文件夹" class="headerlink" title="Tomcat 文件夹"></a><strong>Tomcat 文件夹</strong></h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b6cd5843-9f64-4ad1-ab54-a4cf9ba6da9a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>/bin：存放 Windows 或 Linux 平台上启动和关闭 Tomcat 的脚本文件。</li><li>/conf：存放 Tomcat 的各种全局配置文件，其中最重要的是 server.xml。</li><li>/lib：存放 Tomcat 以及所有 Web 应用都可以访问的 JAR 文件。</li><li>/logs：存放 Tomcat 执行时产生的日志文件。</li><li>/work：存放 JSP 编译后产生的 Class 文件。</li><li>/webapps：Tomcat 的 Web 应用目录，默认情况下把 Web 应用放在这个目录下。</li></ul><h5 id="bin-目录有什么作用？"><a href="#bin-目录有什么作用？" class="headerlink" title="bin 目录有什么作用？"></a><strong>bin 目录有什么作用？</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ls tomcat/bin</span><br><span class="line">bootstrap.jar                 configtest.bat  setclasspath.bat  tcnative-1.dll*       tool-wrapper.sh*</span><br><span class="line">catalina.bat                  configtest.sh*  setclasspath.sh*  tomcat8.exe*          version.bat</span><br><span class="line">catalina.sh*                  daemon.sh*      shutdown.bat      tomcat8w.exe*         version.sh*</span><br><span class="line">catalina-tasks.xml            digest.bat      shutdown.sh*      tomcat-juli.jar</span><br><span class="line">commons-daemon.jar            digest.sh*      startup.bat       tomcat-native.tar.gz</span><br><span class="line">commons-daemon-native.tar.gz  service.bat     startup.sh*       tool-wrapper.bat</span><br></pre></td></tr></table></figure><p>bin 目录保存了对 Tomcat 进行控制的相关可执行程序。</p><p>上面的文件中，主要分为两类：.bat 和 .sh。.bat 是 window 平台的批处理文件，用于在 window 中执行。而 .sh 则是在 Linux 或者 Unix 上执行的。</p><p>比较常用的是下面两个：</p><ul><li>startup.sh（startup.bat）用来启动 Tomcat 服务器。</li><li>shutdown.sh（shutdown.bat）用来关闭已经运行的 Tomcat 服务器。</li></ul><h5 id="webapps-目录有什么作用？"><a href="#webapps-目录有什么作用？" class="headerlink" title="webapps 目录有什么作用？"></a>webapps 目录有什么作用？</h5><p>webapps 目录用来存放应用程序，当 Tomcat 启动时会去加载 webapps 目录下的应用程序。可以以文件夹、war 包、jar 包的形式发布应用。</p><p>当然，你也可以把应用程序放置在磁盘的任意位置，在配置文件中映射好就行。</p><h4 id="Tomcat-总体架构"><a href="#Tomcat-总体架构" class="headerlink" title="Tomcat 总体架构"></a>Tomcat 总体架构</h4><p>Tomcat 要实现 2 个核心功能：</p><ol><li>处理 Socket 连接，负责网络字节流与 Request 和 Response 对象的转化。</li><li>加载和管理 Servlet，以及具体处理 Request 请求。</li></ol><p>因此 Tomcat 设计了两个核心组件 <strong>连接器（Connector）</strong> 和 <strong>容器（Container）</strong> 来分别做这两件事情。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\8fc8cc93-b704-48dd-9838-cfac757c2026.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="连接器有什么作用"><a href="#连接器有什么作用" class="headerlink" title="连接器有什么作用?"></a>连接器有什么作用?</h5><p>连接器对 Servlet 容器屏蔽了协议及 I/O 模型等的区别，无论是 HTTP 还是 AJP，在容器中获取到的都是一个标准的<code>ServletRequest</code>对象。</p><p>我们可以把连接器的功能需求进一步细化，比如：</p><ul><li>监听网络端口。</li><li>接受网络连接请求。</li><li>读取网络请求字节流。</li><li>根据具体应用层协议（HTTP/AJP）解析字节流，生成统一的 Tomcat Request 对象。</li><li>将 Tomcat Request 对象转成标准的 ServletRequest。</li><li>调用 Servlet 容器，得到 ServletResponse。</li><li>将 ServletResponse 转成 Tomcat Response 对象。</li><li>将 Tomcat Response 转成网络字节流。</li><li>将响应字节流写回给浏览器。</li></ul><p>通过分析连接器的详细功能列表，我们发现连接器需要完成 3 个高内聚的功能：</p><ul><li><strong>网络通信。</strong></li><li><strong>应用层协议解析。</strong></li><li><strong>Tomcat Request/Response 与 ServletRequest/ServletResponse 的转化。</strong></li></ul><p>因此 Tomcat 的设计者设计了 3 个组件来实现这 3 个功能，分别是 <strong>Endpoint、Processor 和 Adapter (适配器模式)</strong>。</p><p><strong>Endpoint 负责提供字节流给 Processor，Processor 负责提供 Tomcat Request 对象给 Adapter，Adapter 负责提供 ServletRequest 对象给容器。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fstatic001.geekbang.org%2Fresource%2Fimage%2F6e%2Fce%2F6eeaeb93839adcb4e76c15ee93f545ce.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>连接器用 <code>ProtocolHandler</code> 接口来封装通信协议和 I/O 模型的差异，<code>ProtocolHandler</code> 内部又分为<code>Endpoint</code> 和 <code>Processor</code> 模块，<code>Endpoint</code>负责底层 <code>Socket</code> 通信，<code>Processor</code> 负责应用层协议解析。连接器通过适配器 <code>Adapter</code>调用容器。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fstatic001.geekbang.org%2Fresource%2Fimage%2F30%2Fcf%2F309cae2e132210489d327cf55b284dcf.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>如果要支持新的 I/O 方案、新的应用层协议，只需要实现相关的具体子类，上层通用的处理逻辑是不变的。</p><h5 id="容器是怎么设计的？"><a href="#容器是怎么设计的？" class="headerlink" title="容器是怎么设计的？"></a>容器是怎么设计的？</h5><p>Tomcat 设计了 4 种容器，分别是 <strong>Engine、Host、Context 和 Wrapper</strong>。这 4 种容器不是平行关系，而是父子关系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fstatic001.geekbang.org%2Fresource%2Fimage%2Fcc%2Fed%2Fcc968a11925591df558da0e7393f06ed.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li><strong>Context</strong> 表示一个 Web 应用程序；</li><li><strong>Wrapper</strong> 表示一个 Servlet，一个 Web 应用程序中可能会有多个 Servlet；</li><li><strong>Host</strong> 代表的是一个虚拟主机，或者说一个站点，可以给 Tomcat 配置多个虚拟主机地址，而一个虚拟主机下可以部署多个 Web 应用程序；</li><li><strong>Engine</strong> 表示引擎，用来管理多个虚拟站点，一个 Service 最多只能有一个 Engine。</li></ul><p>你可以再通过 Tomcat 的 <code>server.xml</code>配置文件来加深对 Tomcat 容器的理解。Tomcat 采用了组件化的设计，它的构成组件都是可配置的，其中最外层的是 Server，其他组件按照一定的格式要求配置在这个顶层容器中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Ffiles.mdnice.com%2Fuser%2F3586%2F2d678e57-5469-42c6-844e-fe001782f61a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="请求是如何定位到-Servlet-的？"><a href="#请求是如何定位到-Servlet-的？" class="headerlink" title="请求是如何定位到 Servlet 的？"></a>请求是如何定位到 Servlet 的？</h5><p>Tomcat 是怎么确定请求是由哪个 Wrapper 容器里的 Servlet 来处理的呢？</p><p>Mapper`组件的功能就是将用户请求的 URL 定位到一个 Servlet。它的工作原理是：Mapper 组件里保存了 Web 应用的配置信息，其实就是容器组件与访问路径的映射关系，比如 Host 容器里配置的域名、Context 容器里的 Web 应用路径，以及 Wrapper 容器里 Servlet 映射的路径，你可以想象这些配置信息就是一个多层次的 Map。</p><p>注意：<strong>一个请求 URL 最后只会定位到一个 Wrapper 容器，也就是一个 Servlet。</strong></p><p>举个例子：有一个网购系统，有面向网站管理人员的后台管理系统，还有面向终端客户的在线购物系统。这两个系统跑在同一个 Tomcat 上，为了隔离它们的访问域名，配置了两个虚拟域名：manage.shopping.com 和 user.shopping.com 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fstatic001.geekbang.org%2Fresource%2Fimage%2Fbe%2F96%2Fbe22494588ca4f79358347468cd62496.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>假如有用户访问一个 URL，比如图中的<a href="http://user.shopping.com:8080/order/buy，Tomcat" target="_blank" rel="noopener">http://user.shopping.com:8080/order/buy，Tomcat</a> 如何将这个 URL 定位到一个 Servlet 呢？</p><ol><li><strong>根据协议和端口号选定 Service 和 Engine :</strong> URL 访问的是 8080 端口，因此这个请求会被 HTTP 连接器接收，而一个连接器是属于一个 Service 组件的，这样 Service 组件就确定了</li><li><strong>根据域名选定 Host :</strong> 域名是 user.shopping.com，因此 Mapper 会找到 Host2 这个容器。</li><li><strong>根据 URL 路径找到 Context 组件 。</strong></li><li><strong>根据 URL 路径找到 Wrapper（Servlet） :</strong> Context 确定后，Mapper 再根据 web.xml 中配置的 Servlet 映射路径来找到具体的 Wrapper 和 Servlet。</li></ol><h5 id="Tomcat-为什么要打破双亲委托机制？"><a href="#Tomcat-为什么要打破双亲委托机制？" class="headerlink" title="Tomcat 为什么要打破双亲委托机制？"></a>Tomcat 为什么要打破双亲委托机制？</h5><p>Tomcat 自定义类加载器打破双亲委托机制的目的是为了优先加载 Web 应用目录下的类，然后再加载其他目录下的类，这也是 Servlet 规范的推荐做法。</p><p>要打破双亲委托机制，需要继承 ClassLoader 抽象类，并且需要重写它的 loadClass 方法，因为 ClassLoader 的默认实现就是双亲委托。</p><h5 id="Tomcat-如何隔离-Web-应用？"><a href="#Tomcat-如何隔离-Web-应用？" class="headerlink" title="Tomcat 如何隔离 Web 应用？"></a>Tomcat 如何隔离 Web 应用？</h5><p>首先让我们思考这一下这几个问题：</p><ol><li><p>假如我们在 Tomcat 中运行了两个 Web 应用程序，两个 Web 应用中有同名的 Servlet，但是功能不同，Tomcat 需要同时加载和管理这两个同名的 Servlet 类，保证它们不会冲突，因此 Web 应用之间的类需要隔离。</p></li><li><p>假如两个 Web 应用都依赖同一个第三方的 JAR 包，比如 Spring，那 Spring 的 JAR 包被加载到内存后，Tomcat 要保证这两个 Web 应用能够共享，也就是说 Spring 的 JAR 包只被加载一次，否则随着依赖的第三方 JAR 包增多，JVM 的内存会膨胀。</p></li><li><p>跟 JVM 一样，我们需要隔离 Tomcat 本身的类和 Web 应用的类。</p></li></ol><p>为了解决上面这些问题，Tomcat 设计了类加载器的层次结构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fstatic001.geekbang.org%2Fresource%2Fimage%2F62%2F23%2F6260716096c77cb89a375e4ac3572923.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>我们先来看第 1 个问题: Web 应用之间的类之间如何隔离？</strong></p><p>假如我们使用 JVM 默认<code>AppClassLoader</code> 来加载 Web 应用，<code>AppClassLoader</code> 只能加载一个<code>Servlet</code> 类，在加载第二个同名<code>Servlet</code>类时，<code>AppClassLoader</code> 会返回第一个<code>Servlet</code> 类的 <code>Class</code>实例，这是因为在 <code>AppClassLoader</code> 看来，同名的 <code>Servlet</code>类只被加载一次。</p><p><strong>Tomcat 的解决方案是自定义一个类加载器 <code>WebAppClassLoader</code>， 并且给每个 Web 应用创建一个类加载器实例</strong>。 我们知道，Context 容器组件对应一个 Web 应用，因此，<strong>每个 Context 容器负责创建和维护一个 WebAppClassLoader 加载器实例</strong>。这背后的原理是，不同的加载器实例加载的类被认为是不同的类，即使它们的类名相同。这就相当于在 Java 虚拟机内部创建了一个个相互隔离的 Java 类空间，每一个 Web 应用都有自己的类空间，Web 应用之间通过各自的类加载器互相隔离。</p><p><strong>我们再来看第 2 个问题: 两个 Web 应用之间怎么共享库类，并且不能重复加载相同的类?</strong></p><p>我们知道，在双亲委托机制里，各个子加载器都可以通过父加载器去加载类，那么把需要共享的类放到父加载器的加载路径下不就行了吗，应用程序也正是通过这种方式共享 JRE 的核心类。因此 Tomcat 的设计者又加了一个类加载器 SharedClassLoader，作为 WebAppClassLoader 的父加载器，专门来加载 Web 应用之间共享的类。如果 WebAppClassLoader 自己没有加载到某个类，就会委托父加载器 SharedClassLoader 去加载这个类，<strong>SharedClassLoader 会在指定目录下加载共享类，之后返回给 WebAppClassLoader，这样共享的问题就解决了。</strong></p><p><strong>我们再来看第 3 个问题:如何隔离 Tomcat 本身的类和 Web 应用的类？</strong></p><p>我们知道，要共享可以通过父子关系，要隔离那就需要兄弟关系了。兄弟关系就是指两个类加载器是平行的，它们可能拥有同一个父加载器，但是两个兄弟类加载器加载的类是隔离的。基于此 Tomcat 又设计一个类加载器 CatalinaClassLoader，专门来加载 Tomcat 自身的类。这样设计有个问题，那 Tomcat 和各 Web 应用之间需要共享一些类时该怎么办呢？</p><p>老办法，还是再增加一个 <code>CommonClassLoader</code>，作为<code>CatalinaClassLoader</code>和 <code>SharedClassLoader</code> 的父加载器。<code>CommonClassLoader</code> 能加载的类都可以被 <code>CatalinaClassLoader</code> 和 <code>SharedClassLoader</code> 使用，而 <code>CatalinaClassLoader</code> 和 <code>SharedClassLoader</code> 能加载的类则与对方相互隔离。<code>WebAppClassLoader</code> 可以使用 <code>SharedClassLoader</code>加载到的类，但各个 <code>WebAppClassLoader</code>实例之间相互隔离。</p><h4 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h4><h5 id="如何监控-Tomcat-性能？"><a href="#如何监控-Tomcat-性能？" class="headerlink" title="如何监控 Tomcat 性能？"></a>如何监控 Tomcat 性能？</h5><p>Tomcat 的关键的性能指标主要有 <strong>吞吐量、响应时间、错误数、线程池、CPU 以及 JVM 内存</strong>。</p><ol><li><p>通过 JConsole 监控 Tomcat</p></li><li><p>命令行查看 Tomcat 指标</p></li><li><p>prometheus + grafana</p></li></ol><h5 id="JVM-GC-原理及调优的基本思路"><a href="#JVM-GC-原理及调优的基本思路" class="headerlink" title="JVM GC 原理及调优的基本思路"></a>JVM GC 原理及调优的基本思路</h5><p><strong>Tomcat 基于 Java，也是跑在 JVM 中，因此，我们要对 Tomcat 进行调优的话，先要了解 JVM 调优的原理。</strong></p><p><strong>JVM 调优主要是对 JVM 垃圾收集的优化。</strong>一般来说是因为有问题才需要优化，所以对于 JVM GC 来说，如果你观察到 Tomcat 进程的 CPU 使用率比较高，并且在 GC 日志中发现 GC 次数比较频繁、GC 停顿时间长，这表明你需要对 GC 进行优化了。</p><p><strong>在对 GC 调优的过程中，我们不仅需要知道 GC 的原理，更重要的是要熟练使用各种监控和分析工具，具备 GC 调优的实战能力。</strong></p><p><strong>CMS 和 G1 是时下使用率比较高的两款垃圾收集器，从 Java 9 开始，采用 G1 作为默认垃圾收集器，</strong>而 G1 的目标也是逐步取代 CMS。</p><h5 id="如何选择-IO-模型？"><a href="#如何选择-IO-模型？" class="headerlink" title="如何选择 IO 模型？"></a>如何选择 IO 模型？</h5><p>I/O 调优实际上是连接器类型的选择，一般情况下默认都是 NIO，在绝大多数情况下都是够用的，除非你的 Web 应用用到了 TLS 加密传输，而且对性能要求极高，这个时候可以考虑 APR，因为 APR 通过 OpenSSL 来处理 TLS 握手和加 / 解密。OpenSSL 本身用 C 语言实现，它还对 TLS 通信做了优化，所以性能比 Java 要高。</p><p><strong>那你可能会问那什么时候考虑选择 NIO.2？</strong></p><ul><li><p>如果你的 Tomcat 跑在 Windows 平台上，并且 HTTP 请求的数据量比较大，可以考虑 NIO.2，这是因为 Windows 从操作系统层面实现了真正意义上的异步 I/O，如果传输的数据量比较大，异步 I/O 的效果就能显现出来。</p></li><li><p>如果你的 Tomcat 跑在 Linux 平台上，建议使用 NIO，这是因为 Linux 内核没有很完善地支持异步 I/O 模型，因此 JVM 并没有采用原生的 Linux 异步 I/O，而是在应用层面通过 epoll 模拟了异步 I/O 模型，只是 Java NIO 的使用者感觉不到而已。因此可以这样理解，在 Linux 平台上，Java NIO 和 Java NIO.2 底层都是通过 epoll 来实现的，但是 Java NIO 更加简单高效。</p></li></ul><h3 id="Nginx-常见面试题总结"><a href="#Nginx-常见面试题总结" class="headerlink" title="Nginx 常见面试题总结"></a><strong>Nginx 常见面试题总结</strong></h3><h4 id="什么是-Nginx-？"><a href="#什么是-Nginx-？" class="headerlink" title="什么是 Nginx ？"></a>什么是 Nginx ？</h4><p>俄罗斯的工程师 Igor Sysoev，在 Rambler Media 工作期间使用 C 语言开发并开源了 Nginx。</p><p>Nginx 同 Apache 一样都是 WEB 服务器，不过，Nginx 更加轻量级，它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。并且，Nginx 可以作为反向代理服务器使用，支持 IMAP/POP3/SMTP 服务。</p><blockquote><p>Web 服务器：负责处理和响应用户请求，一般也称为 HTTP 服务器。</p></blockquote><p>官网：<a href="https://nginx.org/" target="_blank" rel="noopener">https://nginx.org/</a></p><h4 id="Nginx-的特点是有哪些？"><a href="#Nginx-的特点是有哪些？" class="headerlink" title="Nginx 的特点是有哪些？"></a>Nginx 的特点是有哪些？</h4><ol><li><p>内存占用非常少 ：一般情况下，10000 个非活跃的 HTTP Keep-Alive 连接在 Nginx 中仅消耗 2.5MB 的内存，这是 Nginx 支持高并发连接的基础。</p></li><li><p>高并发 : 单机支持 10 万以上的并发连接</p></li><li><p>跨平台 :可以运行在 Linux，Windows，FreeBSD，Solaris，AIX，Mac OS 等操作系统上。</p></li><li><p>扩展性好 ：第三方插件非常多！</p></li><li><p>安装使用简单 ：对于简单的应用场景，我们很快就能够上手使用。</p></li><li><p>稳定性好 ：bug 少，不会遇到各种奇葩的问题。</p></li><li><p>免费 ：开源软件，免费使用。</p></li><li><p>……</p></li></ol><h4 id="Nginx-能用来做什么？"><a href="#Nginx-能用来做什么？" class="headerlink" title="Nginx 能用来做什么？"></a>Nginx 能用来做什么？</h4><h5 id="静态资源服务器"><a href="#静态资源服务器" class="headerlink" title="静态资源服务器"></a>静态资源服务器</h5><p>Nginx 是一个 HTTP 服务器，可以将服务器上的静态文件（如 HTML、图片）通过 HTTP 协议展现给客户端。因此，我们可以使用 Nginx 搭建静态资源 Web 服务器</p><p>不过，记得使用 gzip 压缩静态资源来减少网络传输。</p><p>举个例子：我们来使用 Nginx 搭建一个静态网页服务。先将静态网页上传到服务器，然后修改<code>/nginx/conf</code>目录下的 <code>nginx.conf</code>文件(Nginx 配置文件)。修改完成之后，重启 Nginx，再请求对应 <code>ip/域名 + 端口 + 资源</code>地址就可以访问到网页。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">// 监听的端口号</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">// server 名称</span><br><span class="line"><span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">// 匹配 api，将所有 :80/api 的请求指到指定文件夹</span><br><span class="line"><span class="attribute">location</span> /api &#123;</span><br><span class="line"><span class="attribute">root</span>   /mnt/web/;</span><br><span class="line">// 默认打开 index.html</span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h5><p>客户端将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器，获取数据后再返回给客户端。对外暴露的是反向代理服务器地址，隐藏了真实服务器 IP 地址。反向代理“代理”的是目标服务器，这一个过程对于客户端而言是透明的。</p><p>举个例子：公司内网部署了 3 台服务器，客户端请求直接经过代理服务器，由代理服务器将请求转发到内网服务器并最终决定哪一台服务器处理客户端请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\reverse-proxy.png" alt="reverse-proxy.png" title>                </div>                <div class="image-caption">reverse-proxy.png</div>            </figure><p>反向代理隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。现在基本上所有的大型网站都设置了反向代理。</p><p>Nginx 支持配置反向代理，通过反向代理实现网站的负载均衡。</p><h5 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h5><blockquote><p>提示 ：想要理解正确理解和区分正向代理和反向代理，你要关注的是代理对象，正向代理“代理”的是客户端，反向代理“代理”的是目标服务器。</p><p>一位大佬说的一句话挺精辟的：代理其实就是一个中介，A 和 B 本来可以直连，中间插入一个 C，C 就是中介。刚开始的时候，代理多数是帮助内网 client 访问外网 server 用的（比如 HTTP 代理），从内到外 . 后来出现了反向代理，”反向”这个词在这儿的意思其实是指方向相反，即代理将来自外网 client 的请求 forward 到内网 server，从外到内</p></blockquote><p>Nginx 主要被作为反向代理服务器使用，不过，其同样也是正向代理服务器的一个选择。</p><p>客户端通过正向代理服务器访问目标服务器。正向代理“代理”的是客户端，目标服务器不知道客户端是谁，也就是说客户端对目标服务器的这次访问是透明的。</p><p>为了实现正向代理，客户端需要设置正向代理服务器的 IP 地址以及代理程序的端口。</p><p>举个例子：我们无法直接访问外网，但是可以借助科学上网工具 VPN 来访问。VPN 会把访问外网服务器（目标服务器）的客户端请求代理到一个可以直接访问外网的代理服务器上去。代理服务器会把外网服务器返回的内容再转发给客户端。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\forward-proxy.png" alt="forward-proxy.png" title>                </div>                <div class="image-caption">forward-proxy.png</div>            </figure><p>外网服务器并不知道客户端是通过 VPN 访问的</p><p>简单来说： <strong>你可以将正向代理看作是一个位于客户端和目标服务器之间的代理服务器，其主要作用就是转达客户端请求从目标服务器上获取指定的内容。</strong></p><p><strong>相关阅读：</strong></p><ul><li><a href="https://developer.aliyun.com/article/706196" target="_blank" rel="noopener">使用 Nginx 作为 HTTPS 正向代理服务器</a></li><li><a href="https://bbs.huaweicloud.com/blogs/301714" target="_blank" rel="noopener">图解及代码实现正向代理、反向代理及负载均衡</a></li></ul><h5 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>如果一台服务器处理用户请求处理不过来的话，一个简单的办法就是增加多台服务器（服务器集群）部署相同的服务来处理用户请求。</p><p>Nginx 可以将接收到的客户端请求以一定的规则（负载均衡策略）均匀地分配到这个服务器集群中所有的服务器上，这个就叫做 <strong>负载均衡</strong>。</p><p>可以看出，Nginx 在其中充当的就是反向代理服务器的作用，负载均衡正是 Nginx 作为反向代理服务器最常见的一个应用。</p><p>除此之外，Nginx 还带有<strong>健康检查</strong>（服务器心跳检查）功能，会定期轮询向集群里的所有服务器发送健康检查请求，来检查集群中是否有服务器处于异常状态。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\3bf9d0c4-b460-4b2c-91bb-2284fe8a5c19-1666092050468103.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h5 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h5><p>动静分离就是把动态请求和静态请求分开，不是讲动态页面和静态页面物理分离，可以理解为 Nginx 处理静态页面，Tomcat 或者其他 Web 服务器处理动态页面。</p><p>动静分离可以减轻 Tomcat 或者其他 Web 服务器的压力，提高网站响应速度。</p><h4 id="Nginx-有哪些负载均衡策略？"><a href="#Nginx-有哪些负载均衡策略？" class="headerlink" title="Nginx 有哪些负载均衡策略？"></a><strong>Nginx 有哪些负载均衡策略？</strong></h4><blockquote><p>相关参考：</p><ul><li><a href="https://www.zoo.team/article/nginx" target="_blank" rel="noopener">五分钟看懂 Nginx 负载均衡</a></li><li><a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/" target="_blank" rel="noopener">Nginx 官方文档</a></li></ul><p>Nginx 的负载均衡策略不止下面介绍的这四种，我这里只是列举几个比较常用的负载均衡策略。</p></blockquote><h5 id="轮询（Round-Robin，默认）"><a href="#轮询（Round-Robin，默认）" class="headerlink" title="轮询（Round Robin，默认）"></a>轮询（Round Robin，默认）</h5><p>轮询为负载均衡中较为基础也较为简单的算法。</p><p>如果没有配置权重的话，每个请求按时间顺序逐一分配到不同的服务器处理。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.174:8099</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.175:8099</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.176:8099</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果配置权重的话，权重越高的服务器被访问的概率就越大。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.174:8099</span> weight=<span class="number">6</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.175:8099</span> weight=<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.176:8099</span> weight=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未加权重的轮询算法适合于服务器性能相近的集群，其中每个服务器承载相同的负载。加权轮询算法适合于服务器性能不等的集群，权重的存在可以使请求分配更加合理化。</p><h5 id="IP-哈希"><a href="#IP-哈希" class="headerlink" title="IP 哈希"></a>IP 哈希</h5><p>根据发出请求的和护短 ip 的 hash 值来分配服务器，可以保证同 IP 发出的请求映射到同一服务器，或者具有相同 hash 值的不同 IP 映射到同一服务器。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.174:8099</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.175:8099</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.176:8099</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和轮询一样，IP 哈希也可以配置权重，如果有两个活动连接数相同的服务器，权重大的被访问的概率就越大。</p><p>该算法在一定程度上解决了集群部署环境下 Session 不共享的问题。</p><h5 id="最小连接数"><a href="#最小连接数" class="headerlink" title="最小连接数"></a>最小连接数</h5><p>当有新的请求出现时，遍历服务器节点列表并选取其中活动连接数最小的一台服务器来响应当前请求。活动连接数可以理解为当前正在处理的请求数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backserver &#123;</span><br><span class="line">  least_conn;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.174:8099</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.175:8099</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">172.27.26.176:8099</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Nginx-常用命令有哪些？"><a href="#Nginx-常用命令有哪些？" class="headerlink" title="Nginx 常用命令有哪些？"></a>Nginx 常用命令有哪些？</h4><ul><li>启动 nginx 。</li><li>停止 nginx -s stop 或 nginx -s quit 。</li><li>重载配置 ./sbin/nginx -s reload(平滑重启) 或 service nginx reload 。</li><li>重载指定配置文件 .nginx -c /usr/local/nginx/conf/nginx.conf 。</li><li>查看 nginx 版本 nginx -v 。</li><li>检查配置文件是否正确 nginx -t 。</li><li>显示帮助信息 nginx -h 。</li></ul><h4 id="Nginx-性能优化的常见方式？"><a href="#Nginx-性能优化的常见方式？" class="headerlink" title="Nginx 性能优化的常见方式？"></a>Nginx 性能优化的常见方式？</h4><ul><li><p>设置 Nginx 运行工作进程个数 ：一般设置 CPU 的核心数或者核心数 x2；</p></li><li><p>开启 Gzip 压缩 ：这样可以使网站的图片、CSS、JS 等文件在传输时进行压缩，提高访问速度, 优化 Nginx 性能。详细介绍可以参考<a href="https://www.cnblogs.com/kevingrace/p/10018914.html" target="_blank" rel="noopener">Nginx 性能优化功能- Gzip 压缩(大幅度提高页面加载速度)</a>这篇文章；</p></li><li><p>设置单个 worker 进程允许客户端最大连接数 ：一般设置为 65535 就足够了；</p></li><li><p>连接超时时间设置 ：避免在建立无用连接上消耗太多资源；</p></li><li><p>设置缓存 ：像图片、CSS、JS 等这类一般不会经常修改的文件，我们完全可以设置图片在浏览器本地缓存，提高访问速度，优化 Nginx 性能。</p></li><li><p>……</p></li></ul><h4 id="LVS、Nginx、HAproxy-有什么区别？"><a href="#LVS、Nginx、HAproxy-有什么区别？" class="headerlink" title="LVS、Nginx、HAproxy 有什么区别？"></a>LVS、Nginx、HAproxy 有什么区别？</h4><p>LVS、Nginx、HAProxy 是目前使用最广泛的三种软件负载均衡软件。</p><ul><li><p>LVS 是 Linux Virtual Server 的简称，也就是 Linux 虚拟服务器。LVS 是四层负载均衡，建立在 OSI 模型的第四层（传输层）之上，性能非常强大。</p></li><li><p>HAProxy 可以工作在四层和七层（传输层和应用层），是专门用来做代理服务器的。</p></li><li><p>Nginx 负载均衡主要是对七层网络通信模型中的第七层应用层上的 HTTP、HTTPS 进行支持。Nginx 是以反向代理的方式进行负载均衡的。</p></li></ul><h4 id="Nginx-如何实现后端服务健康检查？"><a href="#Nginx-如何实现后端服务健康检查？" class="headerlink" title="Nginx 如何实现后端服务健康检查？"></a>Nginx 如何实现后端服务健康检查？</h4><p>我们可以利用第三方模块 upstream_check_module 来检测后端服务的健康状态，如果后端服务器不可用，则所有的请求不转发到这台服务器。</p><p>upstream_check_module 是一款阿里的一位大佬开源的，使用 Perl 和 C 编写而成，Github 地址 ：<a href="https://github.com/yaoweibin/nginx_upstream_check_module" target="_blank" rel="noopener">https://github.com/yaoweibin/nginx_upstream_check_module</a> 。</p><p>关于 upstream_check_module 实现后端服务健康检查的具体做法可以参考<a href="https://cloud.tencent.com/developer/article/1700001" target="_blank" rel="noopener">Nginx 负载均衡健康检查功能</a>这篇文章。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fgitee.com%2FSnailClimb%2Fblog-images%2Fraw%2Fmaster%2Fnginx%2F%2Fupstream_check_module.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="如何保证-Nginx-服务的高可用？"><a href="#如何保证-Nginx-服务的高可用？" class="headerlink" title="如何保证 Nginx 服务的高可用？"></a>如何保证 Nginx 服务的高可用？</h4><p>Nginx 可以结合 Keepalived 来实现高可用。</p><p><strong>什么是 Keepalived ？</strong> 根据官网介绍：</p><blockquote><p>Keepalived 是一个用 C 语言编写的开源路由软件，是 Linux 下一个轻量级别的负载均衡和高可用解决方案。Keepalived 的负载均衡依赖于众所周知且广泛使用的 Linux 虚拟服务器 (IPVS 即 IP Virtual Server，内置在 Linux 内核中的传输层负载均衡器) 内核模块，提供第 4 层负载平衡。Keepalived 实现了一组检查器用于根据服务器节点的健康状况动态维护和管理服务器集群。</p><p>Keepalived 的高可用性是通过虚拟路由冗余协议（VRRP 即 Virtual Router Redundancy Protocol，实现路由器高可用的协议）实现的，可以用来解决单点故障。</p><p>Github 地址：<a href="https://github.com/acassen/keepalived" target="_blank" rel="noopener">https://github.com/acassen/keepalived</a></p></blockquote><p>Keepalived 不仅仅可以和 Nginx 搭配使用，还可以和 <a href="https://wsgzao.github.io/post/lvs-keepalived/" target="_blank" rel="noopener">LVS</a>、<a href="https://programmer.group/high-availability-scheme-implementation-of-mysql-master-replication-keepalived.html" target="_blank" rel="noopener">MySQL</a>、<a href="https://docs.oracle.com/cd/E37670_01/E41138/html/section_sm3_svy_4r.html" target="_blank" rel="noopener">HAProxy</a> 等软件配合使用。</p><p>再来简单介绍一下 Keepalived+Nginx 实现高可用的常见方法：</p><ol><li>准备 2 台 Nginx 服务器，一台为主服务，一台为备用服务；</li><li>在两台 Nginx 服务器上安装并配置 Keepalived；</li><li>为两台 Nginx 服务器绑定同一个虚拟 IP；</li><li>编写 Nginx 检测脚本用于通过 Keepalived 检测 Nginx 主服务器的状态是否正常；</li></ol><p>如果 Nginx 主服务器宕机的话，会自动进行故障转移，备用 Nginx 主服务器升级为主服务。并且，这个切换对外是透明的，因为使用的虚拟 IP，虚拟 IP 不会改变。</p><p>相关阅读：</p><ul><li><a href="https://juejin.cn/post/6970093569096810526" target="_blank" rel="noopener">Nginx 系列教程（五）| 利用 Nginx+Keepalived 实现高可用技术 |</a></li><li><a href="https://support.huaweicloud.com/bestpractice-vpc/bestpractice_0010.html" target="_blank" rel="noopener">搭建 Keepalived Nginx 高可用 Web 集群 - 华为云</a></li></ul><blockquote><p> 📄友情提示 ：下面的内容属于 Nginx 的进阶指点，主要是一些 Nginx 底层原理相关的知识。你可以根据自身情况选择是否掌握这部分内容，如果你的简历没有写熟练掌握 Nginx 使用及原理的话，面试官一般不会问这么深入。</p></blockquote><h4 id="Nginx-总体架构了解吗？"><a href="#Nginx-总体架构了解吗？" class="headerlink" title="Nginx 总体架构了解吗？"></a>Nginx 总体架构了解吗？</h4><blockquote><p> 关于 Nginx 总结架构的详细解答，请看这篇文章：<a href="https://mp.weixin.qq.com/s/CxapDUkSdqBbuJU4JrQ8Aw" target="_blank" rel="noopener">最近和 Nginx 杠上了！</a></p></blockquote><p>对于传统的 HTTP 和反向代理服务器而言，在处理并发请求的时候会使用单进程或线程的模式处理，同时会止网络或输入/输出操作。</p><p>这种方式会消耗大量的内存和 CPU 资源。因为每产生一个单独的进程或线程需要准备一套新的运行时环境，包括分配堆和堆栈内存，以及创建新的执行上下文。</p><p>可以想象在处理多请求时会生成对应数目的线程或进程，导致由于线程在不断上下文切换上耗费大量资源。</p><p>由于上面的原因，Nginx 在设计之初就使用了模块化、事件驱动、异步处理，非阻塞的架构。</p><p>一张图来了解 Nginx 的总结架构:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fgitee.com%2FSnailClimb%2Fblog-images%2Fraw%2Fmaster%2Fnginx%2F%2Fnginx-architecture.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="Nginx-进程模型了解么？"><a href="#Nginx-进程模型了解么？" class="headerlink" title="Nginx 进程模型了解么？"></a>Nginx 进程模型了解么？</h4><blockquote><p> 关于进程模型的详细解答，请看这篇文章：<a href="https://learnku.com/articles/38414" target="_blank" rel="noopener">Nginx 工作模式和进程模型</a></p></blockquote><p>Nginx 启动后，会产生一个 master 主进程，主进程执行一系列的工作后会产生一个或者多个工作进程 worker 进程。master 进程用来管理 worker 进程， worker 进程负责处理网络请求。也就是说 Nginx 采用的是经典的 master-worker 模型的多进程模型 。</p><h4 id="Nginx-如何处理-HTTP-请求？"><a href="#Nginx-如何处理-HTTP-请求？" class="headerlink" title="Nginx 如何处理 HTTP 请求？"></a>Nginx 如何处理 HTTP 请求？</h4><ul><li><p><a href="https://segmentfault.com/a/1190000022348375" target="_blank" rel="noopener">Nginx 是如何处理 HTTP 头部的？</a></p></li><li><p><a href="https://segmentfault.com/a/1190000022709975" target="_blank" rel="noopener">Nginx 处理 HTTP 请求的 11 个阶段</a></p></li></ul><h4 id="系统学习"><a href="#系统学习" class="headerlink" title="系统学习"></a>系统学习</h4><p>Guide 整理了下面一些文章和书籍帮助你系统学习 Nginx。</p><h5 id="文章推荐-2"><a href="#文章推荐-2" class="headerlink" title="文章推荐"></a>文章推荐</h5><ul><li><p><a href="https://juejin.cn/post/6844904129987526663" target="_blank" rel="noopener">连前端都看得懂的《Nginx 入门指南》</a></p></li><li><p><a href="https://juejin.cn/post/7046190661015437325" target="_blank" rel="noopener">Nginx 入门教程，敲简单，10 分钟搞定</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1644900743&ver=3621&signature=kF*VLvQFEeSVlGkPxn542LNLa7S1gQpIZrgywwvQR5EH*p3jwU*HW0GeyQYOeQ3HrPJag8mIjHQg3C0PW72Y-JyGFgsUh-yUiIbrxwnzsHE02e4Plp8vyYINJfb-3WYW&new=1" target="_blank" rel="noopener">Nginx 最全操作总结 - 腾讯技术工程</a></p></li><li><p><a href="http://ningg.top/nginx-series-principle/" target="_blank" rel="noopener">Nginx 系列：Nginx 原理</a></p></li><li><p><a href="https://www.cnblogs.com/cjsblog/p/12163207.html" target="_blank" rel="noopener">Nginx 流量复制</a></p></li></ul><h5 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h5><p><a href="https://book.douban.com/subject/26745255/" target="_blank" rel="noopener">《深入理解 Nginx（第 2 版）》</a> 这本书是初学者学习 Nginx 的首选，讲的非常细致！</p><h2 id="Devops"><a href="#Devops" class="headerlink" title="Devops"></a>Devops</h2><h3 id="监控系统常见面试题总结"><a href="#监控系统常见面试题总结" class="headerlink" title="监控系统常见面试题总结"></a><strong>监控系统常见面试题总结</strong></h3><blockquote><p>个人学习笔记，大部分内容整理自书籍、博客和官方文档。</p><p>相关文章 &amp;书籍：</p><ul><li><a href="https://www.jianshu.com/p/302ba018082a" target="_blank" rel="noopener">监控系统选型，这篇不可不读！</a></li><li><a href="https://logz.io/blog/prometheus-vs-nagios-metrics/" target="_blank" rel="noopener">Prometheus vs Nagios</a></li><li><a href="https://www.cnblogs.com/hunternet/p/14270218.html" target="_blank" rel="noopener">2020 年工作上的最大收获——监控告警体系</a></li><li><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">《Prometheus 操作指南》</a></li></ul><p>相关视频：</p><ul><li><a href="https://www.imooc.com/learn/1231" target="_blank" rel="noopener">使用Prometheus实践基于Spring Boot监控告警体系</a></li><li><a href="https://www.bilibili.com/video/BV11f4y1A7aF" target="_blank" rel="noopener">Prometheus &amp; Grafana -陈嘉鹏 [尚硅谷大数据]</a></li></ul></blockquote><h4 id="监控系统有什么用？-1"><a href="#监控系统有什么用？-1" class="headerlink" title="监控系统有什么用？"></a>监控系统有什么用？</h4><p>建立完善的监控体系主要是为了：</p><ul><li><p><strong>长期趋势分析 ：</strong>通过对监控样本数据的持续收集和统计，对监控指标进行长期趋势分析。例如，通过对磁盘空间增长率的判断，我们可以提前预测在未来什么时间节点上需要对资源进行扩容。</p></li><li><p><strong>数据可视化 ：</strong>通过可视化仪表盘能够直接获取系统的运行状态、资源使用情况、以及服务运行状态等直观的信息。</p></li><li><p><strong>预知故障和告警 :</strong> 当系统出现或者即将出现故障时，监控系统需要迅速反应并通知管理员，从而能够对问题进行快速的处理或者提前预防问题的发生，避免出现对业务的影响。</p></li><li><p><strong>辅助定位故障、性能调优、容量规划以及自动化运维</strong></p></li></ul><p><strong>出任何线上事故，先不说其他地方有问题，监控部分一定是有问题的。</strong></p><p><strong>如何才能更好地使用监控使用？</strong></p><ol><li><p><strong>了解监控对象的工作原理：</strong>要做到对监控对象有基本的了解，清楚它的工作原理。比如想对 JVM 进行监控，你必须清楚 JVM 的堆内存结构和垃圾回收机制。</p></li><li><p><strong>确定监控对象的指标：</strong>清楚使用哪些指标来刻画监控对象的状态？比如想对某个接口进行监控，可以采用请求量、耗时、超时量、异常量等指标来衡量。</p></li><li><p><strong>定义合理的报警阈值和等级：</strong>达到什么阈值需要告警？对应的故障等级是多少？不需要处理的告警不是好告警，可见定义合理的阈值有多重要，否则只会降低运维效率或者让监控系统失去它的作用。</p></li><li><p><strong>建立完善的故障处理流程：</strong>收到故障告警后，一定要有相应的处理流程和 oncall 机制，让故障及时被跟进处理。</p></li></ol><h4 id="常见的监控对象和指标有哪些？-1"><a href="#常见的监控对象和指标有哪些？-1" class="headerlink" title="常见的监控对象和指标有哪些？"></a>常见的监控对象和指标有哪些？</h4><ul><li><p><strong>硬件监控 ：</strong>电源状态、CPU 状态、机器温度、风扇状态、物理磁盘、raid 状态、内存状态、网卡状态</p></li><li><p><strong>服务器基础监控 ：</strong>CPU、内存、磁盘、网络</p></li><li><p><strong>数据库监控 ：</strong>数据库连接数、QPS、TPS、并行处理的会话数、缓存命中率、主从延时、锁状态、慢查询</p></li><li><p><strong>中间件监控 ：</strong> </p><ul><li><p>Nginx：活跃连接数、等待连接数、丢弃连接数、请求量、耗时、5XX 错误率</p></li><li><p>Tomcat：最大线程数、当前线程数、请求量、耗时、错误量、堆内存使用情况、GC 次数和耗时</p></li><li><p>缓存 ：成功连接数、阻塞连接数、已使用内存、内存碎片率、请求量、耗时、缓存命中率</p></li><li><p>消息队列：连接数、队列数、生产速率、消费速率、消息堆积量</p></li></ul></li><li><p><strong>应用监控 ：</strong> </p><ul><li><p>HTTP 接口：URL 存活、请求量、耗时、异常量</p></li><li><p>RPC 接口：请求量、耗时、超时量、拒绝量</p></li><li><p>JVM ：GC 次数、GC 耗时、各个内存区域的大小、当前线程数、死锁线程数</p></li><li><p>线程池：活跃线程数、任务队列大小、任务执行耗时、拒绝任务数</p></li><li><p>连接池：总连接数、活跃连接数</p></li><li><p>日志监控：访问日志、错误日志</p></li><li><p>业务指标：视业务来定，比如 PV、订单量等</p></li></ul></li></ul><h4 id="监控的基本流程了解吗？-1"><a href="#监控的基本流程了解吗？-1" class="headerlink" title="监控的基本流程了解吗？"></a>监控的基本流程了解吗？</h4><p>无论是开源的监控系统还是自研的监控系统，监控的整个流程大同小异，一般都包括以下模块：</p><ul><li><p><strong>数据采集：</strong>采集的方式有很多种，包括日志埋点进行采集（通过 Logstash、Filebeat 等进行上报和解析），JMX 标准接口输出监控指标，被监控对象提供 REST API 进行数据采集（如 Hadoop、ES），系统命令行，统一的 SDK 进行侵入式的埋点和上报等。</p></li><li><p><strong>数据传输：</strong>将采集的数据以 TCP、UDP 或者 HTTP 协议的形式上报给监控系统，有主动 Push 模式，也有被动 Pull 模式。</p></li><li><p><strong>数据存储：</strong>有使用 MySQL、Oracle 等 RDBMS 存储的，也有使用时序数据库 RRDTool、OpentTSDB、InfluxDB 存储的，还有使用 HBase 存储的。</p></li><li><p><strong>数据展示：</strong>数据指标的图形化展示。</p></li><li><p><strong>监控告警：</strong>灵活的告警设置，以及支持邮件、短信、IM 等多种通知通道。</p></li></ul><h4 id="监控系统需要满足什么要求？-1"><a href="#监控系统需要满足什么要求？-1" class="headerlink" title="监控系统需要满足什么要求？"></a>监控系统需要满足什么要求？</h4><ul><li><p><strong>实时监控&amp;告警 ：</strong>监控系统对业务服务系统实时监控，如果产生系统异常及时告警给相关人员。</p></li><li><p><strong>高可用 ：</strong>要保障监控系统的可用性</p></li><li><p><strong>故障容忍 ：</strong>监控系统不影响业务系统的正常运行，监控系统挂了，应用正常运行。</p></li><li><p><strong>可扩展 ：</strong>支持分布式、跨 IDC 部署，横向扩展。</p></li><li><p><strong>可视化 ：</strong>自带可视化图标、支持对接各类可视化组件比如 Grafana 。</p></li></ul><h4 id="监控系统技术选型有哪些？如何选择？-1"><a href="#监控系统技术选型有哪些？如何选择？-1" class="headerlink" title="监控系统技术选型有哪些？如何选择？"></a>监控系统技术选型有哪些？如何选择？</h4><h5 id="老牌监控系统-1"><a href="#老牌监控系统-1" class="headerlink" title="老牌监控系统"></a>老牌监控系统</h5><p>Zabbix 和 Nagios 相继出现在 1998 年和 1999 年，目前已经被淘汰，不太建议使用，Prometheus 是更好的选择。</p><h6 id="Zabbix-1"><a href="#Zabbix-1" class="headerlink" title="Zabbix"></a>Zabbix</h6><ul><li><p><strong>介绍 ：</strong>老牌监控的优秀代表。产品成熟，监控功能很全面，采集方式丰富（支持 Agent、SNMP、JMX、SSH 等多种采集方式，以及主动和被动的数据传输方式），使用也很广泛，差不多有 70%左右的互联网公司都曾使用过 Zabbix 作为监控解决方案。</p></li><li><p><strong>开发语言 ：</strong> C</p></li><li><p><strong>数据存储 ：</strong> Zabbix 存储在 MySQL 上，也可以存储在其他数据库服务。Zabbix 由于使用了关系型数据存储时序数据，所以在监控大规模集群时常常在数据存储方面捉襟见肘。所以从 Zabbix 4.2 版本后开始支持 TimescaleDB 时序数据库，不过目前成熟度还不高。</p></li><li><p><strong>数据采集方式 :</strong> Zabbix 通过 SNMP、Agent、ICMP、SSH、IPMI 等对系统进行数据采集。Zabbix 采用的是 Push 模型（客户端发送数据给服务端）。</p></li><li><p><strong>数据展示 ：</strong>自带展示界面，也可以对接 Grafana。</p></li><li><p><strong>评价 ：</strong>不太建议使用 Zabbix，性能可能会成为监控系统的瓶颈。并且，应用层监控支持有限、二次开发难度大（基于 c 语言）、数据模型不强大。</p></li></ul><p>相关阅读：<a href="http://www.sunrisenan.com/docs/zabbix" target="_blank" rel="noopener">《zabbix 运维手册》</a></p><h6 id="Nagios-1"><a href="#Nagios-1" class="headerlink" title="Nagios"></a>Nagios</h6><ul><li><p><strong>介绍 ：</strong>Nagios 能有效监控 Windows、Linux 和 UNIX 的主机状态（CPU、内存、磁盘等），以及交换机、路由器等网络设备（SMTP、POP3、HTTP 和 NNTP 等），还有 Server、Application、Logging，用户可自定义监控脚本实现对上述对象的监控。Nagios 同时提供了一个可选的基于浏览器的 Web 界面，以方便系统管理人员查看网络状态、各种系统问题以及日志等。</p></li><li><p><strong>开发语言 ：</strong> C</p></li><li><p><strong>数据存储 ：</strong> MySQL 数据库</p></li><li><p><strong>数据采集方式 :</strong> 通过各种插件采集数据</p></li><li><p><strong>数据展示 ：</strong>自带展示界面，不过功能简单。</p></li><li><p><strong>评价 ：</strong>不符合当前监控系统的要求，而且，Nagios 免费版本的功能非常有限，运维管理难度非常大。</p></li></ul><h5 id="新一代监控系统-1"><a href="#新一代监控系统-1" class="headerlink" title="新一代监控系统"></a>新一代监控系统</h5><p>相比于老牌监控系统，新一代监控系统有明显的优势，比如：灵活的数据模型、更成熟的时序数据库、强大的告警功能。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ed6dac3c-5e2b-43da-b1ab-b4716acabff4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h6 id="Open-Falcon-1"><a href="#Open-Falcon-1" class="headerlink" title="Open-Falcon"></a>Open-Falcon</h6><ul><li><strong>介绍 ：</strong>小米 2015 年开源的企业级监控工具，在架构设计上吸取了 Zabbix 的经验，同时很好地解决了 Zabbix 的诸多痛点。Github 地址：<a href="https://github.com/open-falcon" target="_blank" rel="noopener">https://github.com/open-falcon</a> 。官方文档：<a href="https://book.open-falcon.org/" target="_blank" rel="noopener">https://book.open-falcon.org/</a> 。</li><li><strong>开发语言 ：</strong>Go、Python。</li><li><strong>数据存储 ：</strong> 环型数据库，支持对接时序数据库 OpenTSDB。</li><li><strong>数据采集方式 :</strong> 自动发现，支持 falcon-agent、snmp、支持用户主动 push、用户自定义插件支持、opentsdb data model like（timestamp、endpoint、metric、key-value tags）。Open-Falcon 和 Zabbix 采用的都是 Push 模型（客户端发送数据给服务端）。</li><li><strong>数据展示 ：</strong>自带展示界面，也可以对接 Grafana。</li><li><strong>评价 ：</strong>用户集中在国内，流行度一般，生态一般。</li></ul><p>Open-Falcon 架构图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c1ab0b4c-1f26-4b0f-ae82-fee2b371fbb3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li><strong>Falcon-agent ：</strong>采集模块。类似 Zabbix 的 agent，Kubernetes 自带监控体系中的 cAdvisor，Nagios 中的 Plugin，使用 Go 语言开发，用于采集主机上的各种指标数据。</li><li><strong>Hearthbeat server ：</strong>心跳服务。每个 Agent 都会周期性地通过 RPC 方式将自己地状态上报给 HBS，主要包括主机名、主机 IP、Agent 版本和插件版本，Agent 还会从 HBS 获取自己需要执行的采集任务和自定义插件。</li><li><strong>Transfer ：</strong>负责监控 agent 发送的监控数据，并对数据进行处理，在过滤后通过一致性 Hash 算法将数据发送到 Judge 或者 Graph。为了支持存储大量的历史数据，Transfer 还支持 OpenTSDB。Transfer 本身没有状态，可以随意扩展。</li><li><strong>Jedge ：</strong>告警模块。Transfer 转发到 Judge 的数据会触发用户设定的告警规则，如果满足，则会触发邮件、微信或者回调接口。这里为了避免重复告警，引入了 Redis 暂存告警，从而完成告警合并和抑制。</li><li><strong>Graph ：</strong>RRD 数据上报、归档、存储的组件。Graph 在收到数据以后，会以 RRDtool 的数据归档方式存储数据，同时提供 RPC 方式的监控查询接口。</li><li><strong>API ：</strong> 查询模块。主要提供查询接口，不但可以从 Grapg 里面读取数据，还可以对接 MySQL，用于保存告警、用户等信息。</li><li><strong>Dashboard ：</strong> 监控数据展示面板。由 Python 开发而成，提供 Open-Falcon 的数据和告警展示，监控数据来自 Graph，Dashboard 允许用户自定义监控面板。</li><li><strong>Aggregator :</strong> 聚合模块。聚合某集群下所有机器的某个指标的值，提供一种集群视角的监控体验。 通过定时从 Graph 获取数据，按照集群聚合产生新的监控数据并将监控数据发送到 Transfer。</li></ul><h6 id="Prometheus-1"><a href="#Prometheus-1" class="headerlink" title="Prometheus"></a>Prometheus</h6><ul><li><strong>介绍 ：</strong>Prometheus 受启发于 Google 的 Brogmon 监控系统，由前 Google 员工 2015 年正式发布。截止到 2021 年 9 月 2 日，Prometheus 在 Github 上已经收获了 38.5k+ Star，600+位 Contributors。 Github 地址：<a href="https://github.com/prometheus" target="_blank" rel="noopener">https://github.com/prometheus</a> 。</li><li><strong>开发语言 ：</strong>Go</li><li><strong>数据存储 ：</strong> Prometheus 自研一套高性能的时序数据库，并且还支持外接时序数据库。</li><li><strong>数据采集方式 :</strong> Prometheus 的基本原理是通过 HTTP 协议周期性抓取被监控组件的状态，任意组件只要提供对应的 HTTP 接口就可以接入监控。Prometheus 在收集数据时，采用的 Pull 模型（服务端主动去客户端拉取数据）</li><li><strong>数据展示 ：</strong>自带展示界面，也可以对接 Grafana。</li><li><strong>评价 ：</strong>目前国内外使用最广泛的一个监控系统，生态也非常好，成熟稳定！</li></ul><p><strong>Prometheus 特性 ：</strong></p><ul><li>开箱即用的各种服务发现机制，可以<strong>自动发现监控端点</strong>；</li><li>专为监控指标数据设计的<strong>高性能时序数据库 TSDB</strong>；</li><li>强大易用的查询语言<strong>PromQL</strong>以及丰富的<strong>聚合函数</strong>；</li><li>可以配置灵活的告警规则，<strong>支持告警收敛（分组、抑制、静默）、多级路由</strong>等等高级功能；</li><li><strong>生态完善</strong>，有各种现成的开源 Exporter 实现，实现自定义的监控指标也非常简单。</li></ul><p>Prometheus 基本架构 ：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ebc3adcf-bfc0-48bd-ad3e-2fc12242fb63.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><ul><li>Prometheus Server：核心组件，用于收集、存储监控数据。它同时支持静态配置和通过 Service Discovery 动态发现来管理监控目标，并从监控目标中获取数据。此外，Prometheus Server 也是一个时序数据库，它将监控数据保存在本地磁盘中，并对外提供自定义的 PromQL 语言实现对数据的查询和分析。</li><li>Exporter：用来采集数据，作用类似于 agent，区别在于 Prometheus 是基于 Pull 方式拉取采集数据的，因此，Exporter 通过 HTTP 服务的形式将监控数据按照标准格式暴露给 Prometheus Server，社区中已经有大量现成的 Exporter 可以直接使用，用户也可以使用各种语言的 client library 自定义实现。</li><li>Push gateway：主要用于瞬时任务的场景，防止 Prometheus Server 来 pull 数据之前此类 Short-lived jobs 就已经执行完毕了，因此 job 可以采用 push 的方式将监控数据主动汇报给 Push gateway 缓存起来进行中转。</li><li>当告警产生时，Prometheus Server 将告警信息推送给 Alert Manager，由它发送告警信息给接收方。</li><li>Prometheus 内置了一个简单的 web 控制台，可以查询配置信息和指标等，而实际应用中我们通常会将 Prometheus 作为 Grafana 的数据源，创建仪表盘以及查看指标。</li></ul><p>推荐一本 Prometheus 的开源书籍<a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">《Prometheus 操作指南》</a>。</p><h4 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h4><ul><li>监控是一项长期建设的事情，一开始就想做一个 All In One 的监控解决方案，我觉得没有必要。从成本角度考虑，在初期直接使用开源的监控方案即可，先解决有无问题。 </li><li>Zabbix、Open-Falcon 和 Prometheus 都支持和 Grafana 做快速集成，想要美观且强大的可视化体验，可以和 Grafana 进行组合。 </li><li>Open-Falcon 的核心优势在于数据分片功能，能支撑更多的机器和监控项；Prometheus 则是容器监控方面的标配，有 Google 和 k8s 加持。</li></ul><h3 id="日志系统常见面试题总结"><a href="#日志系统常见面试题总结" class="headerlink" title="日志系统常见面试题总结"></a><strong>日志系统常见面试题总结</strong></h3><p>因为日志系统在询问项目经历的时候经常会被问到，所以，我就写了这篇文章。</p><p>这是一篇日志系统常见概念的扫盲篇~不会涉及到具体架构的日志系统的搭建过程。旨在帮助对于日志系统不太了解的小伙伴，普及一些日志系统常见的概念。</p><h4 id="何为日志？-1"><a href="#何为日志？-1" class="headerlink" title="何为日志？"></a>何为日志？</h4><p>在我看来，日志就是系统对某些行为的一些记录，这些行为包括：系统出现错误（定位问题、解决问题）、记录关键的业务信息（定位问题、解决问题）、记录操作行为（保障安全）等等。</p><p>按照较为官方的话来说：“日志是带时间戳的基于时间序列的机器数据，包括 IT 系统信息（服务器、网络设备、操作系统、应用软件）、物联网各种传感器信息。日志可以反映用户/机器的行为，是真实的数据”。</p><h4 id="为何要用日志系统？-1"><a href="#为何要用日志系统？-1" class="headerlink" title="为何要用日志系统？"></a>为何要用日志系统？</h4><p>没有日志系统之前，我们的日志可能分布在多台服务器上。每次需要查看日志，我们都需要登录每台机器。然后，使用 grep、wc 等 Linux 命令来对日志进行搜索。这个过程是非常麻烦并且耗时的！并且，日志量不大的时候，这个速度还能忍受。当日志量比较多的时候，整个过程就是非常慢。</p><p>从上面我的描述中，你已经发现，没有对日志实现集中管理，主要给我们带来了下面这几点问题：</p><ol><li><p>开发人员登录线上服务器查看日志比较麻烦并且存在安全隐患</p></li><li><p>日志数据比较分散，难以维护，不方便检索。</p></li><li><p>日志数量比较大的时候，查询速度比较慢。</p></li><li><p>无法对日志数据进行可视化展示。</p></li></ol><p><strong>日志系统就是为了对日志实现集中管理。它也是一个系统，不过主要是负责处理日志罢了。</strong></p><h4 id="一个最基本的日志系统要做哪些事情？-1"><a href="#一个最基本的日志系统要做哪些事情？-1" class="headerlink" title="一个最基本的日志系统要做哪些事情？"></a>一个最基本的日志系统要做哪些事情？</h4><p>为了解决没有日志系统的时候，存在的一些问题，一直最基本的 <strong>日志系统需要做哪些事情呢？</strong></p><ol><li><strong>采集日志 ：</strong>支持多种日志格式以及数据源的采集。</li><li><strong>日志数据清洗/处理 ：</strong>采集到的原始日志数据需要首先清洗/处理一波。</li><li><strong>存储 ：</strong>为了方便对清洗后的日志进行处理，我们可以对接多种存储方式比如 ElasticSearch（日志检索） 、Hadoop(离线数据分析)。</li><li><strong>展示与搜素 ：</strong>支持可视化地展示日志，并且能够根据关键词快速的定位到日志并查看日志上下文。</li><li><strong>告警 ：</strong>支持对接常见的监控系统。</li></ol><p>我专门画了一张图，展示一下日志系统处理日志的一个基本流程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d60f05c9-ca74-479b-88ae-af5eb102b9c3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>另外，一些比较高大上的日志系统甚至还支持 <strong>实时分析、离线分析</strong> 等功能。</p><h4 id="ELK-了解么？-1"><a href="#ELK-了解么？-1" class="headerlink" title="ELK 了解么？"></a>ELK 了解么？</h4><p>ELK 是目前使用的比较多的一个开源的日志系统解决方案，背靠是 <a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elastic</a> 这家专注搜索的公司。</p><h5 id="ELK-老三件套-1"><a href="#ELK-老三件套-1" class="headerlink" title="ELK 老三件套"></a>ELK 老三件套</h5><p>最原始的时候，ELK 是由 3 个开源项目的首字母构成，分别是 <strong>E</strong>lasticsearch 、<strong>L</strong>ogstash、<strong>K</strong>ibana。</p><p>下图是一个最简单的 <strong>ELK 日志系统架构</strong> ：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b5a4c9e8-a55b-4efb-8f61-f92c5d8e4bc8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我们分别来介绍一下这些开源项目以及它们在这个日志系统中起到的作用：</p><ul><li><strong>Logstash ：</strong>Logstash 主要用于日志的搜集、分析和过滤，支持对多种日志类型进行处理。在 ELK 日志系统中，Logstash 负责日志的收集和清洗。</li><li><strong>Elasticsearch ：</strong>ElasticSearch 一款使用 <strong>Java</strong> 语言开发的搜索引擎，基于 <strong>Lucence</strong> 。可以解决使用数据库进行模糊搜索时存在的性能问题，提供海量数据近实时的检索体验。在 ELK 日志系统中，Elasticsearch 负责日志的搜素。</li><li><strong>Kibana ：</strong>Kibana 是专门设计用来与 Elasticsearch 协作的，可以自定义多种表格、柱状图、饼状图、折线图对存储在 Elasticsearch 中的数据进行深入挖掘分析与可视化。 ELK 日志系统中，Logstash 主要负责对从 Elasticsearch 中搜索出来的日志进行可视化展示。</li></ul><h5 id="新一代-ELK-架构-1"><a href="#新一代-ELK-架构-1" class="headerlink" title="新一代 ELK 架构"></a>新一代 ELK 架构</h5><p>ELK 属于比较老牌的一款日志系统解决方案，这个方案存在一个问题就是：<strong>Logstash 对资源消耗过高。</strong></p><p>于是， Elastic 推出了 Beats 。Beats 基于名为<a href="https://github.com/elastic/beats/tree/master/libbeat" target="_blank" rel="noopener">libbeat</a>的 Go 框架，一共包含 8 位成员。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\32257905-0f0a-429a-8315-e0c9fb8c83bf.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>这个时候，ELK 已经不仅仅代表 <strong>E</strong>lasticsearch 、<strong>L</strong>ogstash、<strong>K</strong>ibana 这 3 个开源项目了。</p><p>Elastic 官方将 ELK 重命名为 <strong>Elastic Stack</strong>（Elasticsearch、Kibana、Beats 和 Logstash）。但是，大家目前仍然习惯将其成为 ELK 。</p><p>Elastic 的官方文档是这样描述的（由 Chrome 插件 Mate Translate 提供翻译功能）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d08cb78d-c819-4e89-ac8e-066ebb8f6e73.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>现在的 ELK 架构变成了这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\fce86b2a-3f29-46ec-9b4c-d4962614253f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Beats 采集的数据可以直接发送到 Elasticsearch 或者在 Logstash 进一步处理之后再发送到 Elasticsearch。</p><p>Beats 的诞生，也大大地扩展了老三件套版本的 ELK 的功能。Beats 组件除了能够通过 Filebeat 采集日志之外，还能通过 Metricbeat 采集服务器的各种指标，通过 Packetbeat 采集网络数据。</p><p>我们不需要将 Beats 都用上，一般对于一个基本的日志系统，只需要 <strong>Filebeat</strong> 就够了。</p><p>根据<a href="https://www.elastic.co/cn/beats/filebeat" target="_blank" rel="noopener">Filebeat 官方介绍</a>：</p><blockquote><p>Filebeat 是一个轻量型日志采集器。无论您是从安全设备、云、容器、主机还是 OT 进行数据收集，Filebeat 都将为您提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。</p></blockquote><p>Filebeat 是 Elastic Stack 的一部分，能够与 Logstash、Elasticsearch 和 Kibana 无缝协作。</p><p>Filebeat 能够轻松地将数据传送到 Logstash（对日志进行处理）、Elasticsearch（日志检索）、甚至是 Kibana （日志展示）中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\67a45c57-5cea-40a2-9cae-3f428b4cfa77.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Filebeat 只是对日志进行采集，无法对日志进行处理。日志具体的处理往往还是要交给 Logstash 来做。</p><p>更多关于 Filebeat 的内容，你可以看看 <a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html" target="_blank" rel="noopener">Filebeat 官方文档教程</a>。</p><h5 id="Filebeat-Logstash-Elasticsearch-Kibana-架构概览-1"><a href="#Filebeat-Logstash-Elasticsearch-Kibana-架构概览-1" class="headerlink" title="Filebeat+Logstash+Elasticsearch+Kibana 架构概览"></a>Filebeat+Logstash+Elasticsearch+Kibana 架构概览</h5><p>下图一个最基本的 Filebeat+Logstash+Elasticsearch+Kibana 架构图，图片来源于：<a href="https://www.technolush.com/blog/the-elk-stack-using-filebeat" target="_blank" rel="noopener">《The ELK Stack ( Elasticsearch, Logstash, and Kibana ) Using Filebeat》</a>。</p><p>Filebeat 替代 Logstash 采集日志，具体的日志处理还是由 Logstash 来做。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\69a5f9a4-63c8-440a-9bc9-04d3f0809c91.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>针对上图的日志系统架构图，有下面几个可优化点：</p><ol><li>在 Kibana 和用户之间，使用 Nginx 来做反向代理，免用户直接访问 Kibana 服务器，提高安全性。</li><li>Filebeat 和 Logstash 之间增加一层消息队列比如 Kafka、RabbitMQ。Filebeat 负责将收集到的数据写入消息队列，Logstash 取出数据做进一步处理。</li></ol><h5 id="EFK-1"><a href="#EFK-1" class="headerlink" title="EFK"></a>EFK</h5><p>EFK 中的 F 代表的是 <a href="https://github.com/fluent/fluentd" target="_blank" rel="noopener">Fluentd</a>。下图是一个最简单的 <strong>EFK 日志系统架构</strong> ：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\8376b3c6-ab90-40a4-bcf5-29e9d7f95fe6.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Fluentd 是一款开源的日志收集器，使用 Ruby 编写，其提供的功能和 Logstash 差不多。但是，要更加轻量，性能也更优越，内存占用也更低。具体使用教程，可以参考<a href="https://mp.weixin.qq.com/s/sXYDIJpIhPsVGNkSCIaNfQ" target="_blank" rel="noopener">《性能优越的轻量级日志收集工具，微软、亚马逊都在用！》</a>。</p><h4 id="轻量级日志系统-Loki-1"><a href="#轻量级日志系统-Loki-1" class="headerlink" title="轻量级日志系统 Loki"></a>轻量级日志系统 Loki</h4><p>上面介绍到的 ELK 日志系统方案功能丰富，稳定可靠。不过，对资源的消耗也更大，成本也更高。而且，用过 ELK 日志系统的小伙伴肯定会发现其实很多功能压根都用不上。</p><p>因此，就有了 Loki，这是一个 Grafana Labs 团队开源的小巧易用的日志系统，原生支持 Grafana。</p><p>并且，Loki 专门为 Prometheus 和 Kubernetes 用户做了相关优化比如 Loki 特别适合存储Kubernetes Pod 日志。</p><blockquote><p>项目地址：<a href="https://github.com/grafana/loki/" target="_blank" rel="noopener">https://github.com/grafana/loki/</a></p></blockquote><p>官方的介绍也比较有意思哈！ Like Prometheus,But For Logs. （类似于 Prometheus 的日志系统，不过主要是为日志服务的）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b1fc2871-5d5a-4127-a139-359b80e6156d.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>根据官网 ，Loki 的架构如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\851b4a8c-723d-4814-825e-e6da2b408dc3.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>Loki 的整个架构非常简单，主要有 3 个组件组成：</p><ul><li>Loki 是主服务器，负责存储日志和处理查询。</li><li>Promtail 是代理，负责收集日志并将其发送给 Loki 。</li><li>Grafana 用于 UI 展示。</li></ul><p>Loki 提供了详细的使用文档，上手相对来说比较容易。并且，目前其流行度还是可以的。你可以很方便在网络上搜索到有关 Loki 的博文。</p><h4 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h4><p>这篇文章我主要介绍了日志系统相关的知识，包括：</p><ul><li><p>何为日志？</p></li><li><p>为何要用日志系统？一个基本的日志系统要做哪些事情？</p></li><li><p>ELK、EFK</p></li><li><p>轻量级日志系统 Loki</p></li></ul><p>另外，大部分图片都是我使用 draw.io 来绘制的。一些技术名词的图标，我们可以直接通过 Google 图片搜索即可，方法： 技术名词+图标（示例：Logstash icon）</p><h4 id="参考-13"><a href="#参考-13" class="headerlink" title="参考"></a>参考</h4><ol><li><p>ELK 架构和 Filebeat 工作原理详解：<a href="https://developer.ibm.com/zh/articles/os-cn-elk-filebeat/" target="_blank" rel="noopener">https://developer.ibm.com/zh/articles/os-cn-elk-filebeat/</a></p></li><li><p>ELK Introduction-elastic 官方 ：<a href="https://elastic-stack.readthedocs.io/en/latest/introduction.html" target="_blank" rel="noopener">https://elastic-stack.readthedocs.io/en/latest/introduction.html</a></p></li><li><p>ELK Stack Tutorial: Learn Elasticsearch, Logstash, and Kibana ：<a href="https://www.guru99.com/elk-stack-tutorial.html" target="_blank" rel="noopener">https://www.guru99.com/elk-stack-tutorial.html</a></p></li></ol><h1 id="三、技术面试题自测篇"><a href="#三、技术面试题自测篇" class="headerlink" title="三、技术面试题自测篇"></a>三、技术面试题自测篇</h1><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><blockquote><p> 可选标题：面了一个应届生，我问了这些 Java 基础问题。</p></blockquote><p><strong>Java 中有哪 8 种基本数据类型？它们的默认值和占用的空间大小知道不？ 说说这 8 种基本数据类型对应的包装类型。</strong></p><p>💡 提示：Java 中有 8 种基本数据类型，分别为：</p><ol><li>6 种数字类型 ：byte、short、int、long、float、double</li><li>1 种字符类型：char</li><li>1 种布尔型：boolean。</li></ol><p><strong>包装类型的常量池技术了解么？</strong></p><p>💡 提示：Java 基本类型的包装类的大部分（Byte,Short,Integer,Long ,Character,Boolean）都实现了常量池技术。</p><p>🌈 拓展：整型包装类对象之间值的比较应该使用 equals 方法</p><p><strong>为什么要有包装类型？</strong></p><p>💡 提示： 基本类型有默认值、泛型参数不能是基本类型</p><p><strong>什么是自动拆装箱？原理？</strong></p><p>💡 提示：基本类型和包装类型之间的互转。装箱其实就是调用了 包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。</p><p><strong>遇到过自动拆箱引发的 NPE 问题吗？</strong></p><p>💡 提示：两个常见的场景：</p><ul><li>数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险</li><li>三目运算符使用不当会导致诡异的 NPE 异常</li></ul><p><strong>String、StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</strong></p><p>💡 提示：可以从可变性、线程安全性、性能这几个角度来回答。</p><p><strong>重载和重写的区别？</strong></p><p>💡 提示：可以从下面几个角度来回答：</p><ul><li>发生范围</li><li>参数列表</li><li>返回值类型</li><li>异常</li><li>访问修饰符</li><li>发生阶段</li></ul><p><strong>== 和 equals() 的区别</strong></p><p>💡 提示：== 对于基本类型和引用类型的作用效果是不同的，equals() 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals() 方法存在两种使用情况：</p><ul><li>类没有重写 equals()方法 ：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。</li><li>类重写了 equals()方法 ：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><p><strong>Java 反射？反射有什么优点/缺点？你是怎么理解反射的（为什么框架需要反射）？</strong></p><p>💡 提示： 想想你平时使用框架为啥能够如此方便。想想动态代理以及注解和反射之间的关系。</p><p><strong>谈谈对 Java 注解的理解，解决了什么问题？</strong></p><p>💡 提示： 想想你平时使用框架为啥能够如此方便。另外，需要注意注解的解析依赖于反射机制，务必要提前把反射机制搞懂。</p><p><strong>Java 泛型了解么？泛型的作用？什么是类型擦除？泛型有哪些限制？介绍一下常用的通配符？</strong></p><p>💡 提示：</p><ul><li>好处：编译期间的类型检测（安全）、可读性更好</li><li>Java 的泛型是伪泛型</li></ul><p><strong>内部类了解吗？匿名内部类了解吗？</strong></p><p>内部类分为下面 4 种：</p><ul><li>成员内部类</li><li>静态内部类</li><li>局部（方法）内部类</li><li>匿名内部类</li></ul><p><strong>BIO,NIO,AIO 有什么区别?</strong></p><p>IO 模型这块挺难理解的，需要很多计算机底层知识。建议小伙伴们克服困难，一定要把这个点搞明白。</p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a><strong>Java 集合</strong></h2><p><strong>说说 List,Set,Map 三者的区别？</strong></p><p>💡 提示：可以从这些数据结构中的元素是否有序、是否可以重复、存储的元素类型（比如 Map 存储的就是键值对）等方面来回答。</p><p><strong>List,Set,Map 在 Java 中分别由哪些对应的实现类？底层的数据结构？</strong></p><p>💡 提示：拿 List 来举例， List 的常见实现类以及它们的数据结构 ：</p><ul><li>ArrayList： Object[]数组</li><li>Vector：Object[]数组</li><li>LinkedList： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)</li></ul><p><strong>有哪些集合是线程不安全的？怎么解决呢？</strong></p><p>💡 提示：这块比较常问的是 Arraylist 和 Vector 、HashMap 和 ConcurrentHashMap（高频问题，重要） 。被问到 Vector 的时候， 你紧接着可能会被问到 Arraylist 和 Vector 的区别。被问到 ConcurrentHashMap 的时候，你紧接着就可能会被问到 ConcurrentHashMap 相关的问题比如 ConcurrentHashMap 是如何保证线程安全的。</p><p><strong>HashMap 查询，删除的时间复杂度</strong></p><p>💡 提示：</p><ul><li>没有哈希冲突的情况</li><li>转链表的情况</li><li>链表转红黑树的情况</li></ul><p><strong>HashMap 的底层实现</strong></p><p>💡 提示：</p><ul><li>JDK1.8 之前 ： 数组和链表</li><li>JDK1.8 之后 ： 多了红黑树</li></ul><p><strong>HashMap 的长度为什么是 2 的幂次方</strong></p><p>💡 提示：提高运算效率。</p><p><strong>比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</strong></p><p>💡 提示：</p><ul><li>HashSet、LinkedHashSet 和 TreeSet 都是 Set 接口的实现类，都能保证元素唯一，并且都不是线程安全的。</li><li>HashSet、LinkedHashSet 和 TreeSet 的主要区别在于底层数据结构不同（底层数据结构不同又导致这三者的应用场景不同）。</li></ul><p><strong>HashMap 和 Hashtable 的区别？HashMap 和 HashSet 区别？HashMap 和 TreeMap 区别？</strong></p><p><strong>ConcurrentHashMap 和 Hashtable 的区别？</strong></p><p>💡 提示：</p><ul><li>底层数据结构</li><li>实现线程安全的方式的区别</li></ul><p><strong>ConcurrentHashMap 线程安全的具体实现方式/底层具体实现</strong></p><p>💡 提示：</p><ul><li>JDK 1.7 ：Segment 分段锁</li><li>JDK 1.8 ： CAS 和 synchronized</li></ul><h2 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a><strong>Java并发</strong></h2><p><strong>什么是线程和进程?线程与进程的关系,区别及优缺点？⭐⭐⭐⭐</strong></p><p>💡 提示：可以从从 JVM 角度说进程和线程之间的关系</p><p><strong>为什么要使用多线程呢? ⭐⭐⭐</strong></p><p>💡 提示：从计算机角度来说主要是为了充分利用多核 CPU 的能力，从项目角度来说主要是为了提升系统的性能。</p><p><strong>说说线程的生命周期和状态? ⭐⭐⭐⭐</strong></p><p>💡 提示： 6 种状态（NEW、RUNNABLE、BLOCKED、WAITING、TIME_WAITING、TERMINATED）。</p><p>🌈 拓展：在操作系统中层面线程有 READY 和 RUNNING 状态，而在 JVM 层面只能看到 RUNNABLE 状态。</p><p><strong>什么是线程死锁?如何避免死锁?如何预防和避免线程死锁? ⭐⭐⭐⭐</strong></p><p>💡 提示： 这里最好能够结合代码来聊，你要确保自己可以写出有死锁问题的代码。</p><p>🌈 拓展：项目中遇到死锁问题是比较常见的，除了要搞懂上面这些死锁的基本概念之外，你还要知道线上项目遇到死锁问题该如何排查和解决。</p><p><strong>synchronized 关键字 ⭐⭐⭐⭐⭐</strong></p><p>💡 提示：synchronized 关键字几乎是面试必问，你需要搞懂下面这些 synchronized 关键字相关的问题：</p><ul><li>synchronized 关键字的作用，自己是怎么使用的。 </li><li>synchronized 关键字的底层原理（重点！！！） </li><li>JDK1.6 之后的 synchronized 关键字底层做了哪些优化。synchronized 锁升级流程。 </li><li>synchronized 和 ReentrantLock 的区别。 </li><li>synchronized 和 volatile 的区别。 </li></ul><p><strong>并发编程的三个重要特性 ⭐⭐⭐⭐⭐</strong> </p><p>💡 提示： 原子性、可见性、有序性</p><p><strong>JMM（Java Memory Model，Java 内存模型）和 happens-before 原则。 ⭐⭐⭐⭐⭐</strong></p><p><strong>volatile 关键字 ⭐⭐⭐⭐⭐</strong></p><p>💡 提示：volatile 关键字同样是一个重点！结合 JMM（Java Memory Model，Java 内存模型）和 happens-before 原则来回答就行了。</p><p><strong>ThreadLocal 关键字 ⭐⭐⭐⭐⭐</strong></p><p>💡 提示：关注ThreadLocal的底层原理、内存泄露问题以及自己是如何在项目中使用ThreadLocal关键字的。</p><p><strong>线程池 ⭐⭐⭐⭐⭐</strong></p><p>💡 提示：线程池有哪几种，各种线程池的优缺点，线程池的重要参数、线程池的执行流程、线程池的饱和策略、如何设置线程池的大小等等。</p><p><strong>ReentrantLock 和 AQS ⭐⭐⭐⭐⭐</strong></p><p>💡 提示： ReentrantLock 的特性、实现原理（基于 AQS）。可以从 ReentrantLock 的实现来理解 AQS。</p><p><strong>乐观锁和悲观锁的区别 ⭐⭐⭐⭐⭐</strong></p><p><strong>CAS 了解么？原理？什么是 ABA 问题？ABA 问题怎么解决？ ⭐⭐⭐⭐⭐</strong></p><p>💡 提示：多地方都用到了 CAS 比如 ConcurrentHashMap 采用 CAS 和 synchronized 来保证并发安全，再比如java.util.concurrent.atomic包中的类通过 volatile+CAS 重试保证线程安全性。和面试官聊 CAS 的时候，你可以结合 CAS 的一些实际应用来说。</p><p><strong>Atomic 原子类 ⭐⭐</strong></p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><strong>JVM</strong></h2><blockquote><p>如非特殊说明，本文主要针对的就是 HotSpot VM 。</p></blockquote><p><strong>运行时数据区中包含哪些区域？哪些线程共享？哪些线程独享？哪些区域可能会出现OutOfMemoryError？哪些区域不会出现OutOfMemoryError?【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：把下面两张图记在心里！并且，你还要搞懂这些区域大概的作用是什么。</p><p><strong>JDK 1.8 之前：</strong>    </p><p><img src="F:%5C%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97%5C%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97.assets%5Ccfa7b253-92a7-4d97-b646-04e6b7be6254.png" alt="img"></p><p><strong>JDK 1.8 ：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\008c1c0d-0c5c-44c3-ba70-011e87f622d5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>线程私有的：程序计数器、虚拟机栈、本地方法栈</p><p>线程共享的：堆、方法区、直接内存 (非运行时数据区的一部分)</p><p><strong>说一下方法区和永久代的关系。【⭐⭐⭐】</strong></p><p>💡 提示：其实就有点像 Java 中接口和类的关系。</p><p><strong>Java 对象的创建过程。【⭐⭐⭐⭐】</strong></p><p>💡 提示：下图便是 Java 对象的创建过程，我建议最好是能默写出来，并且要掌握每一步在做什么。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\fa59f2d2-f8e4-48f0-b37d-51ac52428672.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>对象的访问定位的两种方式知道吗？各有什么优缺点。【⭐⭐⭐⭐】</strong></p><p>💡 提示：句柄和直接指针。</p><p><strong>如何判断对象是否死亡（两种方法）。 讲一下可达性分析算法的流程。 【⭐⭐⭐⭐】</strong></p><p><strong>JDK 中有几种引用类型？分别的特点是什么？【⭐⭐】</strong></p><p>💡 提示：JDK1.2 以后，Java 对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用四种（引用强度逐渐减弱）。对这些概念简单了解，有印象就可以了。</p><p><strong>堆空间的基本结构了解吗？什么情况下对象会进入老年代？【⭐⭐⭐⭐⭐】</strong></p><p>提示：</p><ol><li>大部分情况，对象都会首先在 Eden 区域分配。</li><li>长期存活的对象将进入老年代。</li><li>大对象直接进入老年代。</li></ol><p>🌈 拓展：动态对象年龄判定。</p><p><strong>垃圾收集有哪些算法，各自的特点？【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\c751e247-d0dd-415c-bdd0-f7e5404b4c0a.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>有哪些常见的 GC?谈谈你对 Minor GC、还有 Full GC 的理解。Minor GC 与 Full GC 分别在什么时候发生？ Minor GC 会发生 stop the world 现象吗？【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：</p><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><p><strong>讲一下 CMS 垃圾收集器的四个步骤。CMS 有什么缺点？【⭐⭐⭐⭐】</strong></p><p>💡 提示：初始标记、并发标记、重新标记、并发清除。</p><p><strong>并发标记要解决什么问题？并发标记带来了什么问题？如何解决并发扫描时对象消失问题？【⭐⭐⭐⭐】</strong></p><p>相关阅读：<a href="https://juejin.cn/post/6844904070788939790" target="_blank" rel="noopener">面试官:你说你熟悉 jvm?那你讲一下并发的可达性分析</a> 。</p><p><strong>G1 垃圾收集器的步骤。有什么缺点？【⭐⭐⭐⭐】</strong></p><p>💡 提示：和 CMS 类似。</p><p><strong>ZGC 了解吗？【⭐⭐⭐⭐】</strong></p><p>💡 提示： <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener">新一代垃圾回收器 ZGC 的探索与实践(opens new window)</a></p><p><strong>JVM 中的安全点和安全区各代表什么？写屏障你了解吗？【⭐⭐⭐】</strong></p><p><strong>虚拟机基础故障处理工具有哪些？【⭐⭐⭐】</strong></p><p>💡 提示： 简单了解几个最重要的即可！</p><p><strong>什么是字节码？类文件结构的组成了解吗？【⭐⭐⭐⭐】</strong></p><p>💡 提示：在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件）。</p><p>ClassFile 的结构如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic; //Class 文件的标志</span><br><span class="line">    u2             minor_version;//Class 的小版本号</span><br><span class="line">    u2             major_version;//Class 的大版本号</span><br><span class="line">    u2             constant_pool_count;//常量池的数量</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];//常量池</span><br><span class="line">    u2             access_flags;//Class 的访问标记</span><br><span class="line">    u2             this_class;//当前类</span><br><span class="line">    u2             super_class;//父类</span><br><span class="line">    u2             interfaces_count;//接口</span><br><span class="line">    u2             interfaces[interfaces_count];//一个类可以实现多个接口</span><br><span class="line">    u2             fields_count;//Class 文件的字段属性</span><br><span class="line">    field_info     fields[fields_count];//一个类会可以有多个字段</span><br><span class="line">    u2             methods_count;//Class 文件的方法数量</span><br><span class="line">    method_info    methods[methods_count];//一个类可以有个多个方法</span><br><span class="line">    u2             attributes_count;//此类的属性表中的属性数</span><br><span class="line">    attribute_info attributes[attributes_count];//属性表集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类的生命周期？类加载的过程了解么？加载这一步主要做了什么事情？初始化阶段中哪几种情况必须对类初始化？【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images-1666097216937197" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>双亲委派模型了解么？如果我们不想用双亲委派模型怎么办？【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：可以参考 Tomcat 的自定义类加载器 WebAppClassLoader</p><p><strong>双亲委派模型有什么好处？双亲委派模型是为了保证一个 Java 类在 JVM 中是唯一的？ 【⭐⭐⭐⭐⭐】</strong></p><p><strong>JDK 中有哪些默认的类加载器？ 【⭐⭐⭐⭐】</strong></p><p>💡 提示：</p><p>JVM 中内置了三个重要的 ClassLoader，除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader：</p><ol><li>BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，负责加载 %JAVA_HOME%/lib目录下的 jar 包和类或者被 -Xbootclasspath参数指定的路径中的所有类。</li><li>ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类，或被 java.ext.dirs 系统变量所指定的路径下的 jar 包。</li><li>AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li></ol><p><strong>堆内存相关的 JVM 参数有哪些？你在项目中实际配置过了吗？ 【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：一定要自己动手操作一下。</p><p>相关问题：</p><ul><li>如何设置年轻代和老年代的大小？</li><li>如何调整调整新生代和老年代的比值？</li><li>……</li></ul><p><strong>如何对栈进行参数调优？【⭐⭐⭐⭐】</strong></p><p><strong>你在项目中遇到过 GC 问题吗？怎么分析和解决的？【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示：比较有含金量的问题！比较能反映出求职者的水平，应该重点准备。</p><p>相关阅读：<a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html" target="_blank" rel="noopener">Java 中 9 种常见的 CMS GC 问题分析与解决</a></p><p><strong>GC 性能指标了解吗？调优原则呢？【⭐⭐⭐⭐⭐】</strong></p><ul><li>GC 性能指标通常关注吞吐量、停顿时间和垃圾回收频率。</li><li>GC 优化的目标就是降低 Full GC 的频率以及减少 Full GC 的执行时间。</li></ul><p><strong>如何降低 Full GC 的频率？【⭐⭐⭐⭐⭐】</strong></p><p>💡 提示： 可以通过减少进入老年代的对象数量可以显著降低 Full GC 的频率。如何减少进入老年代的对象数量呢？JVM 垃圾回收这部分有提到过。</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h2><blockquote><p>注意!!! ：下面这些问题的参考答案你几乎都可以在 <a href="https://javaguide.cn/database/mysql/mysql-questions-01.html" target="_blank" rel="noopener">JavaGuide 在线阅读网站</a> 和 《JavaGuide 面试指北》中找到。并且，这两个参考资料没有给出解答的问题，我也都给了对应的参考文章。</p><p>建议你先阅读学习了对应的内容之后再进行自测。</p></blockquote><h3 id="MySQL-基础架构"><a href="#MySQL-基础架构" class="headerlink" title="MySQL 基础架构"></a>MySQL 基础架构</h3><h4 id="说说-MySQL-的架构？"><a href="#说说-MySQL-的架构？" class="headerlink" title="说说 MySQL 的架构？"></a>说说 MySQL 的架构？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：面试官一般不会直接问你 MySQL 基础架构，通常会由“一个 SQL 语句在 MySQL 中的执行流程”类似的问题引出。</p><p>你需要搞懂下图每一个组件所提供的主要功能。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cf5f999b-c873-431a-90fb-20a3499433e8.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="一条-SQL语句在MySQL中的执行过程"><a href="#一条-SQL语句在MySQL中的执行过程" class="headerlink" title="一条 SQL语句在MySQL中的执行过程"></a>一条 SQL语句在MySQL中的执行过程</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：结合 MySQL 的基础架构来回答这个问题。</p><h3 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h3><h4 id="MySQL-提供了哪些存储引擎？"><a href="#MySQL-提供了哪些存储引擎？" class="headerlink" title="MySQL 提供了哪些存储引擎？"></a>MySQL 提供了哪些存储引擎？</h4><p>👉 重要程度：⭐⭐</p><p>💡 提示：可以通过 show engines; 命令查看 MySQL 提供的所有存储引擎。</p><h4 id="MySQL-存储引擎架构了解吗？"><a href="#MySQL-存储引擎架构了解吗？" class="headerlink" title="MySQL 存储引擎架构了解吗？"></a>MySQL 存储引擎架构了解吗？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：MySQL 存储引擎采用的是插件式架构，支持多种存储引擎，我们甚至可以为不同的数据库表设置不同的存储引擎以适应不同场景的需要。存储引擎是基于表的，而不是数据库。</p><h4 id="MyISAM-和-InnoDB-的区别"><a href="#MyISAM-和-InnoDB-的区别" class="headerlink" title="MyISAM 和 InnoDB 的区别"></a>MyISAM 和 InnoDB 的区别</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：从是否支持行级锁、事务、外键、数据库异常崩溃后的安全恢复、MVCC 等方面回答。</p><h3 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h3><h4 id="何谓事务？"><a href="#何谓事务？" class="headerlink" title="何谓事务？"></a>何谓事务？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：转账的案例。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\image-20221018204940502.png" alt="image-20221018204940502" title>                </div>                <div class="image-caption">image-20221018204940502</div>            </figure><h4 id="何谓数据库事务？"><a href="#何谓数据库事务？" class="headerlink" title="何谓数据库事务？"></a>何谓数据库事务？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：数据库事务可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。构成这个逻辑上的整体的这些数据库操作遵循：要么全部执行成功,要么全部不执行 。关系型数据库（例如：MySQL、SQL Server、Oracle 等）事务都有 ACID 特性。</p><h4 id="ACID-特性指的是什么？"><a href="#ACID-特性指的是什么？" class="headerlink" title="ACID 特性指的是什么？"></a>ACID 特性指的是什么？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：ACID 特性大家都知道，但是，这里有一个绝大部分人可能会理解错误的地方：只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\imagesurl=https%3A%2F%2Fguide-blog-images.oss-cn-shenzhen.aliyuncs.com%2Fgithub%2Fjavaguide%2Fmysql%2FACID.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>面试官可能还会顺便问你：“持久性是如何保证的？”、“原子性是如何保证的？”巴拉巴拉。这个时候你就需要结合 MySQL 日志、MySQL 锁以及 MVCC 来回答。</p><h4 id="并发事务带来了哪些问题"><a href="#并发事务带来了哪些问题" class="headerlink" title="并发事务带来了哪些问题?"></a>并发事务带来了哪些问题?</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：脏读（Dirty read）、丢失修改（Lost to modify）、不可重复读（Unrepeatable read）、幻读（Phantom read）。</p><h4 id="不可重复读和幻读区别"><a href="#不可重复读和幻读区别" class="headerlink" title="不可重复读和幻读区别"></a>不可重复读和幻读区别</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：</p><ul><li>不可重复读的重点是内容修改或者记录减少比如多次读取一条记录发现其中某些记录的值被修改；</li><li>幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</li></ul><p>幻读其实可以看作是不可重复读的一种特殊情况，单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。</p><p>举个例子：执行 delete 和 update 操作的时候，可以直接对记录加锁，保证事务安全。而执行 insert 操作的时候，由于记录锁（Record Lock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（Gap Lock）。也就是说执行 insert 操作的时候需要依赖 Next-Key Lock（Record Lock+Gap Lock） 进行加锁来保证不出现幻读。</p><h4 id="SQL-标准定义了哪些事务隔离级别"><a href="#SQL-标准定义了哪些事务隔离级别" class="headerlink" title="SQL 标准定义了哪些事务隔离级别?"></a>SQL 标准定义了哪些事务隔离级别?</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：READ-UNCOMMITTED(读取未提交)、READ-COMMITTED(读取已提交)、REPEATABLE-READ(可重复读)、SERIALIZABLE(可串行化)。</p><h4 id="MySQL-的默认隔离级别是什么-能解决幻读问题么？"><a href="#MySQL-的默认隔离级别是什么-能解决幻读问题么？" class="headerlink" title="MySQL 的默认隔离级别是什么?能解决幻读问题么？"></a>MySQL 的默认隔离级别是什么?能解决幻读问题么？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：默认隔离级别是 REPEATABLE-READ（可重读），可以解决幻读问题（两种情况，快照读和当前读）。</p><h4 id="什么是-MVCC？有什么用？原理了解么？"><a href="#什么是-MVCC？有什么用？原理了解么？" class="headerlink" title="什么是 MVCC？有什么用？原理了解么？"></a>什么是 MVCC？有什么用？原理了解么？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）这两个隔离级别的实现都离不开 MVCC。</p><h4 id="InnoDB-事务隔离级别实现原理"><a href="#InnoDB-事务隔离级别实现原理" class="headerlink" title="InnoDB 事务隔离级别实现原理"></a>InnoDB 事务隔离级别实现原理</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：这个问题研究的比较深入，一般的面试不会问，难度有点大，需要结合 MySQL 锁和 MVCC 来回答。学有余力的朋友，可以通过下面这两篇文章来准备这个问题：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1884107" target="_blank" rel="noopener">MySQL 事务的隔离性是如何实现的？</a></li><li><a href="https://segmentfault.com/a/1190000025156465" target="_blank" rel="noopener">深入理解 MySQL 中事务隔离级别的实现原理</a></li></ul><h3 id="MySQL-锁"><a href="#MySQL-锁" class="headerlink" title="MySQL 锁"></a>MySQL 锁</h3><h4 id="表级锁和行级锁了解吗？有什么区别？"><a href="#表级锁和行级锁了解吗？有什么区别？" class="headerlink" title="表级锁和行级锁了解吗？有什么区别？"></a>表级锁和行级锁了解吗？有什么区别？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：表级锁(table-level locking)一锁就锁整张表。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁）</p><h4 id="行级锁的使用有什么注意事项？"><a href="#行级锁的使用有什么注意事项？" class="headerlink" title="行级锁的使用有什么注意事项？"></a>行级锁的使用有什么注意事项？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：InnoDB 的行锁是针对索引字段加的锁，表级锁是针对非索引字段加的锁。当我们执行 UPDATE、DELETE 语句时，如果 WHERE条件中字段没有命中索引或者索引失效的话，就会导致扫描全表对表中的所有记录进行加锁。</p><h4 id="共享锁和排他锁呢？"><a href="#共享锁和排他锁呢？" class="headerlink" title="共享锁和排他锁呢？"></a>共享锁和排他锁呢？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类</p><h4 id="意向锁有什么作用？"><a href="#意向锁有什么作用？" class="headerlink" title="意向锁有什么作用？"></a>意向锁有什么作用？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：快速判断是否可以对某个表使用表锁。意向锁是表级锁，共有两种。并且，意向锁之间是互相兼容的。</p><h4 id="InnoDB-有哪几类行锁？"><a href="#InnoDB-有哪几类行锁？" class="headerlink" title="InnoDB 有哪几类行锁？"></a>InnoDB 有哪几类行锁？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：记录锁（Record Lock）、间隙锁（Gap Lock）、临键锁（Next-key Lock）。</p><h3 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h3><h4 id="何为索引？有什么作用？"><a href="#何为索引？有什么作用？" class="headerlink" title="何为索引？有什么作用？"></a>何为索引？有什么作用？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：索引的作用就相当于书的目录。</p><h4 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：索引并不都是好的，创建索引和维护索引也需要耗费资源和时间。</p><h4 id="索引的底层数据结构"><a href="#索引的底层数据结构" class="headerlink" title="索引的底层数据结构"></a>索引的底层数据结构</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。</p><h4 id="MySQL-的索引结构为什么使用-B-树？"><a href="#MySQL-的索引结构为什么使用-B-树？" class="headerlink" title="MySQL 的索引结构为什么使用 B+树？"></a>MySQL 的索引结构为什么使用 B+树？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：结合二叉查找树、平衡二叉树、红黑树、B 树存在的缺陷来回答这个问题。</p><h4 id="主键索引和二级索引"><a href="#主键索引和二级索引" class="headerlink" title="主键索引和二级索引"></a>主键索引和二级索引</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：数据表的主键列使用的就是主键索引。二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。唯一索引，普通索引，前缀索引等索引属于二级索引。</p><h4 id="聚集索引与非聚集索引"><a href="#聚集索引与非聚集索引" class="headerlink" title="聚集索引与非聚集索引"></a>聚集索引与非聚集索引</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。非聚集索引即索引结构和数据分开存放的索引。</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</p><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：MySQL 中的索引可以以一定顺序引用多列。</p><h4 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：在 MySQL 建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p><h4 id="创建索引的注意事项有哪些？"><a href="#创建索引的注意事项有哪些？" class="headerlink" title="创建索引的注意事项有哪些？"></a>创建索引的注意事项有哪些？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：选择合适的字段创建索引、尽可能的考虑建立联合索引而不是单列索引……。</p><h3 id="MySQL-日志"><a href="#MySQL-日志" class="headerlink" title="MySQL 日志"></a>MySQL 日志</h3><h4 id="MySQL-中常见的日志有哪些？-1"><a href="#MySQL-中常见的日志有哪些？-1" class="headerlink" title="MySQL 中常见的日志有哪些？"></a>MySQL 中常见的日志有哪些？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：错误日志（error log）、二进制日志（binary log）、一般查询日志（general query log）、慢查询日志（slow query log） 、事务日志(redo log 和 undo log) ……。</p><h4 id="慢查询日志有什么用？-1"><a href="#慢查询日志有什么用？-1" class="headerlink" title="慢查询日志有什么用？"></a>慢查询日志有什么用？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：慢查询日志记录了执行时间超过 long_query_time（默认是 10s）的所有查询，在我们解决 SQL 慢查询（SQL 执行时间过长）问题的时候经常会用到。</p><h4 id="binlog-主要记录了什么？有什么用？"><a href="#binlog-主要记录了什么？有什么用？" class="headerlink" title="binlog 主要记录了什么？有什么用？"></a>binlog 主要记录了什么？有什么用？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。</p><h4 id="redo-log-如何保证事务的持久性？-1"><a href="#redo-log-如何保证事务的持久性？-1" class="headerlink" title="redo log 如何保证事务的持久性？"></a>redo log 如何保证事务的持久性？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：redo log 主要做的事情就是记录页的修改，比如某个页面某个偏移量处修改了几个字节的值以及具体被修改的内容是什么。在事务提交时，我们会将 redo log 按照刷盘策略刷到磁盘上去，这样即使 MySQL 宕机了，重启之后也能恢复未能写入磁盘的数据，从而保证事务的持久性。</p><h4 id="页修改之后为什么不直接刷盘呢？-1"><a href="#页修改之后为什么不直接刷盘呢？-1" class="headerlink" title="页修改之后为什么不直接刷盘呢？"></a>页修改之后为什么不直接刷盘呢？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：性能非常差！InnoDB 页的大小一般为 16KB，而页又是磁盘和内存交互的基本单位。这就导致即使我们只修改了页中的几个字节数据，一次刷盘操作也需要将 16KB 大小的页整个都刷新到磁盘中。而且，这些修改的页可能并不相邻，也就是说这还是随机 IO。</p><h4 id="binlog-和-redolog-有什么区别？-1"><a href="#binlog-和-redolog-有什么区别？-1" class="headerlink" title="binlog 和 redolog 有什么区别？"></a>binlog 和 redolog 有什么区别？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：可以从用途、写入方式、是否是 InnoDB 引擎特有的这几个方面来回答。</p><h4 id="undo-log-如何保证事务的原子性？-1"><a href="#undo-log-如何保证事务的原子性？-1" class="headerlink" title="undo log 如何保证事务的原子性？"></a>undo log 如何保证事务的原子性？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：每一个事务对数据的修改都会被记录到 undo log ，当执行事务过程中出现错误或者需要执行回滚操作的话，MySQL 可以利用 undo log 将数据恢复到事务开始之前的状态。</p><h3 id="性能优化-2"><a href="#性能优化-2" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：SQL 优化涵盖的内容非常多，像正确使用索引、数据结构、数据库函数等等都属于 SQL 优化的范畴。另外，问到 SQL 优化的时候一定离不开 Explain 命令的使用！你可以参考下面这两篇文章来准备这个问题：</p><ul><li><p><a href="https://cloud.tencent.com/developer/article/1899907" target="_blank" rel="noopener">聊聊 SQL 优化的 15 个小技巧 -苏三聊技术</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247488618&idx=1&sn=e70a31865b5eadcb151f439004a4dd72&chksm=cea25ba1f9d5d2b795222ba90e0326618d649e858ec23e9c7360f90fbfc23a7786c33bff9556&token=1647609083&lang=zh_CN#rd" target="_blank" rel="noopener">SQL 高性能优化指南！35+条优化建议立马 GET! - 码海</a></p></li></ul><p>尽量要结合自己的项目来聊，具体说明自己是如何进行 SQL 优化的，具体带来了什么效果。</p><h4 id="慢查询问题排查"><a href="#慢查询问题排查" class="headerlink" title="慢查询问题排查"></a>慢查询问题排查</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：记几个导致慢查询的常见原因，知道遇到慢查询问题了如何排查。具体做法可以参考这篇<a href="https://mp.weixin.qq.com/s/sPO-6ULwIfUexLY3V4acBg" target="_blank" rel="noopener">那些年我们一起优化的 SQL</a>这篇文章。</p><p>这个也要尽量结合自己的项目来聊，具体说明自己如何解决慢查询问题的。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><blockquote><p>注意!!! ：下面这些问题的参考答案你几乎都可以在 <a href="https://javaguide.cn/database/mysql/mysql-questions-01.html" target="_blank" rel="noopener">JavaGuide 在线阅读网站</a> 和 《JavaGuide 面试指北》中找到。并且，这两个参考资料没有给出解答的问题，我也都给了对应的参考文章。</p><p>建议你先阅读学习了对应的内容之后再进行自测。</p></blockquote><h3 id="Redis-基础"><a href="#Redis-基础" class="headerlink" title="Redis 基础"></a>Redis 基础</h3><h4 id="Redis-有什么作用-为什么要用-Redis-为什么要用缓存？"><a href="#Redis-有什么作用-为什么要用-Redis-为什么要用缓存？" class="headerlink" title="Redis 有什么作用?为什么要用 Redis/为什么要用缓存？"></a>Redis 有什么作用?为什么要用 Redis/为什么要用缓存？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：内存数据库，高并发，常用来做缓存。</p><h4 id="Redis-除了做缓存，还能做什么？"><a href="#Redis-除了做缓存，还能做什么？" class="headerlink" title="Redis 除了做缓存，还能做什么？"></a>Redis 除了做缓存，还能做什么？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：分布式锁、限流、消息队列（不推荐）。另外，利用 Redis 自带的数据结构我们可以很方便地完成很多复杂的业务场景比如通过 sorted set 维护一份排行榜。</p><h4 id="Redis-可以做消息队列么？"><a href="#Redis-可以做消息队列么？" class="headerlink" title="Redis 可以做消息队列么？"></a>Redis 可以做消息队列么？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：Redis 5.0 新增加的一个数据结构 Stream 可以用来做消息队列。不过，和专业的消息对象相比还是有很多欠缺的地方。</p><h4 id="分布式缓存常见的技术选型方案有哪些？"><a href="#分布式缓存常见的技术选型方案有哪些？" class="headerlink" title="分布式缓存常见的技术选型方案有哪些？"></a>分布式缓存常见的技术选型方案有哪些？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：Memcached 和 Redis。紧接着面试官可能会让你简单对比一下 Memcached 和 Redis 。</p><h3 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h3><h4 id="Redis-常用的数据结构有哪些？"><a href="#Redis-常用的数据结构有哪些？" class="headerlink" title="Redis 常用的数据结构有哪些？"></a>Redis 常用的数据结构有哪些？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：</p><ul><li><p>5 种基础数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</p></li><li><p>3 种特殊数据类型：HyperLogLogs（基数统计）、Bitmap （位存储）、geospatial (地理位置)。</p></li></ul><p>面试官问到 Redis 常用的数据结构之后，可以会顺带问你 Redis 底层数据结构。</p><h4 id="使用-Redis-统计网站-UV-怎么做？"><a href="#使用-Redis-统计网站-UV-怎么做？" class="headerlink" title="使用 Redis 统计网站 UV 怎么做？"></a>使用 Redis 统计网站 UV 怎么做？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：可以借助 HyperLogLog 来做，占用空间非常非常小。</p><h4 id="使用-Redis-实现一个排行榜怎么做？"><a href="#使用-Redis-实现一个排行榜怎么做？" class="headerlink" title="使用 Redis 实现一个排行榜怎么做？"></a>使用 Redis 实现一个排行榜怎么做？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：Redis 中有一个叫做 sorted set 的数据结构经常被用在各种排行榜的场景下。</p><h3 id="Redis-线程模型"><a href="#Redis-线程模型" class="headerlink" title="Redis 线程模型"></a>Redis 线程模型</h3><h4 id="Redis-单线程模型了解吗？"><a href="#Redis-单线程模型了解吗？" class="headerlink" title="Redis 单线程模型了解吗？"></a>Redis 单线程模型了解吗？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：Redis 通过 IO 多路复用程序 来监听来自客户端的大量连接（或者说是监听多个 socket），它会将感兴趣的事件及类型（读、写）注册到内核中并监听每个事件是否发生。</p><p>类似问题：既然是单线程，那怎么监听大量的客户端连接呢？、为什么 Redis 这么快？</p><h4 id="Redis6-0-之前为什么不使用多线程？"><a href="#Redis6-0-之前为什么不使用多线程？" class="headerlink" title="Redis6.0 之前为什么不使用多线程？"></a>Redis6.0 之前为什么不使用多线程？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：单线程编程容易并且更容易维护、Redis 的性能瓶颈不在 CPU 。</p><h4 id="Redis6-0-之后为何引入了多线程？"><a href="#Redis6-0-之后为何引入了多线程？" class="headerlink" title="Redis6.0 之后为何引入了多线程？"></a>Redis6.0 之后为何引入了多线程？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Redis6.0 引入多线程主要是为了提高网络 IO 读写性能。</p><h3 id="Redis-内存管理"><a href="#Redis-内存管理" class="headerlink" title="Redis 内存管理"></a>Redis 内存管理</h3><h4 id="Redis-给缓存数据设置过期时间有啥用？"><a href="#Redis-给缓存数据设置过期时间有啥用？" class="headerlink" title="Redis 给缓存数据设置过期时间有啥用？"></a>Redis 给缓存数据设置过期时间有啥用？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。</p><h4 id="Redis-是如何判断数据是否过期的呢？"><a href="#Redis-是如何判断数据是否过期的呢？" class="headerlink" title="Redis 是如何判断数据是否过期的呢？"></a>Redis 是如何判断数据是否过期的呢？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Redis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。</p><h4 id="过期的数据的删除策略了解么？"><a href="#过期的数据的删除策略了解么？" class="headerlink" title="过期的数据的删除策略了解么？"></a>过期的数据的删除策略了解么？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 定期删除+惰性/懒汉式删除 。</p><h4 id="Redis-内存淘汰机制了解么？"><a href="#Redis-内存淘汰机制了解么？" class="headerlink" title="Redis 内存淘汰机制了解么？"></a>Redis 内存淘汰机制了解么？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Redis 提供 6 种数据淘汰策略。</p><p>类似问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?</p><h3 id="Redis-持久化机制"><a href="#Redis-持久化机制" class="headerlink" title="Redis 持久化机制"></a>Redis 持久化机制</h3><h4 id="怎么保证-Redis-挂掉之后再重启数据可以进行恢复？"><a href="#怎么保证-Redis-挂掉之后再重启数据可以进行恢复？" class="headerlink" title="怎么保证 Redis 挂掉之后再重启数据可以进行恢复？"></a>怎么保证 Redis 挂掉之后再重启数据可以进行恢复？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：依赖持久化机制。</p><h4 id="什么是-RDB-持久化？"><a href="#什么是-RDB-持久化？" class="headerlink" title="什么是 RDB 持久化？"></a>什么是 RDB 持久化？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。</p><h4 id="什么是-AOF-持久化？"><a href="#什么是-AOF-持久化？" class="headerlink" title="什么是 AOF 持久化？"></a>什么是 AOF 持久化？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：开启 AOF 持久化后每执行一条会更改 Redis 中的数据的命令，Redis 就会将该命令写入到内存缓存 server.aof_buf 中，然后再根据 appendfsync 配置来决定何时将其同步到硬盘中的 AOF 文件。</p><h4 id="Redis-4-0-对于持久化机制做了什么优化？"><a href="#Redis-4-0-对于持久化机制做了什么优化？" class="headerlink" title="Redis 4.0 对于持久化机制做了什么优化？"></a>Redis 4.0 对于持久化机制做了什么优化？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。</p><h3 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h3><h4 id="如何使用-Redis-事务？"><a href="#如何使用-Redis-事务？" class="headerlink" title="如何使用 Redis 事务？"></a>如何使用 Redis 事务？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Redis 可以通过 MULTI，EXEC，DISCARD 和 WATCH 等命令来实现事务(transaction)功能。</p><h4 id="Redis-事务支持原子性吗？"><a href="#Redis-事务支持原子性吗？" class="headerlink" title="Redis 事务支持原子性吗？"></a>Redis 事务支持原子性吗？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Redis 事务在运行错误的情况下，除了执行过程中出现错误的命令外，其他命令都能正常执行。并且，Redis 是不支持回滚（roll back）操作的。因此，Redis 事务其实是不满足原子性的（而且不满足持久性）。</p><h4 id="Redis-事务还有什么缺陷？"><a href="#Redis-事务还有什么缺陷？" class="headerlink" title="Redis 事务还有什么缺陷？"></a>Redis 事务还有什么缺陷？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：除了不满足原子性之外，事务中的每条命令都会与 Redis 服务器进行网络交互，这是比较浪费资源的行为。明明一次批量执行多个命令就可以了，这种操作实在是看不懂。</p><h4 id="如何解决-Redis-事务的缺陷？"><a href="#如何解决-Redis-事务的缺陷？" class="headerlink" title="如何解决 Redis 事务的缺陷？"></a>如何解决 Redis 事务的缺陷？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Lua 脚本、 <a href="https://redis.io/docs/manual/programmability/functions-intro/" target="_blank" rel="noopener">Redis functions</a>。</p><h3 id="Redis-性能优化"><a href="#Redis-性能优化" class="headerlink" title="Redis 性能优化"></a>Redis 性能优化</h3><h4 id="什么是-bigkey？有什么危害？"><a href="#什么是-bigkey？有什么危害？" class="headerlink" title="什么是 bigkey？有什么危害？"></a>什么是 bigkey？有什么危害？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：一个 key 对应的 value 所占用的内存比较大。bigkey 会消耗更多的内存空间，也会影响到性能。</p><h4 id="如何发现-bigkey？"><a href="#如何发现-bigkey？" class="headerlink" title="如何发现 bigkey？"></a>如何发现 bigkey？</h4><p>👉 重要程度：⭐⭐⭐</p><p>💡 提示：使用 Redis 自带的 –bigkeys 参数来查找或者分析 RDB 文件。</p><h4 id="如何避免大量-key-集中过期？"><a href="#如何避免大量-key-集中过期？" class="headerlink" title="如何避免大量 key 集中过期？"></a>如何避免大量 key 集中过期？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：给 key 设置随机过期时间 + 开启 lazy-free（惰性删除/延迟释放）。</p><h4 id="什么是-Redis-内存碎片-为什么会有-Redis-内存碎片"><a href="#什么是-Redis-内存碎片-为什么会有-Redis-内存碎片" class="headerlink" title="什么是 Redis 内存碎片?为什么会有 Redis 内存碎片?"></a>什么是 Redis 内存碎片?为什么会有 Redis 内存碎片?</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：内存碎片简单地理解为那些不可用的空闲内存。</p><h3 id="Redis-生产问题"><a href="#Redis-生产问题" class="headerlink" title="Redis 生产问题"></a>Redis 生产问题</h3><h4 id="什么是缓存穿透？怎么解决？"><a href="#什么是缓存穿透？怎么解决？" class="headerlink" title="什么是缓存穿透？怎么解决？"></a>什么是缓存穿透？怎么解决？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：大量请求的 key 根本不存在于缓存中，导致请求直接到了数据库上。常见的解决办法如下：</p><ul><li><p>缓存无效 key</p></li><li><p>布隆过滤器</p></li></ul><h4 id="什么是缓存雪崩？怎么解决？"><a href="#什么是缓存雪崩？怎么解决？" class="headerlink" title="什么是缓存雪崩？怎么解决？"></a>什么是缓存雪崩？怎么解决？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：缓存在同一时间大面积的失效，后面的请求都直接落到了数据库上，造成数据库短时间内承受大量请求。 如果是 Redis 服务不可用的情况的话，我们应该搭建 Redis 集群来避免单点风险。如果是缓存过期的话，参考“如何避免大量 key 集中过期？”这个问题。</p><h4 id="如何保证缓存和数据库数据的一致性？"><a href="#如何保证缓存和数据库数据的一致性？" class="headerlink" title="如何保证缓存和数据库数据的一致性？"></a>如何保证缓存和数据库数据的一致性？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：3 种常见的缓存读写策略。</p><h3 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h3><h4 id="如何保证-Redis-服务高可用？"><a href="#如何保证-Redis-服务高可用？" class="headerlink" title="如何保证 Redis 服务高可用？"></a>如何保证 Redis 服务高可用？</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：Redis Sentinel 集群。</p><h4 id="Sentinel（哨兵）-有什么作用？"><a href="#Sentinel（哨兵）-有什么作用？" class="headerlink" title="Sentinel（哨兵） 有什么作用？"></a>Sentinel（哨兵） 有什么作用？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：监控 Redis 节点的运行状态并自动实现故障转移。</p><h4 id="Redis-缓存的数据量太大怎么办"><a href="#Redis-缓存的数据量太大怎么办" class="headerlink" title="Redis 缓存的数据量太大怎么办?"></a>Redis 缓存的数据量太大怎么办?</h4><p>👉 重要程度：⭐⭐⭐⭐⭐</p><p>💡 提示：Redis Cluster。</p><h4 id="Redis-Cluster-虚拟槽分区有什么优点？"><a href="#Redis-Cluster-虚拟槽分区有什么优点？" class="headerlink" title="Redis Cluster 虚拟槽分区有什么优点？"></a>Redis Cluster 虚拟槽分区有什么优点？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：解耦了数据和节点之间的关系，提升了集群的横向扩展性和容错性。</p><h4 id="Redis-Cluster-中的各个节点是如何实现数据一致性的？"><a href="#Redis-Cluster-中的各个节点是如何实现数据一致性的？" class="headerlink" title="Redis Cluster 中的各个节点是如何实现数据一致性的？"></a>Redis Cluster 中的各个节点是如何实现数据一致性的？</h4><p>👉 重要程度：⭐⭐⭐⭐</p><p>💡 提示：Gossip 协议</p><h1 id="四、面经篇"><a href="#四、面经篇" class="headerlink" title="四、面经篇"></a>四、面经篇</h1><h2 id="必看"><a href="#必看" class="headerlink" title="必看"></a>必看</h2><h3 id="双非本科、0实习、0比赛项目经历。3个月上岸百度"><a href="#双非本科、0实习、0比赛项目经历。3个月上岸百度" class="headerlink" title="双非本科、0实习、0比赛项目经历。3个月上岸百度"></a>双非本科、0实习、0比赛项目经历。3个月上岸百度</h3><p>前段时间，小贾在星球向我询问 offer 选择的问题，我才知道小贾已经斩获两个还不错的 offer。</p><p>小贾和我一样都是双非本科，学历上面我们和大部分一样都没有任何优势。他的校招经历挺波折的，非常有参考价值。</p><p>于是，我就找到小贾让他写一篇文章分享一下自己秋招的一些准备面试的经历以及经验。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\2e6cc00a-802b-4def-ba55-0b24a33febc6.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>贾哥写的太用心了，整篇文章大概有1w+字。我将分为两次来发。觉得内容不错的话，大家记得点赞催更。</p><p>希望贾哥的分享对小伙伴们有帮助！</p><h4 id="01-关于我"><a href="#01-关于我" class="headerlink" title="01 关于我"></a>01 关于我</h4><p>秋招这一路跌跌撞撞的走来，经历了很多心酸，也成长了很多。</p><p>从信心满满的开始，到不断地自我怀疑。从一个一无所知的菜鸡，到现在还是一个菜鸟。</p><p>我或许没有很多成功的逆袭经验来分享给大家。但是！我从一个秋招的裸奔男孩到理想上岸，收获的更多是失败的经验、成长的阅历和人生的考验吧！</p><p>我对计算机并没有激情满满的热爱，更多的是随着投入的时间和学习而产生的兴趣吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b27e49f7-b582-4968-b17d-4823f99f0913.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>听过很多秋招大佬的传奇逆袭经历，向往他们将热爱都投身到刷力扣的成就感中，羡慕他们在秋招时斩获大把Offer。</p><p>社会遵循着2-8原则，我或许应该被归到8这一类当中。我有时在不断问自己，你真的适合开发这一行吗？你会在这条路上走多远呀？评估自己的实力与大佬们的差距，可能就是我学习的动力吧！</p><p>作为一个被秋招毒打的打工人，我想和大家分享我的经历！</p><h4 id="02-确立目标"><a href="#02-确立目标" class="headerlink" title="02 确立目标"></a>02 确立目标</h4><p>带着高考的些许遗憾，我来到了我的母校，西安某不知名双非一本，专业为数字媒体技术。</p><p>这个专业虽然归类在计算机学院下，但是我们的课程方向是游戏动画，影视建模方向。</p><p>导致每次面试官问我专业，我都要解释一遍，我是计算机专业的，计算机的公共基础课（数据结构、计算机网络等）我们都会学。</p><p>我们的就业方向貌似更加偏向新媒体方向，虽然编程知识也会学，甚至还学了那本西瓜书的《机器学习》。</p><p>大学前两年，自己就是一种浑浑噩噩的状态。我没有很明确的目标和方向，每天都是在宿舍-食堂-教室，上好该上的课。</p><p>曾经想拿个综测的专业第一，但是好像光靠成绩还是不够的，后来标准降到了考试尽力考个高分就行。</p><p>对于学习数据结构、操作系统等等计算机专业课程，我有一个深深的感触：<strong>考试分数高不代表你真的“学会了” 。</strong></p><p>这些基础课程，我基本都是上课认真听听，考前复习半个月，拿个不错的分数过了，感觉任务就完成了。</p><p><strong>现在熬夜补这些知识的时候，眼里都是悔恨的泪水呀🥺。</strong></p><p>大三，才意识到自己马上要毕业了，考虑了一个月，放弃考研的打算。我想了很久很久，感觉还是做一个打工人吧！</p><p>C/C++中的指针让我头晕眼花，于是我选择了Java。</p><p>2019年10月，开始了自己在大学里，真正有目标，有动力的去学习！</p><p>在一个失眠焦虑的夜晚，我写下这段话来激励自己：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\92a2e5c2-b153-4e11-8acb-79964ce147db.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><blockquote><p>今年在综测时，拿到了专业第一，可以申请保研（我校保研一般只能保本校）。也动摇过，秋招真的太难了，要不就放弃吧。但是想到自己大三时立下的雄心壮志，既然选择了这条路，就一抹黑的走下去吧，秋招不上岸，春招还能搏一把；这条路实在走不通，那我就考研！</p></blockquote><p>然后，我就开始在B站、慕课网、油管、MOOC上找Java的视频学习。</p><p>从JavaSE、JavaWeb、框架的学习。2020年2月份，似乎感觉，把这些内容都过了一遍。</p><p>期间一边看网课、博客文章、Guide哥的专栏总结，一边写博客加深理解。寒假租了房，每天按部就班的输入，过年前几天才回家。过年那天晚上，都是一边看春晚，一边在复习。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\36eab896-7dc7-4910-99eb-374db0588993.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="03-压抑的一段时间"><a href="#03-压抑的一段时间" class="headerlink" title="03 压抑的一段时间"></a>03 压抑的一段时间</h4><p>到3月份，认识的几个同学开始投滴滴、百度的实习，我才开始写简历，到牛客看面经，也准备投实习。但是，看到面经的各种提问，我感觉自己像没学一样，全都是知识盲区。</p><p>了解的东西不够深入，到不了面试那种深层次提问，还有数据结构、网络、操作系统这些都没怎么复习。自己学过的这些课，脑海里仅仅残留着一点点印象。</p><p>更关键的是，我简历写完了技能列表，项目实在没得可写。面对空白乏力的简历，我感觉自己还有好多好多知识要补，完全就是在精卫填海。</p><p>本来打算过完年早早去出租屋里学习，年前就定了正月除六的车票打算赶过去。但是，突如其来的疫情，只能让我待在家里，打乱了我安排好的学习计划。</p><p>每天，面对面经上满满的知识盲区，自己在家里的效率又比较低，开学又遥遥无期，学习计划一拖再拖。</p><p>同时，我的两位伙伴在5月都去到了北京实习，我还在家里天天感觉无所事事。</p><p>找实习已经是不可能了，只能直接秋招了。然而，项目经历还是空白，做过的课设项目含金量低，单纯的管理系统实在不想往简历上去写。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b25512d7-e90e-479f-ba0b-532fa1ccf046.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>对比朋友每天大厂的实习日常，再看看自己的狼狈不堪。每天，整个人都有着巨大的心里压力和焦虑。学校在线的网课都是在后台静音放着，天天跑到教育厅下询问开学时间，“又是不开学的一天！哎，到底什么以后才能去学校呀！”。</p><p><strong>那段时间，真的过得非常压抑，每天都是忐忑不安、内心焦躁。自己仿佛在一条漆黑的路上跌跌撞撞的走着，这条路没有光亮，没有尽头。</strong></p><p>后来，心态渐渐放平，全国都在众志成城的抗击疫情，大家都在努力着。换个角度想想，自己最大的财富，不就是拥有健康吗？</p><p>为了赶上既定的任务安排，我只能每天早早起来学习，虽然中途可能被一些其他事情打断，但是用时间来弥补效率，一直复习到深夜。有时莫名感觉，自己20多年来，第一次真正的这么努力。</p><p>2020年6月，我不顾我妈的劝阻，来到了西安，和好基友小贤租了间房。他也没有找到实习，我们都是共赴秋招的裸奔男孩，两个人开始做秋招的最后冲刺！</p><h4 id="04-复习基础知识"><a href="#04-复习基础知识" class="headerlink" title="04 复习基础知识"></a>04 复习基础知识</h4><p>来到西安后，我便开始集中精力复习基础知识：</p><ul><li>把多线程、集合类相关的知识重头复习了一遍，专门针对这一块的面试提问看了很多文章；</li><li>在B站刷了两遍宋红康老师讲的<strong>《JVM从入门到精通》</strong>，真的良心推荐👍，零零散散看了下<strong>《深入理解Java虚拟机》</strong>这本圣经；</li><li>复习了一遍计算机网络，主要是针对TCP-IP体系结构、HTTP协议，看着面经来复习知识点</li><li>数据库只做了简单复习，基本的SQL能写出来，牛客做了些题</li></ul><p>眼看秋招提前批已到来，而且没有笔试，对我来说是个莫大的机会。但是，由于自己项目还没整理，没有可写的内容到简历上。所以只能任之溜走了。</p><p>这是对Guide哥之前的一次提问，让我很清楚自己接下来的两个月该做什么！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b4f54ccf-cdec-453f-973b-db96cccd58e4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="05-准备项目"><a href="#05-准备项目" class="headerlink" title="05 准备项目"></a>05 准备项目</h4><p>7月份的时候，自己的项目经历还是空白，导致简历一直没法完善。</p><p>于是我开始着手开始准备项目。顺带着晚上刷题。</p><blockquote><p> 学校稍微有代表性的一点就是老师指导我们组做了个国家级的大创项目，但是我负责前端相关的内容。课设都是很基础的类似新闻管理系统、学生管理系统，还有Unity做的两个游戏Demo，实在没法往简历上写。自己学习的方向是后端，只能找有代表性的项目来做！</p></blockquote><p>Github Star了些Java相关的项目，但当我拉下代码导入，发现自己搞不懂有些地方为什么要这样写，项目的架构是怎么设计的？关键的技术点在哪里？可能出现什么问题？如何去改善？</p><p>因为这些问题搞不懂，吃不透，虽然简历上写的是你的项目，但面试官一问就被问住了，所以终究还是不属于你。</p><p>由于自己底子薄，框架探究没那么深入，自己虽然学了SSM、SpringBoot这些框架，但是也只是能简单上手使用下。当下也没时间来深入探究底层原理学习，只能停留在简单了解和使用上。开源项目我可能没法吃透，我需要找个视频教程跟着做，然后基于自己理解再做拓展。</p><p>我把B站所有有关Java的项目都找了一遍，搜索不同的关键字足足过了三遍进行筛选统计。我发现项目大体可以分为两大类：</p><ul><li>【原理性】：就是造轮子，对已有框架或者协议自己来做个实现；如Guide哥的RPC框架和HTTP的轻量级框架，其他的如实现Tomcat功能、性能基准测试框架、实现网络协议等</li><li>【功能性】：项目实现具体的业务功能；如各种权限管理系统、博客系统、商城、管理系统等。形式有前后端分离的，有基于微信小程序的后台的、还有客户端的</li></ul><p>筛选了大概一周，我找到了适合自己的项目。一个是基于自己之前练手的Demo，跟着视频学习自己做了拓展，一个是前后端分离的项目。</p><p><strong>项目没必要功能业务多么复杂，涉及的技术栈有多广，但是一定能够自己吃透，原理性、结构性的层面自己搞懂，还有一定要有亮点！</strong></p><p>因为面试官想听的不是你做了什么，而是怎么去做的。就我而言，更多的是考察你发现问题、分析问题、解决问题的能力。即便项目本身简单，但是一些特殊情况要考虑到，为什么这么设计？出现问题了怎么改进？如何去完善？其他技术方式怎么实现？</p><p>在百度三面主管面时，全程都在问项目，大概问了50min之久。虽然我觉得准备时自己考虑的很周到了，但是毕竟没参加工作，很多问题根本不知道：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\80884b42-ffbe-4f1e-a28b-caeb2e066d95.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>因为基于WebSocket协议做的聊天室，本身是应用层的协议，直接就用TCP来保证消息可靠传输，如果访问量大，为了高效可以改用UDP。这个项目准备的重心没有放在网络层面，而是考虑到多线程下并发聊天，会存在线程安全的问题，准备了很多多线程相关的针对项目的改善、应对策略，消息存储发送。</p><p>但是面试官全程都在针对网络层面做拓展，我只能根据已有的知识和对自己项目的拓展了解做回答。面试结束，我感觉自己被按在地上摩擦，又限了入了深深的自我怀疑中~</p><h4 id="06-完善简历"><a href="#06-完善简历" class="headerlink" title="06 完善简历"></a>06 完善简历</h4><p>到了 8 月份的时候，我才开始完善简历以及刷题。</p><p>我的简历大概前前后后改了十二版，最初是改简历的布局，内容块；后面就是字字斟酌，细微调整。</p><p>经常删删改改，一句话可能要思考好久；我把我掌握的知识点都很详细的列出来，虽然技能列表看起来很基础，但是我有自信对自己写的内容负责</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\d297cd45-5cc9-4842-9000-ac0593f392e9.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>小伙伴们一定要重视简历！多花点精力在完善简历上！</strong></p><p>我的刷题大概从6月就已经开始，断断续续在LeetCode上刷一些题。在8月的时候，我开始每天集中抽出很多时间来刷题。</p><p>没错，大佬们天天坚持刷个一年半载，我7、8月才开始每天集中刷题。</p><p>我大三就意识到了刷题得重要性，因为做题能力差，报了蓝桥杯比赛没去。</p><p>既然意识到重要性，为什么不早点去每天坚持刷题呢？</p><p><strong>我尝试过，最终放弃了。</strong>这么做可能更多是临时抱佛脚的心态，对刚做完的题有个印象。</p><p><strong>对我来说，复习路上最大的阻碍就是刷题了，因为自己的代码能力实在太差了。</strong></p><p>三月份，我大概做了半个月题。《剑指Offer》上的常规题，我基本上就是半天一道题，因为自己做这些题实在是想不来，想半个小时尝试去解决，但大多时候都是“差一点”，或者思路正确但又不能用代码实现出来。然后看题解，看别人不同的解法，自己再独立写一遍。</p><p>因为时间紧任务重，半天能够让我复习好多知识点了，所以想等复习完提纲之后再来刷题。而且，关键是做的题目，当时感觉自己<strong>懂了、会了</strong>，但是过一段时间又<strong>忘了</strong>，只能隐约留下个解题思路，还是不能够独立AC。</p><p>七月份，只能是逼着自己来。因为大厂太看重代码能力了，即便是我理论知识掌握的再好，笔试都过不了，根本没得机会去面试。</p><p>然后，就开始分类刷题。参考labuladong哥的刷题套路，weiwei哥的刷题分类，小齐姐的刷题经验，剑指Offer<a href="https://leetcode-cn.com/u/jyd/" target="_blank" rel="noopener">Krahets</a>路飞哥的精彩题解，每天花8个小时左右刷题，复习数据结构。</p><p>一道<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/solution/ru-guo-ni-kan-wan-ping-lun-he-ti-jie-huan-you-wen-/" target="_blank" rel="noopener">单链表反转</a>的题，我整整想了一天半才搞懂。该题下的所有题解全部看了一遍，包括公众号的一些文章。递归的解法，短短几句话，我始终无法理解。</p><p>小贤从4月份一直开始刷题，在这期间一直和小贤在一起复习。他是C++方向，算法和代码能力很强，刷题方面我都是请教他的。</p><p>单链表递归解法，他画图整整给我解释了一个晚上，从斐波那契的递归，到链表的实现。第二天，我终于搞懂了，在力扣发布了自己写的最认真的一次题解。单链表反转，自己写了不下20遍了吧；这次，可能真的是永远记住了吧。</p><p>8月份，小贤由于有事回家了。房间只剩我一个人，我和老板续了房租，继续备战秋招。</p><p>期间，刷题有任何问题，我都会立即给小贤打电话过去交流。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\aa9a4900-85ac-4d41-94ac-165bc7f30a2c.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>【刷题的误区】</strong></p><p>开始，我觉得自己不是在刷题，而是不断地重复写，好像在“背代码”。因为有些题说思路，我能够很清晰的表达出来，做的多了发现解题的套路还是比较固定的（虽然也没做多少🤔），但是到实际的动手写，又写不出来了。</p><p>针对这个问题，我也很痛苦。一方面觉得“背代码”很可耻，自己真的就这么差吗，做个简单题都写不出来吗？但是，我真的是没办法，只能用做的少，练得少来安慰自己。</p><p>就这样，每天逼着自己，刷了大概170题左右，每天将基础的八大排序写一遍</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\7dbf7d1a-7427-44f7-afe3-48e4aff4426b.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>其实，前期的刷题，自己没见过没思路很正常，参考别人的题解，把这种解法引用到类似的题目上。就像写作文一样，针对不同问题有不同的模板，根据具体问题调整边界即可。我自己总结来说，就是两大因素：</p><ol><li>针对不同问题求解的代码模板，要恰当灵活的应用（如双指针、滑窗、列表DP等）</li><li>代码熟练度。模板是基于代码的熟练度而存在的，就像写排序算法一样能够很快的写出来</li></ol><p>但是，这个量还有我的认知，对秋招来说是远远不够的。这是一项长期的积累和训练，谁也不可能偷懒，达到立竿见影的效果。因此，在后来的秋招笔试中，我重重的摔了跟头😭，这是可预见的。</p><p>听学姐说她们去年是互联网的寒冬，找工作难。今年，因为疫情的原因，仿佛一切都变得更难，竞争更加激烈。</p><p>八月，2020年的秋招已正式开始，但是我还在刷题复习中，准备即将到来的“金九银十”。这份简历，整整迟投出一个月……</p><h4 id="07-开始投递简历"><a href="#07-开始投递简历" class="headerlink" title="07 开始投递简历"></a>07 开始投递简历</h4><p>总是喜欢一个人到新田径场静静呆坐着</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f215c483-6b8e-4c65-8d4e-009592aced33.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>9 月 1 号返校，在陕西省教育厅下蹲了四个月，终于等到了学校开学。我退了房，回到了宿舍，准备加入秋招得大军中…</p><p>9 月 2 日，开始正式投递简历。一开始不敢投大厂，想着先投中小公司刷刷副本。</p><blockquote><p>👇 以下是通过语雀记录的！</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\92139d90-f796-41b9-8dc0-b6e3f8226135.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我将公司归为四类：<strong>小厂、实习、中厂、一线厂</strong>。</p><p>为了好做做统一管理，我记录了<strong>投递时间、岗位、笔试时间、面试时间</strong>。</p><p>9 月 8 号之前，我一直以中小厂为主，因为自己感觉没实力和自信去投大厂。</p><p>但是，到 9 月 9 号时，我才了解到像腾讯、百度、美团、京东、网易这些大厂秋招到 9 月中下旬就会截止网申。</p><p><strong>不投就没有机会了！投了起码能有一丝机会进入笔试面试，所以就开始投递大厂了。</strong></p><p>我主要投递的都是 Java 研发，自己学的就是这一块的内容。随着学习的深入，也对 Java 后端开发产生了兴趣。</p><p>但是！因为投递较晚，好多大厂都没了研发的 HC，我就投测开岗。没 Java 后端开发，我就投移动端，C++，甚至 PHP。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\73ecd32e-7470-443f-969e-35b508fcb1e9.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我才发现，原来，今年的秋招 8 月甚至 7 月就开始了。</p><blockquote><p> 秋招一般是从暑假那会就已经开始了！很多公司尤其是大厂都有提前批！</p></blockquote><p>我一直想着是等自己复习完，刷些题，准备好了再去投简历；但是，<strong>机会是不等人的</strong>。</p><p>我至今，都没敢投字节和阿里的秋招岗。好几次点入到官网的链接，又退了出来。因为自己知道没能力过得了笔试这一关。</p><p>我想：“春招一定要去弥补这个遗憾，通过笔试，一定要去争取到面试机会！”</p><p><strong>机会，并不是等你准备好了才来的</strong>。 这句话，可能是秋招给我最惨痛的一个教训。机会本来就瞬转即逝，你必须时刻准备着！</p><p>期间，陆续有简历被挂的情况。<strong>我参考了网上 IT 相关的简历不下 20 份，简历改了那么多次，到底是哪里出问题了呢？</strong></p><p>我自己一个字一个字的读了遍简历，还是觉得没有问题。找了个已工作的学长询问，学长说你作为一个双非本，可能更看重实习经历吧！</p><p>是呀，我是双非本，还没有实习经历，比赛经历。唯一能写的奖项，就是连续两年获得国家励志奖学金和学校的综测奖学金吧。所以说自己是秋招中裸奔的人，没有任何光环加持，只能跌跌撞撞的摸索。</p><h4 id="08-我的第一场正式面试"><a href="#08-我的第一场正式面试" class="headerlink" title="08 我的第一场正式面试"></a>08 我的第一场正式面试</h4><p>同秋招的同学，8 月份开始投简历，9 月每天都有平均一场面试。</p><p>再看看自己，投了简历，做测评，笔试，然后就没音讯……然后每天一边焦虑，一边自我安慰。</p><p>白天投简历，晚上复习…..好希望有个公司能够面我一下，哪怕是给我挂了，我也心甘情愿，面到就是赚到。</p><p>终于，在 9 月 13 日，我收到了好未来的面试，也是我人生中一次正式的面试，岗位为测试开发。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\79b40987-1c42-4f7e-a7bb-c26ec48801a9.jpeg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>我也不奢望自己能进入二面，只要能被面到，积累面试经验就可以了。</strong> 而且，今年绝大多数公司都是线上面试，这个还是线下。</p><p>我很紧张和畏惧，尤其还是测开岗位，自己对测试的知识根本没有接触过。</p><p>但是，我还是积极准备，恶补了下测试的相关知识，看了下面经，第二天早早到了指定地方。</p><p>在叫到我进去面试时，我看了一眼堆排，这样感觉更安心些。</p><p>我从容的来到面试厅，因为早已知道自己肯定会挂，所以也不那么紧张了。</p><p>面试厅有 20 多个面试官在针对到场的同学进行面试，和我一同走进去的，还有个西安交大的小姐姐，也是测开，我们两的面试官也是挨着的。</p><p>一面的面试官非常好，也正是他，给了备受打击的我一点自信，给了我很多的建议和指导。</p><p><strong>如果将来我有机会做面试官，一定也要做像这位前辈一样谦逊、耐心的人。</strong></p><p>他问了我为什么要做测试，我说:“我刚接触测试，自己一直学习 Java 开发线管的知识，觉得测试是从另一个角度来思考问题。测试更加注重问题的细节，逆向的思维，全局的观念，我觉得和研发互为补充，所以想尝试一下”。</p><p>期间，面试官问了我登录跳转的一个测试用例，可能对测试的同学来说是入门级的简单题。但是，我之前完全没接触过，只能靠着之前恶补的知识和自己写 Demo 时的经验，把能想到的情况全说了一遍。</p><p>一面面试官一直很耐心的听着，并没有因为我说的不正确或者跑偏而打断我。我回答完后，又很耐心的给我指出我错误的地方，同时给我写了测试开发在项目研发中参与的流程和工作，让我有了个主观的认知。又和我谈了些职业规划，给了我宝贵的建议。</p><p>剩下的就是一道基础的算法题（括号匹配），我竟然写出来了。还有网络和语言的基础问题，写了三个 SQL 语句。</p><p>面试持续了 45 分，面试完，我很真诚的说了感谢。我说：“这是我秋招开始投递简历以来，第一次参加面试。非常感谢您给了我这样的机会，同时谢谢您的建议和指导”。遇到给我带来启迪的面试官，真的十分的荣幸！</p><p>很意外，我对测试完全不知道的门外汉，面试官竟然给我过了，等待第二轮面试。</p><p>二面是在结果之中，自己没有对测试知识的了解，写算法题也没做出来，就挂了。</p><p>当我收拾东西准备推门离开的那一刻，刚好那个小姐姐面试通过，进去参加 HR 面。</p><p>我淘汰失败，她晋级成功。不同的方向，不同的结果。虽早已知晓答案，但心中还是羡慕。啥时候自己才能上岸呀！</p><h4 id="09-被笔试毒打的日子"><a href="#09-被笔试毒打的日子" class="headerlink" title="09 被笔试毒打的日子"></a>09 被笔试毒打的日子</h4><p>好未来面完，我基本上没啥面试了。每天就是在做测评，笔试，然后就没音讯…</p><p>期间，大厂的笔试题，对我这个算法菜鸡来说，简直就是被吊着锤 🥺。</p><p>大厂的笔试题，基本最多 AC 一道，剩下的只能是 A 一部分，边界情况基本都没改对过。DP 相关的题，我都是只写个框架，过个 0.X 这样。因为我只能保证一个小时左右才能拿下一道题，其他题没时间考虑；要么思路是正确的，本地跑通，提交就是过一半多，边界改不对。</p><p><strong>这就导致我根本无缘大厂，第一关笔试就被挡在了门外。</strong></p><p>影响最深刻的是美团，5 道题两个小时，我一道都没做出来。剩下的两道有半点思路，也只过了 0.2、0.15。很多大厂和独角兽企业的笔试，基本都是笔试完了，就真的完了！甚至，有好多测评和笔试都没给……</p><p>幸运的是，通过了小米和百度的笔试，拿到了面试机会。可能是运气来了吧，均为 3 道题，分别过了 2.1 和 2.4。</p><p>中小厂的还凑合，笔试题做的还行，大部分笔试完都能争取到面试，但面试都集中在了 10 月。</p><p>唯一笔试完有些许成就感的就是巨人和阅文，4 道题全 AK 了，但至今仍没音讯，可能自己投的太晚了哈哈~</p><p>对当晚参加完的笔试，第二天我几乎要花一天的时间来消化昨天的题目，请教牛客评论区的大佬们，自己再试着做一遍，好多还是做不出来。</p><p>DP 虐我千百遍，再见了依然是相逢何必曾相识~ 看着几十行的题目描述，有时甚至读多遍题都抽象不出问题模型，20 多分下来，依然无从下手。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\b0936b34-3036-4213-a7d2-6319471b639f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>九月，真的是非常难熬的一个月。每天都在投简历，做测评，笔试，理解笔试题。</p><p>准备了这么久，一次次被笔试挡在了门外，都没机会表达自己了解的知识。面对为数不多的几场面试，自己力不从心，很难把握住。</p><p>从开始时希望满满的投递简历，发现都是笔试一轮游。到后面自暴自弃不想去投递。再到自我安慰的去投递，相关公司的岗位都投一遍，因为不投递连一点点机会都没有，我也不期望一次上岸，只希望多积攒些面试经验。</p><p><strong>我只想要个面试机会，哪怕面一次挂了也行啊！</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cfc46cae-c8e2-498e-9894-e5a9348002cb.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>没有面试，我就到牛客网上参加模拟面试，对着 AI 讲。及时记录自己的盲区，知道但是表述不完整，还有长时间没复习遗忘的知识。唯一有所慰藉的是，9 月末拿到了钜泉科技的 Offer，偏硬件的测试开发岗。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ad0fe5f3-298e-4009-be9c-141b4ee2e679.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>虽然与预期的岗位不符，但是好歹在 9 月拿到了自己的第一个 Offer，算是给挫败的自己一点小小的鼓励吧！我这菜鸡，还是有公司要的呀。还剩一个多月，加油，一定可以的！</p><h4 id="10-获得百度-Offer"><a href="#10-获得百度-Offer" class="headerlink" title="10 获得百度 Offer"></a>10 获得百度 Offer</h4><p>国庆八天假期，我给自己放了两天假，其实就是倒头大睡了两天。印象中每年的国庆假期，西安仿佛都在下雨。</p><p>睡醒了就躺在床上想：“自己还有什么知识点没掌握牢固？每次开篇的自我介绍该怎么表达才能让面试官印象深刻？结束时针对面试官的“你还有什么要问我的吗” 该怎么去提问？想到了就立刻记下来，自己改怎么去更正”。</p><p>10 月 3 日，我起的很早，开始了 10 月份的战斗准备。剩下的 6 天，重点就是在复习数据库。</p><p>我把 MySQL 锁，索引，事务等相关的面试高频知识点结合面经总结了一遍。因为 9 月面 CVTE 时，问了很多数据库相关的问题，而我只会写写简单的 SQL 语句，问到时都是一脸懵。</p><p>期间，加了个内推群，了解到今年由于疫情的原因，群里好多海归、985/211 研究生大佬们都还是 0-Offer，对比自己目前的境况，又有些释然。</p><p><strong>排除最重要的主观因素个人能力不说，今年这样的大环境，竞争真的是异常激烈</strong>。 即便是海归或者高校的光环加持，大家求职也和我有类似的情况。</p><p>所以，我已经做好了春招的打算。一边投正式岗，一边投大厂的实习岗。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\fc7da9e2-7400-41cd-b081-2c6be85969a7.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>由于实习没笔试，能争取到面试，面到就是赚到！（但是，到现在为止实习被捞起来的，也只有滴滴一家，可能大部分都是针对 22 届的吧。三面时项目回答的不是太好，笔试题写了太久才勉强做出来，最终还是挂了！）</p><p>我告诉自己，<strong>当机会没来的时候，你一定要做好准备，等待它，把握它</strong>！ 一定要沉下心来，不断复盘自己之前的面试，及时查漏补缺，巩固知识点。</p><p>十月，貌似自己积攒了很久的好运和人品来了。陆续拿到了恒生，大华，泛微，苏宁，闻泰，ThoughtWorks 的 Offer，最意外的，还是收获了百度的 Offer。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1a23c0a0-ddd7-4f09-a91a-b7fb907c9506.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>点开邮件的那一刻，我没有丝毫的兴奋和激动。因为我觉得这不是真的，一定是 HR 发错邮件了吧！</p><p>回想当时一天三轮的技术面，三面主管面时问项目问到我说不出话，感觉答的那么差，当时面试结束就知道没了。</p><p>但也不亏，踩了很多坑，这是第一次真正面大厂，果然难度很大。自己也没查过官网的状态变化，因为面试结束的那一刻，我已经知道自己“<strong>挂了</strong>”的结果。</p><p>所以，我觉得这就和我开个玩笑吧！当天夜里，我一直在想这是不是真的。问了百度实习转正的同学，说我拿到 Offer 了，等着 HR 谈薪就好了。</p><p>我辗转反侧，一边喜悦，我终于上岸大厂了！一边顾虑，万一是 HR 发错了或者还不能十拿九稳怎么办，因为意向书上并没有我的名字，虽然我可以登录填写信息的入职后台。</p><p>就是这种纠结与矛盾，让我理智了下来。我告诉自己：“就当是个以外的惊喜吧，是的话当然如愿了；不是的话，不止于心里落差太大。你还是要全力备战所剩不多的机会，就当这个惊喜不存在”！</p><p>后面，也走完了小米，TW，滴滴的技术面试流程。</p><p>可能，这就是运气的推波助澜吧！让不可能变成了可能。感谢百度收了我，对我的认可。</p><p>我相信此刻还在找工作，或者准备参加春招的小伙伴们，你们一定很焦虑。如人饮水，冷暖自知。</p><p>有的时候，并不是你不够努力和优秀，而是属于你的那一份好运和机遇还没到吧。</p><p>以我个人为例，我觉得找工作就是 <strong>能力 + 机遇</strong>。</p><ul><li>70%是个人实力。因为你的专业素养足够强，你才能胜任你要求职的工作岗位</li><li>30%是机遇（运气）吧。有的时候，当运气来的时候，以你的能力为支撑，你的求职真的是一帆风顺的。</li></ul><p>小贤最近才找到自己理想的工作。以他为例，我觉得就是运气来的稍微晚些吧！</p><p>我觉得在算法做题方面，他比我真的厉害很多；专业知识和项目等都掌握的很牢固。但是，面试很多都是最后一轮技术面面完就没音讯了，他也很苦恼，很焦虑，准备去实习春招了。但是，就在昨天，他也理想上岸了。</p><p><strong>秋招到现在，已基本结束。</strong></p><p>现在，自己的算法、刷题能力依然是一塌糊涂！可能开始刷题对我来说会有一种恐惧感，拿到一道题，首先不是去想这道题该怎么做，而是我能不能做得出来。</p><p>但是，<strong>自己经历过一天做一道题的那种痛苦期，现在能够很客观的去对待刷题这件事，心里已经消除了这种恐惧感，多刷多积累即可。</strong></p><p><strong>就像我开始对编程并不感冒，完全是投入的时间和经历让我觉得做这件事是有意义的，慢慢才产生了兴趣。</strong></p><h4 id="11-下一站是未来"><a href="#11-下一站是未来" class="headerlink" title="11 下一站是未来"></a>11 下一站是未来</h4><p>我不确定自己能在这条路上走多远，因为人生充满了挑战与无限可能，面对日新月异的技术更迭，终身学习才能保持竞争力而不会被淘汰！</p><p>既然做出了选择，就要坚持走下去；技术没有强弱之分，只有接触的先后之差；能力不够，就多花时间和经历来沉淀。</p><p>每次当我笔试面试完失意时，就会循环放《追梦赤子心》：“关于理想我从来没选择放弃，即使在灰头土脸的日子里”。</p><p>也许每个失意的人，都需要找一个点来慰藉自己。这并不是引人肺腑的鸡汤文，而是迷茫挫败时的自我鼓励，当你内心有了坚定的追求，愿望和希望才会驱使你去奋斗，你才能有勇气和毅力走出眼前的困境。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\eea19b32-006a-4e40-9c41-366771bf5d7e.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>校园生活即将落下帷幕，打工人的生涯才刚刚开始。秋招对我来说不仅仅是招聘，更重要的是它为我迈出社会的第一步做了警醒。</p><p>大学四年，我没有什么很值得骄傲的经历，可能就是一个默默无闻的“平凡带学生”吧。但是，平凡，不能平庸。大学四年里，我好像从来没有把一件事情给做好过，这一次，我想要专心做好一件事，让自己不留遗憾。</p><p>我始终坚信一句话：<strong>凡事皆有可能，永远别说永远！</strong></p><h3 id="2年经验，2021-阿里、头条、美团，滴滴，京东面经"><a href="#2年经验，2021-阿里、头条、美团，滴滴，京东面经" class="headerlink" title="2年经验，2021 阿里、头条、美团，滴滴，京东面经"></a>2年经验，2021 阿里、头条、美团，滴滴，京东面经</h3><p>最近一段时间面试了几家互联网公司，陆续通过了阿里、头条、美团，滴滴，京东的面试，基本上面试的公司都通过了，所以在这里想分享一些自己面试的经验给大家，希望能帮助大家拿到心仪的 offer</p><p>我的基本情况：19 届本科，现在在一家小公司，毕业一年半，后端开发</p><h4 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a><strong>面试准备</strong></h4><h5 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h5><p>重点放在专业技能和项目经验两块</p><ol><li>你的简历就是你给面试官提供的考点，简历上的东西必须自己 Hold 住，万一自己写的东西被问住了，会很尴尬，给面试官留下的印象也不好，所以就是会啥写啥</li><li>技术栈最好不要写精通，你敢写面试官就敢问，被问倒了很尴尬的，写熟悉，了解就行</li></ol><p><strong>怎么投简历</strong></p><p>我这里强烈建议找人内推，这样简历通过的概率大些，如果找不到，可以试试脉脉，我就是从脉脉投的简历，把状态改成寻找机会就行，会有很多人找你的</p><p>推荐一个简历制作模版，我一直用的: <a href="https://www.polebrief.com/index" target="_blank" rel="noopener">https://www.polebrief.com/index</a>  。</p><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><p>这个该刷还是得刷，别偷懒，我个人感觉刷完下面几个已经够了，大家可以根据自己的基础情况选择</p><ol><li>剑指 Offer：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">https://www.nowcoder.com/ta/coding-interviews</a></li><li>刷 Leetcode，刷 Leetcode，刷 Leetcode！重要的事情说三遍，Leetcode 前 200 道</li><li>经典排序算法：<a href="https://blog.csdn.net/qq_35508033/article/details/109399281" target="_blank" rel="noopener">https://blog.csdn.net/qq_35508033/article/details/109399281</a></li></ol><h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h4><p>我复习主要以看书为主，推荐一些我看的书籍和资料，有时间的话尽量看的细一点，多看几遍，没时间的话就挑重点看</p><ul><li>并发编程：Java 并发编程的艺术，Java 发编程实战</li><li>JVM：深入理解 Java 虚拟机</li><li>Redis：Redis 设计与实现，Redis 开发与运维</li><li>MySQL：高性能 MySQL，MySQL 技术内幕</li><li>SpringBoot 和 SpringCloud：<a href="https://blog.didispace.com/" target="_blank" rel="noopener">https://blog.didispace.com/</a></li><li>Kafka：Apache Kafka 实战</li><li>设计模式：大话设计模式，设计模式之禅</li><li>分布式：从 Paxos 到 Zookeeper 分布式一致性原理与实践</li></ul><p><strong>需要书籍的 pdf 文档可以关注我的公众号，月伴飞鱼，回复 666 获取</strong></p><h4 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h4><p>社招面试项目很重要，不光是你项目本身的技术复杂度，还有业务复杂度，你本身在项目中担任的什么角色，遇到过什么问题，瓶颈在哪，怎么解决的，这几个问题是非常重要的，很多公司到最后基本上都是围绕着你的项目在问，给面试官讲明白你的项目是必须具备的能力</p><p>总结下社招面试问项目最主要的问题套路：</p><ol><li>你项目为什么这么设计，你这样设计有什么好处，解决了什么问题，会产生什么问题，还有什么可以优化的 </li><li>这么设计有什么瓶颈吗，遇到了什么问题，有什么改善的方案 </li><li>项目遇到的难点，技术挑战，你是怎么解决的，为什么用这种方式解决，还有更好的方式么 </li><li>根据你简历上提到的具体功能去扣细节 </li></ol><h4 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h4><ol><li>面试得自信且谦虚，声音自信，面试表现谦虚，得给面试官一种你啥都会，很稳的感觉(实际内心很慌），然后语言表达流畅，吐字清晰，回答问题也要有逻辑性，不能支支吾吾半天说不明白，面试官都听不懂，这就很尴尬了，这个可以自己多练习一下</li><li>面试本质是一个自我优势展示的过程，不要让面试官问一句自己回答一句，主动抛出一些可能的点让面试官来主动问你，还有就是不会的问题就说不会，这个没关系的，千万别瞎说</li><li>不要眼高手低，不少小伙伴看面经觉得自己啥都会，但是会与面试过程中能清晰有层次的说出来是两回事，费曼学习法可以了解一下，举个例子：比如 sychronized 的原理，能不能说出点面试官眼前一亮的东西，这还是不容易的，其实面试主要是证明你比别人更有技术的深度，广度，不然都是背八股文，那面试官看不出你有什么不一样的，这个面试过的概率就大大降低了</li></ol><p>个人建议，面试没准备好，不要随便面试，一些大厂都会有面试评价记录，太多差评影响以后的面试，同时面完之后要多总结，复盘，整理知识点，查漏补缺</p><h4 id="面试最后"><a href="#面试最后" class="headerlink" title="面试最后"></a>面试最后</h4><p>面试结束时问面试官什么问题</p><p>我一般会问：</p><ul><li>我面试的岗位的具体工作是什么</li><li>使用的技术栈有哪些</li></ul><p><strong>面试总结</strong></p><p>阿里的面试更倾向于实用性，基本是从各种场景出发，来给你一个场景，让你来解决实际的问题，那么在解决问题的过程中，对于各种知识的应用就是亮点了</p><p>头条更看重计算机基础，算法，以及对各种中间件的了解</p><p>面试也有不少的运气成分的，毕竟每个面试官的侧重点可能不一样，大家放平心态就好</p><p><strong>学习建议</strong></p><p>学习要形成自己的知识体系，不要天天盯着别人的面经(当然，我的面经可以看，哈哈)做碎片化学习，面经只是辅助作用，查漏补缺的，一旦你的知识体系有了，很多问题都能举一反三，这时候面试就很稳了</p><p><strong>下面是热乎乎的面经</strong></p><p><strong>注意：有些面试的题目比较少，因为有些面试题因为会被多个公司重复问 ，就不重复写了</strong></p><h4 id="美团"><a href="#美团" class="headerlink" title="美团"></a><strong>美团</strong></h4><h5 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h5><ol><li>线程安全的类有哪些，平时有使用么，用来解决什么问题</li><li>mysql 日志文件有哪些，分别介绍下作用</li><li>你们项目为什么用 redis，快在哪，怎么保证高性能，高并发的</li><li>redis 字典结构，hash 冲突怎么办，rehash，负载因子</li><li>jvm 了解哪些参数，用过哪些指令</li><li>zookeeper 的基本原理，数据模型，znode 类型，应用场景有哪些</li><li>一个热榜功能怎么设计，怎么设计缓存，如何保证缓存和数据库的一致性</li><li>容器化技术了解么，主要解决什么问题，原理是什么</li><li>算法：对于一个字符串，计算其中最长回文子串的长度</li><li>项目介绍</li></ol><h4 id="美团-1"><a href="#美团-1" class="headerlink" title="美团"></a>美团</h4><p><strong>因为之前的部门一面通过后，该部门没有 hc 了，就给我推荐到其他部门了，大厂 hc 还是挺紧张的</strong></p><h5 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h5><ol><li>redis 集群，为什么是 16384，哨兵模式，选举过程，会有脑裂问题么，raft 算法，优缺点</li><li>jvm 类加载器，自定义类加载器，双亲委派机制，优缺点，tomcat 类加载机制</li><li>tomcat 热部署，热加载了解么，怎么做到的</li><li>cms 收集器过程，g1 收集器原理，怎么实现可预测停顿的，region 的大小，结构</li><li>内存溢出，内存泄漏遇到过么，什么场景产生的，怎么解决的</li><li>锁升级过程，轻量锁可以变成偏向锁么，偏向锁可以变成无锁么，自旋锁，对象头结构，锁状态变化过程</li><li>kafka 重平衡，重启服务怎么保证 kafka 不发生重平衡，有什么方案</li><li>怎么理解分布式和微服务，为什么要拆分服务，会产生什么问题，怎么解决这些问题</li><li>你们用的什么消息中间件，kafka，为什么用 kafka，高吞吐量，怎么保证高吞吐量的，设计模型，零拷贝</li><li>算法 1：给定一个长度为 N 的整形数组 arr，其中有 N 个互不相等的自然数 1-N，请实现 arr 的排序，但是不要把下标 0∼N−1 位置上的数通过直接赋值的方式替换成 1∼N</li><li>算法 2：判断一个树是否是平衡二叉树</li></ol><h5 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h5><ol><li>Innodb 的结构了解么，磁盘页和缓存区是怎么配合，以及查找的，缓冲区和磁盘数据不一致怎么办，mysql 突然宕机了会出现数据丢失么</li><li>redis 字符串实现，sds 和 c 区别，空间预分配</li><li>redis 有序集合怎么实现的，跳表是什么，往跳表添加一个元素的过程，添加和获取元素，获取分数的时间复杂度，为什么不用红黑树，红黑树有什么特点，左旋右旋操作</li><li>io 模型了解么，多路复用，selete，poll，epoll，epoll 的结构，怎么注册事件，et 和 lt 模式</li><li>怎么理解高可用，如何保证高可用，有什么弊端，熔断机制，怎么实现</li><li>对于高并发怎么看，怎么算高并发，你们项目有么，如果有会产生什么问题，怎么解决</li><li>项目介绍</li><li>算法：给定一个二叉树，请计算节点值之和最大的路径的节点值之和是多少，这个路径的开始节点和结束节点可以是二叉树中的任意节点</li></ol><h5 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h5><ol><li>项目介绍</li><li>算法：求一个 float 数的立方根，牛顿迭代法</li><li>什么时候能入职，你对岗位的期望是什么</li><li>你还在面其他公司么，目前是一个什么流程</li></ol><h4 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a><strong>阿里</strong></h4><h5 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h5><ol><li>synchronized 原理，怎么保证可重入性，可见性，抛异常怎么办，和 lock 锁的区别，2 个线程同时访问 synchronized 的静态方法，2 个线程同时访问一个 synchronized 静态方法和非静态方法，分别怎么进行</li><li>volatile 作用，原理，怎么保证可见性的，内存屏障</li><li>你了解那些锁，乐观锁和悲观锁，为什么读要加锁，乐观锁为什么适合读场景，写场景不行么，会有什么问题，cas 原理</li><li>什么情况下产生死锁，怎么排查，怎么解决</li><li>一致性 hash 原理，解决什么问题，数据倾斜，为什么是 2 的 32 次方，20 次方可以么</li><li>redis 缓存穿透，布隆过滤器，怎么使用，有什么问题，怎么解决这个问题</li><li>redis 分布式锁，过期时间怎么定的，如果一个业务执行时间比较长，锁过期了怎么办，怎么保证释放锁的一个原子性，你们 redis 是集群的么，讲讲 redlock 算法</li><li>mysql 事务，acid，实现原理，脏读，脏写，隔离级别，实现原理，mvcc，幻读，间隙锁原理，什么情况下会使用间隙锁，锁失效怎么办，其他锁了解么，行锁，表锁</li><li>mysql 索引左前缀原理，怎么优化，哪些字段适合建索引，索引有什么优缺点</li><li>线上遇到过慢查询么，怎么定位，优化的，explain，using filesort 表示什么意思，产生原因，怎么解决</li><li>怎么理解幂等性，有遇到过实际场景么，怎么解决的，为什么用 redis，redis 过期了或者数据没了怎么办</li></ol><h5 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h5><ol><li>hashmap 原理，put 和 get，为什么是 8 转红黑树，红黑树节点添加过程，什么时候扩容，为什么是 0.75，扩容步骤，为什么分高低位，1.7 到 1.8 有什么优化，hash 算法做了哪些优化，头插法有什么问题，为什么线程不安全</li><li>arraylist 原理，为什么数组加 transient，add 和 get 时间复杂度，扩容原理，和 linkedlist 区别，原理，分别在什么场景下使用，为什么</li><li>了解哪些并发工具类</li><li>reentrantlock 的实现原理，加锁和释放锁的一个过程，aqs，公平和非公平，可重入，可中断怎么实现的</li><li>concurrenthashmap 原理，put，get，size，扩容，怎么保证线程安全的，1.7 和 1.8 的区别，为什么用 synchronized，分段锁有什么问题，hash 算法做了哪些优化</li><li>threadlocal 用过么，什么场景下使用的，原理，hash 冲突怎么办，扩容实现，会有线程安全问题么，内存泄漏产生原因，怎么解决</li><li>垃圾收集算法，各有什么优缺点，gc roots 有哪些，什么情况下会发生 full gc</li><li>了解哪些设计模式，工厂，策略，装饰者，桥接模式讲讲，单例模式会有什么问题</li><li>对 spring aop 的理解，解决什么问题，实现原理，jdk 动态代理，cglib 区别，优缺点，怎么实现方法的调用的</li><li>mysql 中有一个索引(a,b,c)，有一条 sql，where a = 1 and b &gt; 1 and c =1;可以用到索引么，为什么没用到，B+树的结构，为什么不用红黑树，B 树，一千万的数据大概多少次 io</li><li>mysql 聚簇索引，覆盖索引，底层结构，主键索引，没有主键怎么办，会自己生成主键为什么还要自定义主键，自动生成的主键有什么问题</li><li>redis 线程模型，单线程有什么优缺点，为什么单线程能保证高性能，什么情况下会出现阻塞，怎么解决</li><li>kafka 是怎么保证高可用性的，讲讲它的设计架构，为什么读写都在主分区，这样有什么优缺点</li><li>了解 DDD 么，不是很了解</li><li>你平时是怎么学习的</li><li>项目介绍</li></ol><h5 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h5><ol><li>线程有哪些状态，等待状态怎么产生，死锁状态的变化过程，中止状态，interrupt()方法</li><li>你怎么理解线程安全，哪些场景会产生线程安全问题，有什么解决办法</li><li>mysql 多事务执行会产生哪些问题，怎么解决这些问题</li><li>分库分表做过么，怎么做到不停机扩容，双写数据丢失怎么办，跨库事务怎么解决</li><li>你们用的 redis 集群么，扩容的过程，各个节点间怎么通信的</li><li>对象一定分配在堆上么，JIT，分层编译，逃逸分析</li><li>es 的写入，查询过程，底层实现，为什么这么设计</li><li>es 集群，脑裂问题，怎么产生的，如何解决</li><li>while(true)里面一直 new thread().start()会有什么问题</li><li>socket 了解么，tcp 和 udp 的实现区别，不了解，用的不多</li><li>设计一个秒杀系统能承受千万级并发，如果 redis 也扛不住了怎么办</li><li>项目介绍</li></ol><h5 id="四面"><a href="#四面" class="headerlink" title="四面"></a>四面</h5><ol><li>讲讲你最熟悉的技术，jvm，mysql，redis，具体哪方面</li><li>new Object[100]对象大小，它的一个对象引用大小，对象头结构</li><li>mysql 主从复制，主从延时怎么解决</li><li>怎么保证 redis 和 mysql 的一致性，redis 网络原因执行超时了会执行成功么，那不成功怎么保证数据一致性</li><li>redis 持久化过程，aof 持久化会出现阻塞么，一般什么情况下使用 rdb，aof</li><li>线上有遇到大流量的情况么，产生了什么问题，为什么数据库 2000qps 就撑不住了，有想过原因么，你们当时怎么处理的</li><li>限流怎么做，如果让你设计一个限流系统，怎么实现</li><li>dubbo 和 spring cloud 区别，具体区别，分别什么场景使用</li><li>给了几个场景解决分布式事务问题</li><li>项目介绍</li><li>你觉得你们的业务对公司有什么实际价值，体现在哪，有什么数据指标么</li></ol><h5 id="五面"><a href="#五面" class="headerlink" title="五面"></a>五面</h5><p><strong>hr 面完后又来了一面，说是交叉面</strong></p><ol><li>怎么理解用户态，内核态，为什么要分级别，有几种转换的方式，怎么转换的，转换失败怎么办</li><li>怎么理解异常，它的作用是什么，你们工作中是怎么使用的</li><li>你们用 redis 么，用来做什么，什么场景使用的，遇到过什么问题，怎么解决的</li><li>jvm 元空间内存结构，永久代有什么问题</li><li>你平时开发中怎么解决问题，假如现在线上有一个告警，你的解决思路，过程</li><li>你们为什么要用 mq，遇到过什么问题么，怎么就解决的</li><li>你觉得和友商相比，你们的优势在哪</li><li>聊天：炒股么，为什么买 B 站，天天用，看好他</li></ol><h4 id="菜鸟"><a href="#菜鸟" class="headerlink" title="菜鸟"></a>菜鸟</h4><p>不知道为啥可以同时两个流程，可能真的缺人(想去阿里的大家抓紧机会)</p><p>算是给我 2 次选择机会了，面了几面(2 面只用了 11 分钟，哈哈)，主要问项目了</p><h4 id="抖音"><a href="#抖音" class="headerlink" title="抖音"></a>抖音</h4><p>感觉头条不怎么问项目，或许是我项目太 low 了，比较喜欢问计算机基础和中间件知识</p><h5 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h5><ol><li>http 请求头，expire，cache-control 字段，状态码，301，302，401，403</li><li>https 原理，数字签名，数字证书，非对称加密算法过程，有什么问题</li><li>tcp 连接 client 和 server 有哪些状态，time_wait 状态</li><li>虚拟内存，虚拟地址和物理地址怎么转换，内存分段，内存分页，优缺点</li><li>linux 最多可以建立多少个 tcp 连接，client 端，server 端，超过了怎么办</li><li>eureka 原理，强一致性么，为什么，怎么保证强一致性，多级缓存怎么保证一致性，eureka 集群，宕机了服务还能调用么</li><li>hystrix 原理，半开状态知道么，具体的一个转换过程，它的隔离是怎么实现的</li><li>zookeeper 一致性保证，zab 协议原理，半数原则如果查询到另外一半呢，那 zookeeper 属于哪种一致性，强一致性么，还是最终一致性</li><li>zookeeper 选举机制，选举过程有什么问题</li><li>算法：最长不重复的连续子串</li><li>聊天：头条为什么用 go，对 java 和 go 怎么看，愿意转 go 么</li></ol><h5 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h5><ol><li>函数 a 调用函数 b 的过程，是怎么传参的</li><li>java 里面的函数调用有哪些，io 流里面有函数调用么</li><li>fork 函数，父子进程的区别，孤儿进程，僵尸进程会有什么问题，进程有哪些状态，进程间怎么同步，通信，消息队列，管道怎么实现的，进程调度算法，各有什么优缺点</li><li>dos 攻击，ddos 攻击，drdos 攻击，怎么解决，syn flood</li><li>自旋锁，线程上下文切换的开销具体是什么，中断，有哪些中断，用户态和内核态切换过程</li><li>一张大表怎么更改表的数据结构，字段，用 alter 会有什么问题，怎么解决呢，有什么好的方案，双写的话会有什么问题，还有其他方案么</li><li>redis 管道用过么，用来做什么，它的原理是，保证原子性么，和事务的区别，redis 事务保证原子性么</li><li>redis 强一致性么，怎么保证强一致性，有什么方案</li><li>kafka 怎么保证消息不丢失的</li><li>算法：找出所有相加之和为 n 的 k 个数的组合，组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字，输入: k = 3, x = 9 输出: [[1,2,6], [1,3,5], [2,3,4]]</li></ol><h5 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h5><p>感觉面试官很忙，就问了几个电商场景的技术解决方案</p><p>算法：一个环上有 10 个点,编号为 0-9,从 0 点出发,每步可以顺时针到下一个点,也可以逆时针到上一个点,求:经过 n 步又回到 0 点有多少种不同的走法</p><p>举例：</p><p>如果 n=1，则从 0 出发只能到 1 或者 9，不可能回到 0，共 0 种走法</p><p>如果 n=2，则从 0 出发有 4 条路径:0-&gt;1-&gt;2, 0-&gt;1-&gt;0, 0-&gt;9-&gt;8, 0-&gt;9-&gt;0,其中有两条回到了 0 点，故一共有 2 种走法</p><p>快手</p><p>感觉像刷 kpi 的，一看 JD 发现招的资深研发工程师，我对快手的印象又不好了</p><h5 id="一面-4"><a href="#一面-4" class="headerlink" title="一面"></a>一面</h5><p>手写 hashmap（卒）</p><h4 id="滴滴"><a href="#滴滴" class="headerlink" title="滴滴"></a><strong>滴滴</strong></h4><h5 id="一面-5"><a href="#一面-5" class="headerlink" title="一面"></a>一面</h5><ol><li>排序算法了解哪些，快排，快排复杂度，优化，堆排序，建堆过程</li><li>反射了解么，原理是什么</li><li>treemap 和 linkdedhashmap 区别，实现原理</li><li>jvm 类加载的过程讲讲，符号引用是什么，哪些情况会发生初始化</li><li>spring 的循环依赖，怎么解决的，为什么需要加个三级缓存，二级不行么</li><li>springboot 有什么特点，相比与 spring，了解 springboot 的自动装配的一个原理么</li><li>kafka 支持事务么，你们项目中有使用么，它的原理是什么</li><li>怎么统计一亿用户的日活，hyperloglog 有什么缺点，bitmap 不行么</li><li>算法：求一个环形链表的环的长度</li></ol><h5 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h5><ol><li>redis 的几种数据类型，你们用过哪些，zset 有用来做什么</li><li>垃圾收集器，cms 垃圾收集过程，为什么停顿时间短，有什么缺点，concurrent mode failure 怎么办，内存碎片怎么解决，为什么不用标记整理法</li><li>线程池原理，核心参数，线程数设置，参数动态调整后变化过程，Tomcat 线程池原理，常用的线程池，你们一般使用哪种，为什么，会有什么问题，线程抛异常怎么办，阻塞队列原理</li><li>做过分库分表么，为什么要分库分表，会有什么问题，多少数据适合分库分表，跨库，聚合操作怎么做</li><li>项目介绍</li><li>算法：给定一个二叉树, 找到该树中两个指定节点的最近公共祖先</li><li>你对自己有什么规划，想学习什么技术，最近在看什么书</li></ol><h5 id="三面-3"><a href="#三面-3" class="headerlink" title="三面"></a>三面</h5><ol><li>nio 讲讲，实现原理，优缺点</li><li>了解 netty 么，讲讲 netty 的设计模型，架构，使用场景</li><li>zookeeper 读写数据过程</li><li>项目介绍</li></ol><h4 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h4><h5 id="一面-6"><a href="#一面-6" class="headerlink" title="一面"></a>一面</h5><ol><li>tcp 和 udp 的区别，tcp 怎么保证可靠连接的，出现网络拥塞怎么解决</li><li>tcp 和 udp 的报文结构了解么</li><li>给了一个业务场景写 sql 语句</li><li>你们建表会定义自增 id 么，为什么，自增 id 用完了怎么办</li><li>一般你们怎么建 mysql 索引，基于什么原则，遇到过索引失效的情况么，怎么优化的</li><li>jvm 内存结构，堆结构，栈结构，a+b 操作数栈过程，方法返回地址什么时候回收，程序计数器什么时候为空</li><li>redis 实现分布式锁，还有其他方式么，zookeeper 怎么实现，各有什么有缺点，你们为什么用 redis 实现</li><li>算法：返回一个树的左视图</li></ol><h5 id="二面-4"><a href="#二面-4" class="headerlink" title="二面"></a>二面</h5><ol><li>spring 你比较了解哪方面，讲讲，生命周期，bean 创建过程</li><li>使用过事务么，遇到过事务失效的情况么，原因是什么</li><li>springboot 是怎么加载类的，通过什么方式</li><li>什么对象会进入老年代，eden 和 survivor 比例可以调整么，参数是什么，调整后会有什么问题</li><li>微信朋友圈设计，点赞，评论功能实现，拉黑呢，redis 数据没了怎么办</li><li>项目介绍</li><li>算法：给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。</li><li>请你将两个数相加，并以相同形式返回一个表示和的链表</li></ol><h5 id="三面-4"><a href="#三面-4" class="headerlink" title="三面"></a>三面</h5><p>感觉面试官对 es 很熟悉，一直问 es 问题</p><ol><li>es 倒排索引，原理，lucene，分词，分片，副本</li><li>es 写数据原理，数据实时么，为什么不实时，会丢数据么，segment，cache，buffer，translog 关系</li><li>es 深度分页，优化</li><li>项目介绍</li><li>算法：验证二叉搜索树</li></ol><h3 id="秋招拿下科大讯飞-SSP-经验分享"><a href="#秋招拿下科大讯飞-SSP-经验分享" class="headerlink" title="秋招拿下科大讯飞 SSP 经验分享"></a><strong>秋招拿下科大讯飞 SSP 经验分享</strong></h3><p>这是一位学弟热乎的面经。这位学弟本 211 硕 985，秋招大大小小拿了十几个 offer，三方签了荣耀 15b，两方签了科大讯飞（薪资等同 15a），京东实习转正。</p><p>这份面经非常详细，希望对你有帮助！</p><p>下面是正文。</p><h4 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h4><p>本 211 硕 985，半科班，一段研究所 C++实习，一段京东 Java 实习。几个专利，几个小比赛。秋招主要面向中小厂拿了十几个 OFFER，终签约科大讯飞(SSP,40W 左右)。</p><h4 id="时间路线表"><a href="#时间路线表" class="headerlink" title="时间路线表"></a>时间路线表</h4><p>下面是我从开始学习直到现在的<strong>时间路线表</strong>。</p><ol><li>2020 年十月到 2021 年五月学习 C++,后续转为学习 Java 后端。</li><li>2021 年暑期研究所实习 C++。</li><li>2021 年七月开始学习力扣，至 2022 年 3 月初，300 余道；截止目前近 500 道。学习力扣先看了 B 站 UP 主爱学习的是饲养员的入门课程，另外就是左程云的课程。其他基本是依靠力扣官网的解答。开了一个季度的力扣会员。</li><li>2021 年七月开始学习 Java 基础，集合，多线程，JavaWeb，SSM,SpringBoot。这些我基本是学习的尚硅谷的课程。当然也有一些是黑马程序员（例如 JUC、Java 集合）的。十月，开始了第一个项目：尚融宝。学习尚融宝我大致明白了 SpringBoot 怎么用，SSM 的一些基础知识，会一些 ElementUI 、Vue，NodeJs，EasyExcel 组件。以及对中间件 MySQL，Redis，单点登录有一定的了解。但尚融宝项目较大，其实我做了一半就面临找实习压力中途终止了。</li><li>2022 年三月一日，开始了我秋招第一场面试，阿里云一面。我初生牛犊不怕虎，有很多没答上，我依照自己的想法试着猜测底层实现方式，面试官最后给我过了，并且对我进行了一个比较高了评价。然而，阿里云二面，没有这么幸运，由于八股根本没准备过，二十分钟草草结束了。</li><li>2022 年三月，我开始学习八股文。我找实习期间的资料主要来自公众号代码界的小白、公众号 JavaGuide、美团技术博客、掘金和 CSDN 文章、UP 主跟着 Mic 学架构，以及牛客面经，<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247530558&idx=1&sn=cb2ed58af806ee3d3d174ce5ae09c7e3&scene=21#wechat_redirect" target="_blank" rel="noopener">知识星球</a> 的 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247530643&idx=2&sn=cf4855e15ea7c8a669c7896b8337292b&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》</a>。八股文的背诵主要通过面试加深印象，往往被面试官问住的八股你后续记忆是最清楚的。也许你这个时候还没准备好，那么试试面面小公司吧，面试小公司你可以大致了解到 Java 后端面试的重点集中在哪些地方。</li><li>2022 年三月十日左右，面了一个西安的小公司，外企风格，一场面试手写了四个题，写出了三个半（最后一个是字典树）。我拿到了第一个 OFFER,但规模确实很小，或许并不是我想要的，我就拒了。不过给我找实习路上增加了信心。</li><li>2022 年四月，我开始了第二个项目：牛客论坛。我选择牛客论坛的原因很简单：论坛具有一定的实用性，论坛包含的技术栈 MQ、ES 我还没了解过，以及 Spring 框架使用我不熟练。于是花了一个多月把牛客论坛做完了。同期，深入学习了 Redis 和 Mysql。</li><li>2022 年四月，京东一面，面试官上来就是一道回溯题，四个场景，说能写几个场景写几个场景，但写题时间只有半小时。我写了第一个，第二个一直有问题，我同面试官讲“我可能做不完，我讲一下我的思路”。面试官安慰我“我还是希望你把第二个写出来，你可以 debug，多打印一下中间变量”。于是我找到了 arraylist 拷贝的时候我只拷贝了地址，后面改为了构造函数拷贝就对了。总共写了 2 个场景的代码，顺利地，一面过了，二面也过了。五月，HR OC。</li><li>2022 年暑期，去京东实习了。在京东学习了很多，编码规范，部门的技术文章，组内系统的设计方案，每周的质量周会，跳点分析，以及实习导师对我严格的要求。实习期间主要负责做了一个并发场景下的组件，自己得到了锻炼。很幸运呆在一个氛围很不错的组，实习转正成功。同期，深入学习了 ES，独自开发过程中踩了 Spring 一些常见的坑。</li><li>2022 年 7 月初，开始了我的秋招。我的意向工作地点是成都。秋招我主要是通过官网投递简历，部分意向一般的企业是通过牛客一键投递的，国企大多是用前程无忧投递，意向度较高的企业是通过官网投递保证能进招聘的系统里。秋招的过程中，系统学习了小林 Codeing 的 Http 协议、TCP/IP 协议、操作系统相关知识，一个名为“Java 全栈知识体系”的网站中的基础知识，也学习了一个叫做“老齐谈架构”UP 主的一些视频，受益匪浅。提升了面试过程中场景题的应对能力。写了半个 Redis，跟着 B 站诸葛老师写了一个仅包含 IOC 和 AOP 功能的 Mini-Spring。同期，深入学习了 Kafka,了解了 SpringCloud 中的部分组件。</li><li>秋招我给自己定的是循序渐进的目标，初期希望薪资 15w，拿到 15w offer 再找 20w，再 25w，30w。其实我没想到秋招能找个 40w 左右的，主要原因是今年寒气逼人，Java 很卷，成都岗位数量少，大厂难进。后面讯飞打来电话，薪资我很满意，就签约上岸了。</li></ol><h4 id="实习面试"><a href="#实习面试" class="headerlink" title="实习面试"></a><strong>实习面试</strong></h4><h5 id="小厂实习面试"><a href="#小厂实习面试" class="headerlink" title="小厂实习面试"></a><strong>小厂实习面试</strong></h5><h6 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h6><ol><li>HashMap 的底层实现</li><li>快排有没有了解，归并和快排的区别，快排要递归吗</li><li>抽象类和接口区别</li><li>Java 线程状态如何变迁</li><li>线程怎么进入等待</li><li>用 put get lock unlock notiy 设计阻塞队列</li><li>什么是协程</li><li>什么是观察者模式</li><li>讲一下堆插入元素的详细过程以及堆的应用</li></ol><h6 id="JVM-1"><a href="#JVM-1" class="headerlink" title="JVM"></a>JVM</h6><ol><li>讲一下 JVM 内存回收机制</li><li>讲一下 Stop-The-World</li></ol><h6 id="网络与操作系统"><a href="#网络与操作系统" class="headerlink" title="网络与操作系统"></a>网络与操作系统</h6><ol><li>TCP/IP</li><li>TCP 与 UDP 对比</li><li>TCP 哪些机制保证可靠传输</li><li>HTTP 协议</li></ol><h6 id="中间件部分"><a href="#中间件部分" class="headerlink" title="中间件部分"></a>中间件部分</h6><ol><li>mybatis 分页插件</li><li>springboot 注解</li><li>springboot 线程池创建</li><li>微服务和分布式谈一下理解</li><li>对象存储存什么，OSS 权限管理怎么保证用户隐私</li><li>微服务远程调用</li><li>消息队列</li><li>单点登录</li><li>说一下事务</li><li>说一下 redis</li><li>Mybatis 缓存了解吗</li><li>了解 JPA 吗</li><li>自定义配置文件的读取方式有哪些</li></ol><h5 id="中大厂实习面试面经"><a href="#中大厂实习面试面经" class="headerlink" title="中大厂实习面试面经"></a>中大厂实习面试面经</h5><p>实习主要是通过 boss 直聘投递简历，简历单薄，导致投递反馈率比较低。好在东哥给了个机会，不然找实习大概率要灰溜溜收场了。</p><h6 id="阿里云实习二面"><a href="#阿里云实习二面" class="headerlink" title="阿里云实习二面"></a>阿里云实习二面</h6><ol><li>Mysql 查询（出生日期，性别）在表（id，性别，年龄，出生日期）中怎么设置索引</li><li>springboot 怎么实现自动装配？用到 springboot 哪些功能</li><li>进程与线程的区别</li><li>线程间的通信</li><li>redis 设置过期时间的命令</li><li>你的使用场景 redis 宕机了怎么办</li><li>你的数据字典存放有优化方案吗</li><li>你的 redis 的使用场景</li><li>arraylist 扩容机制？具体怎么扩容</li><li>如何让 hash 表里的数据 value 排序输出</li><li>treemap 是对 key 还是对 value 进行排序</li><li>讲一下 TCP 的滑动窗口</li></ol><h6 id="蚂蚁支付宝实习一面"><a href="#蚂蚁支付宝实习一面" class="headerlink" title="蚂蚁支付宝实习一面"></a>蚂蚁支付宝实习一面</h6><ol><li>面向对象的三大特性，讲一下封装</li><li>mysql 索引怎么选择？索引的优缺点？还有什么缺点</li><li>mysql 事务的特性？什么是持久性</li><li>业务里 redis 的过期策略设置</li><li>hashmap 的扩容机制？为什么扩容选择 2 倍。conhashmap 是线程安全的吗？怎么保证是线程安全的</li><li>线程的创建方式</li><li>进程间的通信方式讲一下</li><li>讲一下 tcp 和 udp 区别</li><li>tcp 建立连接后怎么保证可靠传输的</li><li>说一下快排，快排是稳定的吗？归并的稳定的吗？哪些排序算法是稳定哪些是不稳定的</li><li>jvm 垃圾回收机制，怎么找到垃圾、怎么回收垃圾</li><li>redis 的缓存击穿、穿透、雪崩各是什么情况</li><li>乐观锁、悲观锁、讲一下 cas，典型场景</li><li>读过开源项目源码吗？当项目领导你会怎么安排前后端人员工作</li><li>业务中的对象存储隐私问题怎么解决</li></ol><h6 id="字节暑期实习一面"><a href="#字节暑期实习一面" class="headerlink" title="字节暑期实习一面"></a>字节暑期实习一面</h6><ol><li>讲一下索引的你的理解</li><li>事务的特性</li><li>讲一下存储引擎，各有什么区别</li><li>MyISAM 与 InnoDB 的区别</li><li>数据库隔离级别</li><li>讲一下三次握手、四次分手具体</li><li>如何保证可靠传输</li><li>点击一个 url 如何处理</li><li>http 状态码讲一下</li><li>进程和线程的区别</li><li>进程间的通信，具体应用场景</li><li>写 sql，查出总成绩排名 3-10 名的 id</li><li>行升序二维数组的 top k</li><li>最长不重复子字符串</li></ol><h6 id="京东实习一面"><a href="#京东实习一面" class="headerlink" title="京东实习一面"></a>京东实习一面</h6><ol><li>一道回溯题</li><li>String 是不是基本类型、与 StringBuffer、与 StringBuilder 区别</li><li>索引失效的场景、场景题的索引设计</li><li>oss 数据库与 mysql 数据库不一致怎么解决</li><li>hashmap 原理、数组和链表的区别</li><li>redis 使用场景</li><li>异常和错误的区别</li></ol><h6 id="京东实习二面"><a href="#京东实习二面" class="headerlink" title="京东实习二面"></a>京东实习二面</h6><ol><li>个人爱好</li><li>你觉得好的商业模式</li></ol><h4 id="秋招面试"><a href="#秋招面试" class="headerlink" title="秋招面试"></a><strong>秋招面试</strong></h4><h5 id="秋招面试概况"><a href="#秋招面试概况" class="headerlink" title="秋招面试概况"></a>秋招面试概况</h5><p><img src="F:%5C%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97%5C%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97.assets%5Cimagesurl=https%3A%2F%2Farticle-images.zsxq.png" alt="img"></p><h5 id="秋招部分面试题"><a href="#秋招部分面试题" class="headerlink" title="秋招部分面试题"></a>秋招部分面试题</h5><p>以下是我秋招过程中出现的部分面试八股，大多是经过回忆简单记录下，若有八股问题不全请海涵。</p><h6 id="Java-基础-1"><a href="#Java-基础-1" class="headerlink" title="Java 基础"></a>Java 基础</h6><ol><li>HashMap</li><li>讲一下 TreeMap、HashMap、HashTable 的区别</li><li>排序稳定性</li><li>抽象类和接口的区别</li><li>继承和重写</li><li>敏捷开发模型</li></ol><h6 id="JVM-2"><a href="#JVM-2" class="headerlink" title="JVM"></a>JVM</h6><ol><li>垃圾回收算法</li><li>GCroot 有哪些</li><li>垃圾回收器选择原则</li><li>运行时数据区包含哪些</li></ol><h6 id="并发多线程"><a href="#并发多线程" class="headerlink" title="并发多线程"></a>并发多线程</h6><ol><li>进程和线程的区别</li><li>什么是死锁，死锁怎么解决</li><li>线程池参数</li><li>线程间的同步</li><li>并发编程包里有哪些常用 API</li><li>讲一下线程的同步</li></ol><h6 id="网络与操作系统-1"><a href="#网络与操作系统-1" class="headerlink" title="网络与操作系统"></a>网络与操作系统</h6><ol><li>网络模型的分层，网络模型为什么要分层</li><li>讲 https 是否安全</li><li>tcp 为什么是三次握手，而不是两次或者四次握手</li><li>tcp 和 udp 的区别</li><li>udp 的特点</li><li>AWK grep 了解吗</li><li>是否用过管道</li><li>多进程编程</li><li>讲一下进程间的通信</li><li>并发的锁机制</li><li>用户态和内核态的区别</li><li>虚拟内存和管道的选用</li><li>讲一下 gdb</li><li>虚拟内存的作用</li><li>多线程会用到虚拟内存吗</li><li>虚拟地址</li><li>软中断了解吗</li><li>零拷贝拷贝几次</li></ol><h6 id="数据库-2"><a href="#数据库-2" class="headerlink" title="数据库"></a>数据库</h6><ol><li>索引是什么,讲下索引类型</li><li>数据库的隔离级别</li><li>mySQL 怎么用游标</li><li>慢 sql 优化</li><li>mySQL 死锁怎么解决？mySQL 不能解决死锁的原因</li><li>sql 执行计划 range index 等</li><li>同一条 sql，不同规模数据会走同一条索引吗</li><li>mysql 删除一列 SQL 语句</li></ol><h6 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h6><ol><li>如何解决容器初始化 bean A 前初始化 bean B</li><li>讲一下 SpringCloud</li><li>微服务的远程调用有哪些可以实现</li></ol><h6 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h6><ol><li><p>redis 的应用场景</p></li><li><p>redis 的淘汰策略</p></li><li><p>redis 的过期策略</p></li><li><p>kafka 丢失消息和重发消息怎么解决</p></li><li><p>Kafka 消息丢失</p></li><li><p>Kafka 能否保证幂等性</p></li><li><p>了解 rabbitMQ 吗</p></li><li><p>es 为什么快，技术选型为什么不用 mongdb 或者 mysql</p></li></ol><h6 id="场景题"><a href="#场景题" class="headerlink" title="场景题"></a>场景题</h6><ol><li>上传多个 zip 文件到 oss，设计一个方案，需要前端展示上传进度</li><li>项目怎么分工的，有几个人，如何安排的方案</li><li>配置连接的账号密码怎么保证安全性</li><li>讲一下提交登录信息需要用到哪些注解</li><li>服务器开发，问安全性如何保证，接口安全性</li></ol><h6 id="综合问题"><a href="#综合问题" class="headerlink" title="综合问题"></a>综合问题</h6><ol><li>你的性格</li><li>兴趣爱好</li><li>实习的收获</li><li>描述最有意义的一件事</li><li>最自豪的事儿</li><li>讲下代码的最佳实践</li><li>操作系统怎么学</li><li>Java 怎么学的，为什么不学其他语言</li><li>说下金庸或者金庸武侠里的人物，说下最近了解的实事</li><li>源于创新性的体现，一分钟内说下报纸的用途</li></ol><h6 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h6><ol><li>反转每对括号间的子串</li><li>最长不重复字符串</li><li>两数之和</li><li>复原 IP 地址</li><li>找出最长的对称的字符串</li><li>二叉搜索树的判定</li><li>树的层序遍历</li></ol><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p><strong>我所信奉的秋招原则</strong>：永远没有准备好的时候，尽可能早的投递公司；算法题需要多做，大一点的公司（非国企）都会考算法；选择就业方向并充满信心，坚持下去；不要孤军作战，与同学做到互通有无。</p><p><strong>我的秋招面试经验</strong>：对于某些不会的知识点，你可以用你的猜想去表达而不是不说话。面试官考验的不仅仅是你的知识储备，求职者跟面试官的沟通也同等重要。</p><h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><h3 id="双非本秋招总结与心路历程，上岸-OPPO"><a href="#双非本秋招总结与心路历程，上岸-OPPO" class="headerlink" title="双非本秋招总结与心路历程，上岸 OPPO"></a><strong>双非本秋招总结与心路历程，上岸 OPPO</strong></h3><p>一位学弟的面经，非常详细地记录了自己的学习过程和心路历程。</p><p>下面是正文。</p><p>我的学历是双非本、文科学校（非杭电、深大或邮电类计算机强校），科班，leetcode 300+，后端开发方向。</p><p>秋招从 7 月中上旬开始到 11 月中旬，共投递近 200 家公司，约面公司约 14 家，有几家面试后来推掉了，今天最后一个池子终于开了，总结最终收获如下：</p><ul><li>签约：OPPO</li><li>Offer/OC/预录取：4399、政采云、乐刻运动、玄武云</li></ul><p>说一下自己的学习过程和心路吧，就当个故事听吧，真心希望对大家有帮助。（长文预警！！！）</p><h4 id="兴趣的起源"><a href="#兴趣的起源" class="headerlink" title="兴趣的起源"></a>兴趣的起源</h4><p>初中的时候同学都在看 DC 的超英剧闪电侠、绿箭侠之类的，我也跟着看，后来被安利了钢铁侠了，于是就一发不可收拾，我疯狂迷恋上了钢铁侠的高科技战甲，也为我之后职业选择埋下伏笔。</p><p>自己高中的时候其实是就读于潮汕地区数一数二的高中，高一高二都不好好学习，因为喜欢钢铁侠的缘故，去参加学校的科技社团搞机器人比赛，当时一直梦想着造出一个类似钢铁侠的外骨骼装甲，和同学一起造的机器人拿了省一等奖还搞了个专利，也因此认识了现在的女朋友。</p><p>Guide：这里划重点，认识了现在的女朋友！</p><p>之后高三一年也没多拼命学，最后只考上了广州本地一个普通一本。在专业选择上本来也想读自动化、机械电子之类的专业，但是因为想留在广东、女朋友、学校性质等原因，最后选择了现在这个外语学校的计算机专业，也是学校里唯一的工科专业了，也算是和自己兴趣比较接近的专业了，</p><p>但是近几年因为疫情和国际形势等的原因，学校的高考分数线不断下降，今年甚至爆冷上了热搜第二，我们自己都开玩笑说要变成带专了。上了这个双非大学心理落差其实非常大，因为自己初中成绩是年级一直第一才考上这么好的高中，高中全级的平均水平也是华工这样的 985，所以自己在高中就是个吊车尾的差生，和高中老同学一起时也会感到些许自卑。</p><h4 id="走上后端开发这条路"><a href="#走上后端开发这条路" class="headerlink" title="走上后端开发这条路"></a>走上后端开发这条路</h4><p>上了大学后加入了学校里的一个专门做开发的 IT 社团，从大一开始就学习后端开发，从 PHP 到 Go，最后再到 Java，做了大大小小不少项目，也帮学校开发了一个社团管理系统并被学校采用（我们社团其中一项重要工作就是帮学校建设一些数字化系统）。在我们学校某一天举办社团节活动上，这个项目需要被学校里很多同学使用，当天流量 PV 达到 10 万+，当时也非常有成就感，更加坚定了我要走后端开发的路。</p><p>还有就是去年社团里很多师兄师姐都进了大厂，而且还有微信的 HR 主动联系我们团队要简历，让我感觉虽然学历差点，但是努力提高技术水平，大厂还是很有希望的，也以此作为自己的一个目标和动力继续前进。自己也一直在这个团队里干了三年才退休，第三年也是担任了团队的最高负责人，参加这个团队是对我大学影响最大的一个经历。</p><h4 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h4><p>第一份实习是大二暑假时找的，面试进入了一个师姐的创业项目，一个小公司，没有办公场地只能线上办公，优点就是可以和学校的事情比较好地平衡时间，最后干了几个月就准备找下一份了实习了，还是想体会线下实习上班的感觉，这次实习的收获主要是积累了个项目经验。离开后我就开始系统化准备八股，冲三四月春招的实习了。</p><p>找第二份实习的过程给我挺大的打击，当时大中小厂都有投 ，先拿小厂练手后初步掌握了面试的感觉后，就开始面大中厂了。首先面了阿里，答得还不错，但是等了很久没有消息，问了内推人说过了，等面试官抽时间二面，结果之后又告诉我找到更合适的人选了。。。</p><p>之后被另一个部门捞了也是一面挂；之后面了网易又是一面挂，问到挺多自己盲区的，也意识到自己很多知识掌握的漏洞；最难受的是虎牙，一二面体验都不错，一面面试官水平很高，二面聊项目聊得很开心，面试官人也很好，结果苦等两周后 HR 说你很不错，但是我们的 hc 锁了（受腾讯影响），所有面试者的流程都冻结了，又在牛客上问了一个比我早一点面试然后成功进去实习的老哥，他说组里开会的时候说觉得我挺不错的想让我去，可惜被锁 hc 了，还说想帮我申请特批，但是这行情下人人自危最后也就作罢。</p><p>得知被锁 hc 后我非常难受，想不通为什么自己这么倒霉，两周里满怀希望、心心念念，结果不是自己实力不够，而是时代尘埃落在自己身上的一座大山，这个时候其实就已经开始感觉到行情非常不对劲了，寒气第一次真真切切地影响到了我。但好在最后拿到了数字广东实习的 Offer，很感谢数广的收留，当时学校里很多人也是去数广实习，因为今年数广真的是广州本地少数有在招实习生而且招得还不少的企业了，就凭这一点我吹爆数广，挽救了寒冬中不少人的实习下落！</p><p>实习期间也是第一次体会打工人上班以及企业开发的流程，组里氛围也非常好，办工环境也很 nice，各种下午茶福利也很多，非常难忘快乐的实习经历。因为疫情不能随意进出校门，最后也是和同学一起去外面租房了。同时了解到同级里搞前端、C++、网安、客户端的同学都找到了比我好很多的中大厂实习，年级里基本没几个搞 Java 后端的，所以那时也很郁闷，因为除了算法，Java 在开发领域的卷度说第二没人敢说第一，当时也开始有点后悔选了 Java 这个方向。</p><h4 id="艰难的秋招"><a href="#艰难的秋招" class="headerlink" title="艰难的秋招"></a>艰难的秋招</h4><p>七月下旬在数广辞职，组里的老大很想留我，甚至后来有确定有转正 hc 还叫我回去，非常感动，但是由于自己还是想专心秋招就还是没有留下了。然后就是正式开启的秋招之旅。</p><p>七月的时候最开始投了十多家，然后就开始复习。虽然春招找实习的时候已经感受到了寒气，加上学历差更加举步维艰，但是还是相信秋招作为应届生最大规模的校招，情况肯定还是会好转些的，但是现实让我狠狠打脸。七月剩下的日子和整个八月除了零星测评和笔试外，一个面试都没有。我开始慌了，八月下旬的时候开始海投几十家，而且同时听说另外一个同学早就投超过七八十家了还是 0 面试，所以心态开始有点小崩。之后到九月之前的日子也是测评笔试轮流转，还是一个面试也没有，当情绪到达低谷的时候，终于迎来了些许曙光。。。</p><p>九月，我终于开始有第一场面试，先是本地一家做数据库的小厂，再是 4399，广发银行、政采云等，慢慢就好了起来，面试也渐入佳境。9 月底也拿到了第一家意向——政采云，也是 9 月进的几个中小厂池子里最满意的一个，就有点想躺了。而且这个时候其实面了 OPPO 的一面，当时觉得这个时间点约我这个学历的来面是铁 KPI，但是这是我秋招所有有面试机会的公司中最大的一家，怎么能暴殄天物呢？所以也老老实实面了，但是心里属实没有报太大希望。国庆时也和女朋友出去耍了两天。</p><p>十月过完国庆后，又有多了几家中小厂的面试，比如途虎、百奥、拖了一个多月的 4399 终面、宁波银行深分等，同时也 9 月积攒的池子又开了一两个小厂，虽然有政采云保底，但是因为面试也不少，加上国庆又摆了几天，所以精神还是比较紧绷的。同时 OPPO 也迎来二面综合面，面试官非常和蔼可亲，会引导我，而且第一次有面试官愿意看我 GitHub，最后面完 11 点多了还赶紧让我去吃饭，当时面完心情也是非常好，想着就算是挂也是值了，有一个好的面试官真的真的对面试体验起到非常大的影响，非常感谢这个二面面试官，当时一整天心里都暖暖的。</p><p>之后不久也约了 HR 面，然后看到大家都在说 HR 面秒挂，我也没有抱太大的希望了，但是作为一场面试无论如何还是要尽力去准备和表现的，这是态度问题。看到别人的面经中会问是否用过或了解 OPPO 产品等的问题时，想到自己作为一个前 OPPO 用户，高中毕业典礼时还把当时的 OPPO A59m 给摔碎屏了哈哈哈。在这个问题上自己还是认真去准备了的，包括去官网了解各种手机型号、不同的产品线、自研芯片、生态等，了解了 OPPO 的三大发展战略，马里亚纳、潘塔纳尔等等。。。但是最后居然没问到，有点可惜。</p><p>过了一周后，进了池子并且很快就开到了（应该刚好赶上那一批），发了意向并在两天后正式 Offer，自己非常惊讶，本来已经做好去杭州的准备了，思考了几个被捞到的原因：除了前面的大佬拒了（一般是拿到了别的大厂），还有可能是和二面面试官聊得很来，最后就是之前虎牙锁我 hc 给的我攒下的人品吧。。。</p><p>之后零零散散还有些厂的约面，游卡、CVTE 等都拒了，开摆了，笔试也是，然后等到 11 月中旬最后一家 4399 才开出来，也是等了很久。最后也没啥悬念签下绿厂，结束了 23 届秋招这场异常艰难的战役。</p><h4 id="所想与感悟"><a href="#所想与感悟" class="headerlink" title="所想与感悟"></a>所想与感悟</h4><p>所以秋招也让我明白一个道理，找工作不像高考一样，可以精确地用分数来量化你是否达到了录用的门槛，每个高校都有自己非常明确的分数线，过了就是过了，没过就是没过；而找工作则是除了自己技术能力上达到要求之外（问的问题都基本答得出来），可能还和过往的经历、面试过程中对自己能力的展现、遇到的面试官的态度、与面试官是否有眼缘、其它竞争者的情况、前面是否有大佬拒了、公司的经营情况、hc 数量等等因素综合影响下，最后得出的结果。所以其实大家无论最后秋招确定去了哪里，符合预期也好，不符合预期也好，都要相信技术实力永远是决定你的下限的兜底，只要你技术摆在那，无论如何之后结果都不会太差的，校招不理想可以社招再跳，人生不会仅仅因为一场秋招而被定性，就像不会被一场高考而定性一样。</p><p>回看自己走过的长长的路，可以说是在寒冬中蹒跚前进，最后到达一个冰雪暂时消融的地方小憩，并期盼着春暖花开来临之际。在最后还算顺利地结束秋招之后，自己心里还是比较惶恐的，毕竟很怕进去之后身边都是各种 92 硕大佬被吊打，所以还是要保持一个持续学习不断前进的状态，同时也要搞毕设了。当然还是好好地享受一下成为社畜之前为数不多的假期，重拾下健身、好好打游戏之类的。</p><h4 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h4><p>如果是要给 24 届或之后的师弟师妹们一些建议的话，我觉得网上一些总所周知的就不说了，毕竟 Java 人从来不缺学习资料，比如刷题用代码随想录、八股看 JavaGuide 这些我就不再赘述了，应该说只要是行内人都非常熟悉了吧，说下几个我个人觉得比较实用的建议吧：</p><ol><li>关于提高面试通过率和项目准备上，我也是看了一个 b 站一个 up 主的分享觉得非常一针见血，打算分享给大家。大概意思就是说在项目中要体现自己的思考，通过思考的过程把项目的发展串联起来，引起面试官的兴趣，层层诱敌深入，让自己掌握面试的主导权，既然面试官被你引导得基本在聊你最熟悉的项目，问到你不会的八股的概率就大大减少了，面试通过率自然也就提高了。具体大家可以仔细品品原视频：<a href="https://www.bilibili.com/video/BV1oP4y1U769/" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1oP4y1U769/</a></li><li>关于赛道选择上，如果自己学历普通比如双非本科，想提高自己进大厂的概率，并且对自己实力比较有信心，可以不做我们普通的前后端开发，转而选择做基础架构方向，搞开源，例如牛客上最有名的 A 佬和 hzh 佬，他们都是我非常崇拜的大神，也是今年寒冬还可以疯狂收割大厂的本科生。当然难度上自然会高不少，但是也意味着能和你卷同个方向的人也少了很多。</li><li>关于软实力上，我觉得可能也是面试中很多人会忽略的一个点。比如你面试时表现出来的精神面貌、你的沟通表达或者说语言的运用能力、你的礼貌、你对一个问题是否有自己独到的看法（独立思考能力）等等。。。可能有人认为这不是非技术岗才会看的东西吗，我认为就算是技术岗这些同样不可忽视，因为等你步入职场后，人际交往、沟通表达等软实力也是非常重要的（更深的含义自己体会了），程序员不能仅仅只会写那么几个代码。</li></ol><h4 id="最后-1"><a href="#最后-1" class="headerlink" title="最后"></a>最后</h4><p>最后非常感谢你能看到这里，希望我的经历和建议对你有些许帮助，不管是能力提升上的作用也好还是精神上的激励也好，最后送给大家一句计算机之神 Knuth 老爷子的名言，希望真正热爱技术的大家可以坚持自己的热爱：</p><blockquote><p>A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better.</p></blockquote><h3 id="NLP-转后端开发，顺利拿到字节实习-offer！！"><a href="#NLP-转后端开发，顺利拿到字节实习-offer！！" class="headerlink" title="NLP 转后端开发，顺利拿到字节实习 offer！！"></a><strong>NLP 转后端开发，顺利拿到字节实习 offer！！</strong></h3><p>简单介绍一下我的基本情况，上海双非本 + 985 硕，目前在读研二。本科 + 研究生大部分时间都在搞算法， NLP 相关，今年终于认识到了理想和现实的差距，遂在 5 月份下定决心转后端开发。之后处理一些事情，暑假 7 月底的时候正式开始学习 Java，历时三个月， 9 月底开始投日常实习，10 月 17 结束。面试过的公司包括： B 站，蔚来，百度以及字节，B 站挂在二面，其他均拿到日常实习的 Offer，最终选择了字节跳动。</p><p>从以上我的基本情况大家能看出，我的战线比较短。但是在这些时间里，我的作息基本上都是早 7 晚 11，很辛苦。</p><p>这篇文章首先分享我的面试经历，后面的部分与大家分享我的学习经验。</p><h4 id="面经部分"><a href="#面经部分" class="headerlink" title="面经部分"></a>面经部分</h4><p>下面的部分总结了面试过程中被问到的知识点(还记得的部分)，以及我个人的一些心得体会，供大家参考。</p><h5 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h5><p>百度给我的面试体验还是蛮好的，是我面试的所有公司中唯一一家对八股考察非常详细的。一面是非常详细的八股面试，涉及到 Java 基础知识、数据库、spring、jvm、多线程、场景设计等等，基本上准备的都被问过了，但是整体来说难度不高，知识面比较广但是不会深挖。二面来说区别就非常大了，注重实践能力的考查，而且会深入到底层原理。</p><p>面试之前会有自我介绍的环节，包括项目介绍。百度两面对我的项目提问都不多，可能是我介绍项目的时候就比较详细的原因。</p><p>接下来的部分是知识点整理：</p><h6 id="百度一面-1h-："><a href="#百度一面-1h-：" class="headerlink" title="百度一面(1h+)："></a>百度一面(1h+)：</h6><ul><li>常用 GC 算法，常用的垃圾收集器， G1 了解吗</li><li>场景题： cpu 打满且频繁 full GC，怎么解决？</li><li>有 jvm 调优的经验吗？实际工作中遇到过内存相关的问题吗？用过哪些堆栈工具调试？</li><li>Mysql 索引，数据结构为什么使用 B+ 树</li><li>索引覆盖了解吗</li><li>索引失效的场景</li><li>简单描述一下数据库的四种隔离级别以及对应的三种相关问题</li><li>MVCC + 锁 保证隔离性</li><li>造成幻读的原因了解吗，快照读、当前读。</li><li>数据库自增 ID 和 UUID 对比</li><li>HashMap 源码，数据结构，如何避免哈希冲突，对比 HashTable</li><li>HashMap 源码中，计算 hash 值为什么有一个 高 16 位 和 低 16 位异或的过程？</li><li>为什么重写 equals 还要重写 hashCode，不重写会有什么问题</li><li>ConcurrentHashMap 底层实现，扩容问题。</li><li>如果让你自己实现哈希表，你会考虑什么问题？</li><li>场景题：亿级别黑名单、短链接，你考虑使用什么数据结构？布隆过滤器、前缀树。其中布隆过滤器问了基本的原理和实现方式</li><li>Java 引用类型，强软弱虚</li><li>Java 是引用传递还是值传递</li><li>Object 类你了解哪些方法</li><li>接口和抽象类的区别</li><li>线程池核心参数，以及工作原理</li><li>ReentrantLock 对比 sync 锁</li><li>lockInterruptibly()、acquire()、tryAcquire() 方法</li><li>CAS 机制了解吗，存在什么问题</li><li>对象锁和类锁的区别</li><li>如果让你自己实现阻塞队列，如何实现？阻塞唤醒这一部分，如何实现？</li><li>ThreadLocal ，Volatile</li><li>看你项目中用到了 Netty，简单介绍下吧。这里还有个 问题是问到 Netty 和 SpringBoot 整合的，但我一直都没理解她想问什么</li><li>粘包拆包问题，Netty 解决粘包拆包的 Decoder</li><li>Spring 事务了解吗，Spring 事务的注解不生效，是什么原因</li><li>算法题： 手写快速排序，时间复杂度，稳定性</li></ul><p>整理感觉不错，基本都答上来了，按照 Guide 哥星球里的内容，认真准备就好。</p><h6 id="百度二面-45-min-："><a href="#百度二面-45-min-：" class="headerlink" title="百度二面(45 min)："></a>百度二面(45 min)：</h6><ul><li>看你项目中用了一致性哈希做负载均衡，简单介绍一下</li><li>项目中 CompletableFuture 如何使用的</li><li>算法题：给定一个字符串，找到其中最长回文串</li><li>计网和组成原理学过吧，你认为哪个掌握的好？ 我选了计网。这一部分问的很深入，我没来得及记录，以下部分只是一些零散片段，但是整体问的时候是有逻辑的。</li><li>OSI 七层模型</li><li>TCP 三次握手，四次挥手整个过程包括状态的转换。为什么是三次握手、四次挥手。发送 Fin ，实际的意义代表什么？（发送方没有数据要发送了，可以断开连接）</li><li>四次挥手，为什么等待 2 MSL</li><li>流量控制、拥塞控制</li><li>后面关于网络就更深入了，TCP 底层是怎么实现的，如果让你用 Java 模拟 TCP 的过程，做一个仿真，你有什么想法。大学学习计网的时候，协议栈之类的了解过吗（这部分我都不懂，认栽了）</li><li>看你项目中用到了 Spring，自动装配的过程了解吗。</li><li>Spring 启动类的注解，介绍一下</li><li>因为我项目中用到了，所以被提问了 Spring 二次开发常用的扩展点，还涉及到了 Bean 的生命周期。 BeanPostProcessor，在你项目中如何使用的</li><li>Spring 中你常用哪些注解？ Autowired 实现原理</li></ul><p>计网仿真 TCP 以及后面深入的部分我不懂， Autowired 实现原理 没说清除，其余的都答上来了。</p><h5 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h5><p>在我整个的面试过程中，字节给我的体验是最好的。一面二面的面试官都非常好，面试的问题、要求都说的很清楚，需要注意的点都提前告诉了我，甚至二面的面试官会提醒我，”在回答问题的时候这边会有敲键盘的声音，是我在记录，不要影响你回答问题。”对于初次求职面试，体验感拉满。</p><p>除此之外，字节的面试和百度思路不一样。百度是从八股出发，引出一些实际场景遇到的问题。字节几乎没有八股，是从项目出发，结合工程经验，主要考察思考的过程，关键点答出来之后，结果对错可能不是很重要（这里是我主观臆断的）。</p><h6 id="字节一面-1h-："><a href="#字节一面-1h-：" class="headerlink" title="字节一面(1h)："></a>字节一面(1h)：</h6><ul><li>自我介绍，项目部分主要介绍了 rpc 项目，后续的问题都是基于这个项目</li><li>rpc 远程调用的整个流程</li><li>项目中的 SPI 机制，介绍一下原理以及你做了哪些改进</li><li>项目中用到了负载均衡算法，详细介绍一下</li><li>一致性哈希的原理，虚拟结点</li><li>项目中的序列化方案，为什么序列化，你都了解哪些常用的序列化方法。</li><li>你项目中使用了 Kyro 序列化，优点你提到了，缺点了解吗</li><li>通信协议是你自己设计的，假如后面需要变更，比如添加新的字段，你项目中如何处理的？</li><li>服务的灰度发布介绍一下，如何实现的？</li><li>Zookeeper 作为注册中心，假如崩溃了怎么办？这里开始连环问了</li><li>你提到了 Zookeeper 的一致性，它是如何保证的？</li><li>ZAB 协议，选举的过程，这里问的很详细</li><li>Zookeeper 是强一致性吗？</li><li>网络分区了解吗，CAP 理论</li><li>Zookeeper 如何应对网络分区的，脑裂问题了解吗，如何解决？</li><li>假如我同一时间有大量服务发布，你提到了 Zookeeper 只有主节点负责写， 怎么解决？假如主节点崩溃了，新选举出的主节点仍然没办法面对我的大流量，也崩溃了，如何解决？</li><li>MQ 的原理，你知道哪些 MQ，各自有什么特点，什么时候需要用 MQ</li><li>你刚才提到了服务端保护机制，如何实现的？这里我答了限制连接数以及接口限流，基于责任链模式。之后问了用到的令牌桶以外的常用限流算法。</li><li>算法题：链表反转，你知道的所有实现方式。这里我写了递归和非递归两种。</li></ul><p>整个面试的过程中大脑都是高速思考的，甚至从面试官的问题中得到了好多启发，是背八股掌握不到的，体验非常好。面试的问题几乎都答上来了，有一些不太熟悉的在面试官的提醒下也都回忆起来了(这点非常 nice，其他面试不会就直接过了，而字节会认真引导你，看你究竟掌握到什么程度)。事后 hr 小姐姐还告诉我面评非常好，鼓励我认真准备二面。</p><h6 id="字节二面-1h-："><a href="#字节二面-1h-：" class="headerlink" title="字节二面(1h)："></a>字节二面(1h)：</h6><p>字节二面的经历比较魔幻了， 面试官在伦敦有时差，因此是晚上九点开始面试的，由于面试官比较忙，整个面试过程比较简单，自我介绍 + 项目介绍之后简单提问了几个问题（没有印象深刻的技术问题，这里就不重复整理了），沟通了一下实习时间，直接做算法题了。</p><ul><li>算法题：有一个 n * n 的棋盘，每个格子有 RB@ 三个状态，R 表示红色，B 表示蓝色，@ 表示此路不通。机器人从左上角走到右下角，每次只有上下左右四个方向选择，相同颜色之间没有代价，跨越不同颜色代价为 1，求解机器人从左上角走到右下角，最少的代价。</li><li>这里我用回溯求解的，很快就写出来了，思路也没问题。但是复杂度计算卡住了，在面试官多次且反复的提示下，算出来了。 最后提问环节面试官跟我说后续优化可以加一些剪枝操作</li></ul><p>二面没有遇到难度比较大的问题，大部分时间都被我卡在了算时间复杂度(很菜勿喷)….</p><h5 id="B-站"><a href="#B-站" class="headerlink" title="B 站"></a>B 站</h5><p>综合来说，B 站面试给我的体验是非常差的，一面的时候我感觉还没进行比较深入的交流，问了一些八股，很快就结束了。二面上来之后，问了你觉得自己项目有什么亮点吗，然后就来了一道 Hard 算法，又结束了…….</p><h6 id="B-站一面-30-min"><a href="#B-站一面-30-min" class="headerlink" title="B 站一面(30 min)"></a>B 站一面(30 min)</h6><ul><li>Rpc 远程调用的流程</li><li>一致性哈希算法详细介绍</li><li>为什么选用 Zookeeper 作为注册中心，注册中心作用是什么</li><li>动态代理</li><li>Redis 在你项目中如何使用的，穿透、雪崩、击穿了解吗</li><li>你项目中用的是 RabbitMQ，为什么，和其他 MQ 对比如何？</li><li>RabbitMQ 的原理</li><li>你项目中的 灰度发布、分组管理如何实现的</li><li>无算法题</li></ul><p>之后在我以为他准备深入提问的时候，面试官告诉我面试结束了，整个过程不到 30 min，而且没有算法题。</p><h5 id="B-站二面-30-min"><a href="#B-站二面-30-min" class="headerlink" title="B 站二面(30 min)"></a>B 站二面(30 min)</h5><ul><li>简单介绍下你的项目，是工程项目、学校项目还是自己学习的</li><li>你认为项目中有什么亮点？</li><li>算法题：K 个有序数组，输出最终排序后的数组 （K merge）。</li></ul><p>B 站是我第一个走面试流程的公司，二面在字节一面的前一天。B 站二面是我第一次在面试过程中写算法题，结果就遇到个这，当时心态是崩掉的。因为第一次确实有些紧张，思路不清晰。虽然是力扣 Hard 难度吧，但是事后觉得也没有很难，做不出来还是大多归因于自己。但是复盘的过程中，我发现在面试的过程中，虽然太紧张了没实现出来，我把两种解题思路都思考到了，并且面试官提问时间复杂度，在提示下也求解出来了(很菜勿喷)，整体表现自我感觉也算可圈可点吧。</p><p>给大家的经验就是，平时刷题的时候时间复杂度求解一定要重视！</p><h4 id="备战部分"><a href="#备战部分" class="headerlink" title="备战部分"></a>备战部分</h4><p>下面是我从七月底写出第一行 Java HelloWorld 直到现在的大致时间表：</p><ul><li>七月底，正式开始投入时间学 Java，在师兄、师姐的推荐下选择了 JavaGuide 作为主线的学习资料，之后加入了<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247530558&idx=1&sn=cb2ed58af806ee3d3d174ce5ae09c7e3&scene=21#wechat_redirect" target="_blank" rel="noopener">知识星球</a>，认真阅读了关于学习路线的内容。</li><li>七月份用了一周多的时间熟悉 Java 语法。前期主要跟随 小码哥恋上数据结构课程，一边复习算法数据结构，一遍熟悉 Java 语法。</li><li>八月份开始，选择了 Guide 哥推荐的千峰商城项目作为入门，大概用了两周时间，全程跟随视频敲完代码，收获非常大。这一过程中，恋上数据结构这门课程是同步学习的，基本就是早晚做项目，下午学算法。</li><li>多线程、Jvm 方面的知识，我选择了马士兵的课程。这两部分是同时学习的，理解为主。选择马士兵课程的原因之一，是因为马老师讲课是以面试为导向的，一边理解一边掌握八股文了，效率比较高，总共耗时两周左右。</li><li>网络 IO 部分的知识 以及 Zookeeper、MQ 等中间件，这三部分是一起学习的，参考的资料包括马士兵课程、稀土掘金的 Zookeeper 课程、慕课网的 MQ 课程以及尚硅谷的一些资料，耗时大概一周左右吧。</li><li>以上打基础大概花费了一个月的时间。</li><li>九月份返校之后，开始着手准备简历上的项目，花了一些时间在 Guide 哥的知识星球里翻看优秀开源项目介绍，选择了 Guide 哥的手写 Rpc 项目以及星球推荐的 IM 项目。</li><li>有了基础之后，项目做起来还是比较快的，加上有源码可以参考，各自用了一周就基本实现完成了。这里总共耗时两周。</li><li>后面的时间里，我针对这两个项目做了深入研究。在极客时间和稀土掘金里，我分别找到了 rpc 和 IM 的相关课程。由于都是文字的形式，加上自己实现过基本功能，读起来非常快，快速整理出了课程内作者对于项目深入思考的部分，之后融合到自己的项目中。这里我认为是非常关键的一步，在面试的时候我能够顶住面试官的连环问，和这些课程中的相关内容以及思考题的深度是分不开的。在这一过程中，我还有幸加了几个作者大大的微信，不停地和作者交流自己的思考，甚至发现了课程中的一些小瑕疵。非常幸运他们都很有耐心，给予了我很多指导，尤其是 crossoverJie 大佬，几乎是有问必答，甚至在我面试之前，还给予了我很大鼓励（相当感动）。</li><li>大概到九月中旬，我就开始整理简历并且投递了，之后一边复习八股，一边完善项目。</li><li>九月底，我的项目已经基本整理完成了。我花了一周的时间系统梳理八股文，制作了很长的脑图帮助我回忆知识点。</li><li>十月份，国庆节的假期里，我保持着每天 15+题的速度，快速找回了算法题的手感。由于时间真的太仓促了，时间复杂度这一块我没有重视，后面也付出了惨痛的代价。提醒各位读者，算法复杂度的计算一定要重视起来。</li><li>最终功夫不负有心人，我收获了百度、蔚来以及字节的日常实习 offer。JavaGuide 以及<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247530558&idx=1&sn=cb2ed58af806ee3d3d174ce5ae09c7e3&scene=21#wechat_redirect" target="_blank" rel="noopener">知识星球</a>内部的 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247530643&idx=2&sn=cf4855e15ea7c8a669c7896b8337292b&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》</a>在我整个备战的过程中起了很大作用，是我的指路明灯。</li></ul><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>由于从本科开始就一直做算法 NLP 相关的工作，对后端开发了解甚少，加上时间紧迫，我不得不采取一种囫囵吞枣的方式进行学习。对我而言，在不到三个月的时间里，从 Java 的入门阶段到通过日常实习面试实在付出了太多，每天早 7 晚 11 的作息时间对身体也产生了一些伤害，如果时间允许，我更希望节奏慢下来，把每个知识点都学扎实、学透彻。</p><p>本篇面经实际上没有太多东西可以分享给大家，因为笔者实际上也只是一个才学了不到三个月 Java 的新手小白。如果说文章里有什么是值得大家参考的话，我希望是面对目标绝对坚持的毅力以及面对困难永不退缩的决心，是它们支撑着我逐渐越过一个又一个的“不可能”。</p><h3 id="2-年经验大厂（网易、字节、B站、阿里…）面经分享"><a href="#2-年经验大厂（网易、字节、B站、阿里…）面经分享" class="headerlink" title="2 年经验大厂（网易、字节、B站、阿里…）面经分享"></a>2 年经验大厂（网易、字节、B站、阿里…）面经分享</h3><p>这是一位20届球友的社招面经，获得了滴滴、网易、字节、B站、携程等公司的 offer，最终选择了字节。</p><p>下面是正文。</p><h4 id="北京滴滴-offer"><a href="#北京滴滴-offer" class="headerlink" title="北京滴滴(offer)"></a>北京滴滴(offer)</h4><h5 id="一面-7"><a href="#一面-7" class="headerlink" title="一面"></a>一面</h5><ol><li><p>自我介绍</p></li><li><p>介绍自己做的项目，难点有哪些，怎么处理的？</p></li><li><p>拆分读服务是微服务的什么思想？</p></li><li><p>拆新的服务和之前服务水平扩展 有什么不一样？</p></li><li><p>数据库层面有没有数据扩展？</p></li><li><p>QPS 8W 总单量是多少 ？</p></li><li><p>本地缓存怎么保证数据一致性？</p></li><li><p>MQ 如果挂了 怎么办？</p></li><li><p>Redis 集群了解吗？</p></li><li><p>数据清洗怎么做的？</p></li><li><p>如何保证最终一致性？</p></li><li><p>顺序消息如何保证？</p></li><li><p>ES 怎么用的？数据量级多少？为什么用ES 不用Hbase？</p></li><li><p>Zookeeper 作为注册中心有什么问题？如果 海量服务同时重启会出现什么问题</p></li><li><p>算法：环形链表 II</p></li></ol><h5 id="二面-5"><a href="#二面-5" class="headerlink" title="二面"></a>二面</h5><ol><li><p>项目介绍</p></li><li><p>大促期间服务总QPS ， 多少个服务，每个服务多少个线程</p></li><li><p>服务器线程数量根据什么来配置？</p></li><li><p>Redis 集群的工作原理？ gossip协议？ 写和读的流程？ CRC16 再取余 这个计算 在client 还是服务端？可以决定哪个key 放在哪个节点吗？</p></li><li><p>Redis 主从同步流程？</p></li><li><p>Redis 的 hash结构 怎么 rehash的？如果渐进式时，这些的key突然都不访问了 会有什么问题</p></li><li><p>MySQL innodb 引擎的索引结构，B+树一般都多高？ 层高怎么计算？</p></li><li><p>联合索引 abc where a = 3 and b &gt; 3 and c= 3 怎么走索引？</p></li><li><p>如果MySQL 表中有一个字段很大有几K会有什么问题？</p></li><li><p>索引下推了解吗？</p></li><li><p>场景设计：如何设计一个会议室预定系统？</p></li><li><p>算法: 给数组arry 和值 x 计算 数组 array 中差值绝对值为X的数对；</p></li></ol><h5 id="三面-HRBP"><a href="#三面-HRBP" class="headerlink" title="三面(HRBP)"></a>三面(HRBP)</h5><ol><li><p>离职原因；</p></li><li><p>用三个词评价一下你的领导；</p></li><li><p>未来规划；</p></li><li><p>你有什么缺点；</p></li><li><p>遇到过最大的问题；</p></li></ol><h5 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h5><p>一面整体上全是项目和场景考虑，因为他们是用go开发，我之前是用Java，所以一直在问中间件，没有Java八股文，不过中间件问的蛮深，面试体验很好；</p><h4 id="杭州网易-offer"><a href="#杭州网易-offer" class="headerlink" title="杭州网易(offer)"></a>杭州网易(offer)</h4><h5 id="一面-8"><a href="#一面-8" class="headerlink" title="一面"></a>一面</h5><ol><li><p>讲一下JUC 下的线程池，线程池参数以及提交任务后怎么执行</p></li><li><p>Lock 的加锁和解锁过程和公平锁和非公平锁实现原理</p></li><li><p>Conditional 源码有没有看过</p></li><li><p>阻塞队列 源码有没有看过</p></li><li><p>JVM 调优讲一下？非常细 什么命令 怎么分析的 面板什么样子都有问</p></li><li><p>CMS + ParNew 算法的对象分配和垃圾回收流程</p></li><li><p>什么时候会出发full gc</p></li><li><p>old区什么时候触发CMS GC 什么参数 配置大了会怎么样 配置小了会怎么样</p></li><li><p>为什么会产生浮动垃圾</p></li><li><p>MySQL 的隔离级别，MVCC 原理 ，乐观锁 在什么隔离级别才能使用？</p></li><li><p>Kafka 的ISR是什么，HW呢？怎么保证可靠性， Kafka 怎么实现顺序消息？为什么Kafka的broker上topic越多 效率越慢？</p></li><li><p>讲一下项目的完整流程 数据模型，多个版本经常变化怎么控制的？（每个校验模块提供原子能力 可以配置化，如何设计）</p></li><li><p>分布式事务 是怎么保证的， MQ的方式 如果本地执行成功同时服务挂掉了 这个MQ没有记录 怎么办？</p></li></ol><h5 id="二面-6"><a href="#二面-6" class="headerlink" title="二面"></a>二面</h5><ol><li><p>Zookeeper工作原理讲一下，有没有看过源码；</p></li><li><p>讲一下你负责的业务的服务架构，以及你们部门的服务架构；</p></li><li><p>你觉得现在架构有什么不合理的地方？</p></li><li><p>有没有看过什么中间件的源码？</p></li><li><p>区块链了解吗？</p></li></ol><h5 id="总结-15"><a href="#总结-15" class="headerlink" title="总结"></a>总结</h5><p>因为简历投错了部门，投到了区块链，所以问我很多源码，比较底层的东西，因为做区块链开发可能会难一点，所以会问有没有看过源码，整体面试体验很好；</p><h4 id="Shopee-offer"><a href="#Shopee-offer" class="headerlink" title="Shopee(offer)"></a>Shopee(offer)</h4><h5 id="一面-9"><a href="#一面-9" class="headerlink" title="一面"></a>一面</h5><ol><li><p>项目问题（ 聊了 30分钟）；</p></li><li><p>MySQL 主从同步原理；</p></li><li><p>MySQL 索引优化；</p></li><li><p>线上问题定位 以及优化过程；</p></li><li><p>Redis 集群 的工作原理，集群写入数据原理， 增删节点 如何数据同步？Redis的hash过程；</p></li><li><p>Kafka 讲一下，offset存储原理；</p></li><li><p>算法： 1.栈实现队列 2.三数之和</p></li></ol><h5 id="二面-7"><a href="#二面-7" class="headerlink" title="二面"></a>二面</h5><ol><li><p>介绍一下自己的亮点；</p></li><li><p>讲一下做的项目；</p></li><li><p>Kafka 讲一下；</p></li><li><p>MySQL 的索引讲一下；</p></li><li><p>Redis 的key过期 怎么删除的 ？主动删除 和被动删除；</p></li><li><p>Redis 击穿 雪崩 穿透 和解决办法；</p></li><li><p>MQ 同步信息怎么保证数据的一致性和实时性？</p></li><li><p>JVM调优过程说一下；</p></li><li><p>算法：1.二叉树的前序，中序，后序遍历； 2.最长重复子数组</p></li></ol><h5 id="总结-16"><a href="#总结-16" class="headerlink" title="总结"></a>总结</h5><p>参加的是周末专场面试，一个周末面完+出结果，整体是项目+中间件，算法每一面都是两道一个easy，一个mid，整体面试体验很不错；</p><h4 id="B站-offer"><a href="#B站-offer" class="headerlink" title="B站(offer)"></a>B站(offer)</h4><h5 id="一面-10"><a href="#一面-10" class="headerlink" title="一面"></a>一面</h5><ol><li><p>MySQL 行级锁，表级锁。意向锁 加锁时机是什么？ 项目中有没有使用过意向锁？</p></li><li><p>如果查询语句有没有索引，SQL调优过程？</p></li><li><p>Spring 事务注解原理，事务传播机制，使用过什么传播机制？</p></li><li><p>RocketMq 消费者重平衡 会有什么问题？重复消费？ 消费失败？ 这些场景如何处理</p></li><li><p>数据一致性怎么保证？ 分布式事务怎么实现？</p></li><li><p>动态代理有哪些，什么区别，使用注意方式；</p></li></ol><h5 id="二面-8"><a href="#二面-8" class="headerlink" title="二面"></a>二面</h5><ol><li><p>项目主要负责什么？</p></li><li><p>数据清洗怎么做的？</p></li><li><p>Kafka 怎么保证消息一定被消费？</p></li><li><p>qps8W 多少台机器？ 什么配置？ 总qps？ 线程数量？ mysql 版本？ 走的什么索引？ 会不会回表？</p></li><li><p>说了自己加redis和本地缓存 然后问我本地缓存的配置？</p></li><li><p>如何保证Redis，DB数据一致性？双删策略 为什么要多删除一次？</p></li><li><p>HashMap的扩容过程？ 会发生什么问题？</p></li><li><p>MyBatis 的接口和mapper怎么对应执行？</p></li><li><p>还做过什么技术优化？</p></li><li><p>分布式锁怎么实现？ 分布式锁怎么实现阻塞队列？</p></li><li><p>本地锁 怎么实现阻塞队列的唤醒的？</p></li><li><p>Zookeeper 怎么实现Cp？</p></li><li><p>ZK 怎么选举的 怎么投票的？</p></li><li><p>算法：1.多线程循环打印ABC； 2反转链表。因为是现场面试，纸上手写，所以给了两道题目难度都还好</p></li></ol><h5 id="三面-5"><a href="#三面-5" class="headerlink" title="三面"></a>三面</h5><ol><li><p>你们部门的服务架构讲一下？</p></li><li><p>接口优化怎么做？</p></li><li><p>什么场景下，都用过哪些并发？你用多线程的时候 Synchrionzed和ReentranLock怎么选择的？选择原则是什么？</p></li><li><p>压测和故障演练做过吗？ 你都扮演什么角色？有什么收获？</p></li><li><p>用的什么rpc和注册中心？有什么优缺点？</p></li><li><p>未来三五年规划？期望薪资？</p></li></ol><h5 id="总结-17"><a href="#总结-17" class="headerlink" title="总结"></a>总结</h5><p>因为是使用Java的，所以Spring问的比较多，一面比较贴合实际，都是面试官开发中常见的问题；二面对项目整体做个梳理和一些中间件知识；三面从架构和优化，压测等角度去问看看广度和高度吧主要；</p><h4 id="携程-offer"><a href="#携程-offer" class="headerlink" title="携程(offer)"></a>携程(offer)</h4><h5 id="一面-11"><a href="#一面-11" class="headerlink" title="一面"></a>一面</h5><ol><li><p>讲一下ArrayList和HashMap 底层数据结构，优缺点，使用方式；</p></li><li><p>CuurentHashMap有用过吗？</p></li><li><p>CAS 设计思路和原理？</p></li><li><p>ThreadLocal底层原理？</p></li><li><p>什么场景使用的ThreadLocal？</p></li><li><p>什么场景使用了多并发？</p></li><li><p>用到了Java jdk8的哪些新特性？</p></li><li><p>Lambda怎么用的，Stream的实现原理？</p></li><li><p>除了刚刚的场景 还有什么场景使用过异步任务，并发任务计算结果后做聚合 怎么做？</p></li><li><p>网络编程 用过吗？ IO讲一下</p></li><li><p>你开发中都用到了什么设计模式？</p></li><li><p>工厂模式的设计理念是什么？有什么好处？体现了什么编程思想？</p></li><li><p>适配器模式了解吗？ 策略和适配器模式有什么区别，你为什么选择用策略模式而不是适配器原因是什么？</p></li><li><p>设计模式都有什么开发原则？</p></li><li><p>JVM调优经验 说一下做了什么？</p></li><li><p>JVM 知识你讲一下？</p></li><li><p>Spring 事务注解Transaction 实现原理？</p></li><li><p>A方法调用B方法，如果B方法开启事务 则直接用B方法的事务，如果是你 你怎么设计怎么做？</p></li><li><p>InnoDb的默认隔离级别，可重复读，解决了什么问题 没有解决什么问题？</p></li><li><p>什么场景下使用了ES？</p></li><li><p>倒排索引 是什么讲一下？</p></li><li><p>为什么ES检索比较快？</p></li><li><p>你使用MQ（RocketMq和Kafka）的应用场景什么？</p></li></ol><h5 id="二面-9"><a href="#二面-9" class="headerlink" title="二面"></a>二面</h5><ol><li><p>服务器都多少线程，发起一个请求去调用第三方，是新增加一个请求吗？如果服务器线程使用完了怎么办？</p></li><li><p>灰度上线流程怎么做的？</p></li><li><p>数据洗刷 怎么做的 双写 怎么避免循环写？</p></li><li><p>ES 数据结构是怎么样的？</p></li><li><p>25匹马 5个赛道 怎么跑 才能最少批次找到最快的三匹马？</p></li><li><p>分裤分表下 怎么做业务逻辑查询？怎么生成一个全局唯一的id？</p></li><li><p>场景设计：给一个10G的文件，里面只有两行记录是一样的，如何找出（电脑内存只有500M）</p></li></ol><p>算法：有效的括号</p><h5 id="三面-6"><a href="#三面-6" class="headerlink" title="三面"></a>三面</h5><ol><li><p>负责的·项目 业务流程和 服务架构都说一下？（20min）</p></li><li><p>bigdecimal 使用需要注意什么，还有什么其他编程时需要注意的规范？</p></li><li><p>MySQL 库表上线之前需要做什么工作？</p></li><li><p>索引为什么是B+树结构，MySQL都有哪些引擎，有什么区别？</p></li><li><p>MySQL深度分页怎么解决？</p></li><li><p>ThreadLocal原理？使用需要注意什么？</p></li><li><p>如果做海外的业务，使用数据库需要注意什么地方？时区</p></li><li><p>有没有做过海外业务？多语言，多币种有没有什么解决方案？</p></li></ol><h5 id="总结-18"><a href="#总结-18" class="headerlink" title="总结"></a>总结</h5><p>感觉携程的面试比较中规中矩，基本上所有知识面都有考察到，也比较符合实际，项目，基础知识，场景设计，算法，代码规范都有，但是相应更看重 项目和基础知识和代码规范，面试体验很好；</p><h4 id="阿里-曲折的面试经历"><a href="#阿里-曲折的面试经历" class="headerlink" title="阿里(曲折的面试经历)"></a>阿里(曲折的面试经历)</h4><p>阿里一共面了三个部门：淘宝，饿了吗，供应链</p><p>年前面淘宝两面，到三面没有hc了，搁浅；饿了吗有同学联系，面完两面，结合自己情况不再考虑这个机会；年后又面了供应链，后来有offer，没有继续走流程；</p><h5 id="淘宝一面"><a href="#淘宝一面" class="headerlink" title="淘宝一面"></a>淘宝一面</h5><ol><li><p>先聊了20分钟项目 问难点 如何解决</p></li><li><p>HashMap在使用时需要注意什么地方 至少说出四点；</p></li><li><p>你的多并发控制是怎么使用的，都有哪些多并发控制手段</p></li><li><p>线上有死循环代码 你怎么排查定位到</p></li><li><p>MySQL的 事务 实现原理和隔离级别</p></li><li><p>对于索引，你觉得在开发中需要注意什么？</p></li><li><p>分布式锁的实现 和 底层原理 以及都有什么问题？</p></li><li><p>NIO 和 AIO 的区别</p></li><li><p>Kafka 的 架构和工作原理？</p></li><li><p>Kafka为什么这么快，顺序写 是这么实现的？</p></li><li><p>你觉得你做的业务的价值是什么 解决了什么问题？</p></li><li><p>你觉得 你做的对业务最有价值的一件事情是什么？</p></li><li><p>笔试：1.找出代码的bug 一段多线程代码 找出三个bug</p></li><li><p>给你Memcached Clinet 实现一个消息队列</p></li></ol><h5 id="淘宝二面"><a href="#淘宝二面" class="headerlink" title="淘宝二面"></a>淘宝二面</h5><ol><li><p>设计方案主要做哪些事</p></li><li><p>线程池的阻塞队列有几种，你们用的那种，拒绝策略有几种，你们用的哪个，为什么</p></li><li><p>线程池里面的execute 和 submit 方法有什么区别</p></li><li><p>线上线程池打满，如何优化的？JVM 你了解什么？ CMS 为什么会有浮动垃圾？ 什么时候会进行CMS GC？ 什么时候会进行Full GC？CMSGC和 FULL GC有什么不一样？</p></li><li><p>spring中bean的生命周期</p></li><li><p>explain 执行分析，你们主要关注哪些字段，为什么</p></li><li><p>线程池核心参数</p></li><li><p>java内存模型讲讲，内存屏障是干嘛的</p></li><li><p>Zookeeper 作注册中心 和nacos 和eruka 有什么差异 ？基于什么理论选择？</p></li><li><p>JVM调优经验说一下</p></li></ol><h5 id="总结-19"><a href="#总结-19" class="headerlink" title="总结"></a>总结</h5><p>很遗憾面到三面没有hc了（拥抱变化），面试更贴合实际，比如：HashMap在使用时需要注意什么地方 至少说出四点，看起来很简单，但是需要知道HasHMap的结构和工作原理，JVM和Spring问题会多一点，也会关注你的业务Sense，对业务有没有推动；</p><h4 id="字节-offer"><a href="#字节-offer" class="headerlink" title="字节(offer)"></a>字节(offer)</h4><h5 id="一面-12"><a href="#一面-12" class="headerlink" title="一面"></a>一面</h5><ol><li><p>项目问题（20min）</p></li><li><p>binlog 和 redolog 有什么区别？</p></li><li><p>MySQL 不同存储引擎有什么区别</p></li><li><p>Kafka 为什么这么快，主从同步怎么做的？HW 和LEO分别是什么；</p></li><li><p>让你实现一个消息中间件，你会设计哪些模块？</p></li><li><p>ES查询流程？</p></li><li><p>B+树的特性？</p></li><li><p>Select / Poll / Epoll 的区别？</p></li><li><p>Redis 集群工作原理？ 如何通信？MOVED和ASKED 有什么区别？</p></li><li><p>服务设计：设计一个短链系统；</p></li><li><p>算法：接雨水</p></li></ol><h5 id="二面-10"><a href="#二面-10" class="headerlink" title="二面"></a>二面</h5><ol><li><p>项目问题(10min)</p></li><li><p>JVM 的内存模型</p></li><li><p>G1 和CMS GC过程都说一下，分别适用什么场景？ JVM调优过程说一下？</p></li><li><p>内存溢出和内存泄漏？什么情况下会出现？ 怎么避免？</p></li><li><p>HTTPS 的工作原理？ 有哪些常见的加密算法？</p></li><li><p>顺序消息 如何实现？</p></li><li><p>数据库索引的原理？联合索引和索引下推？</p></li><li><p>Redis数据结构？为什么用快表而不用平衡查找树？</p></li><li><p>Redis主从复制过程？</p></li><li><p>一个数组 int[10] 在JVM内存上怎么分配的？多大空间？</p></li><li><p>场景设计：设计一个分布式限流器</p></li><li><p>算法：寻找重复的子树</p></li></ol><h5 id="三面-7"><a href="#三面-7" class="headerlink" title="三面"></a>三面</h5><ol><li><p>项目介绍；</p></li><li><p>DDD了解吗，讲一下？</p></li><li><p>RocketMQ有什么缺点？ Kafka有什么缺点？使用场景分别是什么？</p></li><li><p>用过什么设计模式？</p></li><li><p>使用Redis 需要注意哪些地方？</p></li><li><p>工作遇到过什么问题？ 如何解决的？</p></li><li><p>工作中和同事遇到冲突，如何解决？</p></li><li><p>场景设计：公司的各系统都有计数需求（如头条文章的阅读数、评论数、点赞数等），请设计一个统一计数服务。</p></li><li><p>算法：LFU 缓存</p></li><li><p>还有一些忘记了。。。</p></li></ol><h5 id="总结-20"><a href="#总结-20" class="headerlink" title="总结"></a>总结</h5><p>一二面考察比较全面，以技术问题为主，涉及面较广；具体包括：计算机基础、编程语言、数据结构与算法、系统设计题等一些问题会涉及到原理与细节；三面也会看反应力、方法论。面试体验比较好。</p><h3 id="腾讯云Java工程师一面-被捞一面-二面面经"><a href="#腾讯云Java工程师一面-被捞一面-二面面经" class="headerlink" title="腾讯云Java工程师一面 + 被捞一面 + 二面面经"></a>腾讯云Java工程师一面 + 被捞一面 + 二面面经</h3><h4 id="【一面】全程55min"><a href="#【一面】全程55min" class="headerlink" title="【一面】全程55min"></a>【一面】全程55min</h4><ol><li><p>先自我介绍一下吧</p></li><li><p>Java1.8 的新特性？你说到了 Lambda 表达式，你说说它的优缺点？</p></li><li><p>Java 8 的 Stream 流用过吗？有什么特点？</p></li><li><p>线程池创建的方式有哪些？ThreadPoolExecuter 的参数有哪些？</p></li><li><p>ArrayList 和 LinkedList 的区别在哪里？Queue 与 Deque 的区别？</p></li><li><p>HashMap 和 TreeMap 区别?</p></li><li><p>假设有一个10W的数据请求，你会有什么方法来实现这些数据的增删改查？</p></li><li><p>数据库的三大范式是什么？</p></li><li><p>MyISAM 和 InnoDB 的区别?</p></li><li><p>MySQL主键索引和普通索引的区别是什么？谁的性能更好一些？如果是在10W级的数据下，谁的性能更好些？</p></li><li><p>介绍一下联合索引吧？</p></li><li><p>以（a,b,c)为例，在什么情况下，单查 b 也能够命中联合索引？</p></li><li><p>算法题：手写代码实现单向链表的结构体，完成增删改查。</p></li><li><p>反问环节：你有什么问题想问我的不？</p></li></ol><p>面试总结：感觉问题的题目不是太难，只怪自己太菜，基础没掌握好，面试官人不错，要是有人捞，我还想再来一次！第二天流程已结束。。</p><p>好家伙，不知道发生了什么，我又开始了新的流程，这难道就是传说中的二战！！！还是腾讯云。</p><h4 id="【一面】全程46min"><a href="#【一面】全程46min" class="headerlink" title="【一面】全程46min"></a>【一面】全程46min</h4><ol><li><p>自我介绍，</p></li><li><p>接着就是来俩算法题：题1：统计一串字符中，重叠字符出现的次数。（如AAABBBCC，输出A_3_B_3_C_2）题2：求两个字符的最长公共子串</p></li><li><p>你用过哪些数据库？MySQL数据库的存储引擎了解过哪些？这些存储引擎的特点是什么？</p></li><li><p>MySQL 默认是什么存储引擎，为啥用这个？</p></li><li><p>InnoDB和MyISAM的有啥区别？和MEMORY呢？</p></li><li><p>InnoDB为啥索引的数据结果要用B+树？</p></li><li><p>为啥不用Hash索引?Hash索引查找的时候不是更快吗？</p></li><li><p>网络编程了解过吗？说说如何创建一个Socket连接</p></li><li><p>C++的基本数据结构了解过吗？</p></li><li><p>反问环节：你有什么问题想问我的不？</p></li></ol><h4 id="【二面】全程43min"><a href="#【二面】全程43min" class="headerlink" title="【二面】全程43min"></a>【二面】全程43min</h4><p>今天上午突然给我发邮件让我下午二面，这霸道总裁的通知风格。。。</p><ol><li><p>看你有个比赛，你这个比赛里面做的什么？（15min）</p></li><li><p>你还写过哪些应用程序，说说看？数据存储用的什么，web服务器用的什么？</p></li><li><p>C++了解过吗？</p></li><li><p>软件设计师什么时候考的？？</p></li><li><p>写过多进程和多进程吗？都在什么情况下用过？遇到了什么困难不？</p></li><li><p>有没有 Linux 下的编程经验？</p></li><li><p>Linux常用命令了解哪些？</p></li><li><p>网络编程用过吗？Sokect？</p></li><li><p>Linux中的epoll和select这些多路复用了解过吗？</p></li><li><p>说说五层网络模型吧，说说对应的协议吧</p></li><li><p>抓过网络包吗？</p></li><li><p>如果要设计一个快速插入和查找的数据结构，你会用什么结构？Hash冲突的解决方法？</p></li><li><p>有一个容量为N的数组，里面存放了N个数，每个数的取值范围是1~N，有没有什么快速办法判断是否有重复元素，哪个元素重复了？空间复杂度要求是O(1)</p></li><li><p>求二叉树深度的算法呢？说说看？时间和空间尽可能的小</p></li><li><p>设计模式了解过吗？了解一下</p></li><li><p>UML类图理解的怎么样？画个类图吗？</p></li><li><p>云计算的知识了解吗？容器用过吗？大数据套件了解过吗？ELK了解过吗？看过开源架构系统的代码吗？（这全是知识盲区啊。。。）</p></li><li><p>分布式存储了解过吗？</p></li><li><p>一个进程的栈大小是多少知道吗？打开文件的上限是多少？</p></li><li><p>你觉得你擅长做什么业务？</p></li><li><p>反问环节</p></li></ol><p>总结：整个过程主动补充有点少，导致场面数次陷入安静的尴尬场面，最长的一次甚至长达30多秒。以后的面试还是要多多扩展自己讲的内容。</p><p>文|牛客网：牛客71576213号</p><h4 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h4><p>上面的绝大部分问题，你都可以在下面的这几篇文章中找到答案。</p><ol><li><p><a href="https://javaguide.cn/java/new-features/java8-common-new-features.html" target="_blank" rel="noopener">Java8 新特性实战</a></p></li><li><p><a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary.html" target="_blank" rel="noopener">Java 线程池详解</a></p></li><li><p><a href="https://javaguide.cn/java/collection/java-collection-questions-01.html" target="_blank" rel="noopener">Java集合常见知识点&amp;面试题总结(上)</a></p></li><li><p><a href="https://javaguide.cn/java/collection/java-collection-questions-02.html" target="_blank" rel="noopener">Java集合常见知识点&amp;面试题总结(下)</a></p></li><li><p><a href="https://javaguide.cn/database/basis.html" target="_blank" rel="noopener">数据库基础知识</a></p></li><li><p><a href="https://javaguide.cn/database/mysql/mysql-questions-01.html" target="_blank" rel="noopener">MySQL知识点&amp;面试题总结</a></p></li><li><p><a href="https://javaguide.cn/database/mysql/mysql-index.html" target="_blank" rel="noopener">MySQL 索引详解</a></p></li><li><p><a href="https://javaguide.cn/cs-basics/operating-system/linux-intro.html" target="_blank" rel="noopener">后端程序员必备的 Linux 基础知识总结</a></p></li><li><p><a href="https://javaguide.cn/cs-basics/network/osi&tcp-ip-model.html" target="_blank" rel="noopener">OSI 和 TCP/IP 网络分层模型详解（基础）</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》</a></p></li></ol><h3 id="步步高-Java-后端校招-6-面面经"><a href="#步步高-Java-后端校招-6-面面经" class="headerlink" title="步步高 Java 后端校招 6 面面经"></a>步步高 Java 后端校招 6 面面经</h3><blockquote><p>我对步步高的记忆主要还停留在小时候，那时候步步高点点读机是真的火爆，广告直接都给洗脑了。</p><p>步步高虽然不是什么大型互联网公司，但是这份面经总体还是非常高质量的！这侧面说明了这家公司的的技术栈也还是比较主流的。</p></blockquote><h4 id="一面（50-分钟）3-月-3-号"><a href="#一面（50-分钟）3-月-3-号" class="headerlink" title="一面（50 分钟）3 月 3 号"></a>一面（50 分钟）3 月 3 号</h4><ol><li><p>介绍一下项目</p></li><li><p>项目是视频还是通过什么途径学习的？</p></li><li><p>你认为项目中复杂的点是什么？</p></li><li><p>Redis 的使用场景？</p></li><li><p>Redis 的高并发是依靠什么去保证的？</p></li><li><p>ThreadLocal 用在哪，为什么选择 ThreadLocal 呢？</p></li><li><p>项目上线了嘛？部署在哪里？怎么部署的？</p></li><li><p>注解实现缓存和日志统一处理是怎么做的？</p></li><li><p>SpringBoot 分哪些模块？</p></li><li><p>项目中的分页是怎么实现的？</p></li><li><p>项目中都有哪些 sql 表说一下吧？</p></li><li><p>消息队列 MQ 用过吗？说一下？-</p></li><li><p>分布式锁这块有用到吗？-</p></li><li><p>说一下常用的一些集合？</p></li><li><p>说一下 HashSet 的原理？</p></li><li><p>说一下 HashSet 与 HashMap 的区别？</p></li><li><p>线程安全的集合类有哪些？</p></li><li><p>锁重入了解过嘛？那些锁支持锁重入？</p></li><li><p>说一下锁升级的过程？</p></li><li><p>数据库中的锁有哪些？</p></li><li><p>Java8 的新特性 Stream 流、Lambda 表达式说一下？</p></li><li><p>TCP 和 HTTP 协议之间的关系，有什么区别？</p></li><li><p>TCP/IP 参考模型，每层都是封装的什么？</p></li><li><p>TCP 是可靠的嘛？那么 UDP 呢？</p></li><li><p>TCP 如何保证我们的可靠传输的？</p></li><li><p>说一下 TCP 中拥塞控制的一个过程？</p></li><li><p>Linux 查看 ip 地址的命令？</p></li><li><p>说一下聚簇索引和非聚簇的区别？</p></li><li><p>事务的隔离级别和每个级别所产生的问题?</p></li><li><p>实际开发中最常使用的隔离界别</p></li><li><p>创建线程的方式?说一下？</p></li><li><p>讲一下同步和异步的区别？</p></li><li><p>说一下项目中 Nginx 的作用？</p></li><li><p>说一下 JMM 吧</p></li><li><p>说一下常见的垃圾回收算法吧？</p></li><li><p>JMM 的三个特性是哪三个？</p></li><li><p>如何保证原子性，volatile 的作用呢？</p></li><li><p>ThreadLocal 和 synchronized 的区别</p></li><li><p>Redis 的 rdb 和 aof 说一下吧，区别呢？</p></li><li><p>为什么 fork 一个子进程呢？</p></li><li><p>Redis 有持久化为什么还要用 MySQL 呢？</p></li><li><p>MySQL 数据也会有丢失的情况呀？是如何保证的呢？</p></li><li><p>单节点和集群的区别，集群解决了什么问题？</p></li><li><p>主从复制解决了什么问题？</p></li><li><p>Redis 集群的原理</p></li><li><p>MySQL 为什么要采用读写分离呢？</p></li><li><p>除了 MySQL、Redis 外还了解过其他数据库嘛？</p></li><li><p>用过 Docker 嘛？</p></li><li><p>使用 Docker 部署的好处是什么？相比原始部署？</p></li><li><p>最近看了哪些书呢？</p></li><li><p>反问</p></li></ol><h4 id="二面-25-分钟-3-月-5-号"><a href="#二面-25-分钟-3-月-5-号" class="headerlink" title="二面(25 分钟) 3 月 5 号"></a>二面(25 分钟) 3 月 5 号</h4><ol><li><p>Redis 为什么快？</p></li><li><p>线程的创建方式？</p></li><li><p>怎么在 Linux 服务器上部署项目？</p></li><li><p>使用过 Docker 嘛？</p></li><li><p>Docker 与 Linux 相比为什么性能更好？</p></li><li><p>如何进行 sql 优化？你自己实践哪些手段？</p></li><li><p>我们 MySQL 读写压力很大，怎么解决？</p></li><li><p>说一下 TCP 三次握手、四次挥手？</p></li><li><p>MQ 是什么？</p></li><li><p>项目是怎么做的？实习项目还是自己做的？</p></li><li><p>如何设计秒杀系统</p></li><li><p>实际开发中如何解决高并发的问题？你知道哪些手段？实践过哪些手段？</p></li><li><p>校园的实践经历</p></li><li><p>为什么来参加春招，是没 offer 吗？</p></li><li><p>手里有几个 offer ？</p></li><li><p>以后的发展方向是走技术管理，还是架构方向？</p></li><li><p>说一下在你眼里技术管理和技术架构的区别？</p></li><li><p>如果领导让你 3 天完成一个任务，但是你 4 天才能完成</p></li><li><p>谈一下你对加班的看法？</p></li><li><p>你将来计划打算学到什么，提升 Java 哪方面技能？</p></li><li><p>反问</p></li></ol><h4 id="三面（HR-面，20-分钟）-3-月-8-号"><a href="#三面（HR-面，20-分钟）-3-月-8-号" class="headerlink" title="三面（HR 面，20 分钟） 3 月 8 号"></a>三面（HR 面，20 分钟） 3 月 8 号</h4><ol><li><p>为什么会有写博客的习惯呢，出发点是什么？</p></li><li><p>这个博客是有粉丝的吗？你有多少粉丝呢?</p></li><li><p>大学校园经历中有意义的一些事情？</p></li><li><p>大学当中跟室友的关系怎么样？</p></li><li><p>为什么没有参加秋招呢？</p></li><li><p>找工作跟考研之间是怎么权衡的呢？</p></li><li><p>讲一下在自己的个人项目中学到了什么呢？</p></li><li><p>大学期间有没有低谷期间</p></li><li><p>手里有其他的公司的 offer 吗？</p></li><li><p>offer 是哪家公司的？</p></li><li><p>期望薪资是多少，年薪呢？</p></li><li><p>反问</p></li></ol><h4 id="四面（终面，7-分钟）-3-月-11-号"><a href="#四面（终面，7-分钟）-3-月-11-号" class="headerlink" title="四面（终面，7 分钟） 3 月 11 号"></a>四面（终面，7 分钟） 3 月 11 号</h4><p>一个非常让人讨厌的领导，说话阴阳怪气的，开头第一句话就是你的成绩不咋地啊（无挂科平均成绩在 80+）。</p><p>1。 有没有实习的经验 ？</p><p>2。 为什么秋招没有找到工作？</p><p>3。 你是怎么学习一个技术的？说一个擅长的</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>面试结束半个月 3 月 25 号，收到消息未通过面试的消息，理由是：因与人才画像不匹配 ！</p><p>作者：<a href="https://www.nowcoder.com/profile/519193169" target="_blank" rel="noopener">持续学习爪洼</a></p><h4 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h4><p>你可以在下面这两份资料中找到上面绝大部分面试问题的准确答案：</p><ul><li><p>JavaGuide：<a href="https://javaguide.cn/home.html" target="_blank" rel="noopener">https://javaguide.cn/home.html</a></p></li><li><p>《Java 面试指北》：<a href="https://t.zsxq.com/Uv3ByZn" target="_blank" rel="noopener">https://t.zsxq.com/Uv3ByZn</a></p></li></ul><h3 id="金蝶-Java-后端校招三面面经（已OC）"><a href="#金蝶-Java-后端校招三面面经（已OC）" class="headerlink" title="金蝶 Java 后端校招三面面经（已OC）"></a>金蝶 Java 后端校招三面面经（已OC）</h3><p>一位球友的金蝶面试经历，已经拿到了 offer，不过，后面因为觉得公司的风评不好就拒掉了。</p><h4 id="一面-13"><a href="#一面-13" class="headerlink" title="一面"></a>一面</h4><ol><li><p>自我介绍 </p></li><li><p>项目的架构图画一下 </p></li><li><p>项目是怎么部署到服务器的 </p></li><li><p>为什么要用 Docker </p></li><li><p>做项目的过程中遇到了什么问题没有，如何解决的，学到了什么。 </p></li><li><p>项目数据库表怎么设计的 </p></li><li><p>项目的日志怎么做的 </p></li><li><p>项目有没有做权限管理，怎么做的 </p></li><li><p>说一下自己对 IoC、AOP 的理解 </p></li><li><p>网络协议说一下 </p></li><li><p>数据库优化 </p></li><li><p>有没有用过针对多表查询如何优化 </p></li></ol><h4 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h4><ol><li><p>自我介绍 </p></li><li><p>学校的成绩，有没有获得过什么奖项 </p></li><li><p>介绍一下项目，业务情况，当时是怎么做这个项目的 </p></li><li><p>项目中充当的角色，负责做什么 </p></li><li><p>项目带给你最大的收获是什么 </p></li><li><p>说一件你在校园中做过对自己来说最有价值的事情 </p></li><li><p>你觉得一个好的开发工程师应该具备怎样的素质 </p></li><li><p>平时有健身运动的习惯么，频率怎么样 </p></li><li><p>讲讲你的个人优势 </p></li><li><p>手里的 offer 情况 </p></li><li><p>反问 </p></li></ol><h4 id="二面-11"><a href="#二面-11" class="headerlink" title="二面"></a>二面</h4><ol><li><p>Spring,Spring MVC,Spring Boot 之间什么关系? </p></li><li><p>@Autowired  和 @Resource  的区别是什么？  </p></li><li><p>静态代理和动态代理的区别 </p></li><li><p>除了 JDK 提供的动态代理实现还有其他实现方式么(CGLIB ) </p></li><li><p>谈谈对 MySQL 索引的了解，哪些字段应该考虑创建索引，哪些字段尽量不要创建索引 </p></li><li><p>为什么 InnoDB 引擎要选择 B+Tree 作为索引数据结构？ </p></li><li><p>MySQL 中 一条 SQL 语句的执行流程 </p></li><li><p>从执行流程的层面说说如何优化一条 SQL 语句的查询速度，发生在哪个部分 </p></li><li><p>多表联合查询的时候，SQL语句的执行流程 </p></li><li><p>目前正在学习什么知识 </p></li><li><p>反问：新人培训体系是怎么样的 </p></li></ol><h4 id="三面-8"><a href="#三面-8" class="headerlink" title="三面"></a>三面</h4><ol><li><p>自我介绍 </p></li><li><p>简单介绍一下自己的项目 </p></li><li><p>项目中用了哪些设计模式 </p></li><li><p>单例模式有什么好处 </p></li><li><p>项目中用了线程池干什么 </p></li><li><p>为什么实际生产建议使用 ThreadPoolExecutor 构造函数来创建线程池 </p></li><li><p>如何理解线程安全和不安全 </p></li><li><p>平时怎么学习的 </p></li><li><p>反问：公司目前的技术栈，是否有 CodeReview </p></li></ol><p>三面这个面试官基本没怎么问题技术，后面找我唠嗑半天就闲聊一些大学生活啥的。</p><h4 id="总结-21"><a href="#总结-21" class="headerlink" title="总结"></a>总结</h4><p>金蝶的八股文整体还是挺简单的，没有问到特别难的问题的，整体体验一般。</p><h4 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h4><p>你可以在下面这两份资料中找到上面绝大部分面试问题的准确答案：</p><ul><li><p>JavaGuide：<a href="https://javaguide.cn/home.html" target="_blank" rel="noopener">https://javaguide.cn/home.html</a></p></li><li><p>《Java 面试指北》：<a href="https://t.zsxq.com/Uv3ByZn" target="_blank" rel="noopener">https://t.zsxq.com/Uv3ByZn</a></p></li></ul><h3 id="美团、华为、字节（已获-offer）春招面经（附参考答案）"><a href="#美团、华为、字节（已获-offer）春招面经（附参考答案）" class="headerlink" title="美团、华为、字节（已获 offer）春招面经（附参考答案）"></a>美团、华为、字节（已获 offer）春招面经（附参考答案）</h3><p>一位球友的 2022 春招面经，拿到了美团、字节、华为等公司的 offer。</p><p>面经中涵盖的问题，我几乎都找到了对应的参考答案，希望可以帮助到你。</p><h4 id="美团-2"><a href="#美团-2" class="headerlink" title="美团"></a>美团</h4><h5 id="一面-14"><a href="#一面-14" class="headerlink" title="一面"></a>一面</h5><ol><li><p>挖项目，问的太多了，这里就不一一列举了，大部分是某个功能是怎么实现的或者如果要加某个功能应该怎么实现。</p></li><li><p>进程线程区别。</p></li><li><p>死锁，死锁条件。</p></li><li><p>知不知道中断和轮询的区别。</p></li><li><p>数据库索引，讨论了一下B+树能存多少数据。</p></li><li><p>数据库存储引擎知道哪些，有什么区别。</p></li><li><p>数据库锁。</p></li><li><p>算法题：起始点到终点最短路径。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\6a623f51-6d6f-497f-a1bd-8b2e292aa479.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>部分问题参考答案 ：</strong></p><ol><li><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html" target="_blank" rel="noopener">Java 并发常见知识点&amp;面试题总结（基础篇）</a></li><li><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html" target="_blank" rel="noopener">Java 并发常见知识点&amp;面试题总结（进阶篇）</a></li><li><a href="https://cloud.tencent.com/developer/article/1668831" target="_blank" rel="noopener">选中断还是轮询方式？深究其中的区别</a></li><li><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1652069206&ver=3787&signature=cO*vP6Ua*TAi9eO99*EipxUyNAiP6qV5hVT4JNEeK9aoPgMR5xdg8J2VAu687BODFeoSQp8THlNfNG3s4715Jz9zrGWQJJpsFGOjlQe-EOg-wr1iHIADn4fkEE9omLGN&new=1" target="_blank" rel="noopener">MySQL 索引知识点总结</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247506762&idx=2&sn=b545f97b2c45e4f5b41e26d57d33c9b0&chksm=cea19481f9d61d9721fa190a55fda11bd8ae76fbeda2b08a9d4105395b8427e212d9342231e3&token=549578959&lang=zh_CN#rd" target="_blank" rel="noopener">MySQL面试题/知识点总结！</a></li><li><a href="https://zhuanlan.zhihu.com/p/29150809" target="_blank" rel="noopener">MySQL锁总结</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》 - 技术面试题篇</a></li><li><a href="https://leetcode.cn/problems/DFPeFJ/" target="_blank" rel="noopener">LCP 35. 电动车游城市  - LeetCode</a></li></ol><h5 id="二面-12"><a href="#二面-12" class="headerlink" title="二面"></a>二面</h5><ol><li>问项目。</li><li>什么是序列化反序列化。</li><li>负载均衡，知道哪些负载均衡 。</li><li>什么时候会OOM，服务OOM怎么办，如何排查。</li><li>Spring 启动流程。</li><li>Spring 设计模式。</li><li>对于模版模式的理解，应用场景，你在项目中是怎么使用的。</li><li>HTTP 请求过程 。</li><li>TCP 和 UDP 区别。</li><li>Linux知道哪些命令。</li><li>设置索引有什么注意的地方。</li><li>最近看了哪些书，有什么收获。</li><li>算法题：合并有序数组 O(N)时间 O(1)空间。</li><li>数据库设计：只能以半小时为单位订会议室。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\e906e24a-c7e8-4f89-ba31-379c53f51eb4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\58ad9b51-72c5-48ca-918c-88be2d302187.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ce224754-d720-496d-bdb4-01b4a9ec6d4b.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>部分问题参考答案 ：</strong></p><ol><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247520143&idx=2&sn=b746080a721bb6385246669384ef3487&chksm=cea1c044f9d64952444ed67d7418d70f67795255302b2a4d702153a8d7b43f66d83cfe1bbfec&token=549578959&lang=zh_CN#rd" target="_blank" rel="noopener">招银网络二面：什么是序列化？常见的序列化协议有哪些？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》 - 技术面试题篇 - 高并发模块</a></li><li><a href="https://github.com/StabilityMan/StabilityGuide" target="_blank" rel="noopener">系统稳定性——OutOfMemoryError 常见原因及解决方法 - 3.2.1 异常诊断</a></li><li><a href="https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html" target="_blank" rel="noopener">Spring常见问题总结</a></li><li><a href="https://mp.weixin.qq.com/s/QBmDiyfST13nQJUcPLLXOg" target="_blank" rel="noopener">设计模式最佳套路4 —— 愉快地使用模板模式</a></li><li><a href="https://mp.weixin.qq.com/s/PLo60qkoxVXBB0MrLxASyQ" target="_blank" rel="noopener">一次 HTTP 请求的完整过程</a></li><li><a href="https://zhuanlan.zhihu.com/p/24860273" target="_blank" rel="noopener">TCP和UDP的区别</a></li><li><a href="https://javaguide.cn/cs-basics/operating-system/linux-intro.html" target="_blank" rel="noopener">Linux 基础知识总结</a></li><li><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1652069206&ver=3787&signature=cO*vP6Ua*TAi9eO99*EipxUyNAiP6qV5hVT4JNEeK9aoPgMR5xdg8J2VAu687BODFeoSQp8THlNfNG3s4715Jz9zrGWQJJpsFGOjlQe-EOg-wr1iHIADn4fkEE9omLGN&new=1" target="_blank" rel="noopener">MySQL 索引知识点总结</a></li><li><a href="https://leetcode.cn/problems/merge-sorted-array/" target="_blank" rel="noopener">88. 合并两个有序数组 - LeetCode</a></li></ol><h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><h5 id="一面-15"><a href="#一面-15" class="headerlink" title="一面"></a>一面</h5><ul><li><p>项目、论文。</p></li><li><p>String 能否被继承。</p></li><li><p>Java 内存泄露和排查。</p></li><li><p>Hash 方式和 Hash 冲突解决。</p></li><li><p>静态代理和动态代理。</p></li><li><p>线程通信方式。</p></li><li><p>Volitate关键字。</p></li><li><p>Java 高效拷贝数组。</p></li><li><p>算法题 跳跃游戏 leetcode 55。</p></li></ul><p><strong>部分问题参考答案 ：</strong></p><ul><li><a href="https://javaguide.cn/java/basis/proxy.html" target="_blank" rel="noopener">Java 代理模式详解</a></li><li><a href="https://mp.weixin.qq.com/s/5vxYoeARG1nC7Z0xTYXELA" target="_blank" rel="noopener">你还应该知道的哈希冲突解决策略</a></li><li><a href="https://javaguide.cn/cs-basics/operating-system/operating-system-basic-questions-01.html" target="_blank" rel="noopener">操作系统常见面试题总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/37346162" target="_blank" rel="noopener">[效率优化专题]2.java数组拷贝的3种方式和效率对比</a></li><li><a href="https://leetcode.cn/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏  - LeetCode</a></li></ul><h5 id="二面-13"><a href="#二面-13" class="headerlink" title="二面"></a>二面</h5><ul><li>简单说说项目、论文。</li><li>项目是自己学习的还是落地项目。</li><li>本科保研绩点高，为啥研究生期间没有刷绩点。</li><li>对华为的了解，这个聊了比较久 因为我本身就是华为用户，比较了解，主管也给我介绍和补充。</li><li>实习时间。</li><li>反问部门、技术栈，是否可以自己选项目。</li></ul><h4 id="字节"><a href="#字节" class="headerlink" title="字节"></a><strong>字节</strong></h4><h5 id="一面-16"><a href="#一面-16" class="headerlink" title="一面"></a>一面</h5><ol><li>问项目，聊怎么实现，从项目里学到什么。 </li><li>手写单例模式，和 Spring 的单例有什么区别。 </li><li>算法题：给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。 </li><li>SQL 题：根据题目要求写出对应的 SQL，由于太久没写，不会做。 </li><li>智力题 1-N批次其中有一批次重量不合格 用最少称重次数找到 </li></ol><p>1） 刚开始说二分 面试官说不是最优</p><p>2） 提示可以从每批次拿不同数量：第N批拿N个 算重量差值就可以确定</p><p>部分问题参考答案 ：</p><ol><li><a href="https://mp.weixin.qq.com/s/ZwrJHk1Lo6G1Gpqvel0WeA" target="_blank" rel="noopener">重学 Java 设计模式：实战单例模式</a></li><li><a href="https://mp.weixin.qq.com/s/KOx1P-A01k7DlFf5DJk9TQ" target="_blank" rel="noopener">3道SQL面试题，总结常考知识点！</a></li><li><a href="https://leetcode.cn/problems/subsets/" target="_blank" rel="noopener">78. 子集  - LeetCode</a></li></ol><h5 id="二面-14"><a href="#二面-14" class="headerlink" title="二面"></a>二面</h5><ol><li>问项目。</li><li>volitate 关键字。</li><li>JVM新生代怎么划分，大对象怎么分配。</li><li>新生代有哪些垃圾回收器。</li><li>ParNew 原理。</li><li>Innodb 默认隔离级别，RR能防止幻读吗，RR默认使用间隙锁吗。</li><li>怎么理解最终一致性，有哪些实现方案。</li><li>分布式事务。</li><li>算法题：数组里每个数右边第一个比他大的数。</li></ol><p>部分问题参考答案 ：</p><ol><li><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html" target="_blank" rel="noopener">Java 并发常见知识点&amp;面试题总结（基础篇）</a></li><li><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html" target="_blank" rel="noopener">Java 并发常见知识点&amp;面试题总结（进阶篇）</a></li><li><a href="https://javaguide.cn/java/jvm/memory-area.html" target="_blank" rel="noopener">Java 内存区域详解</a></li><li><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener">JVM 垃圾回收详解</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247506762&idx=2&sn=b545f97b2c45e4f5b41e26d57d33c9b0&chksm=cea19481f9d61d9721fa190a55fda11bd8ae76fbeda2b08a9d4105395b8427e212d9342231e3&token=549578959&lang=zh_CN#rd" target="_blank" rel="noopener">MySQL面试题/知识点总结！</a></li><li><a href="https://mp.weixin.qq.com/s/ElLWu_Pzn5IykqE55Rv1oQ" target="_blank" rel="noopener">最终一致性，一致只会迟到，但绝不会缺席</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350b755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》 - 技术面试题篇 - 分布式模块</a></li><li><a href="https://leetcode.cn/problems/next-greater-element-i/" target="_blank" rel="noopener">496. 下一个更大元素 I  - LeetCode</a></li></ol><h5 id="三面-9"><a href="#三面-9" class="headerlink" title="三面"></a>三面</h5><ol><li>问项目。</li><li>RAFT 脑裂、一致性。</li><li>负载均衡。</li><li>各种排序算法，分析复杂度和稳定性。</li><li>其他想不起来了，八股很少，一直问项目。</li><li>算法题：旋转图像(90度旋转矩阵)。</li></ol><p><strong>部分问题参考答案 ：</strong></p><ol><li><a href="https://mp.weixin.qq.com/s/4g0jR_shCIpjBprap3BExg" target="_blank" rel="noopener">Raft实战系列，集群成员如何变更？日志怎么压缩？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247519384&idx=1&sn=bc7e71af75350755f04ca4178395b1a&chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&token=660789642&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》 - 技术面试题篇 - 高并发模块</a></li><li><a href="http://www.guoyaohua.com/sorting.html" target="_blank" rel="noopener">十大经典排序算法最强总结（含 Java、Python 码实现）</a></li><li><a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像 - LeetCode</a></li></ol><h3 id="字节跳动-Java-后端实习面经（附参考答案）"><a href="#字节跳动-Java-后端实习面经（附参考答案）" class="headerlink" title="字节跳动 Java 后端实习面经（附参考答案）"></a>字节跳动 Java 后端实习面经（附参考答案）</h3><p>这是一位读者的 2022  字节跳动 Java 后端实习面经，已经拿到了 offer。字节虽然用 Go 居多，但也是有挺多 Java 岗位的招聘。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\4e1cf970-2912-4dd2-9730-07cd43f34a7f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我对他在面试遇到的问题进行了整理并给出了详细的参考答案，希望对准备面试的小伙伴有帮助！另外，建议准备面试的小伙伴一定要多看一些面经，根据自己的简历多多自测，这对于面试非常有帮助！</p><h4 id="个人情况-1"><a href="#个人情况-1" class="headerlink" title="个人情况"></a>个人情况</h4><p>末流 211，软件工程专业，2023 届毕业生。本来没抱多大希望，没想到最后过了。</p><h4 id="一面-60分钟"><a href="#一面-60分钟" class="headerlink" title="一面(60分钟)"></a>一面(60分钟)</h4><ol><li>自我介绍。</li><li>问项目：登录鉴权是怎么做的？为什么采用 JWT 的方式？有什么好处？如何防止 Token 被篡改？</li><li>问项目：如何使用缓存的？技术选型的考虑？为什么要用 Sorted Set 实现排行榜？Redis 数据同步和数据迁移如何做？</li><li>问项目：如何防止表单重复提交？</li><li>问 Spring：怎么理解 AOP的？你在项目中是怎么使用的？Spring AOP 和 AspectJ AOP 有什么区别？</li><li>问线程池：如何理解线程池、参数、拒绝策略、原理？你的项目是如何使用线程池的？如果然你设计一个线程池，你会怎么做？</li><li>问 Java 并发（这块问的太深入了，顶不住啊。。。）：进程和线程，了解协程吗？JMM 的理解，作用。happens-before 原则的理解，作用。Java 里面的锁你知道哪些？ synchronized 关键字的理解、原理、锁升级过程。AQS 了解、原理。ReentrantLock 源码。ThreadLocal 理解、原理、内存泄露问题。</li><li>继续问 Java 并发：手写 DCL（Double Check Lock） 线程安全方法。为什么需要加 volatile?  volatile 的作用、底层原理。</li><li>问计算机网络：  HTTPS 和HTTP 区别、 HTTPS 加密过程。</li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view" target="_blank" rel="noopener">Leetcode 199. 二叉树的右视图</a></li><li>……</li></ol><p><strong>参考答案</strong>  ：</p><ul><li><a href="https://mp.weixin.qq.com/s/NCbNKZcM7EiLM7tuF3ADxw" target="_blank" rel="noopener">虾皮二面：什么是 JWT? 如何基于 JWT 进行身份验证？</a>、<a href="https://mp.weixin.qq.com/s/TrgG9oyNfPg2qa_7fpDY4w" target="_blank" rel="noopener">虾皮二面后续：JWT 身份认证优缺点</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247526650&idx=1&sn=15042ffbe9ef97cccafbe9e4c2de5dad&chksm=cea12731f9d6ae276dee602e769b491e8979068c3f633ba95ea0338cd34dfc613941522e56f2&token=973133388&lang=zh_CN#rd" target="_blank" rel="noopener">Redis 5 种基础数据结构总结</a>、<a href="https://cloud.tencent.com/developer/article/1780093" target="_blank" rel="noopener">Redis 数据同步和数据迁移如何做？</a></li><li><a href="https://mp.weixin.qq.com/s/NUnaiVWADxzDOYPQdAwm6w" target="_blank" rel="noopener">招银网络一面：AOP 了解吗？有什么用？切面执行顺序如何控制？</a></li><li><a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary.html" target="_blank" rel="noopener">Java 线程池详解</a>、<a href="https://segmentfault.com/a/1190000040631931" target="_blank" rel="noopener">面试题 – 如何设计一个线程池</a></li><li><a href="https://javaguide.cn/java/concurrent/jmm.html" target="_blank" rel="noopener">JMM（Java 内存模型）详解</a></li><li><a href="https://javaguide.cn/java/concurrent/aqs.html#aqs-简单介绍" target="_blank" rel="noopener">AQS 详解</a></li><li><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html" target="_blank" rel="noopener">Java 并发常见面试题总结（上）</a>、<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html" target="_blank" rel="noopener">Java 并发常见面试题总结（中）</a></li><li><a href="https://zhuanlan.zhihu.com/p/65727594" target="_blank" rel="noopener">ReentrantLock源码详细解读</a></li><li><a href="https://javaguide.cn/cs-basics/network/http&https.html" target="_blank" rel="noopener">HTTP vs HTTPS（应用层）</a></li></ul><h4 id="二面（50分钟）"><a href="#二面（50分钟）" class="headerlink" title="二面（50分钟）"></a>二面（50分钟）</h4><ol><li>自我介绍。</li><li>问计算机网络：  HTTPS 和HTTP 区别、SSL/TLS 的工作原理、中间人攻击了解吗？</li><li>问计算机网络（比较深入，有一些没有回答上来，还是要多补补基础）：TCP 与 UDP 的区别，TCP 三次握手四次挥手，TIME-WAIT 和 CLOSE-WAIT 是干什么的？ 为什么要三次握手两次不行吗？有大量连接处于 TIME-WAIT 的原因？ TCP 是长连接还是短连接？</li><li>问计算机网络：从输入URL到浏览器显示页面的流程。</li><li>问数据库： MySQL 索引的理解、底层数据结构。如何看 SQL 语句是否使用了索引？</li><li>问数据库：如何理解事务？表级锁和行级锁的理解，幻读、脏读问题的解决。</li><li>问 JVM： GC 如何判断回收的垃圾对象？GC 算法有哪些？Minor Gc 和 Full GC 有什么不同呢？ZGC 垃圾回收器了解吗？</li><li>问 JVM：双亲委派模型的理解，有没有在项目中实践过自定义类加载器。</li><li>问场景题：几十G的数据都是URL，内存空间只有1G，磁盘空间无限，统计频率最高的Top 10；</li><li><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">Leetcode 32. 最长有效括号</a>、<a href="https://leetcode.cn/problems/balanced-binary-tree/" target="_blank" rel="noopener">Leetcode 110. 平衡二叉树</a></li><li>……</li></ol><p><strong>参考答案</strong>  ：</p><ul><li><a href="https://javaguide.cn/cs-basics/network/http&https.html" target="_blank" rel="noopener">HTTP vs HTTPS（应用层）</a>、<a href="https://juejin.cn/post/6844904065227292685" target="_blank" rel="noopener">你连 HTTPS 原理都不懂,还讲“中间人攻击”?</a></li><li><a href="https://mp.weixin.qq.com/s/resXoYuUnkx6C6EeYCge_w" target="_blank" rel="noopener">TCP 与 UDP 的区别？</a>、<a href="https://mp.weixin.qq.com/s/LHaImSd-sTvt7QWqisE21w" target="_blank" rel="noopener">TCP 为什么要三次握手?</a></li><li><a href="https://nyimac.gitee.io/2020/12/10/URL访问服务器流程/" target="_blank" rel="noopener">从输入URL到浏览器显示页面的流程</a></li><li><a href="https://mp.weixin.qq.com/s/qHJiTjpvDikFcdl9SRL97Q" target="_blank" rel="noopener">深入理解 MySQL 索引底层原理</a>、<a href="https://mp.weixin.qq.com/s/twTghH8wTA_0uZghOdawkw" target="_blank" rel="noopener">最完整的Explain总结，SQL优化不再困难</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247521090&idx=2&sn=5b4c370ff7f0b7e8ad63d890bf47cb8d&chksm=cea1dc89f9d6559f13962afaef776d042d1f17fc8bb3c03ef7c2c69380908611ba155ecc918d&scene=178&cur_album_id=1352302538565189634#rd" target="_blank" rel="noopener">MySQL 事务的默认隔离级别是什么?可以解决幻读问题么？</a>、<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247523718&idx=1&sn=56f8e746f3fd3d4175449c9a2b0ec7b4&chksm=cea1d24df9d65b5b582d198b4c349acb96131001c09a86d82d77338b40baf65077ae32e391e1&token=371859028&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">MySQL 中有哪些锁？表级锁和行级锁有什么区别</a></li><li><a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener">JVM 垃圾回收详解</a>、<a href="https://mp.weixin.qq.com/s/ag5u2EPObx7bZr7hkcrOTg" target="_blank" rel="noopener">新一代垃圾回收器ZGC的探索与实践</a></li><li><a href="https://javaguide.cn/java/jvm/classloader.html" target="_blank" rel="noopener">类加载器详解</a>、<a href="https://mp.weixin.qq.com/s/ACvkfcu6LDjoPpyBnPWMJg" target="_blank" rel="noopener">JVM自定义类加载器在代码扩展性的实践</a></li><li><a href="https://mp.weixin.qq.com/s/rjGqxUvrEqJNlo09GrT1Dw" target="_blank" rel="noopener">10 道 BAT 大厂海量数据面试题（附题解+方法总结）</a>、<a href="https://mp.weixin.qq.com/s/LA6KNG5CgLUvICjFhQ3O0A" target="_blank" rel="noopener">海量大数据处理面试题和思路总结</a></li></ul><h4 id="三面-10"><a href="#三面-10" class="headerlink" title="三面"></a>三面</h4><p>这一面问的技术问题变少了很多，更多的是和面试官交流技术思维。</p><ol><li>自我介绍。</li><li>你感觉你一二面表现的怎么样？</li><li>除了 Java 你还学习过什么其他的编程语言么？我说了 C 语言。面试官紧接着让我说说 Java 和 C 的使用感受，应用场景。</li><li>爬虫有了解吗？大学的时候写过爬虫没有？如何构建一个爬虫代理服务？</li><li>分布式缓存设计、缓存问题解决思路（雪崩、穿透）。</li><li>自己做过印象最深的一个项目，学到了什么。</li><li><a href="https://leetcode.cn/problems/hPov7L/" target="_blank" rel="noopener">Leetcode 44.二叉树每层找最大值</a></li><li>……</li></ol><p><strong>参考答案</strong>  ：</p><ul><li><a href="http://kaito-kidd.com/2015/11/02/proxies-service/" target="_blank" rel="noopener">如何构建一个爬虫代理服务？</a></li><li><a href="https://segmentfault.com/a/1190000041689802" target="_blank" rel="noopener">解析分布式系统的缓存设计</a></li></ul><h4 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a>HR 面</h4><p>随便聊了一下。</p><ol><li><p>自我介绍。</p></li><li><p>项目里面做了什么，担任什么角色，最有成就感的事情。</p></li><li><p>对于公司的了解？还面了哪些公司？为什么要选择实习？</p></li><li><p>平时是怎么学习的？</p></li><li><p>你有什么要问我的？</p></li><li><p>平时除了技术喜欢干什么？</p></li><li><p>……</p></li></ol><h4 id="总结-22"><a href="#总结-22" class="headerlink" title="总结"></a>总结</h4><p>字节的面试难度还是比较大的，不过，效率很高，体验也很不错。几个面试官给我的感觉还是不错的，一看就是做技术的，不整一些虚头巴脑的东西。</p><p>面试之前，我一直对照着 JavaGuide 网站（地址：javaguide.cn）和 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247527615&idx=3&sn=3df279f2804f170ebc8306aa356afd42&scene=21#wechat_redirect" target="_blank" rel="noopener">《Java 面试指北》</a>复习知识点，准备对应的八股文。Java 后端的知识点比较多，我主要是根据自己的简历来进行针对性地复习。面试的时候，不出意外，面试官问的几乎都是简历上写的东西。</p><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><h3 id="从考研失败到收获到自己满意的Offer"><a href="#从考研失败到收获到自己满意的Offer" class="headerlink" title="从考研失败到收获到自己满意的Offer"></a><strong>从考研失败到收获到自己满意的Offer</strong></h3><h4 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h4><p>我现在是本科大三学生，在电子科大就读软件工程专业，在我大一大二的时候其实也并没有找到所谓的方向，将来想要从事什么岗位。只是一心想着先学好学校的专业课程，工作就业的事以后再说。我就一直用自己在学校课程上取得的一点点成绩在麻痹自己，逃避就业的现实。其实大家也都非常清楚，现在高校里面讲授的内容很多都是偏向于底层的一些理论知识，并不会具体教你框架、怎么做项目、怎么样写代码、即使有很多实验课程也都是非常地老套和实际情况差距非常大。这就直接导致一个很大的问题：我的编程能力很差，没有一点自信。</p><p>由于我们学院特殊的安排，我们基本所有必修专业课程的学习都在大一和大二修完，大三上半学期有少量的专业选修课程和思政课。大三下整个学期都是要去企业完成 6 个月的实习。了解到很多优秀的学长在大三实习的时候就拿到了非常厉害的 offer 和优厚实习待遇，我当然是非常的心动，希望能够在大三下学期的时候能拿到一个不错的实习岗位。由于我个人是非常不愿意去做测试开发，算法开发的门槛又相对较高，然后就选择了 Java 这个方向。</p><h4 id="准备面试"><a href="#准备面试" class="headerlink" title="准备面试"></a>准备面试</h4><p>我其实在大二上半学期的时候修了 Java 这门课程，但是学校的 Java 课程是非常老套，和实际企业里的开发是完全脱节。在大三上半学期我当时就在网上找各种 Java 的学习路线，但我发现有很多学习路线看完都是“实力劝退”的感觉，因为内容太多太杂，对于一个想要入门开发的 Javaer 非常不友好。也是机缘巧合，在一个学长（很厉害的一个学长，目前在华科直博）推荐下，了解到 JavaGuide 这个开源项目，从那时起我才算是打开了新世界的大门。学习路线非常清楚，特别对于我们这种初学者的人来说非常友好，知识点的总结也在我后来面试过程帮了大忙。</p><p>看到身边的大佬们手拿多个大厂实习 offer 不知道怎么选时，一方面是非常羡慕，另一方面就是觉得自己是在还以前欠下的债，所以大三上整个学期我的压力都是挺大的，边学习 Java 的技术栈边准备面试。前前后后面试的公司有百度、成都 SAP、京东（京东数科）、新浪微博等，最终也算是如愿以偿，马上准备入职京东。</p><p>至于我怎么准备的面试？我觉得很重要的一点就是根据自己写的简历和所投递岗位的 JD 有针对性地复习。在简历上最为重要的版块就是项目经历和技能清单这两块，这两部分直接决定了能不能拿到面试资格和面试官怎样提问。所以我当时就遇到了一种窘境，因为我是边学 Java 边面试，项目这部分可写的非常少，基本就没有。</p><p>我看过各大公司的招聘需求：Java 开发现在基本都是 SSM、SpringBoot 框架等等，当我学完了这部分之后，我就跟着学校老师那边做了一个 Java 后端的项目把学的框架练习了一遍，写在了简历上，<strong>之后我就对项目中的技术点进行复盘。</strong></p><p>在当时我确实有着投机的心态，但是必须要有这样一个项目，否则我可能连面试的机会都没有，在参加了多次面试之后我的感受就是：作为实习生，<strong>项目这一方面重点在于面试官他要确认你是实实在在地做了，并且有你自己的思考和收获</strong>。面试的重点其实是在很多基础的问题上（面试题放在后面），在基础这部分，我反复地复习 JavaGuide 上面的基础知识点，在这里必须感谢 JavaGuide，这可以说直接影响了我在面试中的表现。</p><h4 id="面试真题"><a href="#面试真题" class="headerlink" title="面试真题"></a>面试真题</h4><blockquote><p>下面的面试题是来自百度、京东、新浪微博，我进行了一个总结，希望能帮到大家，划重点的部分表示反复被问到</p></blockquote><h5 id="数据结构与算法篇"><a href="#数据结构与算法篇" class="headerlink" title="数据结构与算法篇"></a>数据结构与算法篇</h5><ul><li><p>B 树和 B+树的区别</p></li><li><p>你了解哪些排序算法？算法的思想、时间复杂度、空间复杂度？</p></li><li><p>LeetCode 第 1 题及第 15 题：两数之和及三数之和问题</p></li></ul><h5 id="计算机网络篇"><a href="#计算机网络篇" class="headerlink" title="计算机网络篇"></a>计算机网络篇</h5><ul><li>TCP 三次握手、四次挥手流程？为什么三次，为什么四次？</li><li>TCP 和 UDP 区别，有 TCP 为什么还要有 UDP？</li><li>TCP 粘包和拆包问题有了解吗？</li><li>TCP 是怎样保持连接的？</li></ul><h5 id="操作系统篇"><a href="#操作系统篇" class="headerlink" title="操作系统篇"></a>操作系统篇</h5><ul><li><p>并发编程中死锁有了解吗？死锁产生的条件是什么？你在项目中是怎样解除避免和解除死锁的？</p></li><li><p>进程的都有哪些状态？怎么转换的？</p></li><li><p>Linux 下文件的操作命令</p></li></ul><h5 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h5><ul><li><p>数据库范式了解吗？在你的项目中怎么运用的？会出现什么问题？</p></li><li><p>数据库索引了解吗？MySQL 中索引底层是怎么实现的？</p></li><li><p>MySQL 中存储引擎 InnoDB 和 MyISAM 有什么区别？分别用于什么场景？</p></li><li><p>数据库事务有了解吗？事务的隔离级别？你在项目中使用的隔离级别是什么？</p></li><li><p>SQL 优化有什么思路？</p></li><li><p>项目中使用到外键了吗？外键作用？使用外键要注意些什么问题？</p></li><li><p>除了 MySQL 数据库你还用到哪些数据库？Redis 数据库和 MySQL 数据库的区别？</p></li><li><p>设计一个数据库表</p></li></ul><h5 id="Java-基础篇"><a href="#Java-基础篇" class="headerlink" title="Java 基础篇"></a>Java 基础篇</h5><ul><li><p>类和对象的区别？</p></li><li><p>讲讲 static 关键字和 final 关键字</p></li><li><p>synchronized 关键字是怎么用的？底层实现有了解吗？还有用过其他的锁吗？</p></li><li><p>BIO、NIO、AIO 区别有哪些？项目中有用到吗？Netty 了解吗？</p></li><li><p>接口和抽象类的区别？什么时候用接口，什么时候用抽象类？接口可以继承接口吗？</p></li><li><p>HashMap 和 HashTable 的区别是什么？</p></li><li><p>ConcurrentHashMap和HashMap的区别是什么？ConcurrentHashMap为什么线程安全？</p></li><li><p>HashMap 和 HashSet 的区别？HashSet 是如何检查重复的？</p></li><li><p>Java 中线程的状态？join()、yield()方法是干什么？</p></li><li><p>Object 类下有哪些方法？</p></li><li><p>字符串”123”转换成整型123的API是什么？整型123转换成字符串“123”的 API 又是什么？</p></li><li><p>创建线程有几种方式？分别是怎么做的？</p></li><li><p>线程池用过吗？如何创建一个线程池？其中各个参数的含义是什么？为什么要用线程池？coreSize？</p></li><li><p>synchronized、ReentrantLock 区别？</p></li><li><p>CountDownLatch 和 Semaphore 用过吗？他们的区别是什么？CountDownLatch 应用场景？比如现在要让第 5 个线程等待前 4 个线程执行完毕再执行，具体怎么做？</p></li><li><p>使用 synchronized 来实现单缓冲区的生产者消费者模型？</p></li><li><p>JVM 有了解吗？JVM 中参数–Xms和-Xmx是什么意思？</p></li><li><p>设计模式有了解过哪些？单例设计模式知道哪几种写法？策略设计模式了解吗？你在项目中用到了哪些设计模式？</p></li><li><p>Spring 中依赖注入有几种方式？怎么做的？</p></li><li><p>Spring 框架中有哪些组件了解吗？分别做什么的？</p></li><li><p>SpringMVC 的这种 MVC 模式了解吗？他的工作原理是什么？用到了哪些设计模式？（基本每轮面试都被问到）</p></li><li><p>SpringMVC 中要接受用户传来的参数要怎么做？REST 的风格呢？</p></li><li><p>Spring 中 bean 的创建过程了解吗？</p></li><li><p>SpringBoot 和 SpringMVC 的区别和联系是什么？了解 SpringBoot 的启动流程吗？SpringBoot 自动配置是如何实现的？</p></li></ul><p>总结：其实我们看上面的问题，整体来说还是非常地基础，<strong>尤其对于实习生和应届生来说，基础是第一位的，就包括百度和京东的面试官都在面试最后给我强调基础的重要性</strong></p><h4 id="写在最后-1"><a href="#写在最后-1" class="headerlink" title="写在最后"></a>写在最后</h4><p>以前觉得自己还小还早，告诉自己才大一大二，可是当突然把自己推向生活的洪流，我仿佛什么都做不了。有了这段找实习的经历，我觉得自己成长了不少，要勇敢地跳出自己的舒适圈，当自己不知道做什么的时候就去面试，让社会对你进行评价。</p><p>在这个过程中，我也眼看着很多好的机会从我身边流走，都是因为自己还不够优秀，虽然现在有幸拿到了实习机会，但我也时刻告诫自己要保持学习，沉淀自己，当有更好的机会来临时我能够抓的住。</p><p><strong>在 Java 开发这条路上，我也算是刚刚入门，要学的还很多，作为 JavaGuide 的忠实粉丝，再次感谢 JavaGuide！</strong> （Guide 哥故意加粗了一下，开心 😄）</p><p>Guide 哥注：生活要继续，学习也要继续。对我而言，JavaGuide 还有太多太多不足的地方，后面的日子会继续完善下去。</p><h3 id="五面阿里，终获-offer"><a href="#五面阿里，终获-offer" class="headerlink" title="五面阿里，终获 offer!"></a>五面阿里，终获 offer!</h3><h4 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h4><p>在接触 Java 之前我接触的比较多的是硬件方面，用的比较多的语言就是 C 和 C++。到了大三我才正式选择 Java 方向，到目前为止使用 Java 到现在大概有一年多的时间，所以 Java 算不上很好。刚开始投递的时候，实习刚辞职，也没准备笔试面试，很多东西都忘记了。所以，刚开始我并没有直接就投递阿里，毕竟心里还是有一点点小害怕的。于是，我就先投递了几个不算大的公司来练手，就是想着刷刷经验而已或者说是练练手（ps：还是挺对不起那些公司的）。面了一个月其他公司后，我找了我实验室的学长内推我，后面就有了这 5 次面试。</p><p>下面简单的说一下我的这 5 次面试：4 次技术面+1 次 HR 面，希望我的经历能对你有所帮助。</p><h4 id="一面-技术面"><a href="#一面-技术面" class="headerlink" title="一面(技术面)"></a>一面(技术面)</h4><ol><li>自我介绍（主要讲自己会的技术细节，项目经验，经历那些就一语带过，后面面试官会问你的）。</li><li>聊聊项目（就是一个很普通的分布式商城，自己做了一些改进），让我画了整个项目的架构图，然后针对项目抛了一系列的提高性能的问题，还问了我做项目的过程中遇到了那些问题，如何解决的，差不读就这些吧。</li><li>可能是我前面说了我会数据库优化，然后面试官就开始问索引、事务隔离级别、悲观锁和乐观锁、索引、ACID、MVVC 这些问题。</li><li>浏览器输入 URL 发生了什么? TCP 和 UDP 区别? TCP 如何保证传输可靠性?</li><li>讲下跳表怎么实现的?哈夫曼编码是怎么回事？非递归且不用额外空间（不用栈），如何遍历二叉树</li><li>后面又问了很多 JVM 方面的问题，比如 Java 内存模型、常见的垃圾回收器、双亲委派模型这些</li><li>你有什么问题要问吗？</li></ol><h4 id="二面-技术面"><a href="#二面-技术面" class="headerlink" title="二面(技术面)"></a>二面(技术面)</h4><ol><li>自我介绍（主要讲自己会的技术细节，项目经验，经历那些就一语带过，后面面试官会问你的）。</li><li>操作系统的内存管理机制</li><li>进程和线程的区别</li><li>说下你对线程安全的理解</li><li>volatile 有什么作用 ，sychronized 和 lock 有什么区别</li><li>ReentrantLock 实现原理</li><li>用过 CountDownLatch 么？什么场景下用的？</li><li>AQS 底层原理。</li><li>造成死锁的原因有哪些，如何预防？</li><li>加锁会带来哪些性能问题。如何解决？</li><li>HashMap、ConcurrentHashMap 源码。HashMap 是线程安全的吗？Hashtable 呢？ConcurrentHashMap 有了解吗？</li><li>是否可以实习？</li><li>你有什么问题要问吗？</li></ol><h4 id="三面-技术面"><a href="#三面-技术面" class="headerlink" title="三面(技术面)"></a>三面(技术面)</h4><ol><li>有没有参加过 ACM 或者他竞赛，有没有拿过什么奖？（ 我说我没参加过 ACM，本科参加过数学建模竞赛，名次并不好，没拿过什么奖。面试官好像有点失望，然后我又赶紧补充说我和老师一起做过一个项目，目前已经投入使用。面试官还比较感兴趣，后面又和他聊了一下这个项目。）</li><li>研究生期间，做过什么项目，发过论文吗？有什么成果吗？</li><li>你觉得你有什么优点和缺点？你觉得你相比于那些比你更优秀的人欠缺什么？</li><li>有读过什么源码吗？（我说我读过 Java 集合框架和 Netty 的，面试官说 Java 集合前几面一定问的差不多，就不问了，然后就问我 Netty 的，我当时很慌啊！）</li><li>介绍一下自己对 Netty 的认识，为什么要用。说说业务中，Netty 的使用场景。什么是 TCP 粘包/拆包,解决办法。Netty 线程模型。Dubbo 在使用 Netty 作为网络通讯时候是如何避免粘包与半包问题？讲讲 Netty 的零拷贝？巴拉巴拉问了好多，我记得有好几个我都没回答上来，心里想着凉凉了啊。</li><li>用到了那些开源技术、在开源领域做过贡献吗？</li><li>常见的排序算法及其复杂度，现场写了快排。</li><li>红黑树，B 树的一些问题。</li><li>讲讲算法及数据结构在实习项目中的用处。</li><li>自己的未来规划（就简单描述了一下自己未来的设想啊，说的还挺诚恳，面试官好像还挺满意的）</li><li>你有什么问题要问吗？</li></ol><h4 id="四面-半个技术面"><a href="#四面-半个技术面" class="headerlink" title="四面(半个技术面)"></a>四面(半个技术面)</h4><p>三面面完当天，晚上 9 点接到面试电话，感觉像是部门或者项目主管。 这个和之前的面试不大相同，感觉面试官主要考察的是你解决问题的能力、学习能力和团队协作能力。</p><ol><li>让我讲一个自己觉得最不错的项目。然后就巴拉巴拉的聊，我记得主要是问了项目是如何进行协作的、遇到问题是如何解决的、与他人发生冲突是如何解决的这些。感觉聊了挺久。</li><li>出现 OOM 后你会怎么排查问题？</li><li>自己平时是如何学习新技术的？除了 Java 还回去了解其他技术吗?</li><li>上一段实习经历的收获。</li><li>NginX 如何做负载均衡、常见的负载均衡算法有哪些、一致性哈希的一致性是什么意思、一致性哈希是如何做哈希的</li><li>你有什么问题问我吗？</li><li>还有一些其他的，想不起来了，感觉这一面不是偏向技术来问。</li></ol><h4 id="五面-HR-面"><a href="#五面-HR-面" class="headerlink" title="五面(HR 面)"></a>五面(HR 面)</h4><ol><li>自我介绍（主要讲能突出自己的经历，会的编程技术一语带过）。</li><li>你觉得你有什么优点和缺点？如何克服这些缺点？</li><li>说一件大学里你自己比较有成就感的一件事情，为此付出了那些努力。</li><li>你前面跟其他面试官讲过一些你做的项目吧？可以给我讲讲吗？你要考虑到我不是一个做技术的人，怎么让我也听得懂。项目中有什么问题，你怎么解决的？你最大的收获是什么？</li><li>你目前有面试过其他公司吗？如果让你选，这些公司和阿里，你选哪个？（送分题，回答不好可能送命）</li><li>你期望的工作地点是哪里？</li><li>你有什么问题吗？</li></ol><h4 id="总结-23"><a href="#总结-23" class="headerlink" title="总结"></a>总结</h4><ol><li>可以看出面试官问我的很多问题都是比较常见的问题，所以记得一定要提前准备，还要深入准备，不要回答的太皮毛。很多时候一个问题可能会牵扯出很多问题，遇到不会的问题不要慌，冷静分析，如果你真的回答不上来，也不要担心自己是不是就要挂了，很可能这个问题本身就比较难。</li><li>表达能力和沟通能力太重要了，一定要提前练一下，我自身就是一个不太会说话的人，所以，面试前我对于自我介绍、项目介绍和一些常见问题都在脑子里练了好久，确保面试的时候能够很清晰和简洁的说出来。</li><li>等待面试的过程和面试的过程真的好熬人，那段时间我压力也比较大，好在我私下找到学长聊了很多，心情也好了很多。</li><li>面试之后及时总结，面的好的话，不要得意，尽快准备下一场面试吧！</li></ol><p>我觉得我还算是比较幸运的，最后也祝大家都能获得心仪的 Offer。</p><h3 id="2021-华为-字节-腾讯-京东-网易-滴滴面经分享（6个offer）"><a href="#2021-华为-字节-腾讯-京东-网易-滴滴面经分享（6个offer）" class="headerlink" title="2021 华为|字节|腾讯|京东|网易|滴滴面经分享（6个offer）"></a><strong>2021 华为|字节|腾讯|京东|网易|滴滴面经分享（6个offer）</strong></h3><p>本文是一位读者的面经分享。希望这篇文章的内容可以对小伙伴们有帮助！</p><p><strong>每个人成功的经历都不可复制， 我们可以借鉴吸收别人的经验为己所用。</strong></p><p>另外，把自己上岸的经历分享出来是一件非常棒的事情，我在这里实名为这位读者点个赞👍</p><h4 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h4><p>目前大三，本科就读于电子科技大学。</p><p>我在大一进入学校实验室学习，负责数据收集、日常开发、NLP。用到的技术包括：</p><ul><li>语言：Java、Python</li><li>技术： <ul><li>爬虫：协程、异步OI、正则表达式</li><li>后端：SpringBoot、MyBatis、MySQL</li><li>前端：HTML、CSS、JavaScript、BootStrap</li><li>深度学习：Pytorch、Keras</li></ul></li></ul><p>在实验室接触的比较广泛，不过感觉不够深入，于是在大二下开始深入后端技术。</p><p>我在大二下开始做了些开源项目并深入Java相关技术，深入学习了： Java核心技术、Java虚拟机、Java并发编程、设计模式、MySQL、Spring、SpringBoot、Mybatis。</p><p>在大三上期，11月开始准备Java实习相关事务：</p><p>一个月的面试后，陆续拿到了字节，网易、京东、滴滴、腾讯和某区块链公司的6个实习offer。</p><h4 id="复习经历"><a href="#复习经历" class="headerlink" title="复习经历"></a>复习经历</h4><p>因为之前就深入学习过，所以总的复习时间也不长，大概是一周左右，后面是通过边面试边查漏补缺的方式来补短板。</p><blockquote><p>前两天的复习内容：</p></blockquote><h5 id="Java基础-1"><a href="#Java基础-1" class="headerlink" title="Java基础"></a>Java基础</h5><ul><li><p>面向对象特性：封装，多态（动态绑定，向上转型），继承</p></li><li><p>泛型，类型擦除</p></li><li><p>反射，原理，优缺点</p></li><li><p>static，final 关键字</p></li><li><p>String，StringBuffer，StringBuilder底层区别</p></li><li><p>BIO、NIO、AIO</p></li><li><p>Object 类的方法</p></li><li><p>自动拆箱和自动装箱</p></li></ul><h5 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h5><ul><li><p>List ：ArrayList、LinkedList、Vector、CopyOnWriteArrayList</p></li><li><p>Set：HashSet、TreeSet、LinkedHashSet</p></li><li><p>Queue：PriorityQueue</p></li><li><p>Map：HashMap，TreeMap，LinkedHashMap</p></li><li><p>fast-fail，fast-safe机制</p></li><li><p>源码分析（底层数据结构，插入、扩容过程）、线程安全。</p></li></ul><h5 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h5><ul><li>类加载机制、双亲委派模式、3种类加载器（BootStrapClassLoader，ExtensionClassLoader，ApplicationClassLoader）</li><li>运行时内存分区（PC，Java虚拟机栈，本地方法栈，堆，方法区（永久代，元空间））</li><li>JMM：Java内存模型</li><li>引用计数、可达性分析</li><li>垃圾回收算法：标记-清除，标记-整理，复制</li><li>垃圾回收器：比较，区别（Serial，ParNew，Parallel Scavenge ，CMS，G1）Stop The World</li><li>强、软、弱、虚引用</li><li>内存溢出、内存泄漏排查</li><li>JVM调优，常用命令</li></ul><h5 id="Java并发-1"><a href="#Java并发-1" class="headerlink" title="Java并发"></a>Java并发</h5><ul><li><p>三种线程初始化方法（Thread、Callable，Runnable）区别</p></li><li><p>线程池（ThreadPoolExecutor，7大参数，原理，四种拒绝策略，四个变型：Fixed，Single，Cached，Scheduled） </p><ul><li><p>有界、无界任务队列，手写BlockingQueue。</p></li><li><p>乐观锁：CAS（优缺点，ABA问题，DCAS）</p></li><li><p>悲观锁： </p><ul><li><p>Synchronized： </p><ul><li><p>使用：方法（静态，一般方法），代码块（this，ClassName.class）</p></li><li><p>1.6优化：锁粗化，锁消除，自适应自旋锁，偏向锁，轻量级锁</p></li><li><p>锁升级的过程和细节：无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁（不可逆）</p></li><li><p>重量级锁的原理（monitor对象，monitorenter,monitorexit）</p></li><li><p>ReentrantLock：和Synchronized区别？（公平锁、非公平锁、可中断锁….）、原理、用法</p></li></ul></li></ul></li><li><p>ThreadLocal ：底层数据结构：ThreadLocalMap、原理、应用场景。</p></li><li><p>Atomic 类（原理，应用场景）</p></li><li><p>AQS：原理、Semaphore、CountDownLatch、CyclicBarrier</p></li><li><p>Volatile：原理：有序性，可见性</p></li></ul></li></ul><blockquote><p>第三天的复习内容：</p></blockquote><h5 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h5><ul><li>架构：Server层，引擎层（缓存，连接器，分析器，优化器，处理器）</li><li>引擎：InnoDB，MyISAM，Memory区别</li><li>聚簇索引，非聚簇索引区别（从二叉平衡搜索树复习（AVL，红黑树）到B树，最后B+树）</li><li>MySQL、SQL优化方法</li><li>覆盖索引，最左前缀匹配</li><li>当前读，快照读</li><li>MVCC原理（事务ID，隐藏字段，Undo，ReadView）</li><li>Gap Lock、Next-Key Lock、Record Lock</li><li>三大范式</li></ul><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><ul><li>常用SQL</li><li>连接：自连接，内连接（等值，非等值，自然连接），外连接（左，右，全）</li><li>Group BY 和 Having</li><li>Explain</li></ul><blockquote><p>第四天的复习内容：</p></blockquote><h5 id="Spring-1"><a href="#Spring-1" class="headerlink" title="Spring"></a>Spring</h5><ul><li>AOP原理（JDK动态代理，CGLIB动态代理）和 IOC原理</li><li>Spring Bean生命周期</li><li>SpringMVC 原理</li><li>SpringBoot常用注解</li></ul><h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><ul><li>三种类型：创建、结构、行为</li><li>单例模式：饿汉，懒汉，DCL</li><li>简单工厂，工厂方法，抽象工厂</li><li>代理模式</li><li>装饰器模式</li><li>观察者模式</li><li>策略模式</li><li>迭代器模式</li><li>….</li></ul><blockquote><p>第五天的复习内容：</p></blockquote><h5 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h5><ul><li>OSI模型、TCP/IP模型</li><li>TCP和UDP区别</li><li>TCP可靠性传输原理：重传、流量控制、拥塞控制、序列号与确认应达号、校验和</li><li>三次握手、四次挥手过程、原理</li><li>timewait、closewait</li><li>HTTP <ul><li>报文格式</li><li>1.0 1.1 2.0</li><li>状态码</li><li>无状态解决（Cookie Session原理）</li></ul></li><li>HTTPS <ul><li>CA证书</li><li>对称加密</li><li>非对称加密</li></ul></li><li>DNS解析过程，原理</li><li>IP协议、ICMP协议（Ping、Tracert）、ARP协议、路由协议</li><li>攻击手段与防范：XSS、CSRF、SQL注入、DOS、DDOS</li></ul><blockquote><p>第六天的复习内容：</p></blockquote><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><ul><li>进程、线程和协程区别</li><li>进程通信方式（管道，消息队列，共享内存，信号，信号量，socket）</li><li>进程调度算法（先来先服务，短作业优先，时间片轮换，多级反馈队列，优先级调度）</li><li>内存管理：分页（页面置换算法：手写LRU）、分段、虚拟内存</li></ul><blockquote><p> 第七天和以后的复习内容：</p></blockquote><p>每天做点刷算法题(剑指offer、LeetCode 面试Hot题) +查漏补缺。</p><h4 id="字节跳动-1"><a href="#字节跳动-1" class="headerlink" title="字节跳动"></a><strong>字节跳动</strong></h4><h5 id="第一面"><a href="#第一面" class="headerlink" title="第一面"></a>第一面</h5><ol><li><p>自我介绍，介绍项目 </p></li><li><p>协程、线程、进程区别 </p></li><li><p>手写LRU（要求用泛型写）、手写DCL </p></li><li><p>DNS解析过程 </p></li><li><p>输入一个URL到浏览器，整体流程 </p></li><li><p>谈谈Java虚拟机你的认识？垃圾回收算法？垃圾回收器 </p></li><li><p>知道哪些Java的锁？CAS的缺点？ </p></li></ol><h5 id="第二面"><a href="#第二面" class="headerlink" title="第二面"></a>第二面</h5><ol><li><p>自我介绍、介绍项目</p></li><li><p>手写最大堆</p></li><li><p>设计模式了解吗？几大类型？谈谈工厂模式？</p></li><li><p>谈一下Java集合框架？HashMap线程安全的吗？会出现什么问题？</p></li><li><p>说说MySQL的架构？</p></li><li><p>InnoDB和MyISAM区别？</p></li><li><p>知道聚簇索引和非聚簇索引吗？B树和B+树区别？</p></li><li><p>一道LeetCode难问题：接雨水（动态规划解决）</p></li></ol><h5 id="第三面"><a href="#第三面" class="headerlink" title="第三面"></a>第三面</h5><ol><li><p>自我介绍、介绍开源项目</p></li><li><p>线程池了解吗？原理？可以写个BlockingQueue吗？</p></li><li><p>说说fast-fail和fast-safe？</p></li><li><p>了解死锁吗？怎么解决？</p></li><li><p>进程间通信方式？哪种最高效？</p></li><li><p>说说MYSQL优化策略？</p></li><li><p>说了一下部门介绍，主要业务，说可能会转GO等等</p></li></ol><h5 id="第四面（HR）"><a href="#第四面（HR）" class="headerlink" title="第四面（HR）"></a>第四面（HR）</h5><ol><li><p>介绍自己</p></li><li><p>团队怎么协作？有没有矛盾？怎么解决的？</p></li><li><p>入职时间？实习多久？</p></li></ol><h4 id="华为-1"><a href="#华为-1" class="headerlink" title="华为"></a><strong>华为</strong></h4><h5 id="第一面-1"><a href="#第一面-1" class="headerlink" title="第一面"></a>第一面</h5><ol><li>自我介绍</li><li>谈项目（谈了很久）</li><li>HTTP 的无状态怎么解决？（Cookie Session）</li><li>TCP如何保证可靠性传输？（校验和，序列号和确认应答号，重传，流量控制，拥塞控制）</li><li>ARP过程？</li><li>进程调度算法？</li><li>一道动态规划题目：不同路径</li></ol><h5 id="第二面-1"><a href="#第二面-1" class="headerlink" title="第二面"></a>第二面</h5><ol><li><p>自我介绍</p></li><li><p>谈项目（你觉得收获最大的项目）</p></li><li><p>谈谈Spring AOP 和 IOC</p></li><li><p>谈谈你知道的MySQL所有内容</p></li><li><p>手写个归并排序</p></li><li><p>谈谈你对分布式系统的认识？</p></li><li><p>谈谈你对华为的认识？华为的文化和价值观？</p></li></ol><h5 id="HR"><a href="#HR" class="headerlink" title="HR"></a>HR</h5><p>技术面试都通过了，问HR怎么样，说应该没问题，等了一星期offer，最后发offer的时候，HR说我的性格测试没通过，Offer审批不下来，人傻了。因为华为在成都，字节在北京，而且技术官的意向是很稳能进华为，我想着在家近的地方实习，在等待的一周中就把字节拒了，最后华为没发到offer，直接架空，崩溃！第一次找实习没太多经验，策略不对，心里很难受，不过调整了一下，继续了新的面试</p><h4 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h4><h5 id="第一面-2"><a href="#第一面-2" class="headerlink" title="第一面"></a>第一面</h5><ol><li><p>自我介绍</p></li><li><p>介绍一个对自己影响深刻的项目</p></li><li><p>说说进程间调度的算法</p></li><li><p>说说匿名函数</p></li><li><p>说说协程、线程、进程。</p></li><li><p>你对游戏引擎了解多少？</p></li><li><p>手写地杰斯特拉算法？</p></li><li><p>了解A*算法吗？</p></li><li><p>说说Python和Java的区别？</p></li><li><p>Java是怎么进行垃圾回收的？</p></li><li><p>然后聊了很多生活上的问题，非技术问题。</p></li></ol><h5 id="第二面-2"><a href="#第二面-2" class="headerlink" title="第二面"></a>第二面</h5><ol><li><p>自我介绍</p></li><li><p>介绍项目</p></li><li><p>说说深度优先搜索算法、回溯算法</p></li><li><p>一道算法题：一个走迷宫问题，DFS+回溯解决。</p></li><li><p>你对C熟悉吗？Lua使用过吗？</p></li><li><p>介绍业务，主要工作内容。</p></li></ol><h5 id="HR面-1"><a href="#HR面-1" class="headerlink" title="HR面"></a>HR面</h5><ol><li><p>自我介绍</p></li><li><p>介绍一个项目中遇到的问题，怎么解决的？</p></li><li><p>介绍一下博客？开源项目？为什么花时间做这些？</p></li><li><p>大学最成功的一件事？</p></li></ol><h4 id="滴滴-1"><a href="#滴滴-1" class="headerlink" title="滴滴"></a>滴滴</h4><h5 id="第一面-3"><a href="#第一面-3" class="headerlink" title="第一面"></a>第一面</h5><ol><li><p>自我介绍、介绍项目</p></li><li><p>Java面向对象的三大特性？</p></li><li><p>了解Java哪些锁？Synchronized优化内容？锁升级过程？</p></li><li><p>谈谈Java虚拟机？类加载机制？</p></li><li><p>知道双亲委派模式吗？有什么好处？</p></li><li><p>Java运行时内存分区？</p></li><li><p>死锁了解吗？如何解决？</p></li><li><p>哪些对象可以作为GC ROOTS？</p></li><li><p>了解的设计模式？手写一下DCL吧</p></li></ol><h5 id="第二面-3"><a href="#第二面-3" class="headerlink" title="第二面"></a>第二面</h5><ol><li><p>自我介绍</p></li><li><p>介绍项目（难点以及怎么解决的？）</p></li><li><p>谈谈MySQL的各种引擎？</p></li><li><p>覆盖索引和非覆盖索引区别？</p></li><li><p>MYSQL优化方法有哪些？</p></li><li><p>讲讲HashMap的原理，put过程？resize过程？线程安全吗？死循环问题？</p></li><li><p>了解什么中间件吗？</p></li><li><p>讲讲Java里面的锁？</p></li><li><p>一道算法题：最长公共子串</p></li></ol><h5 id="HR面-2"><a href="#HR面-2" class="headerlink" title="HR面"></a>HR面</h5><ol><li><p>自我介绍</p></li><li><p>到岗时间</p></li><li><p>自己的优势</p></li><li><p>大学最失败的一件事</p></li><li><p>对加班的看法</p></li></ol><h4 id="京东-1"><a href="#京东-1" class="headerlink" title="京东"></a>京东</h4><h5 id="第一面-4"><a href="#第一面-4" class="headerlink" title="第一面"></a>第一面</h5><ol><li><p>自我介绍</p></li><li><p>谈项目</p></li><li><p>TCP如何保证可靠传输？拥塞控制算法？</p></li><li><p>讲讲Spring的AOP？</p></li><li><p>SpringBoot常用哪些注解？</p></li><li><p>谈谈Java虚拟机？</p></li><li><p>垃圾回收算法有哪些？</p></li><li><p>了解哪些垃圾回收器？讲一下CMS垃圾回收过程</p></li><li><p>算法题： </p></li></ol><p>​        a. 两个栈实现队列</p><p>​        b. 最近公共祖先节点</p><h5 id="第二面-4"><a href="#第二面-4" class="headerlink" title="第二面"></a>第二面</h5><ol><li><p>自我介绍</p></li><li><p>讲讲Java集合框架，HashMap原理。</p></li><li><p>知道哪些锁？</p></li><li><p>谈谈公平锁和非公平锁？</p></li><li><p>Synchronized和ReentrantLock区别</p></li><li><p>MySQL的索引为什么快？有哪些索引？原理数据结构？</p></li><li><p>MySQL有哪些优化的策略？</p></li><li><p>死锁了解吗？</p></li><li><p>ThreadLocal了解吗？原理？</p></li><li><p>手写一个堆排序。</p></li><li><p>一道算法题：完全平方数（动态规划）</p></li></ol><h5 id="HR面-3"><a href="#HR面-3" class="headerlink" title="HR面"></a>HR面</h5><ol><li><p>自我介绍</p></li><li><p>多久可以到岗？实习时间？</p></li><li><p>对加班看法？</p></li><li><p>如何团队分工的？</p></li></ol><h4 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h4><h5 id="第一面-5"><a href="#第一面-5" class="headerlink" title="第一面"></a>第一面</h5><ol><li><p>自我介绍</p></li><li><p>介绍项目</p></li><li><p>说说协程和线程区别？</p></li><li><p>Java虚拟机的作用？垃圾回收的过程？</p></li><li><p>了解的垃圾回收器？</p></li><li><p>手写快排</p></li><li><p>算法题：按K位反转链表</p></li><li><p>一百亿个数，n个机器，怎么排序？（桶排序）</p></li></ol><h5 id="第二面-5"><a href="#第二面-5" class="headerlink" title="第二面"></a>第二面</h5><ol><li><p>自我介绍</p></li><li><p>介绍项目</p></li><li><p>TCP和UDP区别？如何保证可靠性？</p></li><li><p>HTTP的状态码记得哪些？</p></li><li><p>ICMP是哪层的？有什么用？</p></li><li><p>会哪些框架？</p></li><li><p>Spring的AOP认识？</p></li><li><p>MySQL InnoDB和MyISAM区别？</p></li><li><p>谈谈各种索引？为什么用B+树不用B树？</p></li><li><p>死锁的条件？如何解决？</p></li><li><p>OOM怎么排查？</p></li><li><p>介绍业务</p></li></ol><h5 id="HR面-4"><a href="#HR面-4" class="headerlink" title="HR面"></a>HR面</h5><ol><li><p>自我介绍</p></li><li><p>多久能来实习？实习多久？</p></li><li><p>加班看法？</p></li><li><p>看你掌握技术挺多，如何快速学习一个技术的？</p></li></ol><h4 id="总结-24"><a href="#总结-24" class="headerlink" title="总结"></a>总结</h4><p>因为之前学的也比较深入，复习时间也没用太多，主要就是写点算法题保持手感。</p><p>面试中遇到的问题，9成都已经复习了，而且也比较基础，也都在掌握之中。</p><p>像中间件、微服务这些我没写在简历上，不是很会，面试官也不会刻意刁难你，实习的话，感觉大厂可能更注重基础和对知识的深入度，面试了一个月收货还是挺多的，希望总结一下面经，帮到更多的人~</p><p>准备大厂面试的话，注重基础，多练算法题，基本上就没问题了！加油！</p><h3 id="2021-虾皮，网易云，京东，阿里校招面经！附参考答案"><a href="#2021-虾皮，网易云，京东，阿里校招面经！附参考答案" class="headerlink" title="2021 虾皮，网易云，京东，阿里校招面经！附参考答案"></a><strong>2021 虾皮，网易云，京东，阿里校招面经！附参考答案</strong></h3><h4 id="虾皮-sg-三轮面经（通过）"><a href="#虾皮-sg-三轮面经（通过）" class="headerlink" title="虾皮 sg 三轮面经（通过）"></a>虾皮 sg 三轮面经（通过）</h4><h5 id="一面（2021-7-8）"><a href="#一面（2021-7-8）" class="headerlink" title="一面（2021.7.8）"></a>一面（2021.7.8）</h5><ol><li><p>【项目】介绍下百度的实习经历</p></li><li><p>用户登录密码存储，哈希和加盐的过程是在前端还是后端</p></li><li><p>浏览器输入 URL 过程</p></li><li><p>tcp 连接建立过程</p></li><li><p>http 与 https 的区别</p></li><li><p>【项目】介绍下分片降低 redis 热键访问压力</p></li><li><p>写 db 数据如何同步到 cache</p></li><li><p>cache key 失效后大量流量请求 db 如何处理（数据存在于 db 种）</p></li><li><p>【项目】介绍下数据库慢查询的优化</p></li><li><p>MySQL 索引默认数据结构</p></li><li><p>B+树相对 B 树优点</p></li><li><p>MySQL 里的主键，外键以及组合索引分别在什么场景下使用</p></li><li><p>为什么实际项目里建议不用外键</p></li><li><p>【设计题】根据查询场景设计索引</p></li><li><p>常见的用来计算哈希的方法</p></li><li><p>如何解决哈希冲突</p></li><li><p>【算法题】实现 LRU cache</p></li><li><p>【算法题】给定数字 N，打印 1~N 中心螺旋矩阵</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li><p>如何加密传输和存储用户密码 : <a href="https://zhuanlan.zhihu.com/p/36603247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36603247</a></p></li><li><p>HTTP vs HTTPS（应用层）：<a href="https://javaguide.cn/cs-basics/network/http&amp;https.html" target="_blank" rel="noopener">https://javaguide.cn/cs-basics/network/http&amp;https.html</a></p></li><li><p>计算机网络常见知识点&amp;面试题（补充）：<a href="https://javaguide.cn/cs-basics/network/other-network-questions.html" target="_blank" rel="noopener">https://javaguide.cn/cs-basics/network/other-network-questions.html</a></p></li><li><p>安全系列之——主流 Hash 散列算法介绍和使用：<a href="https://cloud.tencent.com/developer/news/682510" target="_blank" rel="noopener">https://cloud.tencent.com/developer/news/682510</a></p></li><li><p>Redis 知识点&amp;面试题总结：<a href="https://javaguide.cn/database/redis/redis-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/database/redis/redis-questions-01.html</a></p></li><li><p>MySQL 知识点&amp;面试题总结 : <a href="https://javaguide.cn/database/mysql/mysql-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/database/mysql/mysql-questions-01.html</a></p></li><li><p>如何在 Java 中实现 LRU 缓存 ：<a href="https://www.baeldung.com/java-lru-cache" target="_blank" rel="noopener">https://www.baeldung.com/java-lru-cache</a></p></li></ul><h5 id="二面（2021-7-16）"><a href="#二面（2021-7-16）" class="headerlink" title="二面（2021.7.16）"></a>二面（2021.7.16）</h5><ol><li><p>团队介绍</p></li><li><p>自我介绍</p></li><li><p>印象最深刻的项目</p></li><li><p>redis 的 zset 数据结构</p></li><li><p>加盐的目的</p></li><li><p>重放指的是什么</p></li><li><p>介绍下彩虹表，彩虹表为什么叫彩虹表</p></li><li><p>用户登录状态怎么保持</p></li><li><p>https 为什么需要证书</p></li><li><p>加盐过程，盐如何存储</p></li><li><p>实现一个向用户展示商品历史价格的网站，</p></li><li><p>百万级别商品，爬虫脚本怎么解决</p></li><li><p>什么样的分布式方案</p></li><li><p>布隆过滤器原理</p></li><li><p>用户量增大，如何提升系统容量</p></li><li><p>消息队列作用</p></li><li><p>loadbalancer 如何实现分布式</p></li><li><p>缓存如何实现分布式</p></li><li><p>哈希如何减少重哈希代价</p></li><li><p>如何分析热键</p></li><li><p>增强 db 能力的方案</p></li><li><p>网站会面临的安全问题</p></li><li><p>介绍下 csrf，攻击者如何拿到用户身份，csrf 预防方法，csrf token 如何实现无法伪造</p></li><li><p>如何应对 shopee 钓鱼网站</p></li><li><p>为什么选 sg shopee，国内与 sg 的倾向，有通过渠道了解过 sg 吗</p></li><li><p>字节与百度工作方式的区别，眼下喜欢哪一种</p></li><li><p>反问环节</p></li></ol><p><strong>参考答案（部分参考答案和一面中的重合了，这里就不多放一编了）：</strong></p><ul><li>什么是彩虹表？：<a href="https://www.zhihu.com/question/19790488" target="_blank" rel="noopener">https://www.zhihu.com/question/19790488</a> 、密码破解的利器——彩虹表（rainbow table）：<a href="https://www.jianshu.com/p/732d9d960411" target="_blank" rel="noopener">https://www.jianshu.com/p/732d9d960411</a></li><li>TikTok 三面：“聊聊 TCP/IP 常见的攻击手段”：<a href="https://mp.weixin.qq.com/s/U8S8IEb_rH5FHUKvoBJCUg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/U8S8IEb_rH5FHUKvoBJCUg</a></li><li>消息队列知识点&amp;面试题总结 ： <a href="https://javaguide.cn/high-performance/message-queue/message-queue.html" target="_blank" rel="noopener">https://javaguide.cn/high-performance/message-queue/message-queue.html</a></li><li>布隆过滤器：<a href="https://javaguide.cn/cs-basics/data-structure/bloom-filter/" target="_blank" rel="noopener">https://javaguide.cn/cs-basics/data-structure/bloom-filter/</a></li><li>谈谈 redis 的热 key 问题如何解决：<a href="https://www.cnblogs.com/rjzheng/p/10874537.html、如何快速定位" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/10874537.html、如何快速定位</a> Redis 热 key：<a href="https://www.infoq.cn/article/3l3zaq4h8xpnom2glsyi" target="_blank" rel="noopener">https://www.infoq.cn/article/3l3zaq4h8xpnom2glsyi</a></li></ul><h5 id="HR-面（2021-7-26）"><a href="#HR-面（2021-7-26）" class="headerlink" title="HR 面（2021.7.26）"></a>HR 面（2021.7.26）</h5><ol><li><p>英文自我介绍</p></li><li><p>为什么投递 shopee 职位</p></li><li><p>为什么选择 sg</p></li><li><p>sg 介绍</p></li><li><p>反问环节</p></li></ol><h4 id="网易云音乐三轮后端（通过）"><a href="#网易云音乐三轮后端（通过）" class="headerlink" title="网易云音乐三轮后端（通过）"></a>网易云音乐三轮后端（通过）</h4><h5 id="一面（2021-8-30）"><a href="#一面（2021-8-30）" class="headerlink" title="一面（2021.8.30）"></a>一面（2021.8.30）</h5><ol><li><p>自我介绍</p></li><li><p>【项目】实习项目在技术架构上，除了语言的差别，还有哪些更深入的差异</p></li><li><p>【项目】选择一个实习项目，介绍下具体做的事情</p></li><li><p>【项目】随着活动事件越来越多，如何从后端进行设计上的优化</p></li><li><p>使用 mq 对业务进行异步解耦之后，在消息消费上有哪些需要注意的点</p></li><li><p>【项目】在发放奖励场景下，如何保证消费的幂等性</p></li><li><p>【redis】有了解过 redis 集群如何部署的吗</p></li><li><p>【redis】用 redis 如何实现分布式锁</p></li><li><p>【redis】zset 实现原理是什么</p></li><li><p>【redis】跳表优化的理念是什么</p></li><li><p>【redis】为什么采用跳表，而不使用哈希表或平衡树实现呢?</p></li><li><p>【redis】在数据量比较小时，跳表相较其他数据结构的缺点是什么</p></li><li><p>【项目】数据库是单节点还是分布式的，有做分库分表吗</p></li><li><p>【项目】在你的业务场景下，是怎么进行分库分表的？</p></li><li><p>【分库分表】在查询分库分表的数据时，没有带分库分表的 key，底层查询是怎么样的，对性能有影响吗</p></li><li><p>【分库分表】分库分表下 ID 全局唯一是如何做的？</p></li><li><p>【MySQL】MySQL 联合索引查询时需要注意哪些问题</p></li><li><p>【MySQL】从数据结构角度分析为何需要最左匹配原则</p></li><li><p>【项目】有性能优化案例吗</p></li><li><p>【IO】BIO 和 NIO 的区别是什么</p></li><li><p>【JVM】java gc 算法了解哪些</p></li><li><p>【JVM】可达性分析里哪些对象可以作为 gc root</p></li><li><p>【JVM】类的 static 变量时 gc root 吗，一个普通 map 对象的 key，value 可以被回收吗</p></li><li><p>【JVM】想要 map 里的 value 在 gc 时可以被及时回收，应该对 map 做什么样的改造呢</p></li><li><p>【多线程】java 多线程下的变量可见性有什么解决方案</p></li><li><p>【多线程】阻塞队列里锁的如何实现的，设计阻塞队列时，主要阻塞在哪些操作上</p></li><li><p>【多线程】线程安全的数组和链表有哪些</p></li><li><p>【网络】tcp 协议的连接、断开过程</p></li><li><p>【网络】挥手时为什么需要等待 2 倍 MSL</p></li><li><p>反问环节</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li>Redis 知识点&amp;面试题总结：<a href="https://javaguide.cn/database/redis/redis-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/database/redis/redis-questions-01.html</a></li><li>【Redis】拼多多面试官问我 zset 底层是如何实现的，我反手就把跳表的数据结构画了出来：<a href="https://segmentfault.com/a/1190000037473381" target="_blank" rel="noopener">https://segmentfault.com/a/1190000037473381</a></li><li>为啥 redis 使用跳表(skiplist)而不是使用 red-black？：<a href="https://www.zhihu.com/question/20202931" target="_blank" rel="noopener">https://www.zhihu.com/question/20202931</a></li><li>分布式 ID：<a href="https://javaguide.cn/distributed-system/distributed-id.html" target="_blank" rel="noopener">https://javaguide.cn/distributed-system/distributed-id.html</a></li><li>读写分离&amp;分库分表：<a href="https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html" target="_blank" rel="noopener">https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html</a></li><li>MySQL 知识点&amp;面试题总结：<a href="https://javaguide.cn/database/mysql/mysql-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/database/mysql/mysql-questions-01.html</a></li><li>JVM 垃圾回收详解：<a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener">https://javaguide.cn/java/jvm/jvm-garbage-collection.html</a></li><li>Java 并发常见知识点&amp;面试题总结（进阶篇）：<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html</a></li><li>JDK 提供的并发容器总结：<a href="https://javaguide.cn/java/concurrent/java-concurrent-collections.html" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/java-concurrent-collections.html</a></li><li>「为什么这么设计系列」为什么 TCP 建立连接需要三次握手：<a href="https://draveness.me/whys-the-design-tcp-three-way-handshake/" target="_blank" rel="noopener">https://draveness.me/whys-the-design-tcp-three-way-handshake/</a></li><li>用 Java 如何设计一个阻塞队列，然后说说 ArrayBlockingQueue 和 LinkedBlockingQueue：<a href="https://www.cnblogs.com/jimoer/p/14887921.html" target="_blank" rel="noopener">https://www.cnblogs.com/jimoer/p/14887921.html</a></li></ul><h5 id="二面（2021-9-4）"><a href="#二面（2021-9-4）" class="headerlink" title="二面（2021.9.4）"></a>二面（2021.9.4）</h5><ol><li><p>自我介绍</p></li><li><p>哪个实习项目成长比较大</p></li><li><p>【项目】实习项目里主要做了哪些的工作</p></li><li><p>【项目】了解任务系统等项目相关信息</p></li><li><p>【项目】项目中最大的难点是什么</p></li><li><p>【项目】如何保证缓存和数据库的一致性</p></li><li><p>【项目】分布式锁是怎么用的</p></li><li><p>【分布式锁】如果需要一个严格的分布式锁，需要怎么做</p></li><li><p>【分布式锁】如何处理分布式锁因为超时被提前释放的问题</p></li><li><p>【设计题】高并发场景下评论点赞功能的设计（点赞数量须持久化到 db）</p></li><li><p>反问环节</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li>拜托，面试请不要再问我 Redis 分布式锁的实现原理！【石杉的架构笔记】：<a href="https://juejin.im/post/5bf3f15851882526a643e207" target="_blank" rel="noopener">https://juejin.im/post/5bf3f15851882526a643e207</a></li><li>微博架构组面试：类微博点赞系统设计：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505978&amp;idx=2&amp;sn=d9190cb5345c5798a07d460811d51c74&amp;chksm=cea197f1f9d61ee772de9c02f2b04f432b4493078152c67626c7bccb48b5ca31b17ca4ec6412&amp;token=1069133552&amp;lang=zh_CN#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505978&amp;idx=2&amp;sn=d9190cb5345c5798a07d460811d51c74&amp;chksm=cea197f1f9d61ee772de9c02f2b04f432b4493078152c67626c7bccb48b5ca31b17ca4ec6412&amp;token=1069133552&amp;lang=zh_CN#rd</a></li></ul><h5 id="HR-面（2021-9-8）"><a href="#HR-面（2021-9-8）" class="headerlink" title="HR 面（2021.9.8）"></a>HR 面（2021.9.8）</h5><ol><li><p>自我介绍</p></li><li><p>base 地偏好</p></li><li><p>还有哪些公司在面试中，面试进展</p></li><li><p>有什么爱好或热爱</p></li><li><p>未来职业规划</p></li><li><p>为什么选择互联网</p></li><li><p>求职过程中在团队或工作氛围上有什么样的想法</p></li><li><p>平时有使用过网易云音乐产品吗</p></li><li><p>平时在什么场景下使用到我们的产品</p></li><li><p>听歌听哪种风格多一点</p></li><li><p>了解乡村音乐吗</p></li><li><p>基于哪些维度对面试公司做出最终的选择</p></li><li><p>期望第一年的收入达到什么范围</p></li><li><p>反问环节</p></li></ol><h4 id="京东后端三轮面经（通过）"><a href="#京东后端三轮面经（通过）" class="headerlink" title="京东后端三轮面经（通过）"></a>京东后端三轮面经（通过）</h4><h5 id="一面-（2021-7-28）"><a href="#一面-（2021-7-28）" class="headerlink" title="一面 （2021.7.28）"></a>一面 （2021.7.28）</h5><ol><li><p>自我介绍</p></li><li><p>【项目】收获最大的项目，两个项目有什么不一样，自己承担什么角色，实现哪些内容</p></li><li><p>【项目】项目为什么引入 etcd</p></li><li><p>【Java 基础】Java 中的==和 equals 区别</p></li><li><p>【Java 基础】hashmap 的实现原理、1.8 之后的改变</p></li><li><p>【Java 基础】接口和抽象类的区别</p></li><li><p>【Java 基础】可变长参数</p></li><li><p>【Java 新特性】java8 有哪些新特性</p></li><li><p>【Java 多线程】介绍下 ThreadLocal 和使用场景</p></li><li><p>【JVM】jvm 优化工具</p></li><li><p>【设计模式】简单工厂和抽象工厂的区别</p></li><li><p>【设计模式】熟悉的设计模式有哪些</p></li><li><p>【设计模式】优化 if-else 方法</p></li><li><p>【MySQL】MySQL 里行锁和表锁及其特性</p></li><li><p>【MySQL】介绍乐观锁、悲观锁、重入锁、排他锁</p></li><li><p>对方屏幕共享项目中一个源文件，找代码里的优缺点（单例实现的策略模式）</p></li><li><p>【算法题】递归实现单链表反转</p></li><li><p>反问环节</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li>Java 基础知识&amp;面试题总结: <a href="https://javaguide.cn/java/basis/java-basic-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/java/basis/java-basic-questions-01.html</a></li><li>接口和抽象类有什么区别？：<a href="https://www.zhihu.com/question/20149818" target="_blank" rel="noopener">https://www.zhihu.com/question/20149818</a></li><li>Java 集合框架基础知识&amp;面试题总结: <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/java/collection/java-collection-questions-01.html</a></li><li>Java 并发常见知识点&amp;面试题总结（进阶篇）：<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html</a></li><li>设计模式之工厂模式（factory pattern）：<a href="https://www.cnblogs.com/yssjun/p/11102162.html" target="_blank" rel="noopener">https://www.cnblogs.com/yssjun/p/11102162.html</a></li><li>设计模式总结 ：<a href="https://www.cnblogs.com/chenssy/p/3357683.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3357683.html</a></li><li>条件语句的多层嵌套问题优化：<a href="https://mp.weixin.qq.com/s/7i-TPFovLwrSmbWaIiX8dQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/7i-TPFovLwrSmbWaIiX8dQ</a></li><li>MySQL 锁：灵魂七拷问 ：<a href="https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/、通俗易懂" target="_blank" rel="noopener">https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/、通俗易懂</a> 悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量/重量级锁、读写锁、各种锁及其 Java 实现！：<a href="https://zhuanlan.zhihu.com/p/71156910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/71156910</a></li></ul><h5 id="二面（2021-8-5）"><a href="#二面（2021-8-5）" class="headerlink" title="二面（2021.8.5）"></a>二面（2021.8.5）</h5><ol><li><p>自我介绍</p></li><li><p>字节和有取向吗</p></li><li><p>【项目】介绍下 redis 在项目中是怎么使用的？</p></li><li><p>【项目】介绍下 redis 分布式锁项目中有什么作用？怎么实现的？</p></li><li><p>【MySQL】MySQL 优化的方法</p></li><li><p>【Java 多线程】介绍下 ThreadLocal 的原理和使用场景</p></li><li><p>【Java 基础】equals 和 hashcode 区别</p></li><li><p>【Java 基础】java 的基本类型和空间大小</p></li><li><p>【Spring Boot】Spring Boot 自动装配原理</p></li><li><p>【Java 基础】Java I/O 流有用过吗</p></li><li><p>【设计模式】软件设计原则有哪些？</p></li><li><p>【设计模式】介绍下模板方法</p></li><li><p>【设计模式】装饰器模式</p></li><li><p>找工作的标准</p></li><li><p>像从事的方向偏业务还是偏底层框架</p></li><li><p>反问环节</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li>MySQL 高性能优化规范建议：<a href="https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html" target="_blank" rel="noopener">https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html</a></li><li>Java 基础知识&amp;面试题总结: <a href="https://javaguide.cn/java/basis/java-basic-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/java/basis/java-basic-questions-01.html</a></li><li>Java 并发常见知识点&amp;面试题总结（进阶篇）：<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html</a></li><li>Spring Boot 自动装配原理：<a href="https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html" target="_blank" rel="noopener">https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html</a></li><li>设计模式总结 ：<a href="https://www.cnblogs.com/chenssy/p/3357683.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3357683.html</a></li></ul><h4 id="阿里巴巴后端面经（通过）"><a href="#阿里巴巴后端面经（通过）" class="headerlink" title="阿里巴巴后端面经（通过）"></a>阿里巴巴后端面经（通过）</h4><h5 id="【cto线-业务平台事业部】一面（2021-8-11）"><a href="#【cto线-业务平台事业部】一面（2021-8-11）" class="headerlink" title="【cto线-业务平台事业部】一面（2021.8.11）"></a>【cto线-业务平台事业部】一面（2021.8.11）</h5><ol><li><p>【闲聊】去年为什么没有接实习offer</p></li><li><p>【闲聊】为什么没有选择直接去字节和百度？两家公司感觉有什么区别？</p></li><li><p>【闲聊】对阿里的印象怎么样</p></li><li><p>【项目】介绍下你在百度实习做的项目，做这个项目过程中有什么难点</p></li><li><p>【项目】讲讲你对依赖倒置原则的理解，你是如何基于这个原则来重构项目代码的？</p></li><li><p>【项目】如何保证重构不会影响正常的业务？</p></li><li><p>【项目】单测的覆盖率有多少？</p></li><li><p>【编程语言】Go 跟 Java 的区别在哪？为什么Docker/Kubernetes们选择Go?</p></li><li><p>【编程语言】协程和线程有什么区别</p></li><li><p>【项目】简单说下单点登录的实现</p></li><li><p>【认证授权】如果 Cookie 禁用的话如何解决？Cookie 和 Session 有什么区别？</p></li><li><p>【认证授权】什么是 Token?什么是 JWT?？如何解决token方案无法主动过期的问题？</p></li><li><p>【认证授权】RBAC 模型了解吗？</p></li><li><p>【多线程】Java线程池的原理</p></li><li><p>【JVM】jvm的内存区域？</p></li><li><p>【JVM】垃圾收集算法有哪些？如何判断一个对象是否已经死亡？</p></li><li><p>【设计模式】设计模式了解哪些</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li>再读《重构》- ThoughtWorks 洞见：<a href="https://insights.thoughtworks.cn/reread-refactoring/" target="_blank" rel="noopener">https://insights.thoughtworks.cn/reread-refactoring/</a></li><li>单元测试到底是什么？应该怎么做？ - 腾讯技术工程的回答 - 知乎 ：<a href="https://www.zhihu.com/question/28729261/answer/1058317111" target="_blank" rel="noopener">https://www.zhihu.com/question/28729261/answer/1058317111</a></li><li>为什么Docker/Kubernetes们选择Go?：<a href="https://zhuanlan.zhihu.com/p/446697672" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/446697672</a></li><li>Go 面试官：什么是协程，协程和线程的区别和联系？：<a href="https://segmentfault.com/a/1190000040373756" target="_blank" rel="noopener">https://segmentfault.com/a/1190000040373756</a></li><li>JWT 身份认证优缺点分析以及常见问题解决方案：<a href="https://javaguide.cn/system-design/security/advantages&amp;disadvantages-of-jwt.html" target="_blank" rel="noopener">https://javaguide.cn/system-design/security/advantages&amp;disadvantages-of-jwt.html</a></li><li>认证授权基础：<a href="https://javaguide.cn/system-design/security/basis-of-authority-certification.html" target="_blank" rel="noopener">https://javaguide.cn/system-design/security/basis-of-authority-certification.html</a></li><li>Java线程池学习总结: <a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary.html" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/java-thread-pool-summary.html</a></li><li>Java 内存区域详解：<a href="https://javaguide.cn/java/jvm/memory-area.html" target="_blank" rel="noopener">https://javaguide.cn/java/jvm/memory-area.html</a></li><li>JVM 垃圾回收详解：<a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener">https://javaguide.cn/java/jvm/jvm-garbage-collection.html</a></li><li>设计模式总结 ：<a href="https://www.cnblogs.com/chenssy/p/3357683.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenssy/p/3357683.html</a></li></ul><h5 id="【cto线-业务平台事业部】二面（2021-8-20）"><a href="#【cto线-业务平台事业部】二面（2021-8-20）" class="headerlink" title="【cto线-业务平台事业部】二面（2021.8.20）"></a>【cto线-业务平台事业部】二面（2021.8.20）</h5><ol><li><p>【闲聊】自我介绍</p></li><li><p>【闲聊】学校里有无发表过论文、专利或者参加过竞赛</p></li><li><p>【闲聊】百度、字节有没有给offer？还有其他offer吗？</p></li><li><p>【项目】百度项目的业务效果怎么样、QPS怎么样？</p></li><li><p>【项目】介绍下用户邀请分享的实现？</p></li><li><p>【JVM】jvm内存分为哪几个区域，哪些是线程私有的，哪些是线程共享的</p></li><li><p>【Java基础】ClassNotFound 与 NoClassDefinedError 有什么区别</p></li><li><p>【多线程】能说下什么是CAS吗？什么是 ABA 问题？ABA 问题怎么解决？</p></li><li><p>【MySQL】MySQL数据库的索引为什么使用B+树而不是B树</p></li><li><p>【Redis】Redis中有哪些数据结构？为啥 redis 使用跳表(skiplist)而不是使用红黑树？</p></li><li><p>【Redis】有没有遇到过缓存被击穿的情况</p></li><li><p>【算法题】leetcode 1478. 安排邮筒</p></li></ol><p><strong>参考答案 ：</strong></p><ul><li>ClassNotFoundException 和 NoClassDefFoundError 的区别：<a href="https://cloud.tencent.com/developer/article/1153789" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1153789</a></li><li>如何理解ABA问题：<a href="https://elsef.com/2020/03/08/如何理解ABA问题/" target="_blank" rel="noopener">https://elsef.com/2020/03/08/如何理解ABA问题/</a></li><li>AQS 原理以及 AQS 同步组件总结：<a href="https://javaguide.cn/java/concurrent/aqs.html" target="_blank" rel="noopener">https://javaguide.cn/java/concurrent/aqs.html</a></li><li>深入理解 MySQL 索引底层原理：<a href="https://zhuanlan.zhihu.com/p/113917726" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/113917726</a></li><li>Redis 知识点&amp;面试题总结 ：<a href="https://javaguide.cn/database/redis/redis-questions-01.html" target="_blank" rel="noopener">https://javaguide.cn/database/redis/redis-questions-01.html</a></li><li>为啥 redis 使用跳表(skiplist)而不是使用红黑树？：<a href="https://www.zhihu.com/question/20202931" target="_blank" rel="noopener">https://www.zhihu.com/question/20202931</a></li></ul><h5 id="【cto线-零售云事业部】终面（2021-9-18）"><a href="#【cto线-零售云事业部】终面（2021-9-18）" class="headerlink" title="【cto线-零售云事业部】终面（2021.9.18）"></a>【cto线-零售云事业部】终面（2021.9.18）</h5><p>（流程转到该部门）</p><ol><li><p>【闲聊】自我介绍</p></li><li><p>【实习】百度实习团队规模，项目流量怎么样</p></li><li><p>【项目】采用哪些方法应对高并发流量</p></li><li><p>【项目】配置缓存的时候有哪些考虑，哪些数据放哪些不放入缓存</p></li><li><p>（HR入会）介绍/宣传部门业务</p></li><li><p>反问环节</p></li></ol><h1 id="五、练级攻略篇"><a href="#五、练级攻略篇" class="headerlink" title="五、练级攻略篇"></a>五、练级攻略篇</h1><h2 id="如何成为一个合格的程序员？"><a href="#如何成为一个合格的程序员？" class="headerlink" title="如何成为一个合格的程序员？"></a><strong>如何成为一个合格的程序员？</strong></h2><p>对于下面的每一点建议的理解，每个人可能都不一样。</p><p>如果你觉得某一点对你有用的话，不要关了这篇文章之后你就忘记了，建议你一定要记录下来。从当下开始就去努力践行。</p><p><strong>本文概览 ：</strong></p><ul><li>用好 Google</li><li>修改代码要慎重</li><li>谨慎使用网上搜索的代码片段</li><li>Code Review 很重要</li><li>尽量减少 TODO</li><li>不要放任破窗</li><li>不要孤立地写代码</li><li>试着从更高的层面去了解大部分代码的功能</li><li>尽量多沟通交流，提高表达能力</li><li>你永远无法写出完美的软件</li><li>工作经验 != 能力</li><li>提高自己的核心竞争力</li></ul><h3 id="用好-Google"><a href="#用好-Google" class="headerlink" title="用好 Google"></a>用好 Google</h3><p>相比于百度，更建议使用 Google。如果你无法访问 Google 的话，必应也是不错的。</p><p>分享一些个人使用 Google 搜索的实用建议， 这里就不专门介绍各种繁杂的搜索参数了，说了也记不住，实用性不强。</p><p><strong>1、选择合适的关键词，多个关键词手动使用空格进分割。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\1663222443004-c18f3896-7801-4efc-a1c2-a14b28deacc5.png" alt="google-seach-key-words.png" title>                </div>                <div class="image-caption">google-seach-key-words.png</div>            </figure><p>如果搜索出来的内容你不满意的话，建议重新更换/删减关键词进行搜索或者调整关键词的顺序。</p><p><strong>2、利用好 Google 图片搜索，一张好的技术配图有更大概率带你进入更优质的页面。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\google-search-picture.png" alt="google-search-picture.png" title>                </div>                <div class="image-caption">google-search-picture.png</div>            </figure><p><strong>3、往往同时需要多打开多个页面之后，才有可能找到自己需要的内容。</strong></p><p>你可以先从第一页的搜索结果中选择打开 5 个页面，内容差的直接关闭，全平台采集文章类的盗文网站直接选择屏蔽掉即可。</p><p>像下面这个网站就是一个典型的需要被屏蔽的垃圾文章收集网站，文章排版和网站体验极差且文章都是从其他平台收集整理过来的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\google-seach-open-multiple-pages.png" alt="google-seach-open-multiple-pages.png" title>                </div>                <div class="image-caption">google-seach-open-multiple-pages.png</div>            </figure><p>你可以使用 <strong>uBlacklist</strong> 这个 Chrome 插件屏蔽特定的网站。</p><p><strong>4、搜索参数上加上 site:网站或域名 搜索指定网站或者域名下的内容</strong></p><p>搜索参数有很多，个人比较常用的是 site:网站或域名 ，更多搜索参数你可以在这篇文章中找到：<a href="https://ahrefs.com/blog/google-advanced-search-operators/" target="_blank" rel="noopener">Google Search Operators: The Complete List (42 Advanced Operators)</a>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\google-seach-site-website-domin.png" alt="google-seach-site-website-domin.png" title>                </div>                <div class="image-caption">google-seach-site-website-domin.png</div>            </figure><p><strong>5、过滤搜索结果</strong></p><p>你可以通过 Google 高级搜索过滤搜索结果，缩小搜索结果的范围，地址：<a href="https://www.google.com/advanced_search" target="_blank" rel="noopener">https://www.google.com/advanced_search</a> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\google-seach-site-website-domin(1).png" alt="google-seach-site-website-domin.png" title>                </div>                <div class="image-caption">google-seach-site-website-domin.png</div>            </figure><p>我们上面讲到的 site:网站或域名 功能也可以在这个高级搜索页面上完成。</p><h3 id="修改代码要慎重"><a href="#修改代码要慎重" class="headerlink" title="修改代码要慎重"></a>修改代码要慎重</h3><p><strong>修改代码之前，一定要思考清楚，不要自以为很简单，结果改了之后出现了大问题。这个在我们写代码的时候也一样，一定要思考清楚之后再写。</strong></p><p>就拿我自己举例子，我们一般项目上都是开发做完相关功能之后，测试随后会对你做的功能进行一系列测试。很多时候，QA 测出一些问题之后，我都自以为很简单，并没有太多思考，然后修改之后发现又出现了其他问题。</p><p><strong>代码很多时候就是这样的，这个地方的 Bug 补上了，说不定另外一个地方的 Bug 又出现了。所以说，修改代码和写代码的时候一定要慎重，一定要思考清楚一点。</strong></p><h3 id="谨慎使用网上搜索的代码片段"><a href="#谨慎使用网上搜索的代码片段" class="headerlink" title="谨慎使用网上搜索的代码片段"></a>谨慎使用网上搜索的代码片段</h3><p>作为一个 CRUD 程序员，我们经常需要在网上搜索各种代码片段用在项目上。</p><p>不过，如果使用不当，这些代码片段就会在潜移默化中引起项目腐化以及代码变质。因此，在使用别人的代码片段的时候，一定先要搞懂了这段代码之后再使用，一定不要直接复制粘贴！</p><p>并且，一定不要无脑信 StackOverflow ，上面很多问题的回答以及代码片段也不是 100% 准确的，依然还有很多存在问题或者可以优化的回答以及代码片段。在国内的话，大部分程序员都是通过在 CSDN 上找答案，那你就更需要多留点心思上，上面的低质量文章太多了，能不用就不用。</p><h3 id="Code-Review-很重要"><a href="#Code-Review-很重要" class="headerlink" title="Code Review 很重要"></a>Code Review 很重要</h3><p>代码复查或者说 Code Review 很重要！这是一项成本不大，但是做好了之后收益非常非常大的活动。</p><p>一般情况下，大部分项目定期都是要做 Code Review（一天一次最好）的 ，尽量细致到每一行代码或者每一行重要的代码。对于代码中存在的问题，不论是命名问题、潜在的 Bug 还是某部分代码有更好的写法都要当场指出。</p><p>我听到过很多人说平时工作太忙，根本没有时间 Code Review，我觉得这只是一个逃避 Code Review 的接口。孤尽大佬在他分享<a href="https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&mid=2247489170&idx=1&sn=e47dcf2227517172ff97105e8a0543d0&scene=21#wechat_redirect" target="_blank" rel="noopener">《Code Review 是一场苦涩但有意思的修行》</a> 这篇文章中也说到：</p><blockquote><p> 业务跑得快，代码写得快，可能写的是一堆没有营养甚至是有毒的代码。我们需要追求的是 Code Review 的效能，而不是逃避 Code Review 。Code Review 是一种修行，对于双方都是一样的收获。</p></blockquote><h3 id="尽量减少-TODO"><a href="#尽量减少-TODO" class="headerlink" title="尽量减少 TODO"></a>尽量减少 TODO</h3><p>TODO 描述的是那些我们应该做，但是出于某些原因暂时还没有做的事情。</p><p>随着项目的发展，你们项目的 TODO 是不是越来越多了呢？你自己写的 TODO 最后是不是到了项目结束或者上线还没有做呢？</p><p>实际上这是一个不那么好的习惯，现实工作中尽量做到记得定期查看 TODO 注释，能完成的尽量完成！不能完成的呢？emmm….留着以后接手代码的人来做吧（开个玩笑~能做还是要尽量做）！</p><h3 id="不要放任破窗"><a href="#不要放任破窗" class="headerlink" title="不要放任破窗"></a>不要放任破窗</h3><p>这是《程序员修炼之道》这本书中的一个建议，这里分享一下原文的描述：</p><blockquote><p>熵在软件中定义和解释：虽然软件开发不受绝大多数物理法则的约束，但我们无法躲避来自熵的增加的重击。熵是一个物理学术语，它定义了一个系统的“无序”总量。不幸的是，热力学法则决定了宇宙中的熵会趋向最大化。当软件中的无序化增加时，程序员会说“软件在腐烂”。有些人可能会用更乐观的术语来称呼它，即“技术债”，潜台词是说他们总有一天会偿还的——恐怕不会还了。</p><p>不要搁置“破窗”（糟糕的设计、错误的决定、低劣的代码）不去修理。每发现一个就赶紧修一个。 如果没有足够的时间完全修好，那么就把它钉起来。也许你可以注释掉那些糟糕的代码，显示一行“尚未实现”的信息，或用假数据先替代一下。采取行动，预防进一步的损害发生，表明一切尽在你的掌握中。</p></blockquote><h3 id="不要孤立地写代码"><a href="#不要孤立地写代码" class="headerlink" title="不要孤立地写代码"></a>不要孤立地写代码</h3><p>一定不要孤立地写代码，多看看别人的代码。 这样我觉得有下面几方面的好处：</p><ol><li>避免了团队的单点因素，比如某一部分的代码只有某个人懂；</li><li>提高了代码质量；</li><li>从别人的代码中或许也能学到一些东西；</li><li>……</li></ol><p>另外，国外很多公司都是结对编程，这玩意好像在国内行不通啊！</p><blockquote><p> <strong>结对编程</strong>（英语：Pair programming）是一种敏捷软件开发的方法，两个程序员在一个计算机上共同工作。一个人输入代码，而另一个人审查他输入的每一行代码。输入代码的人称作<strong>驾驶员</strong>，审查代码的人称作<strong>观察员</strong>（或导航员）。两个程序员经常互换角色。</p></blockquote><h3 id="试着从更高的层面去了解大部分代码的功能"><a href="#试着从更高的层面去了解大部分代码的功能" class="headerlink" title="试着从更高的层面去了解大部分代码的功能"></a>试着从更高的层面去了解大部分代码的功能</h3><p><strong>大型系统几乎没有一个人能够明白所有代码或者功能。除了你正在开发的功能之外，试着从更高的层面去了解大部分代码的功能，这样你就可以理解各个功能块之间是如何交互的了</strong>。 这个建议在我经历的上一个项目（学生答题类）中感受颇深。整个项目虽然不是很庞大，但是业务功能点还是比较多，初期的时候，我没有搞懂学生教材选择那块的逻辑 ，导致后面我做学生答题统计模块的时候又花了很久询问相关的同事才搞清楚。</p><h3 id="你永远无法写出完美的软件"><a href="#你永远无法写出完美的软件" class="headerlink" title="你永远无法写出完美的软件"></a>你永远无法写出完美的软件</h3><p>这是《程序员修炼之道》这本书中的一个建议，这里分享一下原文的描述：</p><blockquote><p> 软件不可能是完美的。对于在所难免的错误，要保护代码和用户免受其影响。</p><p><strong>没有完美的软件！！！</strong></p></blockquote><h3 id="工作经验-能力"><a href="#工作经验-能力" class="headerlink" title="工作经验 != 能力"></a>工作经验 != 能力</h3><p>对于咱程序员来说，有一个很现实但又不得不面对的问题：“<strong>你的工作经验是否匹配你自己当前的能力</strong>？”。</p><p>我们刚从学校毕业的时候，最大的优势就是“年轻”。说好听点，年轻意味着你未来可发展空间要稍微更大一点。然而！现实中，互联网公司更偏爱年轻人，往往是因为年轻人更有精力加班、成本也更低。</p><p>对于工作时间比较长时间的朋友来说，“年轻”这个优势就不复存在了。我们需要依靠我们的工作经验来为自己打开一片天地。然而！咱这一行又存在很多劳动密集型的那些工作，工作经验并不代表你的真实能力/水平。</p><p>如果你工作了5年，甚至是10年，都是在做一些简单的业务系统，每天的工作都是 CRUD 的话。我觉得你实际的工作经验，可能只有 1年左右。那你出去找工作的话，别人肯定不愿意招聘你了。</p><h3 id="提高自己的核心竞争力"><a href="#提高自己的核心竞争力" class="headerlink" title="提高自己的核心竞争力"></a>提高自己的核心竞争力</h3><p>那很多小伙伴都要说了：“我们公司业务比较简单，基本都是 CRUD 的任务，没办法提高自己的能力啊!”。其实，解决这类问题的办法也很简单，关键要看我们是否愿意跳出自己的舒适区。我们作为一个正常人，往往都是会更倾向于过比较安逸的生活嘛！人之常情，无可厚非！</p><p><strong>如果工作无法给你足够的锻炼，那你就要自己多留点心，工作之外多提高一下自己的核心竞争力</strong>。 比如你可以课外多去研究一些优秀的开源项目（比如 Kafka、sharding-jdbc）、多看看自己平时经常使用的框架（比如SpringBoot、MyBatis）的源码。</p><p>我还推荐你没事就要多造轮子，多写点框架层面的东西，而不是天天用别人的框架。</p><p><strong>我们实际项目开发中是比较忌讳造轮子的，但是，自己在学习过程中造轮子绝对是对自己百利而无一害的！造轮子是一种特别能够提高自己系统编程能力的手段。</strong></p><p>通过自己造轮子，你更能体会到框架底层的原理，更有机会接触到一些底层的东西，这对你以后的发展绝对是百利而无一害的！</p><p>如果说你从你的工作中学习不到什么对你有价值的东西，每天的工作强度又很大，你连自己充电的时间都没有的话。那我建议你可以直接跳槽，跳槽到一家对你的发展更有帮助的公司。</p><p><strong>人生路漫漫，不要过于在意短期的利益，眼光要放的更长远一些。</strong></p><p>另外，在我们平时日常工作中，有一个非常重要的能力，经常会被我们忽略。这个能力就是系统设计能力 。</p><h3 id="不要把自己局限在技术上"><a href="#不要把自己局限在技术上" class="headerlink" title="不要把自己局限在技术上"></a>不要把自己局限在技术上</h3><p>技术作为我们程序员的核心竞争力，毋庸置疑，非常重要！但是，不要把自己的“束缚”在“技术”上，被“技术”绑架。</p><p><strong>技术本身往往不会产生价值，必须依托于产品才能体现</strong>。 比如你是一个提供技术服务的公司，你创造的技术产品有人买单或者有人使用。再比如你是一个普通的互联网公司，你们通过技术创造了某个热门 App 为公司创造了营收。</p><p>但是，我们大多数人喜欢在技术上自嗨，这当然也包括我自己。</p><p>拿我自己来说，我觉得在技术之外，我还需要提高自己的产品设计能力、演讲能力、理财能力……。</p><p>产品设计能力，一是为以后自己可能独立做产品做下铺垫，二是这个在日常工作中也会用到。</p><p>演讲能力和理财能力就不用多说了吧！当代社会必备的能力。</p><p><strong>往美好的方向讲，技术是为了让人们的生活更好。现实来说，技术就是为了帮助公司创造更多利润。</strong></p><p>另外，技术更新换代太快，但是，底层技术比如数据结构和算法、计算机组成原理、操作系统的内容其实一直没怎么么改变的。就那些东西。</p><p>当自己年龄上来之后或者成家之后，自己投入在技术上的时间一定是会减少的。为了避免自己未来产生“<strong>技术焦虑</strong>” ，还是要把这些底层东西给吃透啊！</p><h2 id="如何更有效地提高编程能力？"><a href="#如何更有效地提高编程能力？" class="headerlink" title="如何更有效地提高编程能力？"></a><strong>如何更有效地提高编程能力？</strong></h2><p>对于下面的每一点建议的理解，每个人可能都不一样。</p><p>如果你觉得某一点对你有用的话，不要关了这篇文章之后你就忘记了，建议你一定要记录下来。从当下开始就去努力践行，知行合一。</p><p><strong>本文概览 ：</strong></p><ul><li>练好基本功，勿过于追赶技术时髦</li><li>选择值得投入的技术</li><li>深入学习，学会总结沉淀</li><li>避免货物崇拜编程</li><li>批判性地分析你读到和听到的东西</li><li>提高系统设计能力</li><li>不要让技术栈限制住了手脚</li><li>造轮子</li></ul><h3 id="练好基本功，勿过于追赶技术时髦"><a href="#练好基本功，勿过于追赶技术时髦" class="headerlink" title="练好基本功，勿过于追赶技术时髦"></a>练好基本功，勿过于追赶技术时髦</h3><p><strong>一定要把基本功的修炼放在首位</strong>。高楼大厦起于坚实的地基，顶尖的程序员同样起于过硬的基本功。</p><p><strong>哪些算是程序员的基本功呢？</strong></p><ul><li><strong>技术方面：</strong> 计算机技术基础知识、优秀的编码实践、系统设计、设计模式、各种技术的原理，定位问题的能力等等。</li><li><strong>非技术方面 ：</strong> 对业务的理解能力、抗压能力、表达能力等等。</li></ul><p>一定不要把自己的精力都花在各种工具库、框架和中间件的使用以及配置上！从投资角度来说，这些东西的投资价值并不高，有很大概率过几年就过时或者被淘汰了。举点例子：Struts2 被 Spring 干掉、Spring 又被 Spring Boot 替代、ActiveMQ 被 Kafka，RabbitMQ等优秀的消息队列干掉，太多太多这样的例子了。就算是 Spring Boot 目前依然存在着被其他框架替代的可能性，没有什么永恒不变，尤其对于工具库、框架和中间件来说。</p><p>不过，这些工具库和中间件的底层原理还是值得学习的。</p><p>基础以及原理性的知识一般不会被淘汰，只会被更先进的技术给颠覆。</p><p><strong>如何修炼自己的基本功呢？</strong></p><ul><li>不断学习，提升自己的认知。</li><li>不要单纯为了完成需求而完成需求，还要考虑代码质量比如可读性、bug 数量、能否对扩展友好等等</li><li>经常总结复盘。</li><li>理论+实践并行。</li></ul><h3 id="选择值得投入的技术"><a href="#选择值得投入的技术" class="headerlink" title="选择值得投入的技术"></a>选择值得投入的技术</h3><p>在我大学刚学 Java 后台开发的时候，我学习过什么呢？实话实说是 JSP、Struts2….这些现在看起来老掉牙的技术，这些技术放在现在确实没有学习的理由了。</p><p>我自己当时学这些实际也是踩了坑，被一个学长忽悠了，他对我说很多公司做项目还是用这些技术。奈何他当时比我厉害，所以，我选择相信了他。</p><p><strong>我们每个人的时间都是有限的，这个在工作之后的感触尤其明显，所以，我们一定要尽量在有限的时间去学习那些值得我们长期投入学习的技术。</strong></p><p>一项技术是否值得长期投入学习，简单来说，我觉得主要可以下面 3 点：</p><ol><li>这个技术的学习成本。</li><li>这个技术的发展势头如何（Google trends 能很好的反映一项技术的发展势头）。</li><li>看看一些业界比较权威的技术大佬对这个技术的看法。</li></ol><h3 id="深入学习，学会总结沉淀"><a href="#深入学习，学会总结沉淀" class="headerlink" title="深入学习，学会总结沉淀"></a>深入学习，学会总结沉淀</h3><p>做咱们这一行，很多人最喜欢抱怨的就是：“我每天都是在做重复的 CRUD 工作啊！没啥意思。”、“这个公司的项目不行，没用到某某高大上的技术”……</p><p>然而，很多这样抱怨的人连特么 CRUD 都写不好，写个基本的业务功能一测贼多 Bug。</p><p>我在刚工作那会也是这样的。不过，现在再听到别人这样抱怨的时候，我一般都会首先觉得这个人有点浮躁，不知道如何学习提升自己。</p><p><strong>单纯把业务代码写好真的没那么容易，抱怨自己天天做 CRUD 工作之前，一定要先看看自己 CRUD 的代码写好没。</strong></p><p>另外，<strong>就单纯一个 CRUD 的工作，只要你善于学习，还是能从项目中挖掘到很多值得你学习的点</strong>。 举个例子，你项目用的是 JPA ，你把 JPA 玩的很溜了之后，是不是可以考虑去研究一下 JPA 的底层原理呢！还比如说，项目某个模块的响应速度太慢，自己是不是可以考虑通过某些手段比如 SQL 优化、DB 参数调优、JVM 参数调优、索引、读写分离、缓存等手段来优化一下呢！</p><p>真的！就单纯一个最基本的 CRUD 的项目要考虑到的点就已经够多了。一定不要眼高手低，整天就想着微服务、高并发，总觉得“低级”的开发工作配不上自己的身份了。</p><p><strong>再来聊一下回顾总结。</strong></p><p>很多时候，我们做一个项目，做完了之后就感觉自己就和这个项目没有关系了。项目上学到的一些东西或者可以改进的地方，完全不想花时间总结。</p><p><strong>以至于，很多年之后，你学到的东西还是比较零散的，不成体系</strong>。 别人询问你“有没有从上个项目学到点什么？”的时候，自己却没法回答。</p><p><strong>不会进行思考总结，你做再多的项目，了解再多的技术又如何？可能就只是表面上好看而已，有些东西永远都成为不了自己的。</strong></p><p><strong>对应到我们平时学习技术的时候也是一样，记得一定要多总结思考！</strong></p><h3 id="不要让技术栈限制住了手脚"><a href="#不要让技术栈限制住了手脚" class="headerlink" title="不要让技术栈限制住了手脚"></a>不要让技术栈限制住了手脚</h3><p>一定不要有那种学了一种编程语言或者框架就想着用这一种编程语言或者框架做任何事情的想法。</p><p><strong>一定不要让技术栈限制住了自己！！！</strong></p><p>很多时候你用这种编程语言很难做到的事情，使用其他编程语言可能很简单就解决了，就比如说我们项目平时如果有爬虫场景，基本都是用 Python 写的，又快有简单。</p><h3 id="避免货物崇拜编程"><a href="#避免货物崇拜编程" class="headerlink" title="避免货物崇拜编程"></a>避免货物崇拜编程</h3><p>何为货物编程？</p><p>维基百科是这样解释的：</p><blockquote><p>货物崇拜编程（Cargo Cult Programming）是一种计算机程序设计中的反模式，其特征为不明就里地、仪式性地使用代码或程序架构。货物崇拜编程通常是程序员既没理解他要解决的 bug、也没理解表面上的解决方案的典型表现。</p></blockquote><p>简单来说，货物编程就是我们不明就理地使用各种框架/优秀实践（比如设计模式）/软件架构，最后把项目搞得像个四不像。</p><p>列举一些我身边发生过的实际的例子吧！</p><ul><li>看到一些比较火的框架就直接套用在自己的项目上，而不知道这个框架究竟能解决项目上的什么问题？是否适合项目？有没有什么风险？</li><li>学习了某个设计模式/工程实践之后，不顾项目实际情况，刻意使用在项目上！</li><li>直接复制从网上（比如 Stack Overflow ）找到的代码，只要运行 OK 就好。</li><li>看到一些比较火的概念就魔怔了，比如前两年开始爆火的中台概念。</li></ul><h3 id="批判性地分析你读到和听到的东西"><a href="#批判性地分析你读到和听到的东西" class="headerlink" title="批判性地分析你读到和听到的东西"></a>批判性地分析你读到和听到的东西</h3><p>这是《程序员修炼之道》这本书中的一个建议，这里分享一下原文的描述：</p><blockquote><p><strong>批判性思维本身就是一门完整的学科，非常值得仔细研究和学习！</strong></p><p>我最喜欢的咨询技巧是：至少问五次“为什么”。就是说，每当有了答案后，还要追问“为什么”。像个烦人的四岁小孩那样经常性重复提问，不过记得要比小朋友更有礼貌。这样做可以让你更接近本源。</p></blockquote><h3 id="提高系统设计能力"><a href="#提高系统设计能力" class="headerlink" title="提高系统设计能力"></a><strong>提高系统设计能力</strong></h3><h4 id="哪些考察系统设计能力的问题"><a href="#哪些考察系统设计能力的问题" class="headerlink" title="哪些考察系统设计能力的问题"></a>哪些考察系统设计能力的问题</h4><p>不论是面试应届生还是高级开发，系统设计能力是大部分面试官会重点关注的对象。比如面试官可能会问题你：</p><ul><li>如何设计一个 RPC 框架？消息队列？</li><li>如何设计一个秒杀系统？</li><li>如何设计一个排行榜？</li><li>如何设计一个视频网站？有哪些需要注意的地方？(比如如何解决大文件上传问题、如何保证视频的安全性)</li><li>如何设计微博 Feed 流？</li><li>……</li></ul><p>这些问题都是非常能够考验你的工程能力的，相比于理论性的题目，这种问题的细节点较多，要更难准备一些。</p><h4 id="如何提高系统设计能力"><a href="#如何提高系统设计能力" class="headerlink" title="如何提高系统设计能力"></a>如何提高系统设计能力</h4><p>想要提供系统设计能力，需要我们的刻意训练。那到底该怎么训练呢？</p><p>简单说说我自己的看法，欢迎大家补充：</p><ol><li>多对你做过的系统进行复盘总结，思考一下这个系统有哪些需要改进/完善的地方。</li><li>多进行系统设计实战，比如你可以多问问自己：“如果让你去设计 xx 系统，你该怎么做？”。你最好把这个系统设计的过程记录下来，以便后续再完善改进。</li></ol><p>系统设计不一定非要我们实际写代码去实现，系统设计好了之后，写代码并不是什么难事。我这样说并不是代码实践不重要，只是每个人的精力都有限，你应该把你的精力用在最值得你投入时间的地方。</p><h3 id="造轮子"><a href="#造轮子" class="headerlink" title="造轮子"></a><strong>造轮子</strong></h3><h4 id="何为造轮子"><a href="#何为造轮子" class="headerlink" title="何为造轮子"></a><strong>何为造轮子</strong></h4><p>在编程领域，你可以把造轮子中的“轮子”简单地理解为各种框架、标准库或者软件。</p><p>造轮子说的就是我们对现有的各种框架、标准库或者软件进行改进或者重新创造一个类似的。就比如说已经有了现成的任务调度框架，你自己又创造了一个更满足自己需求的任务调度框架。</p><p>不知道何时起，“重复造轮子”被大家看作是一个很傻叉的行为。我却不是这么认为的！在我看来，不论是对于个人还是公司，亦或是技术本身来说，造轮子都有其重要的意义存在。</p><p>虽然，造轮子很有意义。但是，有一点不可否认的是：<strong>我们在实际项目开发中，会从成本、稳定性、成熟度等方面优先考虑使用比较可靠的开源项目</strong>。</p><p>另外，我们不是每个人能够写出一个被广泛使用的框架或者标准库。这个需要坚持，也需要我们长期积累的经验。我认识到的很多优秀开源库的作者，他们大部分都是工作中遇到一个问题，现有的开源库没办法很好地解决，最后自己经过很长时间才写出来的。比如安全框架 <a href="https://github.com/dromara/sureness" target="_blank" rel="noopener">sureness</a> 的作者，自己在使用 shiro 的时候，不太满意，就花了 2 年多写了这个框架。再比如 <a href="https://github.com/dromara/sa-token" target="_blank" rel="noopener">sa-token</a> 这个项目的作者公司的项目需要用到踢人下线、账号封禁等功能，现有的权限认证框架没有现成的功能，于是他就自己写了这个框架。</p><p><strong>那造轮子会为我们带来什么呢？</strong></p><h4 id="为什么要造轮子"><a href="#为什么要造轮子" class="headerlink" title="为什么要造轮子"></a><strong>为什么要造轮子</strong></h4><h5 id="从个人角度来说"><a href="#从个人角度来说" class="headerlink" title="从个人角度来说"></a>从个人角度来说</h5><p><strong>第一，造轮子能够非常有效地提高自己的系统编程能力。</strong></p><p>我之前在搞懂了 RPC 的原理之后，就自己动手写了<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247487683&idx=1&sn=3318ad136c98aa8d9a96eedd3a855e82&chksm=cea25f08f9d5d61ed0f422844a991b61583b1551b36d85875b6e999afcc11b645804385f69e3&scene=21#wechat_redirect" target="_blank" rel="noopener">一个简单的 RPC 框架</a>。我的 RPC 框架肯定是无法和 Dubbo 这类已经这么成熟的相提并论。但是，在自己去写 RPC 框架的时候，更加加深了自己对于 RPC 框架的认识。实现的过程中，遇到了很多问题，解决问题的过程中也提高了自己的编程能力。</p><p><strong>第二，造轮子可以提高自己的影响力。</strong></p><p>那我自己来说，我写的建议一个建议的 RPC 框架 <a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">guide-rpc-framework</a> 虽然功能很简陋，但是，凭借这详细的 README 介绍以及清晰的代码结构还是被很多热爱技术的小伙伴喜欢。</p><p>一年不到，这个项目的 star 数量就达到了 1.5k， 有 700 位小伙伴 fork 了这个项目。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ebabb2d3-5bf2-4e65-b3aa-459ca6327d27.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>第三，造轮子可以倒逼自己学习。</strong></p><p>造轮子的过程中，我们往往需要做大量的功课，学习很多自己之前没有接触过的东西。</p><p>就比如我在写 <a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">guide-rpc-framework</a> 之前，自己对于 Netty 的使用仅仅停留在发送和接收消息。在写 <a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">guide-rpc-framework</a> 的过程中，我就学习了很多关于 Netty 更高级的使用比如粘包/半包处理、 心跳机制。</p><h5 id="从项目-公司角度来说"><a href="#从项目-公司角度来说" class="headerlink" title="从项目/公司角度来说"></a>从项目/公司角度来说</h5><p><strong>第一，造轮子可以更好地适应项目需求</strong></p><p>当项目业务比较复杂和庞大之后，很可能存在现有的轮子不满足我们的需求的情况。这个时候，我们就需要自己造一个更适合自己的轮子了。</p><p><strong>第二，一个好的轮子的诞生可以提高公司的技术影响力</strong></p><p>像现在国内的很多公司都在搞开源，甚至有的公司的部门还有开源项目的 KPI。</p><p>不可否认的是，我们程序员在找工作的时候很看重这个公司有没有比较好的开源项目的。</p><p>拿 Java 来说，为什么大家觉得阿里的技术很厉害。主要原因其实并不是因为阿里的业务场景的技术挑战有多大，而是阿里开源了很多还不错的框架比如 Dubbo、Spring Cloud Alibaba。</p><p><strong>第三，造轮子可以让公司的技术得到沉淀。</strong></p><p>公司可以把自己解决某一领域的问题通过造轮子的方式沉淀下来，这样的话，以后再遇到类似的问题就可以直接使用现成的轮子解决了。就比如很多公司内部都有一套适合自己公司的框架，使用这套框架可以帮助开发者节省很多开发时间。</p><h2 id="程序员如何快速上手一个新项目？"><a href="#程序员如何快速上手一个新项目？" class="headerlink" title="程序员如何快速上手一个新项目？"></a><strong>程序员如何快速上手一个新项目？</strong></h2><p>今天的文章标题就是我平时被问过的一个高频问题。</p><p>确实，很多小伙伴在学习或者接手一个项目的时候，不知道如何快速了解项目。</p><p>今天这篇文章我就简单聊聊“如何快速上手一个新项目？面试被问项目经历有哪些小技巧？”。</p><p>下面是正文！</p><h3 id="项目学习五步走"><a href="#项目学习五步走" class="headerlink" title="项目学习五步走"></a>项目学习五步走</h3><p><strong>一般项目都会有遗留文档，不论是传统的项目开发模式还是敏捷开发模式。上项目之前自己抽时间看一下相关文档，大概了解一下这个项目整体的情况比如基本的业务还有技术选型啊这些。</strong></p><p>如果项目是单机的话，大部分就是增删改查的逻辑，主要是对于业务的理解。</p><p>如果项目是分布式或者微服务的话，会涉及各个服务之间的调用以及一些其他问题比如限流、分布式锁、分布式 ID 这些，稍微会复杂一些。</p><p>不过不论是什么类型的项目，上手的姿势大概是下面几步。</p><h4 id="第一步-了解业务"><a href="#第一步-了解业务" class="headerlink" title="第一步:了解业务"></a>第一步:了解业务</h4><p>先搞清你接受的新项目:</p><ol><li><strong>是做什么的？</strong> 主要面向什么人群使用？</li><li><strong>主要提供了哪些功能？</strong></li><li>项目背景是什么样的？</li><li>项目涉及的关键业务流程是怎么样的？</li><li>项目目前面临的挑战是什么？未来规划是什么？</li><li>……</li></ol><p><strong>技术本身就是为了业务而服务，只有首先搞清楚了业务之后你才真正算是步入了这个项目的大门。</strong></p><h4 id="第二步-搭建项目开发环境"><a href="#第二步-搭建项目开发环境" class="headerlink" title="第二步:搭建项目开发环境"></a>第二步:搭建项目开发环境</h4><p>是骡子是马总要拉出来溜溜。所以，第二步我推荐你简单把开发环境搭建一下。搭建的步骤一般都在项目的 README 文档里面。</p><p>搭建完成之后，需要确保项目能够在自己的电脑上正确运行。</p><h4 id="第三步-看项目技术架构"><a href="#第三步-看项目技术架构" class="headerlink" title="第三步:看项目技术架构"></a>第三步:看项目技术架构</h4><p>这个直接看项目的相关依赖就好。拿 Java 后端项目举例子，如果是 Maven 项目的话看 pom.xml，如果是 Gradle 项目就看 build.gradle。</p><p>可能会涉及下面这几部分，但是并不完全。</p><ol><li>项目最底层框架是什么？是 Spring 还是 Spring Boot，又或者是其他框架呢？</li><li>项目依赖了哪些相关的包？挑重点看，比如数据库是 MyBatis 还是 JPA 或者是公司自研的框架呢？</li><li>项目使用的什么数据库？是 MySQL 还是 PostgreSQL，又或者是其他数据库呢？</li><li>项目用到了缓存吗？是 Redis 缓存吗?有没有用到本地缓存呢？</li><li>项目用到了消息队列吗？ Kafka 还是 RocketMQ?</li><li>项目的权限管理这块是怎么做的呢？</li><li>…….</li></ol><h4 id="第四步-看项目的代码结构"><a href="#第四步-看项目的代码结构" class="headerlink" title="第四步:看项目的代码结构"></a>第四步:看项目的代码结构</h4><p>项目的代码结构是怎么划分的，比如常见的项目可能会分为下面三层（复杂的系统分层可能会更多）。</p><ol><li>Repository（数据库操作）</li><li>Service（业务操作）</li><li>Controller（数据交互）</li></ol><p>如果是 DDD 分层架构的话，可能是下面这样的：</p><ol><li>User Interface（用户界面层）</li><li>Application（应用层）</li><li>Domain（模型层）</li><li>Infrastructure（基础实施层）</li></ol><p>不同的公司对于项目的结构的划分可能也不同，不过大体都是类似的。比如《阿里巴巴 Java 开发手册》中所推荐的项目代码结构是下面这样的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f8c6e1ca-f487-4aa8-aebc-a0d0cd9bbfd1.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="第五步-从功能主线-问题出发研究项目源码"><a href="#第五步-从功能主线-问题出发研究项目源码" class="headerlink" title="第五步:从功能主线/问题出发研究项目源码"></a>第五步:从功能主线/问题出发研究项目源码</h4><p>一个比较成熟的项目的源码量是非常多，我们不可能都完完整整地看完，也没有必要。</p><p>你可以通过 debug 调试,研究项目核心代码逻辑。比较推荐的方式就是通过一个功能主线（比如 Dubbo 是如何暴露服务的？）或者问题（比如 ？）出发。</p><p>对于企业项目来说，大部分还是知道如何进行 debug 调试的。但是，对于 Spring 这种顶级开源框架来说，很多人就不知道怎么打断点了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\2fce6f9a-f9f5-4d7f-9abd-eb0f784ad971.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我比较推荐的是你可以先把源码拷贝到本地，然后运行源码中提供的 Demo。对于你想研究的问题比如 Spring 的 IoC 源码，你先去找找对应的 API 调用方式的 Demo，然后根据 Demo 中的方法调用来研究整个过程。如果你觉得这种方法比较难的话，你也可以先去网上看看别人的分析。</p><h3 id="项目经历的四个小技巧"><a href="#项目经历的四个小技巧" class="headerlink" title="项目经历的四个小技巧"></a>项目经历的四个小技巧</h3><p>面试中，对于项目经历的考察是重中之重。下面我就分享 4 个面试被问项目经历的小技巧：</p><p><strong>1.提前搞清楚项目的架构图、技术选型等等。</strong></p><p>比如下面这个就是我之前写的一个简易 RPC 框架（<a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">guide-rpc-framework</a>）的架构图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\402f70fb-37fb-4bbe-bcf0-72d1fae4e0bb.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>再比如下面这个是一个微服务的电商网站的架构图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\dbf6a76d-cbc7-4e22-8594-3c4d9be8ca3a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>2.提前想好项目的亮点，针对项目涉及的关键技术进行深度复习。</strong></p><p>比如说，你的项目用了消息队列的话，你就很有必要提前想好怎么回答消息队列相关的一些问题：消息队列解决了什么问题、常见消息队列对比、如何保证消息只被消费一次、如何保证消息不被重复消费……。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f2046518-9339-4f86-8043-cd47711d5a52.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>3.引导面试官问你熟悉的技术。</strong></p><p>比如说，你对消息队列比较了解的话，介绍项目的时候就可以多介绍一下自己通过消息队列解决了什么问题。</p><p><strong>4.突出个人的贡献比如自己在项目中解决了什么问题，而不只是叙述自己做了什么。</strong></p><h2 id="程序员如何有效地提高工作效率？"><a href="#程序员如何有效地提高工作效率？" class="headerlink" title="程序员如何有效地提高工作效率？"></a><strong>程序员如何有效地提高工作效率？</strong></h2><p>对于下面的每一点建议的理解，每个人可能都不一样。</p><p>如果你觉得某一点对你有用的话，不要关了这篇文章之后你就忘记了，建议你一定要记录下来。从当下开始就去努力践行。</p><p>本文概览：</p><ul><li>根据事情的重要程度安排优先级</li><li>会安排自己任务，学会制定计划</li><li>工作之外有点自己感兴趣的东西</li><li>学会使用工具提升工作效率</li><li>学会休息</li><li>如何保证精力充沛</li></ul><h3 id="根据事情的重要程度安排优先级"><a href="#根据事情的重要程度安排优先级" class="headerlink" title="根据事情的重要程度安排优先级"></a><strong>根据事情的重要程度安排优先级</strong></h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\9fc826f9-baee-4ecd-8e8b-aec6899506e5.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>说实话，在这一点上，我自己刚工作那会做的并不好，也经常因为没有处理好事情的优先级被 diss。</p><p>不知道大家会不会有时候在一个不那么重要的事情上，耽搁很久，虽然这件事情不是很重要，自己也知道要先去做最重要的事情，但就是想把当前的事情做完为止。</p><p><strong>如何安排工作上的事情的优先级？</strong></p><p>给几点建议大家参考一下，<strong>总体原则还是重要的事情优先</strong>。</p><ol><li>客户、线上、安全问题最优先</li><li>对于后续开发依赖比较大的业务优先</li><li>工作量小，流程比较长的优先比如账户认证，资源申请等等</li></ol><h3 id="学会安排自己任务，学会制定计划"><a href="#学会安排自己任务，学会制定计划" class="headerlink" title="学会安排自己任务，学会制定计划"></a>学会安排自己任务，学会制定计划</h3><p>工作之后，你会发现自己的时间少了太多太多太多。大部分时间都会感觉每天忙忙碌碌，后头看，却不知道自己究竟做了啥！</p><p>前几天自己刚想学习的某个技术、刚想看某本书，忙着忙着却又忘记了。<strong>所以，你需要学会合理安排自己的任务</strong>。</p><p>我个人比较推荐 Trello 作为个人任务管理工具。</p><p>据我所知国内外很多项目都是用 Trello 来做项目管理的。</p><p><strong>我平时使用 Trello 记录一些自己想写的文章或者代码，以及一些读者的投稿情况和个人突然冒出来的想法</strong>。</p><p>下图是我平时用 Trello 记录自己要写的文章或者代码的效果。我还会按照优先级来排列每一个任务和想法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\72eadf31-b060-4ea3-9c85-49c9e4d98948.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>然后，<strong>平时的一些小任务我是通过 Microsoft To Do来记的</strong>（Windows、Mac、Android）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\190eedcc-08bf-4479-94ff-2d90432a612a.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>我之前使用的是滴答清单，但是，后来发现 Microsoft To Do 用着更舒服点，界面也更加符合我的审美。</p><p>最后，<strong>再来安利一下番茄工作法</strong>！  番茄工作法是我一直在用，并且也经常安排给身边朋友的一个时间管理方法，简单易操作，并且效果极好。</p><blockquote><p>注意：番茄工作法不一定适合每个人，并且，有的公司根本没条件让你用番茄工作法。</p></blockquote><p>维基百科是这样介绍番茄工作法的：</p><blockquote><p>番茄工作法原理：每次专注一段时间（一般是 25 分钟）结束搭配一次休息（一般是 5 分钟），多次专注（一般为 4 次）结束搭配一次长休息（一般为 15 分钟）。劳逸结合，有助于提高工作效率。</p></blockquote><p>我每天会根据事情的重要程度以及难易程度给我当天要做的所有事情排一个优先级，然后按照番茄工作法一个一个地去完成。每一次专注的 25 分钟时间内，我都会保证自己只做这一件事情。空余的 5 分钟休息时间，我一般会简单看看邮件、做做眼保健操或者起来站一会放松一下。</p><p>我的番茄任务管理工具是在 Apple Store 上 花钱购买的 Be Foucused 的 Pro 版。</p><p>不是 Mac 电脑的也没关系，再给小伙伴们再推荐一个多平台（ios、andriod、mac、win）都可以使用的任务管理工具：<strong>番茄土豆</strong> 。</p><h3 id="工作之外有点自己感兴趣的东西"><a href="#工作之外有点自己感兴趣的东西" class="headerlink" title="工作之外有点自己感兴趣的东西"></a>工作之外有点自己感兴趣的东西</h3><p>工作之外要有自己的生活，这样的日子才不会太单调，比如我工作之外喜欢打打游戏放松一下，周末的时候喜欢自己烹饪做好吃的东西给自己。有人可能觉得这个比较浪费时间，不过，在我而言这也是对自己的一种放松，或许在某种程度还能帮助我们提升效率。</p><h3 id="学会使用工具提升工作效率"><a href="#学会使用工具提升工作效率" class="headerlink" title="学会使用工具提升工作效率"></a>学会使用工具提升工作效率</h3><p>就比如我上面推荐的几款效率工具，就我个人而言真的是方便了我太多，在工具效率上给我带来了很大的帮助。</p><p>再拿我们平时编程来说，选好编程工具也真的太重要了，比如在我看来 Java 最好的 IDE 当属 IDEA 了，随随便便提升 30%以上的开发效率不是吹的。</p><p>另外，我平时也会经常给大家推荐一些不错的工具比如：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486210&idx=1&sn=609298f537b2aa08b82c9d04ba863de5&chksm=cea244c9f9d5cddf786b508edf8b0bc8e08e5cc1f3d9e96b4eb6e9a9ee0f50a36a2cff6a9ce9&token=1045306289&lang=zh_CN&scene=21#wechat_redirect" target="_blank" rel="noopener">浏览 Github 必备的 5 款神器级别的 Chrome 插件</a>，<a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&album_id=1319419426898329600&__biz=Mzg2OTA0Njk0OA==#wechat_redirect" target="_blank" rel="noopener">IDEA 插件</a> ，这些工具/插件它不香么？</p><h3 id="学会休息"><a href="#学会休息" class="headerlink" title="学会休息"></a>学会休息</h3><p>别打时间战，少熬夜，休息好了，工作效率才高。熬夜的危害就不用多说了，秃头加内分泌失调，你懂得！</p><p>拿我个人来说，我平时如果 12 点前睡的话，白天就是 7 点起来，如果 12 点后睡的话，一般都是 8 点左右起来。没睡好的话，一天真的效率会降低很多。</p><p>看电脑 45 分钟之后，起来走 5 分钟，看看远方放松一下。不要觉得这 5 分钟浪费时间，相反，这 5 分钟可能为你带来更大的效率提升。</p><p>电脑架子不贵，但是很有用，保护好自己脊椎的同时，办公体验也会提升很多。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\68fe4b9c-5ca1-4dc6-b000-65134c1518ea.jpg" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h3 id="如何保证精力充沛"><a href="#如何保证精力充沛" class="headerlink" title="如何保证精力充沛"></a>如何保证精力充沛</h3><p>除了上面提到的 <strong>学会休息</strong> 之外，还有哪些能够让我们的经历更充沛的好习惯呢？</p><p>正所谓 ：<strong>选择大于努力，效率大于堆时间</strong>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ffc777e5-db73-40aa-9c64-51f3966aff5f.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>只有我们从下层打好基础，才能稳步上升，最后登顶。</p><ol><li>不要吃太多碳水，容易瞌睡。</li><li>一定要吃早餐。</li><li>咀嚼，具有促进头脑清醒的作用。吃饭的时候，不要太急，多咀嚼一下。</li><li>尽量午睡，控制在半小时左右。</li><li>运动！拒绝久坐！</li><li>早上起来太困的话，洗个澡！</li><li>锻炼！</li><li>保持积极的心态，减少消极情绪。</li></ol><p>相关阅读：</p><ul><li>如何拥有旺盛精力？ - 知乎 <a href="https://www.zhihu.com/question/21671881" target="_blank" rel="noopener">https://www.zhihu.com/question/21671881</a></li><li>如何保持精力充沛，有效适应困、倦、疲、乏等周期型生理状况？ - 知乎 <a href="https://www.zhihu.com/question/21097892" target="_blank" rel="noopener">https://www.zhihu.com/question/21097892</a></li><li>低碳水食物清单 ：<a href="https://lowcarbfasthealth.com/low-carb-food-visual-guides/" target="_blank" rel="noopener">https://lowcarbfasthealth.com/low-carb-food-visual-guides/</a></li></ul><h2 id="如何更高效地自学编程？"><a href="#如何更高效地自学编程？" class="headerlink" title="如何更高效地自学编程？"></a><strong>如何更高效地自学编程？</strong></h2><p>我的学校是荆州一所双非一本。整个大一，我都没有怎么认真学习编程，每天就是出去玩，还有参加各种社团活动。</p><p>在大二上学期末，最终确定了自己以后要走的技术方向是走 Java 后端。于是，我就开始制定学习计划，开始了自己的 Java 后端领域的打怪升级之路。</p><p>到了大三，我基本把 Java 后端领域一些必备的技术都给过了一遍，还用自己学的东西做了两个实战项目。</p><p>这篇文章就从下面几个切入点来简单聊聊“如何更高效地自学？”：</p><ul><li>有哪些学习的途径</li><li>如何获取技术最新动向？</li><li>自学过程中有哪些需要注意的地方？</li></ul><h3 id="有哪些学习的途径？"><a href="#有哪些学习的途径？" class="headerlink" title="有哪些学习的途径？"></a>有哪些学习的途径？</h3><p>一般来说，有了一个具体的学习路线，知道学习什么之后，我们通常有下面几个方向来学习:</p><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>初学编程的小伙伴尽量多看视频，因为，视频教程比较容易理解。不过，对于经验已经比较丰富的小伙伴来说，视频教程相比于文档教程学习起来会更慢一些。</p><p>像慕课网和哔哩哔哩上面有挺多学习视频可以看，只直接在上面搜索关键词（比如 Java、MySQL）就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\cd3b6583-ec31-45c3-ba4e-b27c997da611.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>提个醒哈！在哔哩哔哩上学习的时候，不要学一会就跑到别的分区去了，有点顶不住啊！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\359cdbce-067f-4f9e-b2b9-6fda44cc5a86.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><strong>书籍的内容更成体系，更系统。任何时候，书籍都是我们最重要的学习途径！！！</strong></p><p>不过，目前绝大部分高质量的技术书籍还是国外出版的，等到翻译成中文的时候可能已经过了几年了。因此，提高英文阅读能力是每个想要成为优秀工程师的程序员必须要做的。</p><p>不过，书籍存在时效问题，你可以通过一些手段来获取技术的最新动向（后面会详细介绍到）。</p><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><p>网上的博客大多没有体系，推荐你在解决某一知识点或者问题的时候可以在网上找一些相关的博客看。就比如我在学习消息队列 Pulsar 的时候，先把<a href="https://pulsar.apache.org/docs/zh-CN/next/concepts-overview/" target="_blank" rel="noopener">Pulsar 官方文档</a>看了一遍。然后，自己在网上找了一些相关的文章来深入学习。</p><ul><li><a href="https://www.confluent.io/kafka-vs-pulsar/" target="_blank" rel="noopener">《Kafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared》</a></li><li><a href="https://mp.weixin.qq.com/s/msBUvoNn_o_49I59CtSNgw" target="_blank" rel="noopener">《为什么放弃 Kafka，选择 Pulsar?》</a></li><li><a href="https://www.datastax.com/blog/2019/05/7-reasons-we-chose-apache-pulsar-over-apache-kafka" target="_blank" rel="noopener">《7 Reasons We Chose Apache Pulsar over Apache Kafka》</a></li><li><a href="https://www.infoq.cn/article/1UaxFKWUhUKTY1t_5gPq" target="_blank" rel="noopener">《比拼 Kafka, 大数据分析新秀 Pulsar 到底好在哪》</a></li><li><a href="https://mp.weixin.qq.com/s/qHmK_dejIgyvtvEhmlE9ug" target="_blank" rel="noopener">《从 Kafka 到 Pulsar，BIGO 打造实时消息系统之路》</a></li><li><a href="https://mp.weixin.qq.com/s/mJViU-elhBwHMDiius2b8g" target="_blank" rel="noopener">《Apache Pulsar 在 BIGO 的性能调优实战（上）》</a>、<a href="https://mp.weixin.qq.com/s/f0vL6gdFJIjNwsfZ3BXePA" target="_blank" rel="noopener">《Apache Pulsar 在 BIGO 的性能调优实战（下）》</a></li><li><a href="https://mp.weixin.qq.com/s/sVSsezWLAeycNY8tvg2M0A" target="_blank" rel="noopener">《Apache Pulsar 在能源互联网领域的落地实践》</a></li><li>……</li></ul><p>Java 领域比较成体系的博客，推荐 <a href="https://javaguide.cn/" target="_blank" rel="noopener">JavaGuide</a> 。</p><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p>官方文档我们一定是要看的。 除非是一些国产项目的官方文档提供了中文版本，否则大概率是英文的。并且，官方文档介绍的往往也比较粗糙，不太适合初学者作为学习资料。当然了，如果你经验比较丰富的话，直接看官方文档也是没问题的。</p><p>通过官方文档你才能知道你学习的技术最新的技术动态，才能知道这个技术有哪些模块需要学习，才能知道这个技术具体可以帮你解决什么问题。</p><p>比如下面是 Spring 的官网，通过网站首页你就可以大概知道 Spring 可以帮助你：</p><ul><li>快速开发网站</li><li>开发微服务架构的软件</li><li>开发响应式架构的软件</li><li>……</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\dac59b42-0d7a-4e51-ac43-6103efb763d2.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h3 id="如何获取技术最新动向？"><a href="#如何获取技术最新动向？" class="headerlink" title="如何获取技术最新动向？"></a><strong>如何获取技术最新动向？</strong></h3><h4 id="Github-Trending"><a href="#Github-Trending" class="headerlink" title="Github Trending"></a>Github Trending</h4><p>Github Trending 我几乎每天必看，通过 Github Trending 我可以大概知道最近有哪些项目比较火，有哪些框架比较热门，有哪些新的中间件被开源了。</p><p>并且，Github 的 Trending 可以按照语言和日期来进行筛选，你可以根据自己的需要来选择查看对应的信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\ea9a01cf-0996-41ca-a036-ae105af62c09.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><h4 id="公开的技术分享"><a href="#公开的技术分享" class="headerlink" title="公开的技术分享"></a>公开的技术分享</h4><p>你可以留意一些公开的技术分享比如 <a href="https://con.infoq.cn/conference/intro" target="_blank" rel="noopener">InfoQ 技术大会</a>、<a href="https://segmentfault.com/events" target="_blank" rel="noopener">思否技术活动汇总</a> 、。</p><p>通过这些公开的技术分享，你可以了解到当下热门的创新技术、实践案例、产品思维和管理心得。</p><h4 id="技术大佬"><a href="#技术大佬" class="headerlink" title="技术大佬"></a>技术大佬</h4><p>技术无国界，国内外都有很多优秀的工程师。多关注一下他们在干什么，在研究什么技术，或许能给你很大的启发和动力。</p><p>国内比较值得关注的技术大佬有：</p><ul><li><a href="https://github.com/terrymanu" target="_blank" rel="noopener">Liang Zhang</a>：<a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener">Apache ShardingSphere</a>，<a href="https://github.com/apache/shardingsphere-elasticjob" target="_blank" rel="noopener">ElasticJob</a> 创始人 &amp; 项目管理委员会主席。</li><li><a href="https://github.com/yu199195" target="_blank" rel="noopener">xiaoyu</a> ： 作为主要作者开源了 soul(网关)、hmily(分布式事务框架)等等顶级开源项目，并且参与了<a href="https://github.com/apache/shardingsphere" target="_blank" rel="noopener">apache/shardingsphere</a>等开源项目。</li><li><a href="https://github.com/kimmking" target="_blank" rel="noopener">immking</a> ：Apache Dubbo/ShardingSphere PMC。前某集团高级技术总监/阿里架构师/某商业银行北京研发中心负责人，阿里云 MVP、腾讯 TVP、TGO 鲲鹏会会员。</li><li><a href="https://github.com/tristaZero" target="_blank" rel="noopener">Juan Pan</a> ：京东数科高级 DBA&amp;Apache ShardingSphere PMC，主要负责京东数科分布式数据库开发、数据库运维自动化平台开发等工作。</li><li><a href="https://github.com/tao12345666333" target="_blank" rel="noopener">Jintao Zhang</a> ：<a href="https://juejin.im/book/5b9b2dc86fb9a05d0f16c8ac" target="_blank" rel="noopener">《Kubernetes 从上手到实践》</a> <a href="https://gitbook.cn/gitchat/column/5d70cfdc4dc213091bfca46f" target="_blank" rel="noopener">《Docker 核心知识必知必会》</a> 作者、<a href="https://www.apiseven.com/en" target="_blank" rel="noopener">API7.AI</a>任技术专家，负责 <a href="https://github.com/apache/apisix-ingress-controller/" target="_blank" rel="noopener">Apache APISIX Ingress</a> 和 Service Mesh 等云原生技术方向。</li><li>…..</li></ul><h4 id="技术社区"><a href="#技术社区" class="headerlink" title="技术社区"></a>技术社区</h4><p>技术社区也是一个了解技术动向的好办法，国内外有很多优质的社区比如 <a href="https://www.reddit.com/r/java/" target="_blank" rel="noopener">Reddit 上的 Java 社区</a>，<a href="https://www.infoq.cn/" target="_blank" rel="noopener">InfoQ 中文社区</a> （近几年质量有所下降）、<a href="https://medium.com/tag/technology" target="_blank" rel="noopener">Medium 上的技术社区</a>。</p><h4 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h4><p>关注或者订阅一些干货比较多的技术博客，不光能够获取到技术最新动向，还可以让自己深入学习很多知识点。</p><p>如果你不知道国内有哪些值得推荐的技术博客的话，可以看看这篇文章：<a href="https://zhuanlan.zhihu.com/p/354403878" target="_blank" rel="noopener">国内有哪些顶级技术团队的博客值得推荐？ - JavaGuide - 知乎</a> 。 </p><h3 id="自学过程中有哪些需要注意的地方？"><a href="#自学过程中有哪些需要注意的地方？" class="headerlink" title="自学过程中有哪些需要注意的地方？"></a>自学过程中有哪些需要注意的地方？</h3><h4 id="英语阅读能力"><a href="#英语阅读能力" class="headerlink" title="英语阅读能力"></a>英语阅读能力</h4><p>大部分优秀的技术书籍都是国外的，几乎都是英文，并且，大部分技术的官方文档也都是英文的。</p><p>所以，提高自己的英文阅读能力很重要。英文阅读能力暂时比较差的也不要紧，有道翻译和谷歌翻译就是你最好的老师。如果是使用 Chrome 浏览器的话，我还推荐你安装一个 Mate Translate 插件。 这个插件对于网页阅读英文文档太友好了，可以一站式翻译您的网页以及标记的文字段落。</p><h4 id="多练！多记！多实践！多实战！"><a href="#多练！多记！多实践！多实战！" class="headerlink" title="多练！多记！多实践！多实战！"></a>多练！多记！多实践！多实战！</h4><p>不论是看视频还是看书，最好都要跟着一起练！</p><p>学习编程，不动手实践那都是扯淡。你是不是经常听别人讲的时候感觉自己似乎懂了，好像也并不难，结果，自己写的时候就不会了，过了没几天自己就忘了。</p><p>比如说我们学习 Spring Boot 整合其他常见框架的时候，你不光要看对应的 Spring Boot 教程，一定还要动手去实践，去写一些 Spring Boot 的小 Demo。动手实践的过程中，你会发现有很多被自己忽略的细节，遇到一些需要解决的问题。解决问题的过程中，同样也是学习的过程。</p><p>再比如说我们学习 Tomcat 原理的时候，我们发现 Tomcat 的自定义线程池挺有意思，那我们自己也可以手写一个定制版的线程池。再比如我们学习 Dubbo 原理的时候，可以自己动手造一个简易版的 RPC 框架。</p><p>学习过程中没弄懂的知识点一定要尽快解决。如何解决？首选百度/Google，通过搜索引擎解决不了的话就找身边的朋友或者网上认识的一些人。</p><p>另外，一定要进行项目实战！很多人这时候就会问没有实际项目让我做怎么办？我觉得可以通过下面这几种方式：</p><ol><li>实战项目视频/专栏 ： 在网上找一个符合自己能力与找工作需求的实战项目视频或者专栏，跟着老师一起做。跟着老师做的过程中，你一定要有自己的思考，不要浅尝辄止。对于很多知识点，别人的讲解可能只是满足项目就够了，你自己想多点知识的话，对于重要的知识点就要自己学会去深入学习。</li><li>实战类开源项目 ： Github 或者码云上面有很多实战类别项目，你可以选择一个来研究，为了让自己对这个项目更加理解，在理解原有代码的基础上，你可以对原有项目进行改进或者增加功能。Java 类的实战项目，你可以从 <a href="https://github.com/Snailclimb/awesome-java" target="_blank" rel="noopener">awesome-java</a> 这个仓库里面找，里面有很多非常赞的项目。</li><li>从头开始做 ：自己动手去做一个自己想完成的东西，遇到不会的东西就临时去学，现学现卖。这个要求比较高，我建议你已经有了一个项目经验之后，再采用这个方法。如果你没有做过项目的话，还是老老实实采用上面两个方法比较好。</li><li>……</li></ol><p>做项目不光要做，还要改进，改善。另外，如果你的老师有相关 Java 后台项目的话，你也可以主动申请参与进来。</p><p>一定要学会分配自己时间，要学的东西很多，真的很多，搞清楚哪些东西是重点，哪些东西仅仅了解就够了。一定不要把精力都花在了学各种框架上，算法和数据结构真的很重要！</p><h4 id="不要把学习编程还当做学生时代的应试考试来看"><a href="#不要把学习编程还当做学生时代的应试考试来看" class="headerlink" title="不要把学习编程还当做学生时代的应试考试来看"></a>不要把学习编程还当做学生时代的应试考试来看</h4><p>你或许也发现了。很多成绩特别特别优异的同学，他们的编程能力其实并不好。在大学的时候，那些编程能力最强的往往是那些成绩比较一般的。</p><p>为什么会这样呢？</p><p>我觉得主要是一个思维的转变问题。很多人学习编程的时候，总是想着我要把这个 API 记下来，把这个库的用法记下来。这样学习，导致的结果只有一个那就是你会很难受！因为，这些根本不是要死记硬背的东西啊！真还当这是上课考试啊！<strong>你要从如何用你学的东西来解决实际编程问题出发，站在做一个实际的项目的角度来学习。</strong></p><p>拿我自己来说：我平时也会写 Python，基本就是自己看着官方文档或者一些书籍的教的语法跟着写。如果哪个地方不会了，我就去查一下。</p><h4 id="多看优秀的代码"><a href="#多看优秀的代码" class="headerlink" title="多看优秀的代码"></a>多看优秀的代码</h4><p><strong>不看优秀的代码，你写的代码质量很难提高。</strong></p><p>虽然要多看优秀的代码，但是也不要被 “<strong>最佳实践</strong>” 所束缚，很多时候实际是根本不存在适用于任何场景的“最佳实践”，没有银弹。</p><p><strong>有哪些优秀的代码值得学习呢？</strong></p><p>拿 Java 来说，不知道阅读什么源码的话，可以先从 JDK 的几个常用集合看起。另外，我比较推荐看 Dubbo 的，因为感觉会稍微相对容易一点，模块划分清晰，注释也比较详细。搞清楚了 RPC 的基本的原理，知道如何自己实现一个 RPC 框架之后，看起来就没那么吃力了。</p><p>另外，随便一个框架的源码都 10w+行了，都看一遍是不可能的。要挑选比较重要的地方看，就比如看 Spring 源码的话你一定要看 IoC 和 AOP，要知道一个 Spring Bean 是如何一步一步被创建出来的。你要看 Spring Boot 源码的话就要知道 Spring Boot 的启动机制是啥，Spring Boot 是如何实现自动配置的。</p><h4 id="不要死记硬背"><a href="#不要死记硬背" class="headerlink" title="不要死记硬背"></a>不要死记硬背</h4><p>学习理论知识的时候，我们可以多花点时间整理笔记。</p><p>但是，在学习框架使用的时候，就没有太大必要花大量时间的整理做笔记了。</p><p>你完全可以随时查文档，记住关键词即可！比如 Spring Boot 你不知道如何接受 Query Param 的话，你直接搜 Spring Boot Query Param 即可！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\9bf090cf-4f62-421a-bd39-b0c0cd0a29a4.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>再比如你不会使用 Redis ，你做的 Spring Boot 项目需要用到的话，你直接搜“Spring Boot+ Redis”就出来了各种详细的教程。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\f7d10a06-227c-4d20-855f-d452ff50097b.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>你要做的就是把常用的东西串联起来，知道有这个东西就好。根据自己的实际能力，再对底层的东西进行学习就好。</strong></p><h2 id="程序员如何快速学习新技术？"><a href="#程序员如何快速学习新技术？" class="headerlink" title="程序员如何快速学习新技术？"></a><strong>程序员如何快速学习新技术？</strong></h2><p>很多时候，我们因为工作原因需要快速学习某项技术，进而在项目中应用。或者说，我们想要去面试的公司要求的某项技术我们之前没有接触过，为了应对面试需要，我们需要快速掌握这项技术。</p><p>作为一个人纯自学出生的程序员，这篇文章简单聊聊自己对于如何快速学习某项技术的看法。</p><p>文章内容仅代表个人观点，如果你有更好的学习方法，还请在评论区多多和我交流。希望我们都能有所收货！</p><p>学习任何一门技术的时候，一定要先搞清楚这个技术是为了解决什么问题的。深入学习这个技术的之前，一定先从全局的角度来了解这个技术，思考一下它是由哪些模块构成的，提供了哪些功能，和同类的技术想必它有什么优势。</p><p>比如说我们在学习 Spring 的时候，通过 Spring 官方文档你就可以知道 Spring 最新的技术动态，Spring 包含哪些模块 以及 Spring 可以帮你解决什么问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\dac59b42-0d7a-4e51-ac43-6103efb763d2-166615683589049.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>再比如说我在学习消息队列的时候，我会先去了解这个消息队列一般在系统中有什么作用，帮助我们解决了什么问题。消息队列的种类很多，具体学习研究某个消息队列的时候，我会将其和自己已经学习过的消息队列作比较。像我自己在学习 RocketMQ 的时候，就会先将其和自己曾经学习过的第 1 个消息队列 ActiveMQ 进行比较，思考 RocketMQ 相对于 ActiveMQ 有了哪些提升，解决了 ActiveMQ 的哪些痛点，两者有哪些相似的地方，又有哪些不同的地方。</p><p><strong>学习一个技术最有效最快的办法就是将这个技术和自己之前学到的技术建立连接，形成一个网络。</strong></p><p>然后，我建议你先去看看官方文档的教程，运行一下相关的 Demo ，做一些小项目。</p><p>不过，官方文档通常是英文的，通常只有国产项目以及少部分国外的项目提供了中文文档。并且，官方文档介绍的往往也比较粗糙，不太适合初学者作为学习资料。</p><p>如果你看不太懂官网的文档，你也可以搜索相关的关键词找一些高质量的博客或者视频来看。 <strong>一定不要一上来就想着要搞懂这个技术的原理</strong>。</p><p>就比如说我们在学习 Spring 框架的时候，我建议你在搞懂 Spring 框架所解决的问题之后，不是直接去开始研究 Spring 框架的原理或者源码，而是先实际去体验一下 Spring 框架提供的核心功能 IoC（Inverse of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)，使用  Spring 框架写一些 Demo，甚至是使用  Spring 框架做一些小项目。</p><p>一言以蔽之， <strong>在研究这个技术的原理之前，先要搞懂这个技术是怎么使用的。</strong></p><p>这样的循序渐进的学习过程，可以逐渐帮你建立学习的快感，获得即时的成就感，避免直接研究原理性的知识而被劝退。</p><p><strong>研究某个技术原理的时候，为了避免内容过于抽象，我们同样可以动手实践。</strong></p><p>比如说我们学习 Tomcat 原理的时候，我们发现 Tomcat 的自定义线程池挺有意思，那我们自己也可以手写一个定制版的线程池。再比如我们学习Dubbo 原理的时候，可以自己动手造一个简易版的 RPC 框架。</p><p>另外，学习项目中需要用到的技术和面试中需要用到的技术其实还是有一些差别的。</p><p>如果你学习某一项技术是为了在实际项目中使用的话，那你的侧重点就是学习这项技术的使用以及最佳实践，了解这项技术在使用过程中可能会遇到的问题。你的最终目标就是这项技术为项目带来了实际的效果，并且，这个效果是正面的。</p><p>如果你学习某一项技术仅仅是为了面试的话，那你的侧重点就应该放在这项技术在面试中最常见的一些问题上，也就是我们常说的八股文。</p><p>很多人一提到八股文，就是一脸不屑。在我看来，如果你不是死记硬背八股文，而是去所思考这些面试题的本质。那你在准备八股文的过程中，同样也能让你加深对这项技术的了解。</p><p>最后，最重要同时也是最难的还是 <strong>知行合一！知行合一！知行合一！</strong> 不论是编程还是其他领域，最重要不是你知道的有多少，而是要尽量做到知行合一。</p><h2 id="如何提高个人编程硬实力？"><a href="#如何提高个人编程硬实力？" class="headerlink" title="如何提高个人编程硬实力？"></a><strong>如何提高个人编程硬实力？</strong></h2><p><strong>我们平时要拿大厂的要求来鞭策自己，尽量避免一直待在自己的舒适区。</strong></p><p><strong>那大厂想要什么样的人才呢？</strong></p><p><strong>先从已经有两年左右开发经验的工程师角度来看</strong>： 我们来看一下阿里官网支付宝 Java 高级开发工程师的招聘要求，从下面的招聘信息可以看出，除去 Java 基础/集合/多线程这些，这些能力格外重要：</p><ol><li><strong>底层知识比如 jvm ：</strong>不只是懂理论更会实操；</li><li><strong>面向对象编程能力 ：</strong>我理解这个不仅包括“面向对象编程”，还有 SOLID 软件设计原则，相关阅读：<a href="https://insights.thoughtworks.cn/do-you-really-know-solid/" target="_blank" rel="noopener">《写了这么多年代码，你真的了解 SOLID 吗？》</a>（我司大佬的一篇文章）</li><li><strong>框架能力 ：</strong>不只是使用那么简单，更要搞懂原理和机制！搞懂原理和机制的基础是要学会看源码。</li><li><strong>分布式系统开发能力 ：</strong>缓存、消息队列等等都要掌握，关键是还要能使用这些技术解决实际问题而不是纸上谈兵。</li><li><strong>不错的 sense :</strong>喜欢和尝试新技术、追求编写优雅的代码等等。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images-166615694601151" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p><strong>再从应届生的角度来看：</strong> 我们还是看阿里巴巴的官网相关应届生 Java 工程师招聘岗位的相关要求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\images(1)-166615695771153" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>结合阿里、腾讯等大厂招聘官网对于 Java 后端方向/后端方向的应届实习生的要求下面几点也提升你的个人竞争力：</p><ol><li>参加过竞赛（ 含金量超高的是 ACM ）；</li><li>对数据结构与算法非常熟练；</li><li>参与过实际项目（比如学校网站）</li><li>熟悉 Python、Shell、Perl 其中一门脚本语言；</li><li>熟悉如何优化 Java 代码、有写出质量更高的代码的意识；</li><li>熟悉 SOA 分布式相关的知识尤其是理论知识；</li><li>熟悉自己所用框架的底层知识比如 Spring；</li><li>有高并发开发经验；</li><li>有大数据开发经验等等。</li></ol><p>从来到大学之后，我的好多阅历非常深的老师经常就会告诫我们：“ 一定要有一门自己的特长，不管是技术还好还是其他能力 ” 。我觉得这句话真的非常有道理！</p><p>刚刚也提到了要有一门特长，所以在这里再强调一点：公司不需要你什么都会，但是在某一方面你一定要有过于常人的优点。换言之就是我们不需要去掌握每一门技术（你也没精力去掌握这么多技术），而是需要去深入研究某一门技术，对于其他技术我们可以简单了解一下。</p><p>我觉得一个好的 Java 程序员应该具备下面这些素质：</p><ol><li>Java 基础 ：掌握 Java 基础知识（可以看《Java 核心技术卷 1》或者《Head First Java》这两本书在我看来都是入门 Java 的很不错的书籍），当然你也可以边看视频边看书学习（推荐黑马或者尚硅谷的视频）。一定要记得多总结！打好基础！把自己重要的东西都记录下来。</li><li>多线程 ：掌握多线程的简单实用（推荐《Java 并发编程之美》或者《实战 Java 高并发程序设计》）。</li><li>JVM(可选) ：如果想去大厂，JVM 的一些知识也是必学的（Java 内存区域、虚拟机垃圾算法、虚拟垃圾收集器、JVM 内存管理）推荐《深入理解 Java 虚拟机》。</li><li>算法和数据结构：如果你想进入大厂的话，我推荐你在学习完 Java 基础或者多线程之后，就开始每天抽出一点时间来学习算法和数据结构。为了提高自己的编程能力，你也可以坚持刷 Leetcode。</li><li>前端知识 ：学习前端基础(HTML、CSS、JavaScript),当然 BootStrap、VUE 等等前端框架你也可以了解一下。</li><li>Git : 版本控制工具 Git 绝对比必须的。你可以自己去 Github 上下载一些项目看，然后自己也上传一个项目到 Github 上去。</li><li>MySQL : 学习 MySQL 的基本使用，基本的增删改查，索引需要重点关注，存储过程可以简单了解一下。</li><li>Maven ： 建议学习各种框架之前可以提前花半天时间学习一下 Maven 的使用。（到处找 Jar 包，下载 Jar 包是真的麻烦费事，使用 Maven 可以为你省很多事情）</li><li>框架 ：学习 Spring、SpringMVC、Hibernate、Mybatis 等框架的使用，(可选)熟悉 Spring 原理（大厂面试必备），然后很有必要学习一下 SpringBoot。我也遇到很多公司对于应届生直接上手 SpringBoot，不过我还是推荐你有时间还是可以把 Spring、SpringMVC 好好学一下。不过 SpringBoot 优先级最高！</li><li>Linux :学习 Linux 的基本使用(常见命令、基本概念)</li><li>分布式 ：RPC、服务注册于发现、API 网关、配置中心、分布式 ID、分布式事务……。</li><li>高并发 ： 消息队列、读写分离&amp;分库分表、负载均衡、缓存……这些。</li><li>高可用 ： 主要就是限流&amp;降级&amp;熔断、集群……这些。</li><li>微服务 ：微服务的一些基本概念、SpringCloud 和 Spring Cloud Alibaba 那一套都可以学习一下。我比较推荐的是学习 Spring Cloud Alibaba，因为首先它是阿里开源的，文档比较丰富，另外，它比较新，各种组件都可以说很不错。</li><li>进阶 ：操作系统底层知识、计算机组成原理、Java 编码优秀实践、SQL 调优、定位解决线上问题的能力等等</li></ol><p><strong>知道要学什么之后，如何去学呢？</strong></p><p>我觉得学习每个知识点可以考虑这样去入手：</p><ol><li>官网（大概率是英文，不推荐初学者看）</li><li>书籍（知识更加系统完全，推荐）</li><li>视频（比较容易理解，比较推荐，特别是初学的时候），另外，大家不要说自己工作很多年，技术也比较厉害了就不能看视频学习了。我认识的很多大佬，包括我经历的几个项目组的技术 Leader，他们都有看视频学习技术的习惯。</li><li>网上博客（解决某一知识点的问题的时候可以看看）。</li></ol><p>最后，有一个建议是：<strong>看视频的过程中最好跟着一起练，要做笔记！！！最好可以边看视频边找一本书籍看，看视频没弄懂的知识点一定要尽快解决，如何解决？首先百度/Google，通过搜索引擎解决不了的话就找身边的朋友或者认识的一些人。</strong></p><h1 id="六、工作篇"><a href="#六、工作篇" class="headerlink" title="六、工作篇"></a>六、工作篇</h1><h2 id="如何选择职业方向？"><a href="#如何选择职业方向？" class="headerlink" title="如何选择职业方向？"></a><strong>如何选择职业方向？</strong></h2><p>发现身边有一些朋友看到哪一个方向工资高就转哪个方向，看到大数据库工资高，他们就立马转大数据方向，看到算法工程师工资高，他们就转算法方向……。</p><p>实际这种行为是非常不可取的，不利于个人发展，尤其是对于已经在某个领域工作了多年的朋友来说。</p><p>如果你在某个领域比如 Java 后端有了几年的工作经验，那你再换其他方向几乎相当于是从头开始。虽然你可能或多或少也能用到部分 Java 后端的工作经验，但这并不能让你在新方向上有太大的竞争力，你几乎就是这个领域的新人。</p><p>另外，如果你仅仅是因为对某个方向感兴趣就想要转变职业方向的话，那我建议你先在这个方向深入学习一下。就像很多后端的朋友想要转前端一样，在他们眼里前端的工作所见即所得，可以很快就能看到自己的成果，入门也要相对容易一些。但是，他们并不清楚想要做好前端真的很难，各种新框架，各种新工具，适配各种尺寸的屏幕是真的有难度且麻烦。</p><p>学技术也一样，不要今天看别人学了某某框架，掌握了某某技术原理，你也要去学。按照自己的节奏来就好，没必要和其他人比，每个人的情况不同，擅长的领域也不同。</p><p><strong>过于从众，没有主见，只能让自己在技术这个道路上走的很累。</strong></p><p>不过，有一些情况下，换一个职业方向对你来说还是值得考虑的:</p><ul><li>如果你本身就刚工作不久的话，那我觉得你换一个职业方向对你影响也不大，毕竟你本身就没有什么工作经验。</li><li>如果你所从事的方向真的是夕阳产业，已经进入了长期下行的趋势（比如曾经很火的 Flash 开发方向），那你要尽快考虑换一个职业方向了。</li><li>如果你真的对新的职业方向有信心，感兴趣，清楚自己一定会在新方向坚持下来。这种情况下，我相信你是可以在新的职业方向上成功的</li></ul><p><strong>转换职业方向也要乘早，尽快跳出舒适区，在下一个有前景的方向上努力。</strong></p><p>如何判断一个职业方向好不好？你可以从下面 2 个方向来判断：</p><ul><li>天花板高度：你这个职业方向最厉害的那批人能够到达的高度。</li><li>前景：夕阳行业还是未来趋势，你可以结合国家产业发展、供需关系、社会需要等角度来分析。</li><li>竞争程度：如果一个行业竞争人数太多的话，也会造成内卷的问题，进而导致这个行业的性价比降低。</li></ul><p>通常来说，一个好的行业必然会竞争加剧。但是！如果你所从事的行业护城河够高（对求职者的硬性要求比较高）或者你的能力足够强的话，那这个行业注定不会太卷。就比如说顶级软件工程师、数据库内核资深开发、资深芯片设计师等等在任何时候在职场求职都是非常有竞争力的存在。</p><p><strong>一个好的职业方向，一定是职业天花板够高，前景不错且竞争不太剧烈。</strong></p><h2 id="新入职一家公司如何快速进入工作状态？"><a href="#新入职一家公司如何快速进入工作状态？" class="headerlink" title="新入职一家公司如何快速进入工作状态？"></a><strong>新入职一家公司如何快速进入工作状态？</strong></h2><blockquote><p>朋友投稿的一篇文章！强烈建议每一位即将入职/在职的小伙伴看看这篇文章，看完之后可以帮助你少踩很多坑。整篇文章逻辑清晰，内容全面！<br>原文：<a href="https://www.cnblogs.com/hunternet/p/14675348.html" target="_blank" rel="noopener">https://www.cnblogs.com/hunternet/p/14675348.html</a></p></blockquote><p>每到一个新的公司面临的可能都是新的业务、新的技术、新的团队……这些可能会打破你原来工作思维、编码习惯、合作方式……</p><p>而于公司而言，又不能给你几个月的时间去慢慢的熟悉。这个时候，如何快速进入工作状态，尽快发挥自己的价值是非常重要的。</p><p>有些人可能会很幸运，入职的公司会有完善的流程与机制，通过一带一、各种培训等方式可以在短时间内快速的让新人进入工作状态。有些人可能就没有那么幸运了，就比如我在几年前跳槽进入某厂的时候，当时还没有像我们现在这么完善的带新人融入的机制，又赶上团队最忙的一段时间，刚一入职的当天下午就让给了我几个线上问题去排查，也没有任何的文档和培训。遇到情况，很多人可能会因为难以快速适应，最终承受不起压力而萌生退意。</p><p>那么，<strong>我们应该如何去快速的让自己进入工作状态，适应新的工作节奏呢？</strong></p><p>新的工作面对着一堆的代码仓库，很多人常常感觉无从下手。但回顾一下自己过往的工作与项目的经验，我们可以发现它们有着异曲同工之处。当开始一个新的项目，一般会经历几个步骤：需求-&gt;设计-&gt;开发-&gt;测试-&gt;发布，就这么循环往复，我们完成了一个又一个的项目。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="F:\面试指北\面试指北.assets\0940fd92-67a2-4584-baa5-14ab2bf40340.png" alt="img" title>                </div>                <div class="image-caption">img</div>            </figure><p>而在这个过程中主要有四个方面的知识那就是业务、技术、项目与团队贯穿始终。新入职一家公司，我们第一阶段的目标就是要具备能够跟着团队做项目的能力，因此我们所应尽快掌握的知识点也要从这四个方面入手。</p><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><p>很多人可能会认为作为一个技术人，最应该了解的不应该是技术吗？于是他们在进入一家公司后，就迫不及待的研究起来了一些技术文档，系统架构，甚至抱起来源代码就开始“啃”，如果你也是这么做的，那就大错特错了！在几乎所有的公司里，技术都是作为一个工具存在的，虽然它很重要，但是它也是为了承载业务所存在的，技术解决了如何做的问题，而业务却告诉我们，做什么，为什么做。一旦脱离了业务，那么技术的存在将毫无意义。</p><p>想要了解业务，有两个非常重要的方式</p><p><strong>一是靠问</strong></p><p>如果你加入的团队，有着完善的业务培训机制，详尽的需求文档，也许你不需要过多的询问就可以了解业务，但这只是理想中的情况，大多数公司是没有这个条件的。因此我们只能靠问。</p><p>这里不得不提的是，作为一个新人一定要有一定的脸皮厚度，不懂就要问。我见过很多新人会因为内向、腼腆，遇到疑问总是不好意思去问，这导致他们很长一段时间都难以融入团队、承担更重要的责任。不怕要怕挨训、怕被怼，而且我相信绝对多数的程序员还是很好沟通的！</p><p><strong>二是靠测试</strong></p><p>我认为测试绝对是一个人快速了解团队业务的方式。通过测试我们可以走一走自己团队所负责项目的整体流程，如果遇到自己走不下去或想不通的地方及时去问，在这个过程中我们自然而然的就可以快速的了解到核心的业务流程。</p><p>在了解业务的过程中，我们应该注意的是不要让自己过多的去追求细节，我们的目的是先能够整体了解业务流程，我们面向哪些用户，提供了哪些服务……</p><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>在我们初步了解完业务之后，就该到技术了，也许你已经按捺不住翻开源代码的准备了，但还是要先提醒你一句先不要着急。</p><p>这个时候我们应该先按照自己了解到的业务，结合自己过往的工作经验去思考一下如果是自己去实现这个系统，应该如何去做？这一步很重要，它可以在后面我们具体去了解系统的技术实现的时候去对比一下与自己的实现思路有哪些差异，为什么会有这些差异，哪些更好，哪些不好，对于不好我们可以提出自己的意见，对于更好的我们可以吸收学习为己用！</p><p>接下来，我们就是要了解技术了，但也不是一上来就去翻源代码。 <strong>应该按照从宏观到细节，由外而内逐步地对系统进行分析。</strong></p><p>首先，我们应该简单的了解一下 <strong>自己团队/项目的所用到的技术栈</strong> ，Java 还是.NET、亦或是多种语言并存，项目是前后端分离还是服务端全包，使用的数据库是 MySQL 还是 PostgreSQL……，这样我们可能会对所用到的技术和框架，以及自己所负责的内容有一定的预期，这一点有的人可能在面试的时候就会简单了解过。</p><p>下一步，我们应该了解的是 <strong>系统的宏观业务架构</strong> 。自己的团队主要负责哪些系统，每个系统又主要包含哪些模块，又与哪些外部系统进行交互……对于这些，最好可以通过流程图或者思维导图等方式整理出来。</p><p>然后，我们要做的是看一下 <strong>自己的团队提供了哪些对外的接口或者服务</strong> 。每个接口和服务所提供功能是什么。这一点我们可以继续去测试自己的系统，这个时候我们要看一看主要流程中主要包含了哪些页面，每个页面又调用了后端的哪些接口，每个后端接口又对应着哪个代码仓库。(如果是单纯做后端服务的，可以看一下我们提供了哪些服务，又有哪些上游服务，每个上游服务调用自己团队的哪些服务……)，同样我们应该用画图的形式整理出来。</p><p>接着，我们要了解一下 <strong>自己的系统或服务又依赖了哪些外部服务</strong> ，也就是说需要哪些外部系统的支持，这些服务也许是团队之外、公司之外，也可能是其他公司提供的。这个时候我们可以简单的进入代码看一下与外部系统的交互是怎么做的，包括通讯框架(REST、RPC)、通讯协议……</p><p>到了代码层面，我们首先应该了解每个模块代码的层次结构，一个模块分了多少层，每个层次的职责是什么，了解了这个就对系统的整个设计有了初步的概念，紧接着就是代码的目录结构、配置文件的位置。</p><p>最后，我们可以寻找一个示例，可以是一个接口，一个页面，让我们的思路跟随者代码的运行的路线，从入参到出参，完整的走一遍来验证一下我们之前的了解。</p><p>到了这里我们对于技术层面的了解就可以先告一段落了，我们的目的知识对系统有一个初步的认知，更细节的东西，后面我们会有大把的时间去了解</p><h3 id="项目与团队"><a href="#项目与团队" class="headerlink" title="项目与团队"></a>项目与团队</h3><p>上面我们提到，新入职一家公司，第一阶段的目标是有跟着团队做项目的能力，接下来我们要了解的就是项目是如何运作的。</p><p>我们应该把握从需求设计到代码编写入库最终到发布上线的整个过程中的一些关键点。例如项目采用敏捷还是瀑布的模式，一个迭代周期是多长，需求的来源以及展现形式，有没有需求评审，代码的编写规范是什么，编写完成后如何构建，如何入库，有没有提交规范，如何交付测试，发布前的准备是什么，发布工具如何使用……</p><p>关于项目我们只需要观察同事，或者自己亲身经历一个迭代的开发，就能够大概了解清楚。</p><p>在了解项目运作的同时，我们还应该去了解团队，同样我们应该先从外部开始，我们对接了哪些外部团队，比如需求从哪里来，是否对接公司外部的团队，提供服务的上游团队有哪些，依赖的下游团队有哪些，团队之间如何沟通，常用的沟通方式是什么…….</p><p>接下来则是团队内部，团队中有哪些角色，每个人的职责是什么，这样遇到问题我们也可以清楚的找到对应的同事寻求帮助。是否有一些定期的活动与会议，例如每日站会、周例会，是否有一些约定俗成的规矩，是否有一些内部评审，分享机制……</p><h3 id="总结-25"><a href="#总结-25" class="headerlink" title="总结"></a>总结</h3><p>新入职一家公司，面临新的工作挑战，能够尽快进入工作状态，实现自己的价值，将会给你带来一个好的开始。</p><p>作为一个程序员，能够尽快进入工作状态，意味着我们首先应该具备跟着团队做项目的能力，这里我站在了一个后端开发的角度上从业务、技术、项目与团队四个方面总结了一些方法和经验。</p><p>关于如何快速进入工作状态，如果你有好的方法与建议，欢迎在评论区留言。</p><p>最后我们用一张思维导图来回顾一下这篇文章的内容。如果你觉得这篇文章对你有所帮助，可以关注文末公众号，我会经常分享一些自己成长过程中的经验与心得，与大家一起学习与进步。</p><h2 id="如何在绩效考核中脱颖而出？"><a href="#如何在绩效考核中脱颖而出？" class="headerlink" title="如何在绩效考核中脱颖而出？"></a><strong>如何在绩效考核中脱颖而出？</strong></h2><p>对于职场人来说，绩效考核是一个绕不开的话题，几乎所有公司都有一套绩效考核方法。</p><p>如果你想要在职场走的更远，爬的更高的话，绩效考核对你来说还是非常重要的。在绝大部分公司，绩效考核都会和你的职级晋升、薪水涨幅、年终奖挂钩。并且，很多公司是的确有末尾淘汰机制的，很残酷。</p><p>公司给员工升职加薪，一是看你过去的表现，二是看你未来的潜力。未来的潜力主要也是基于你过去的表现以及个人进步速度。只有你能够证明自己能够做的越来越好，你才能在升职加薪上获得更大的主动权。</p><p><strong>如何提升自己在工作中的表现？</strong> 核心肯定是持续稳定的在工作上产出有价值的东西。</p><p>如果想要持续稳定的在工作上产出，入职之后一定一定一定要先熟悉公司的技术栈、内部系统以及各种常用工具的。熟悉了这些东西之后，你的工作效率才会拉满，你才能充分利用公司内部的资源。</p><p>熟悉了之后，更进一步就是熟练掌握那些对你当前工作比较重要的技术以及工具。</p><h3 id="勇于认领有挑战的任务"><a href="#勇于认领有挑战的任务" class="headerlink" title="勇于认领有挑战的任务"></a>勇于认领有挑战的任务</h3><p>我们在工作中的产出，通常是通过完成开发任务方式来体现的。</p><p>日常开发中，建议要勇于认领比较有挑战的任务，解决有难度的问题。一定不要一碰到不会的就退缩了，碰到没有接触过的技术就怂了。</p><p>但也不要过于自信，还是要对自己的能力有个清楚且客观地认识。</p><p>如果你当前正在做的任务实在没办法完成的话，可以找技术 Leader 或者其他同事聊聊，沟通一下，寻求一下他们的建议和指导。一定不要憋着不说，等到截止日期的时候，才让大家知道你没有完成这个任务。</p><h3 id="深入思考业务"><a href="#深入思考业务" class="headerlink" title="深入思考业务"></a>深入思考业务</h3><p>平时要养成深入思考业务的习惯，敢于提出自己的想法和建议，而不是业务负责人说什么就是什么，技术负责人说用什么技术就用什么技术。不要被牵着鼻子走，要有自己的想法。但切忌不要过于偏执，一切的争论要建立在完善的逻辑之上。就比如说你觉得某一块的业务设计不合理的话，那就要有理有据地和业务负责人说出自己的想法。再比如说你觉得有更好的技术框架可以解决当前项目的问题，那你就要把这个技术框架调研清楚之后再和技术负责人沟通。</p><p>如果你能够对项目的发展提出一些有用的建议，大家对你的看法肯定会不一样。</p><h3 id="善于分享"><a href="#善于分享" class="headerlink" title="善于分享"></a>善于分享</h3><p>平时工作中要乐于帮助其他同事，也要学会寻求同事的帮助。</p><p>如果公司崇尚技术分享的话。试着学会技术分享即使你讲的东西比较简单，讲好就行了。</p><h3 id="多要反馈"><a href="#多要反馈" class="headerlink" title="多要反馈"></a>多要反馈</h3><p>尽量要多找你的技术 Leader/其他上级要反馈，多和他们聊聊自己做了什么，后面有什么什么建议给自己。</p><p>一定一定不要只埋头搞事，搞了事产生了效果，还要让其他人知道你的贡献。</p><h3 id="持续学习"><a href="#持续学习" class="headerlink" title="持续学习"></a>持续学习</h3><p>一定要有持续学习的意识！你的日常一定不是只有工作，想要走的更远，工作之外一定也要抽时间用学习武装自己。</p><p>举个例子你的项目用到了消息队列，那你就要一定要搞清楚：</p><ul><li>常见消息队列之间的对比？如何选择？</li><li>如何确保消息不会丢失？</li><li>如何确保消息不被重复消费？</li><li>消息积压如何处理？</li><li>消息队列如何实现分布式事务？</li><li>消息队列（任选一个主流的消息队列进行研究）的底层原理是什么（网络通信、高性能 IO、数据压缩……）？如果让你设计的话，你会如何设计？（学习优秀的消息队列的底层原理）</li><li>……</li></ul><p>如果刚毕业之后就没有持续学习的意识的话，那大概率未来的工作中也要不回养成这种意识。刚工作的那 1-3 年是个人能力提升最快的阶段。</p><h3 id="要有-Owner-意识"><a href="#要有-Owner-意识" class="headerlink" title="要有 Owner 意识"></a>要有 Owner 意识</h3><p><strong>什么叫有 Owner 意识呢？</strong> 我举几个例子大家应该就明白了。</p><ul><li>某天客户突然在群里询问了一个问题，你及时在群里回应了客户。这就叫有 Owner 意识。</li><li>觉得项目某个模块的数据库表设计有问题，自己私下进行了深度思考，并给出了优化方案，之后找到技术 Leader 说明了自己想法。这就叫有 Owner 意识</li><li>觉得项目某个模块的技术方案有问题，自己找到技术 Leader 进行了沟通。这就叫有 Owner 意识</li></ul><p><strong>什么叫没有 Owner 意识呢？</strong> 我举几个反例大家应该就明白了。</p><ul><li>某天客户突然在群里询问了一个问题，你看到了问题，但是觉得自己的工作还没做完或者觉得这事不重要，干脆就假装没看见。这就叫缺乏 Owner 意识。正确的做法是积极主动地推动问题的解决。如果自己没能力解决或者实现没时间解决的话，可以联系相关的同事帮忙解决。</li><li>觉得项目某个模块的数据库表设计有问题，自己就直接找到 Leader 开始抱怨：“这特么表设计的什么鬼啊！”。这就叫缺乏 Owner 意识。</li><li>觉得项目某个模块的技术方案有问题，自己睁一只眼闭一只眼，没有找技术 Leader 沟通，技术方案确定之后，却经常抱怨技术方案设计的不够好。这就叫缺乏 Owner 意识。</li></ul><p><strong>有 Owner 意识，并不是说让大家都去当“奋斗逼”，故意在上级面前多表现一下。而是说，希望自己能够对工作更加负责，更加积极主动地参与项目的建设。</strong></p><h3 id="要有全链路意识"><a href="#要有全链路意识" class="headerlink" title="要有全链路意识"></a>要有全链路意识</h3><p><strong>什么是全链路？</strong> 全链路可以理解为一个请求在系统中经过的完整路径。</p><p>我们这里的全链路意识说的是：<strong>不仅仅要对你自己模块负责，还要尝试对了解整个系统涉及到的所有模块，将它们串联起来</strong>。</p><p>全链路意识是项目技术 Leader 的必备。如果你以后想要往项目技术 Leader 的方向发展，那就先从培养自己的全链路意识开始吧！</p><h3 id="多沟通交流"><a href="#多沟通交流" class="headerlink" title="多沟通交流"></a>多沟通交流</h3><p>不喜欢沟通交流和表达的人，一般也会更难受到上级的青睐。很多时候你做的工作比别人多，你本以为你可以获得更多认可和奖励，但是，到最后往往收获的认可度和奖励却没有别人高。</p><p><strong>做好本质工作是我们的分内之事，如果你能偶尔抽出一些时间，多和你的同事、上级或者 leader 交流问题的话，你所能得到的肯定是远远超过你所付出的那一会时间。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;提前准备技术面试和手撕算法&quot;&gt;&lt;a href=&quot;#提前准备技术面试和手撕算法&quot; class=&quot;headerlink&quot; title=&quot;提前准备技术面试和手撕算法&quot;&gt;&lt;/a&gt;提前准备技术面试和手撕算法&lt;/h3&gt;&lt;p&gt;面试之前一定要提前准备一下常见的面试题：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/12/%E9%9D%A2%E7%BB%8FGo%E9%97%AE%E9%A2%98/"/>
    <id>http://waynamigo.github.io/2023/10/12/面经Go问题/</id>
    <published>2023-10-12T05:27:37.025Z</published>
    <updated>2023-10-29T16:44:54.484Z</updated>
    
    <content type="html"><![CDATA[<p>利用通信，也就是封装内部实现，提供接口的方式来进行相应的操作</p><h2 id="讲讲go程序的执行过程：预处理，编译、链接、运行"><a href="#讲讲go程序的执行过程：预处理，编译、链接、运行" class="headerlink" title="讲讲go程序的执行过程：预处理，编译、链接、运行"></a>讲讲go程序的执行过程：预处理，编译、链接、运行</h2><p>词法分析、语法分析、类型检查、代码生成、编译器优化、链接</p><ul><li>go run做了什么：编译、链接、运行<h2 id="channel和共享内存有什么优劣"><a href="#channel和共享内存有什么优劣" class="headerlink" title="channel和共享内存有什么优劣"></a>channel和共享内存有什么优劣</h2>channel</li><li>隐式同步，减少锁的使用</li><li>不适合大量数据传输<br>共享内存</li><li>显式用锁，性能高</li><li>适合大量数据，但难以调试，存在复杂的同步机制<h2 id="context原理和场景【并发安全的】"><a href="#context原理和场景【并发安全的】" class="headerlink" title="context原理和场景【并发安全的】"></a>context原理和场景【并发安全的】</h2>【withtimeout超时取消，withvalue传递共享数据】<br>context用于多个goroutine之间进行通信和控制的官方库，实现并发控制，包括取消信号、控制超时时间<br>注意点</li></ul><ol><li>不要将 Context 塞到结构体里。直接将 Context 类型作为函数的第一参数，而且一般都命名为 ctx。</li><li>不要向函数传入一个 nil 的 context，如果你实在不知道传什么，标准库给你准备好了一个 context：todo。</li><li>不要把本应该作为函数参数的类型塞到 context 中，context 存储的应该是一些共同的数据。例如：登陆的 session、cookie 等。</li></ol><p>ctx, cancel := context.WithCancel(context.Background())<br>defer cancel() // 避免其他地方忘记 cancel，且重复调用不影响</p><h3 id="原理，COntext-Value查找"><a href="#原理，COntext-Value查找" class="headerlink" title="原理，COntext.Value查找"></a>原理，COntext.Value查找</h3><p>Context 指向它的父节点，链表则指向下一个节点。通过 WithValue 函数，可以创建层层的 valueCtx，存储 goroutine 间可以共享的变量。<br>取值的过程，实际上是一个递归查找的过程，它会顺着链路一直往上找，比较当前节点的 key是否是要找的 key，如果是，则直接返回 value。否则，一直顺着 context 往前，最终找到根节点（一般是 emptyCtx），直接返回一个 nil。所以用 Value 方法的时候要判断结果是否为 nil。<br>父节点没法获取子节点存储的值，子节点却可以获取父节点的值。</p><h2 id="waitgroup的原理和场景【多个groutine的等待结束-并发控制】"><a href="#waitgroup的原理和场景【多个groutine的等待结束-并发控制】" class="headerlink" title="waitgroup的原理和场景【多个groutine的等待结束/并发控制】"></a>waitgroup的原理和场景【多个groutine的等待结束/并发控制】</h2><ul><li>内部维护了一个计数器，初始化为0。</li><li>调用 Add 方法时，计数器会增加；</li><li>每当调用 Done 方法时，计数器会减少；</li><li>调用 Wait 方法时，如果计数器不为零，则会阻塞当前 Goroutine，直到计数器减至零。</li></ul><h2 id="string和byte的转换发生内存拷贝吗【会】为什么？"><a href="#string和byte的转换发生内存拷贝吗【会】为什么？" class="headerlink" title="string和byte的转换发生内存拷贝吗【会】为什么？"></a>string和byte的转换发生内存拷贝吗【会】为什么？</h2><p>[]byte(str)，之前分配的空间被gc</p><h2 id="为什么go协程堵掉不会阻塞，C-的线程堵掉"><a href="#为什么go协程堵掉不会阻塞，C-的线程堵掉" class="headerlink" title="为什么go协程堵掉不会阻塞，C++的线程堵掉"></a>为什么go协程堵掉不会阻塞，C++的线程堵掉</h2><p>【C++的线程pthread是内核态，Go的调度时runtime系统管理的，相当于套了一层壳，运行在用户态，但是有内核态的速度】</p><h2 id="除了mutex还有什么方法实现并发安全"><a href="#除了mutex还有什么方法实现并发安全" class="headerlink" title="除了mutex还有什么方法实现并发安全"></a>除了mutex还有什么方法实现并发安全</h2><p>atomic包和channel</p><h2 id="这个runtime系统解释一下"><a href="#这个runtime系统解释一下" class="headerlink" title="这个runtime系统解释一下"></a>这个runtime系统解释一下</h2><p>golang 的 runtime 在 golang 中的地位类似于 Java 的虚拟机。<br>包括</p><ol><li>GPM模型</li><li>GC机制</li><li>内存分配：Go 程序在启动时，会首先向系统申请一块内存(虚拟地址空间)，然后自己切成小块进行管理. 将申请的内存，分成 3 个区域,spans、bitmap、arena<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arena: 就是堆区，go runtime 在动态分配的内存都在这个区域，并且将内存块分成 8kb 的页，一些组合起来的称为 **mspan，**成为 go 中内存管理的基本单元，这种连续的页一般是操作系统的内存页几倍大小.</span><br><span class="line">bitmap: 顾名思义，用来标记堆区使用的映射表，它记录了哪些区域保存了对象，对象是否包含指针，以及 GC 的标记信息.</span><br><span class="line">spans: 存放 mspan 的指针，根据 spans 区域的信息可以很容易找到 mspan. 它可以在 GC 时更快速的找到的大块的内存 mspan.</span><br></pre></td></tr></table></figure></li></ol><h2 id="为什么要用协程，好处是什么"><a href="#为什么要用协程，好处是什么" class="headerlink" title="为什么要用协程，好处是什么"></a>为什么要用协程，好处是什么</h2><p>go的协程是为了解决多核CPU利用率问题，go语言层面并不支持多进程或多线程，但是协程更好用，<strong>协程被称为用户态线程</strong>，不存在CPU上下文切换问题，效率非常高。几乎所有IO密集型的应用，都可以利用协程提高速度</p><h2 id="1-go的数组和切片"><a href="#1-go的数组和切片" class="headerlink" title="1.go的数组和切片"></a>1.go的数组和切片</h2><ol><li>数组是固定长度的，切片是可以变化的</li><li>切片实际是对数组的封装，切片底层是由指向数组的指针，切片长度，切片容量三个参数组成。指向底层数组的指针就标志着切片的开始</li><li>切片是对底层数组的一个引用，不同的切片可以指向同一个底层数组，操纵同一个底层数组。</li></ol><p><strong>需要注意的几点</strong></p><ol><li><p>传递切片作为函数参数，其实拷贝的是切片这个结构体，会产生一个新的切片结构体实例，指向同一个底层数组。虽然也会改变底层数组得值，但是对于原来的切片来说，是没有任何变化的，只是对应的底层数组中某些元素的值变了。</p></li><li><p>切片进行append扩容的时候，会产生新的切片地址，所以要将append函数返回的值重新赋给切片</p></li><li><p>Go1.18不再以1024为临界点，而是设定了一个值为256的threshold，以256为临界点；超过256，不再是每次扩容1/4，而是每次增加（旧容量+3256）/4；</p></li></ol><ul><li>当新切片需要的容量cap大于两倍扩容的容量，则直接按照新切片需要的容量扩容；</li><li>当原 slice 容量 &lt; threshold 的时候，新 slice 容量变成原来的 2 倍；</li><li>当原 slice 容量 &gt; threshold，进入一个循环，每次容量增加（旧容量+3threshold）/4。</li></ul><ol start="4"><li>需要注意切片是对数组的引用, 所以当切片被赋值给别的切片变量时, 改变新的切片变量中的值, 会连带改变原切片值</li></ol><h2 id="2-读已经关闭的channel发生什么"><a href="#2-读已经关闭的channel发生什么" class="headerlink" title="2.读已经关闭的channel发生什么"></a>2.读已经关闭的channel发生什么</h2><ol><li><p>读已关闭的channel <code>读已经关闭的channel无影响。</code></p><ul><li><p>如果在关闭前，通道内部有元素，会正确读到元素的值；</p></li><li><p>如果关闭前通道无元素，则会读取到通道内元素类型对应的零值。</p></li><li><p>若遍历通道，如果通道未关闭，读完元素后，会报死锁的错误。<code>会引发fatal error: all goroutines are asleep - deadlock!</code></p></li></ul></li><li><p>写已关闭的通道<br><code>会引发panic: send on closed channel</code></p></li><li><p>关闭已关闭的通道<br><code>会引发panic: close of closed channel</code></p></li></ol><p><strong>需要注意的几点</strong>：对于一个已初始化，但并未关闭的通道来说，收发操作一定不会引发 panic。但是通道一旦关闭，再对它进行发送操作，就会引发 panic。如果我们试图关闭一个已经关闭了的通道，也会引发 panic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 读一个已经关闭的通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">channel &lt;- <span class="number">2</span></span><br><span class="line"><span class="built_in">close</span>(channel)</span><br><span class="line">x := &lt;-channel</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[Output]: 不会报错，输出2*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历读关闭通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">channel &lt;- <span class="number">2</span></span><br><span class="line">channel &lt;- <span class="number">3</span></span><br><span class="line"><span class="built_in">close</span>(channel) <span class="comment">//若不关闭通道，则会报死锁错误</span></span><br><span class="line"><span class="keyword">for</span> num := <span class="keyword">range</span> channel &#123;</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[Output]: 不会报错，输出2 3*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 写一个已经关闭的通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">close</span>(channel)</span><br><span class="line">    channel &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[Output]: panic: send on closed channel*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 关闭一个已经关闭的管道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">close</span>(channel)</span><br><span class="line">    <span class="built_in">close</span>(channel)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*[Output]: panic: close of closed channel */</span></span><br></pre></td></tr></table></figure><h2 id="3-Go是如何实现继承的"><a href="#3-Go是如何实现继承的" class="headerlink" title="3.Go是如何实现继承的"></a>3.Go是如何实现继承的</h2><p>通过struct的组合实现的继承</p><h2 id="13-map取一个key，修改这个key，原map会更改吗【会，是引用类型】"><a href="#13-map取一个key，修改这个key，原map会更改吗【会，是引用类型】" class="headerlink" title="13.map取一个key，修改这个key，原map会更改吗【会，是引用类型】"></a>13.map取一个key，修改这个key，原map会更改吗【会，是引用类型】</h2><p>从map中取出一个值并对其进行修改时，原始的map也会受到影响，因为map是引用类型，它们在底层是指向相同的数据结构的指针</p><ul><li>引用类型：map slice channel interface</li></ul><h2 id="16-struct能否-比较【可以】，成员里有struct呢？【可以】"><a href="#16-struct能否-比较【可以】，成员里有struct呢？【可以】" class="headerlink" title="16. struct能否==比较【可以】，成员里有struct呢？【可以】"></a>16. struct能否==比较【可以】，成员里有struct呢？【可以】</h2><ol><li>但是只能1.相同类型结构体，2.成员结构相同并且都是可比较类型</li><li>但切片、映射和函数等类型无法比较<h2 id="25-go的深浅拷贝"><a href="#25-go的深浅拷贝" class="headerlink" title="25. go的深浅拷贝"></a>25. go的深浅拷贝</h2></li><li>浅拷贝: <code>person1 := person2</code> ，拷贝后的数据是原来数据的引用，更改后原来的也会改</li><li>深拷贝: <code>person3 := Person{name : person1.name}</code>，独立的对象<h2 id="29-如何判断channel是否关闭"><a href="#29-如何判断channel是否关闭" class="headerlink" title="29. 如何判断channel是否关闭"></a>29. 如何判断channel是否关闭</h2></li><li>_, ok := &lt;- mych</li></ol><h2 id="30-make-和-new-的区别"><a href="#30-make-和-new-的区别" class="headerlink" title="30. make 和 new 的区别"></a>30. make 和 new 的区别</h2><ul><li>make创建、初始化引用类型</li><li>new创建一个0值指针，主要用于自定义类型<h2 id="31-Slice的append"><a href="#31-Slice的append" class="headerlink" title="31. Slice的append"></a>31. Slice的append</h2></li></ul><h2 id="44-goroutine获取不到锁会一直等待吗【当然会】"><a href="#44-goroutine获取不到锁会一直等待吗【当然会】" class="headerlink" title="44. goroutine获取不到锁会一直等待吗【当然会】"></a>44. goroutine获取不到锁会一直等待吗【当然会】</h2><h2 id="58-空结构体用来干嘛【占位符，某个集合的存在性检查】"><a href="#58-空结构体用来干嘛【占位符，某个集合的存在性检查】" class="headerlink" title="58. 空结构体用来干嘛【占位符，某个集合的存在性检查】"></a>58. 空结构体用来干嘛【占位符，某个集合的存在性检查】</h2><h2 id="60-defer用来干什么【释放锁，关协程，关channel，文件，recover-panic】"><a href="#60-defer用来干什么【释放锁，关协程，关channel，文件，recover-panic】" class="headerlink" title="60. defer用来干什么【释放锁，关协程，关channel，文件，recover panic】"></a>60. defer用来干什么【释放锁，关协程，关channel，文件，recover panic】</h2><h2 id="61-context包的作用【并发安全】"><a href="#61-context包的作用【并发安全】" class="headerlink" title="61. context包的作用【并发安全】"></a>61. context包的作用【并发安全】</h2><p><strong>处理网络请求和并发任务时常用</strong>，处理请求范围内的值传递、取消和超时等问题，</p><ol><li>并发安全，可以在多个goroutine中共享</li><li>传递信号给goroutine，进行管理</li><li>传递请求范围内的值</li></ol><h2 id="79-select的底层数据结构和特性"><a href="#79-select的底层数据结构和特性" class="headerlink" title="79. select的底层数据结构和特性"></a>79. select的底层数据结构和特性</h2><h2 id="64-panic如何恢复"><a href="#64-panic如何恢复" class="headerlink" title="64. panic如何恢复"></a>64. panic如何恢复</h2><ol><li>当程序遇到一个 panic，它会立即停止当前函数的执行，并沿着调用栈一直向上传播，直到到达 recover 所在的延迟函数。</li><li>如果在defer 中调用了 recover，它会停止 panic 的传播并返回 panic 的值。</li><li>如果没有发生 panic，recover 会返回 nil<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recoverExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Recovered:"</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 引发 panic</span></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">"something went wrong"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="70-go的init函数何时执行的"><a href="#70-go的init函数何时执行的" class="headerlink" title="70. go的init函数何时执行的"></a>70. go的init函数何时执行的</h2><ul><li>导包初始化的时候执行，多个init时，都会执行</li><li>一个文件里有多个init时，根据包的导入关系决定</li><li>在包内有多个init，init执行顺序，golang没有明确定义，字典序？<h2 id="72-Gin的路由如何实现【压缩版的前缀树路由，httprouter库】"><a href="#72-Gin的路由如何实现【压缩版的前缀树路由，httprouter库】" class="headerlink" title="72. Gin的路由如何实现【压缩版的前缀树路由，httprouter库】"></a>72. Gin的路由如何实现【压缩版的前缀树路由，httprouter库】</h2></li></ul><h2 id="74-struct的传递场景：大struct避免复制，用浅拷贝"><a href="#74-struct的传递场景：大struct避免复制，用浅拷贝" class="headerlink" title="74. struct的传递场景：大struct避免复制，用浅拷贝"></a>74. struct的传递场景：大struct避免复制，用浅拷贝</h2><h2 id="79-sync-Pool-对象池用来干嘛的，应用场景如何"><a href="#79-sync-Pool-对象池用来干嘛的，应用场景如何" class="headerlink" title="79. sync.Pool 对象池用来干嘛的，应用场景如何"></a>79. sync.Pool 对象池用来干嘛的，应用场景如何</h2><ul><li>它用于存储和复用临时对象，以减少内存分配和垃圾回收的开销。</li><li>适用于需要频繁创建和销毁对象的场景<ul><li>一些高并发场景，频繁创建和销毁一些对象</li><li>协程池，数据库连接池，http连接池</li><li>临时缓冲区<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原理如下</span><br><span class="line">1. 每个 sync.Pool 实例内部维护了两个 interface&#123;&#125; 类型的字段，一个用于存储临时对象（私有私有的 local 对象池），另一个用于存储共享对象（共享的 shared 对象池）。</span><br><span class="line">2. 当你调用 pool.Get() 方法时，sync.Pool 会首先尝试从当前 Goroutine 的私有对象池 local 中获取一个对象。</span><br><span class="line">3. 如果 local 中没有可用的对象，它会转而尝试从共享对象池 shared 中获取一个对象。</span><br><span class="line">4. 如果 shared 中也没有可用的对象，它会调用 New 函数创建一个新的对象。</span><br><span class="line">5. 当你调用 pool.Put(obj) 方法时，对象会被放回到当前 Goroutine 的私有对象池 local 中。</span><br><span class="line">6. 如果私有对象池 local 已满，或者对象过期，那么该对象会被丢弃。</span><br><span class="line">这个机制保证了对象会在同一个 Goroutine 中被复用，从而减少了对象的创建和垃圾回收的开销。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="syncpool怎么实现的"><a href="#syncpool怎么实现的" class="headerlink" title="syncpool怎么实现的"></a>syncpool怎么实现的</h3><p>私有对象池和共享对象池+互斥锁保证线程安全,通过get和put</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> poolLocal <span class="keyword">struct</span> &#123;</span><br><span class="line">    private <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    shared  []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">M sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="83-变量申请类型是为了做什么"><a href="#83-变量申请类型是为了做什么" class="headerlink" title="83. 变量申请类型是为了做什么"></a>83. 变量申请类型是为了做什么</h2><p>类型就是根据不同的数据类型可以存储不同的数据，所以需要申请对应类型地址<br>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请</p><h2 id="88-Go的GC机制介绍一下"><a href="#88-Go的GC机制介绍一下" class="headerlink" title="88. Go的GC机制介绍一下"></a>88. Go的GC机制介绍一下</h2><h2 id="84-Go和Java的GC机制有什么区别"><a href="#84-Go和Java的GC机制有什么区别" class="headerlink" title="84. Go和Java的GC机制有什么区别"></a>84. Go和Java的GC机制有什么区别</h2><ul><li>目前主流的Java虚拟机实现都采用了分代垃圾回收的思想，堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收，年老代主要使用标记-整理垃圾回收算法</li><li>然后go的垃圾回收是混合写屏障机制，stw的时间更短，1.3用的标记清除，1.5改为用三色标记，但是还需要stw扫描栈所以就演进为混合写屏障，栈上新增对象都为黑色，暂时活过这一轮，然后删除的对象为灰色或者白色，节点都会变为灰色，黑色节点下新增节点都为灰色</li><li>java语言中选择了可达性分析进行对象存活判断，而不是引用计数，主要也是因为java中软引用、弱引用、虚引用等多种引用方式使用引用计数并不能进行有效的存活判断，同时为了避免循环引用的问题，所以java选择了可达性分析的方式进行对象存活判断。</li><li>在java中触发垃圾回收的条件是：<ul><li>cpu空闲的时候；</li><li>在堆栈满了的时候；</li><li>主动调用 System.gc() 后尝试进行回收；</li></ul></li></ul><p><strong>Go的gc最佳应用场景是自身的分配行为不容易导致碎片堆积，并且程序分配新对象的速度不太高的情况，这种情况下go的垃圾回收比java更高效。相反的，当对象分配速度高时，java的gc的优势就会明显体现</strong></p><h2 id="102-什么时候触发线程切换"><a href="#102-什么时候触发线程切换" class="headerlink" title="102. 什么时候触发线程切换"></a>102. 什么时候触发线程切换</h2><ol><li>阻塞</li><li>时间片用完</li><li>显式调用 runtime.Gosched():主动让出当前 Goroutine 的执行权限，让调度器选择另一个可运行的 Goroutine 执行</li><li>互斥锁</li><li>等待组 sync.WaitGroup()<h2 id="107-http库的设计原理是什么？为什么不池化？"><a href="#107-http库的设计原理是什么？为什么不池化？" class="headerlink" title="107. http库的设计原理是什么？为什么不池化？"></a>107. http库的设计原理是什么？为什么不池化？</h2>采用的是连接池：http 包会自动维护一个连接池，用于复用 TCP 连接，从而提升性能。</li></ol><ul><li>不池化的原因：处理的对象不一样，场景也不一样<ul><li>对象池管理创建、销毁常用对象，减少gc压力</li><li>连接池是复用连接，减少资源分配的开销，连接池中的资源通常会被长时间地重复使用，而对象池中的对象可能在短时间内就会被释放</li></ul></li></ul><h2 id="110-关闭一个已关闭的channel会发生什么？panic。"><a href="#110-关闭一个已关闭的channel会发生什么？panic。" class="headerlink" title="110. 关闭一个已关闭的channel会发生什么？panic。"></a>110. 关闭一个已关闭的channel会发生什么？panic。</h2><h2 id="110-238-有缓存channel和没缓存channel的区别是什么？"><a href="#110-238-有缓存channel和没缓存channel的区别是什么？" class="headerlink" title="110/238. 有缓存channel和没缓存channel的区别是什么？"></a>110/238. 有缓存channel和没缓存channel的区别是什么？</h2><p>无缓冲的与有缓冲 channel 有着重大差别，那就是一个是同步的 一个是非同步的</p><h2 id="116-138-类型断言"><a href="#116-138-类型断言" class="headerlink" title="116/138. 类型断言"></a>116/138. 类型断言</h2><ul><li><code>t := i.(T)</code>，这个表达式可以断言一个接口对象（i）里不是 nil，并且接口对象（i）存储的值的类型是 T，如果断言成功，就会返回值给 t，如果断言失败，就会触发 panic</li><li><code>t, ok:= i.(T)</code>，这个表达式也是可以断言一个接口对象（i）里不是 nil，并且接口对象（i）存储的值的类型是 T，如果断言成功，就会返回其类型给 t，并且此时 ok 的值 为 true，表示断言成功。这个不会触发 panic，而是将 ok 的值设为 false ，表示断言失败，此时t 为 T 的零值。<h2 id="8-channel的实现方式-原理-概念-底层实现"><a href="#8-channel的实现方式-原理-概念-底层实现" class="headerlink" title="8.channel的实现方式/原理/概念/底层实现"></a>8.channel的实现方式/原理/概念/底层实现</h2></li></ul><h2 id="117-实现一种等待或者监听的机制【使用select-channel，或者time-sleep】"><a href="#117-实现一种等待或者监听的机制【使用select-channel，或者time-sleep】" class="headerlink" title="117. 实现一种等待或者监听的机制【使用select channel，或者time.sleep】"></a>117. 实现一种等待或者监听的机制【使用select channel，或者time.sleep】</h2><h2 id="118-sleep的底层实现？slice的append返回一个新切片会发生什么"><a href="#118-sleep的底层实现？slice的append返回一个新切片会发生什么" class="headerlink" title="118. sleep的底层实现？slice的append返回一个新切片会发生什么"></a>118. sleep的底层实现？slice的append返回一个新切片会发生什么</h2><ul><li>append不超threshold，底层引用的数组还是原来的地址</li><li>超过了的话，原来的和新的都会指向新数组</li></ul><h2 id="120-137-291-interface的底层实现"><a href="#120-137-291-interface的底层实现" class="headerlink" title="120/137/291. interface的底层实现"></a>120/137/291. interface的底层实现</h2><ul><li>带有方法的interface，一种是不带方法的interface</li><li>任何一个interface变量都是占用16个byte的内存空间</li><li>第一个字段 _type指针，指向数据类型，runtime中的每个数据类型都包含一个这样的字段</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有方法的interface</span></span><br><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">    _type *_type <span class="comment">//重要字段，记录着某种数据类型的一些基本特征，比如这个数据类型占用的内存大小（size字段），数据类型的名称（nameOff字段）等等</span></span><br><span class="line">    <span class="comment">// 每种数据类型都存在一个与之对应的_type结构体</span></span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有方法的interface</span></span><br><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab *itab</span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录着Go语言中某个数据类型的基本特征</span></span><br><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> &#123;</span><br><span class="line">    size    <span class="keyword">uintptr</span></span><br><span class="line">    ptrdata  <span class="keyword">uintptr</span></span><br><span class="line">    hash    <span class="keyword">uint32</span></span><br><span class="line">    tflag   tflag</span><br><span class="line">    align   <span class="keyword">uint8</span></span><br><span class="line">    fieldalign <span class="keyword">uint8</span></span><br><span class="line">    kind    <span class="keyword">uint8</span></span><br><span class="line">    alg    *typeAlg</span><br><span class="line">    gcdata  *<span class="keyword">byte</span></span><br><span class="line">    str    nameOff</span><br><span class="line">    ptrToThis typeOff</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">    inter *interfacetype</span><br><span class="line">    _type *_type <span class="comment">//重要</span></span><br><span class="line">    link  *itab</span><br><span class="line">    hash  <span class="keyword">uint32</span></span><br><span class="line">    bad  <span class="keyword">bool</span></span><br><span class="line">    inhash <span class="keyword">bool</span></span><br><span class="line">    unused [<span class="number">2</span>]<span class="keyword">byte</span></span><br><span class="line">    fun  [<span class="number">1</span>]<span class="keyword">uintptr</span></span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">// interface数据类型对应的type</span></span><br><span class="line"><span class="keyword">type</span> interfacetype <span class="keyword">struct</span> &#123;</span><br><span class="line">    typ   _type</span><br><span class="line">    pkgpath name</span><br><span class="line">    mhdr  []imethod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="404-defer的底层实现"><a href="#404-defer的底层实现" class="headerlink" title="404. defer的底层实现"></a>404. defer的底层实现</h2><h2 id="160-string的底层实现"><a href="#160-string的底层实现" class="headerlink" title="160. string的底层实现"></a>160. string的底层实现</h2><h2 id="121-STW-在-go-的哪些阶段发生？1-8的改进是什么【混合写】"><a href="#121-STW-在-go-的哪些阶段发生？1-8的改进是什么【混合写】" class="headerlink" title="121. STW 在 go 的哪些阶段发生？1.8的改进是什么【混合写】"></a>121. STW 在 go 的哪些阶段发生？1.8的改进是什么【混合写】</h2><h2 id="132-如何避免panic"><a href="#132-如何避免panic" class="headerlink" title="132. 如何避免panic"></a>132. 如何避免panic</h2><h2 id="133-结构体对齐优化"><a href="#133-结构体对齐优化" class="headerlink" title="133. 结构体对齐优化"></a>133. 结构体对齐优化</h2><p>内存对齐:CPU访问内存时，通过字来访问，一个字在32位cpu中4个字节，所以对于</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> demo&#123;</span><br><span class="line">    a <span class="keyword">int8</span> <span class="comment">//1</span></span><br><span class="line">    b <span class="keyword">int32</span><span class="comment">//4</span></span><br><span class="line">    c <span class="keyword">int16</span> <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">会变成 <span class="number">1</span>+<span class="number">3</span> + <span class="number">2</span>+<span class="number">2</span> + <span class="number">4</span> 字节，而下面会变成 <span class="number">3</span>+<span class="number">1</span> + <span class="number">4</span></span><br><span class="line"><span class="keyword">struct</span> demo&#123;</span><br><span class="line">    a <span class="keyword">int8</span> <span class="comment">//1</span></span><br><span class="line">    b <span class="keyword">int16</span><span class="comment">//2</span></span><br><span class="line">    c <span class="keyword">int32</span><span class="comment">//4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="244-go实现func自定义参数"><a href="#244-go实现func自定义参数" class="headerlink" title="244. go实现func自定义参数"></a>244. go实现func自定义参数</h2><p><code>type myFunc func(int) int</code></p><h2 id="252-copy是操作符还是内置函数【内置函数，深拷贝】"><a href="#252-copy是操作符还是内置函数【内置函数，深拷贝】" class="headerlink" title="252. copy是操作符还是内置函数【内置函数，深拷贝】"></a>252. copy是操作符还是内置函数【内置函数，深拷贝】</h2><h2 id="290-解释一下Go的通信机制"><a href="#290-解释一下Go的通信机制" class="headerlink" title="290. 解释一下Go的通信机制"></a>290. 解释一下Go的通信机制</h2><p>是通过channel实现的，chan定义实现了<strong>环形队列</strong>，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序，这一点和管道是一样的；chan在实现时定义了:</p><ul><li>指针</li><li>环形队列</li><li>（阻塞)协程链表<br>来控制通信，当chan满足条件时，通过指针sendx 、recvx 进行读写数据。</li></ul><h2 id="296-slice函数传参，先赋值再append与先append再赋值，哪个发生了改变"><a href="#296-slice函数传参，先赋值再append与先append再赋值，哪个发生了改变" class="headerlink" title="296. slice函数传参，先赋值再append与先append再赋值，哪个发生了改变"></a>296. slice函数传参，先赋值再append与先append再赋值，哪个发生了改变</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendThenAssign</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">3</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assignThenAppend</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">appendThenAssign(arr)</span><br><span class="line"><span class="comment">//print arr: 1 2</span></span><br><span class="line">assignThenAppend(arr)</span><br><span class="line"><span class="comment">//print arr: 99 2</span></span><br></pre></td></tr></table></figure><h2 id="297-有没有什么线程安全的办法？"><a href="#297-有没有什么线程安全的办法？" class="headerlink" title="297. 有没有什么线程安全的办法？"></a>297. 有没有什么线程安全的办法？</h2><h2 id="golang-http包的内存泄漏情况"><a href="#golang-http包的内存泄漏情况" class="headerlink" title="golang http包的内存泄漏情况"></a>golang http包的内存泄漏情况</h2><ol><li>忘记关闭response的 body</li><li>忘记释放连接，或者一直创建连接，没有有效复用的情况？</li></ol><h2 id="306-go-map的时间复杂度"><a href="#306-go-map的时间复杂度" class="headerlink" title="306. go map的时间复杂度"></a>306. go map的时间复杂度</h2><h2 id="307-go由源码变二进制代码的整个流程"><a href="#307-go由源码变二进制代码的整个流程" class="headerlink" title="307. go由源码变二进制代码的整个流程"></a>307. go由源码变二进制代码的整个流程</h2><h2 id="309-select-poll-epoll"><a href="#309-select-poll-epoll" class="headerlink" title="309. select poll epoll"></a>309. select poll epoll</h2><h2 id="314-make底层原理"><a href="#314-make底层原理" class="headerlink" title="314. make底层原理"></a>314. make底层原理</h2><h2 id="315-string-强转-byte-发生了什么"><a href="#315-string-强转-byte-发生了什么" class="headerlink" title="315. string 强转 []byte 发生了什么"></a>315. string 强转 []byte 发生了什么</h2><h2 id="335-411-go的包管理工具除了go-mod还有什么"><a href="#335-411-go的包管理工具除了go-mod还有什么" class="headerlink" title="335/411. go的包管理工具除了go mod还有什么"></a>335/411. go的包管理工具除了go mod还有什么</h2><ul><li>go mod能下载和管理指定版本的库，实现高效的模块化开发，和管理依赖关系的功能</li><li>go sum干什么的：提供了安全机制<ul><li>块路径：列出了项目中所使用的所有直接依赖模块的路径。</li><li>版本号：对应每个模块的版本号。</li><li>哈希值：对应每个模块版本的哈希值，用于确保模块的<strong>代码完整性</strong>。<h2 id="356-介绍一下go的反射"><a href="#356-介绍一下go的反射" class="headerlink" title="356. 介绍一下go的反射"></a>356. 介绍一下go的反射</h2>typeof和valueof来实现，每个类型，包括符合类型都维护了一个type和value区域</li></ul></li></ul><h2 id="396-go的-oop-面向对象与传统面向对象的区别"><a href="#396-go的-oop-面向对象与传统面向对象的区别" class="headerlink" title="396. go的 oop 面向对象与传统面向对象的区别"></a>396. go的 oop 面向对象与传统面向对象的区别</h2><p>go是用结构体定义对象，然后通过组合实现继承，对于多态来说，go强调接口的使用，</p><h2 id="397-go里面interface对于java的接口和c-的虚函数区别在哪"><a href="#397-go里面interface对于java的接口和c-的虚函数区别在哪" class="headerlink" title="397. go里面interface对于java的接口和c++的虚函数区别在哪"></a>397. go里面interface对于java的接口和c++的虚函数区别在哪</h2><ul><li>Go 接口是隐式实现的，一个类型只要实现了接口中的所有方法，就被认为是实现了该接口，无需显式声明。这种方式让 Go 具有了更大的灵活性。</li><li>Go 倾向于使用接口和返回错误值的方式来处理错误，而不是像 Java 或者 C++ 中那样使用异常</li></ul><h2 id="402-Go-runtime的程序计数器，为什么是私有的（为什么程序猿不能操作）"><a href="#402-Go-runtime的程序计数器，为什么是私有的（为什么程序猿不能操作）" class="headerlink" title="402. Go runtime的程序计数器，为什么是私有的（为什么程序猿不能操作）"></a>402. Go runtime的程序计数器，为什么是私有的（为什么程序猿不能操作）</h2><ul><li><p>在 Go 的 runtime 中，程序计数器用于跟踪当前 Goroutine 正在执行的代码位置，从而支持 Goroutine 的并发执行。</p></li><li><p>在单线程情况下，程序计数器会指向当前 Goroutine 执行的代码块。当发生 Goroutine 切换时，程序计数器的值会保存到当前 Goroutine 的上下文中，然后加载新 Goroutine 的上下文中的程序计数器值，以便从上次中断的地方继续执行。</p></li><li><p>避免混乱，保护Groutine在并发环境下的完整性</p></li></ul><h2 id="423-interface和nil可以比较吗【可以】"><a href="#423-interface和nil可以比较吗【可以】" class="headerlink" title="423. interface和nil可以比较吗【可以】"></a>423. interface和nil可以比较吗【可以】</h2><p>但是必须要类型和值都相同</p><ul><li>果接口变量的动态值和动态类型同时都为 nil，那么接口变量将与 nil 比较相等。</li><li>如果类型和值有一个不为nil，那么就是不相等</li></ul><h2 id="447-struct组合与java继承有什么区别"><a href="#447-struct组合与java继承有什么区别" class="headerlink" title="447. struct组合与java继承有什么区别"></a>447. struct组合与java继承有什么区别</h2><ul><li>相同点是，都是静态语言，在编译期实现</li><li>go组合支持多继承，java需要extends 父类来继承，只能继承一个</li></ul><h2 id="448-go的强制类型转换与隐式类型转换"><a href="#448-go的强制类型转换与隐式类型转换" class="headerlink" title="448. go的强制类型转换与隐式类型转换"></a>448. go的强制类型转换与隐式类型转换</h2><p>Go 支持两种类型转换：</p><ul><li><code>var a int = 10，var b float64 = float64(a)</code> 将整数 a 转换为浮点数。</li><li>在算术表达式中，如果操作符两侧的类型不一致，Go 会自动将其中一个值转换为与另一个值相同的类型。</li></ul><h2 id="451-多个interface间可以存在什么关系"><a href="#451-多个interface间可以存在什么关系" class="headerlink" title="451. 多个interface间可以存在什么关系"></a>451. 多个interface间可以存在什么关系</h2><p>组合，嵌套都可以</p><ul><li>一个接口可以嵌套在另一个接口内部，这种情况下，外部接口会继承内部接口的所有方法</li><li>一个接口可以由多个其他接口组合而成，组合后的接口将具有所有组成接口的方法<h2 id="510-go方法和函数的区别"><a href="#510-go方法和函数的区别" class="headerlink" title="510. go方法和函数的区别"></a>510. go方法和函数的区别</h2>方法是定义了 Receiver 的函数，分为receiver</li><li>Value Receiver，不会修改receiver的内容</li><li>Pointer Receiver，会修改receiver的内容</li></ul><h2 id="512-Go函数返回局部变量的指针是否安全【否】"><a href="#512-Go函数返回局部变量的指针是否安全【否】" class="headerlink" title="512. Go函数返回局部变量的指针是否安全【否】"></a>512. Go函数返回局部变量的指针是否安全【否】</h2><p>可以通过返回值和外部穿参一个在堆上的变量，返回这个变量的指针就安全了，并且能自动给gc掉</p><h2 id="5-Go的GMP模型"><a href="#5-Go的GMP模型" class="headerlink" title="5.Go的GMP模型"></a>5.Go的GMP模型</h2><h2 id="6-Go和Java相比"><a href="#6-Go和Java相比" class="headerlink" title="6.Go和Java相比"></a>6.Go和Java相比</h2><h2 id="9-同一个goroutine里面，对无缓冲channel同时发送和接收数据有什么问题"><a href="#9-同一个goroutine里面，对无缓冲channel同时发送和接收数据有什么问题" class="headerlink" title="9.同一个goroutine里面，对无缓冲channel同时发送和接收数据有什么问题"></a>9.同一个goroutine里面，对无缓冲channel同时发送和接收数据有什么问题</h2><p>导致死锁</p><h2 id="10-channel和锁的对比"><a href="#10-channel和锁的对比" class="headerlink" title="10.channel和锁的对比"></a>10.channel和锁的对比</h2><h2 id="11-channel的应用场景"><a href="#11-channel的应用场景" class="headerlink" title="11.channel的应用场景"></a>11.channel的应用场景</h2><h2 id="12"><a href="#12" class="headerlink" title="12."></a>12.</h2><h2 id="227-go实现一个链表"><a href="#227-go实现一个链表" class="headerlink" title="227. go实现一个链表"></a>227. go实现一个链表</h2><h2 id="289-写一个将字符串json转成一个可用的map的函数，json的value类型可能不定"><a href="#289-写一个将字符串json转成一个可用的map的函数，json的value类型可能不定" class="headerlink" title="289. 写一个将字符串json转成一个可用的map的函数，json的value类型可能不定"></a>289. 写一个将字符串json转成一个可用的map的函数，json的value类型可能不定</h2><h1 id="Slice专题"><a href="#Slice专题" class="headerlink" title="Slice专题"></a>Slice专题</h1><h2 id="455-内置cap函数可以用于？【arrary-slice-channel】的capability计算"><a href="#455-内置cap函数可以用于？【arrary-slice-channel】的capability计算" class="headerlink" title="455. 内置cap函数可以用于？【arrary slice channel】的capability计算"></a>455. 内置cap函数可以用于？【arrary slice channel】的capability计算</h2><p>为什么map不能用cap来计算：</p><ul><li>map因为有bucket，在内存存放的大小可能不和make出来的大小一致。是编译器计算后的结果，</li></ul><h2 id="463-切片扩容机制"><a href="#463-切片扩容机制" class="headerlink" title="463. 切片扩容机制"></a>463. 切片扩容机制</h2><p><strong>扩容是为切片分配新的内存空间并复制原切片中元素的过程。</strong><br>先确定新的切片大致容量而分配内存空间，根据该切片当前容量选择不同的策略：<br>【旧】</p><ul><li>如果期望容量大于当前容量的两倍，就会使用期望容量</li><li>如果当前切片的长度小于 1024，容量就会翻倍</li><li>如果当前切片的长达大于 1024，每次扩容 25% 的容量，直到新容量大于期望容量。</li></ul><p>roundupsize 函数来确定待申请的内存，该函数会从一个数组中获取整数，使用这个数组中的元素可以提高内存分配效率并减少碎片，这个数组叫做 NumSizeClasses 。</p><h2 id="520-Slice为什么不是线程安全的"><a href="#520-Slice为什么不是线程安全的" class="headerlink" title="520. Slice为什么不是线程安全的"></a>520. Slice为什么不是线程安全的</h2><p>因为他是引用类型，其他指针可以同时指向底层数组，而且没有同步的措施</p><h2 id="443-slice底层，内存泄漏分析"><a href="#443-slice底层，内存泄漏分析" class="headerlink" title="443. slice底层，内存泄漏分析"></a>443. slice底层，内存泄漏分析</h2><p>1）发生场景：截取长slice中的一段导致长slice未释放。</p><p>由于底层都是数组，如果截图长slice的一段，其实相当于引用了底层数组中的一小段。只要还有引用，golang的gc就不能回收数组。这种情况导致未使用的数组空间，未及时回收。</p><p>​<strong>解决方案</strong>：新建一个长度为0的slice，将需要的一小段slice使用append方法添加到新的slice。再将原来的slice置为nil。</p><p>2）发生场景：没有重置丢失的子切片元素中的指针</p><p>没有及时将不再使用的slice置为nil</p><p>​<strong>解决方案</strong>：如果slice中包含很多元素，再只有一小部分元素需要使用的情况下。建议重新分配一个slice将需要保留的元素加入其中，将原来的长slice整个置为nil。</p><h1 id="Map专题"><a href="#Map专题" class="headerlink" title="Map专题"></a>Map专题</h1><h2 id="32-如何实现一个线程安全的map"><a href="#32-如何实现一个线程安全的map" class="headerlink" title="32. 如何实现一个线程安全的map"></a>32. 如何实现一个线程安全的map</h2><p><a href="https://github.com/guowei-gong/go-demo/blob/main/mutex/demo.go" target="_blank" rel="noopener">https://github.com/guowei-gong/go-demo/blob/main/mutex/demo.go</a></p><ol><li>加读写锁</li><li>分片加锁</li><li>sync.Map（很少用）<ul><li>场景一：只会增长的缓存系统，一个 key 值写入一次而被读很多次；</li><li>场景二：多个 goroutine 为不相交的键读、写和重写键值对。</li></ul></li><li>channel做串行访问:通过将 map 的读写操作发送到一个单独的 Goroutine 中，使得对 map 的访问变成串行的，从而避免了竞态条件。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="function"><span class="keyword">func</span><span class="params">()</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">read</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line">    ch &lt;- <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result = m[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(key, val <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        m[key] = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">    value := read(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">println</span>(value) <span class="comment">// 输出 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="34-Map的底层实现"><a href="#34-Map的底层实现" class="headerlink" title="34. Map的底层实现"></a>34. Map的底层实现</h2><p><strong>使用Hash表和搜索树作为底层实现</strong>,底层是一个hmap和一个bmap</p><ul><li>bmap被称之为“桶”。<strong>一个桶里面会最多装 8 个 key</strong>，key 经过哈希计算后，哈希结果是“一类”的将会落入到同一个桶中。在桶内，会根据key计算出来的hash值的高 8 位来决定key到底落入桶内的哪个位置。</li><li>这也是为什么map无法使用cap()来求容量的关键原因：map的容量是编译器进行计算后得出的一个结果，由于桶的存在，map在内存中实际存放的大小不一定同make出来后的map的大小一致。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    count      <span class="keyword">int</span>            <span class="comment">//元素个数，调用len(map)时直接返回</span></span><br><span class="line">    flags      <span class="keyword">uint8</span>          <span class="comment">//标志map当前状态,正在删除元素、添加元素.....</span></span><br><span class="line">    B          <span class="keyword">uint8</span>          <span class="comment">//单元(buckets)的对数 B=5表示能容纳32个元素</span></span><br><span class="line">    noverflow  <span class="keyword">uint16</span>        <span class="comment">//单元(buckets)溢出数量，如果一个单元能存8个key，此时存储了9个，溢出了，就需要再增加一个单元</span></span><br><span class="line">    hash0      <span class="keyword">uint32</span>         <span class="comment">//哈希种子</span></span><br><span class="line">    buckets    unsafe.Pointer <span class="comment">//指向单元(buckets)数组,大小为2^B，可以为nil</span></span><br><span class="line">    oldbuckets unsafe.Pointer <span class="comment">//扩容的时候，buckets长度会是oldbuckets的两倍</span></span><br><span class="line">    nevacute   <span class="keyword">uintptr</span>        <span class="comment">//指示扩容进度，小于此buckets迁移完成</span></span><br><span class="line">    extra      *mapextra      <span class="comment">//与gc相关 可选字段</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A bucket for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">tophash [bucketCnt]<span class="keyword">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际上编译期间会生成一个新的数据结构</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    topbits  [<span class="number">8</span>]<span class="keyword">uint8</span></span><br><span class="line">    keys     [<span class="number">8</span>]keytype</span><br><span class="line">    values   [<span class="number">8</span>]valuetype</span><br><span class="line">    pad      <span class="keyword">uintptr</span></span><br><span class="line">    overflow <span class="keyword">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/gomapbuckets.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="36-map的key可以是哪些类型，可以是nil吗？可以嵌套吗"><a href="#36-map的key可以是哪些类型，可以是nil吗？可以嵌套吗" class="headerlink" title="36. map的key可以是哪些类型，可以是nil吗？可以嵌套吗"></a>36. map的key可以是哪些类型，可以是nil吗？可以嵌套吗</h2><ul><li>可以作为 map 的键的类型必须<strong>满足相等性比较的条件</strong>，包括基本数据类型和一些自定义类型，string必然可以</li><li>不可以做key的类型：切片，函数，包含切片和函数的符合类型</li></ul><h2 id="36-struct-interface-nil可以做map的key吗"><a href="#36-struct-interface-nil可以做map的key吗" class="headerlink" title="36. struct{} interface{} nil可以做map的key吗"></a>36. struct{} interface{} nil可以做map的key吗</h2><ul><li>nil不可以，其他的可以</li><li>struct{} 以值的字面量形式去比较</li><li>interface{} 以动态类型去比较</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">m[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">m[<span class="string">"string"</span>] = <span class="number">20</span></span><br><span class="line">m[<span class="number">3.14</span>] = <span class="number">30</span></span><br><span class="line">fmt.Println(m[<span class="number">1</span>])       <span class="comment">// 输出 10</span></span><br><span class="line">fmt.Println(m[<span class="string">"string"</span>]) <span class="comment">// 输出 20</span></span><br><span class="line">fmt.Println(m[<span class="number">3.14</span>])    <span class="comment">// 输出 30</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">struct</span>&#123;&#125;]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">key1 := <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">key2 := <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">m[key1] = <span class="number">10</span></span><br><span class="line">m[key2] = <span class="number">20</span></span><br><span class="line">fmt.Println(m[key1]) <span class="comment">// 输出 10</span></span><br><span class="line">fmt.Println(m[key2]) <span class="comment">// 输出 20</span></span><br></pre></td></tr></table></figure><h2 id="251-sync-Map-怎么解决线程安全问题？源码看过吗"><a href="#251-sync-Map-怎么解决线程安全问题？源码看过吗" class="headerlink" title="251. sync.Map 怎么解决线程安全问题？源码看过吗"></a>251. sync.Map 怎么解决线程安全问题？源码看过吗</h2><p>支持并发读写，采取了 “空间换时间” 的机制，冗余了两个数据结构，分别是：read 和 dirty. </p><ul><li><p>优点是读多写少场景下使用，比如只会增长的缓存。</p></li><li><p>缺点是写多场景下，导致 read map 缓存失效，需要加锁，冲突变多，性能急剧下降</p></li><li><p>和原始map+RWLock的实现并发的方式相比，减少了加锁对性能的影响。它做了一些优化：可以无锁访问read map，而且会优先操作read map，倘若只操作read map就可以满足要求，那就不用去操作write map(dirty)，所以在某些特定场景中它发生锁竞争的频率会远远小于map+RWLock的实现方式</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu Mutex</span><br><span class="line">    read atomic.Value <span class="comment">// readOnly</span></span><br><span class="line">    dirty <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*entry</span><br><span class="line">    misses <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="275-map的分段锁拆了几个分片？"><a href="#275-map的分段锁拆了几个分片？" class="headerlink" title="275 map的分段锁拆了几个分片？"></a>275 map的分段锁拆了几个分片？</h2><h2 id="379-如果一个map没申请空间，去向里面取值【发生panic】"><a href="#379-如果一个map没申请空间，去向里面取值【发生panic】" class="headerlink" title="379. 如果一个map没申请空间，去向里面取值【发生panic】"></a>379. 如果一个map没申请空间，去向里面取值【发生panic】</h2><p>一般用的时候就给他make一个</p><h2 id="407-map取一个key，然后修改这个值，原来的数据会发生变化吗？【会】引用类型，"><a href="#407-map取一个key，然后修改这个值，原来的数据会发生变化吗？【会】引用类型，" class="headerlink" title="407. map取一个key，然后修改这个值，原来的数据会发生变化吗？【会】引用类型，"></a>407. map取一个key，然后修改这个值，原来的数据会发生变化吗？【会】引用类型，</h2><h2 id="526-map的负载因子是多少【6-5】为什么？"><a href="#526-map的负载因子是多少【6-5】为什么？" class="headerlink" title="526. map的负载因子是多少【6.5】为什么？"></a>526. map的负载因子是多少【6.5】为什么？</h2><p>默认当 map 中的元素个数达到总容量的 65% 时，会触发扩容操作。<br>为什么？</p><h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><h2 id="9-同一个协程里面，对无缓冲channel同时进行读写会发生什么问题"><a href="#9-同一个协程里面，对无缓冲channel同时进行读写会发生什么问题" class="headerlink" title="9.同一个协程里面，对无缓冲channel同时进行读写会发生什么问题"></a>9.同一个协程里面，对无缓冲channel同时进行读写会发生什么问题</h2><p>原则上不可以这样写，会导致死锁。</p><p>对于一个无缓冲的channel而言，只有不同的协程之间一方发送数据一方接受数据才不会阻塞。channel无缓冲时，发送阻塞直到数据被接收，接收阻塞直到读到数据。</p><h2 id="14-向为nil的channel发送数据会怎样【发生panic】为什么"><a href="#14-向为nil的channel发送数据会怎样【发生panic】为什么" class="headerlink" title="14.向为nil的channel发送数据会怎样【发生panic】为什么"></a>14.向为nil的channel发送数据会怎样【发生panic】为什么</h2><h2 id="连续两次close-ch-会发生panic-runtime-err"><a href="#连续两次close-ch-会发生panic-runtime-err" class="headerlink" title="连续两次close(ch)会发生panic: runtime err"></a>连续两次close(ch)会发生panic: runtime err</h2><h2 id="51-channel-线程安全吗【安全】里面有互斥锁"><a href="#51-channel-线程安全吗【安全】里面有互斥锁" class="headerlink" title="51. channel 线程安全吗【安全】里面有互斥锁"></a>51. channel 线程安全吗【安全】里面有互斥锁</h2><p><strong>互斥锁是如何起作用的</strong>：<br>在对循环数组buf中的数据进行入队和出队操作时，必须先获取互斥锁，才能操作channel数据。</p><h2 id="98-99-分布式锁有哪些？如何用channel实现？"><a href="#98-99-分布式锁有哪些？如何用channel实现？" class="headerlink" title="98/99. 分布式锁有哪些？如何用channel实现？"></a>98/99. 分布式锁有哪些？如何用channel实现？</h2><p><strong>基于数据库的分布式锁</strong></p><p>使用数据库的事务特性来实现分布式锁，通过在数据库中创建一个唯一索引或者唯一约束来保证锁的唯一性。</p><p><strong>基于Redis的分布式锁</strong></p><p>使用 Redis 提供的 SETNX（SET if Not eXists）指令，可以在 Redis 中创建一个分布式锁。</p><p><strong>基于ZooKeeper的分布式锁</strong></p><p>使用 ZooKeeper 提供的临时有序节点和监视机制，可以实现分布式锁。</p><p><strong>基于etcd的分布式锁</strong></p><p>使用 etcd 提供的分布式锁实现，可以实现分布式系统中的互斥访问。</p><p><strong>基于Go语言的channel实现</strong></p><p>使用 Go 语言的 channel 作为同步机制，在分布式环境下也可以实现互斥访问</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lockCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">1</span>) <span class="comment">// 带缓冲的 channel，容量为1表示只能同时有一个 Goroutine 获取到锁</span></span><br><span class="line">locked = <span class="literal">false</span>                 <span class="comment">// 标记是否已经获取到锁</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acquireLock</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> lockCh &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</span><br><span class="line">locked = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">releaseLock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> locked &#123;</span><br><span class="line">&lt;-lockCh</span><br><span class="line">locked = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> acquireLock() &#123;</span><br><span class="line"><span class="keyword">defer</span> releaseLock()</span><br><span class="line"><span class="comment">// 临界区代码</span></span><br><span class="line">fmt.Println(<span class="string">"Lock acquired!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Failed to acquire lock"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="174-go-里的-syncLock-和-channel-的性能区别"><a href="#174-go-里的-syncLock-和-channel-的性能区别" class="headerlink" title="174. go 里的 syncLock 和 channel 的性能区别"></a>174. go 里的 syncLock 和 channel 的性能区别</h2><h2 id="134-channel实现一个排序算法"><a href="#134-channel实现一个排序算法" class="headerlink" title="134. channel实现一个排序算法"></a>134. channel实现一个排序算法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(nums []<span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++ &#123;</span><br><span class="line">swapped := <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>] &#123;</span><br><span class="line">nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">swapped = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !swapped &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ch &lt;- <span class="number">1</span> <span class="comment">// 排序完成，向通道发送信号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> bubbleSort(nums[:<span class="built_in">len</span>(nums)/<span class="number">2</span>], ch) <span class="comment">// 在一个 Goroutine 中排序前半部分</span></span><br><span class="line"><span class="keyword">go</span> bubbleSort(nums[<span class="built_in">len</span>(nums)/<span class="number">2</span>:], ch) <span class="comment">// 在另一个 Goroutine 中排序后半部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待两个 Goroutine 完成</span></span><br><span class="line">&lt;-ch</span><br><span class="line">&lt;-ch</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序数组</span></span><br><span class="line">merged := merge(nums[:<span class="built_in">len</span>(nums)/<span class="number">2</span>], nums[<span class="built_in">len</span>(nums)/<span class="number">2</span>:])</span><br><span class="line">fmt.Println(merged)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(left, right []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(left)+<span class="built_in">len</span>(right))</span><br><span class="line">i, j, k := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(left) &amp;&amp; j &lt; <span class="built_in">len</span>(right) &#123;</span><br><span class="line"><span class="keyword">if</span> left[i] &lt;= right[j] &#123;</span><br><span class="line">result[k] = left[i]</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[k] = right[j]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(left) &#123;</span><br><span class="line">result[k] = left[i]</span><br><span class="line">i++</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="built_in">len</span>(right) &#123;</span><br><span class="line">result[k] = right[j]</span><br><span class="line">j++</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="202-channel-实现一个限流器"><a href="#202-channel-实现一个限流器" class="headerlink" title="202. channel 实现一个限流器"></a>202. channel 实现一个限流器</h2><h2 id="473-channel的ring-buffer"><a href="#473-channel的ring-buffer" class="headerlink" title="473. channel的ring buffer"></a>473. channel的ring buffer</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/gochannelringbuffer.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>适用FIFO，recvx 指向最早被读取的数 据，sendx 指向再次写入时插入的位置</p><h1 id="go的同步库"><a href="#go的同步库" class="headerlink" title="go的同步库"></a>go的同步库</h1><h2 id="15-sync-waitgroup的坑"><a href="#15-sync-waitgroup的坑" class="headerlink" title="15. sync.waitgroup的坑"></a>15. sync.waitgroup的坑</h2><p>① Add一个负数</p><p>如果计数器的值小于0会直接panic</p><p>② Add在Wait之后调用</p><p>比如一些子协程开头调用Add结束调用Wait，这些 Wait无法阻塞子协程。正确做法是在开启子协程之前先Add特定的值。</p><p>③ 未置为0就重用</p><p>WaitGroup可以完成一次编排任务，计数值降为0后可以继续被其他任务所用，但是不要在还没使用完的时候就用于其他任务，这样由于带着计数值，很可能出问题。</p><p>④ 复制waitgroup</p><p>WaitGroup有nocopy字段，不能被复制。也意味着WaitGroup不能作为函数的参数。</p><h2 id="18-读写锁怎么实现的"><a href="#18-读写锁怎么实现的" class="headerlink" title="18. 读写锁怎么实现的"></a>18. 读写锁怎么实现的</h2><ol><li>读写锁内部是通过互斥锁实现的,主要应用于写操作少，读操作多的场景。</li><li>基于四条规则实现</li></ol><ul><li>写锁需要阻塞写锁：一个协程拥有写锁时，其他协程写锁定需要阻塞；</li><li>写锁需要阻塞读锁：一个协程拥有写锁时，其他协程读锁定需要阻塞；</li><li>读锁需要阻塞写锁：一个协程拥有读锁时，其他协程写锁定需要阻塞；</li><li>读锁不能阻塞读锁：一个协程拥有读锁时，其他协程也可以拥有读锁。<h2 id="114-mutex-如何处理正常和饥饿状态？rwmutex中写操作如何处理写操作阻止读操作"><a href="#114-mutex-如何处理正常和饥饿状态？rwmutex中写操作如何处理写操作阻止读操作" class="headerlink" title="114. mutex 如何处理正常和饥饿状态？rwmutex中写操作如何处理写操作阻止读操作"></a>114. mutex 如何处理正常和饥饿状态？rwmutex中写操作如何处理写操作阻止读操作</h2></li></ul><p><strong>正常模式和饥饿状态：</strong></p><ul><li>正常状态下，Mutex 的锁是公平的，当一个 Goroutine 尝试获取锁时，如果锁已经被其他 Goroutine 持有，那么它将被放入一个等待队列中，直到锁被释放。</li><li>饥饿状态指的是某些 Goroutine 一直无法获得锁，而其他 Goroutine 不断获得锁的情况。在 Go 中，sync.Mutex 并没有专门的机制来处理饥饿状态。如果出现饥饿状态，通常是由于程序逻辑设计不合理导致的，可能需要重新考虑并发结构和资源的设计。</li></ul><p><strong>读写操作</strong></p><ul><li>如果一个 Goroutine 持有写锁，那么其他 Goroutine 将无法获取读锁，直到写锁被释放。这种机制保证了在写操作进行时，不会有其他 Goroutine 进行并发的读取操作，从而避免了数据的并发写入。</li><li></li></ul><h2 id="33-go的锁是可重入的吗"><a href="#33-go的锁是可重入的吗" class="headerlink" title="33. go的锁是可重入的吗"></a>33. go的锁是可重入的吗</h2><p><strong>可重入锁</strong>（也称为递归锁）是指允许同一个线程或 Goroutine 多次获取同一个锁，而不会发生死锁的情况。这在一些场景下是很有用的，比如在一个函数中多次调用其他需要锁保护的函数</p><p><strong>但是go的sync.Mutex不是可重入。</strong></p><h2 id="210-如何检测死锁的？"><a href="#210-如何检测死锁的？" class="headerlink" title="210. 如何检测死锁的？"></a>210. 如何检测死锁的？</h2><ul><li>go vet 进行静态分析</li><li>go run/build -race 可以检测死锁，在编译好静态文件后</li></ul><h2 id="211-怎么处理锁分段"><a href="#211-怎么处理锁分段" class="headerlink" title="211. 怎么处理锁分段"></a>211. 怎么处理锁分段</h2><h2 id="226-sync-mutex的底层实现（Linux）"><a href="#226-sync-mutex的底层实现（Linux）" class="headerlink" title="226. sync.mutex的底层实现（Linux）"></a>226. sync.mutex的底层实现（Linux）</h2><ul><li>实现可能因操作系统和硬件平台而异</li><li>使用 pthreads 库（POSIX 线程库）中的互斥锁实现。</li><li>这是一个用户态的锁，它会使用操作系统提供的系统调用来进行加锁和解锁</li><li>mutex维护一个state，类型是int32</li></ul><h3 id="提供了两种锁定方式：阻塞锁和自旋锁"><a href="#提供了两种锁定方式：阻塞锁和自旋锁" class="headerlink" title="提供了两种锁定方式：阻塞锁和自旋锁"></a>提供了两种锁定方式：阻塞锁和自旋锁</h3><ul><li>阻塞锁：当一个 Goroutine 尝试获取一个被其他 Goroutine 持有的锁时，它会被阻塞，直到锁被释放。</li><li>自旋锁：自旋锁是一种非阻塞的锁机制，在尝试获取锁时，如果锁已经被其他 Goroutine 持有，它会在一段时间内快速尝试获取锁，而不是被阻塞。如果在一定时间内无法获取到锁，那么它会转为阻塞模式。</li></ul><h3 id="mutex允许自旋的条件是什么【执行状态的M个数-lt-mapprocs】"><a href="#mutex允许自旋的条件是什么【执行状态的M个数-lt-mapprocs】" class="headerlink" title="mutex允许自旋的条件是什么【执行状态的M个数&lt; mapprocs】"></a>mutex允许自旋的条件是什么【执行状态的M个数&lt; mapprocs】</h3><p>开发者可以使用 runtime.GOMAXPROCS() 函数来设置 Goroutine 的最大并发数，从而影响自旋锁的行为。</p><h1 id="goroutine使用"><a href="#goroutine使用" class="headerlink" title="goroutine使用"></a>goroutine使用</h1><h2 id="20-两个goroutine交替打印字母和数字"><a href="#20-两个goroutine交替打印字母和数字" class="headerlink" title="20. 两个goroutine交替打印字母和数字"></a>20. 两个goroutine交替打印字母和数字</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">limit := <span class="number">26</span></span><br><span class="line"></span><br><span class="line">numChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">charChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">mainChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">charChan &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; limit; i++ &#123;</span><br><span class="line">&lt;-charChan</span><br><span class="line">fmt.Printf(<span class="string">"%c\n"</span>, <span class="string">'a'</span>+i)</span><br><span class="line">numChan &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; limit; i++ &#123;</span><br><span class="line">&lt;-numChan</span><br><span class="line">fmt.Println(i)</span><br><span class="line">charChan &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">mainChan &lt;- <span class="number">1</span></span><br><span class="line">&#125;()</span><br><span class="line">&lt;-mainChan</span><br><span class="line"><span class="built_in">close</span>(charChan)</span><br><span class="line"><span class="built_in">close</span>(numChan)</span><br><span class="line"><span class="built_in">close</span>(mainChan)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="26-为什么不要大量使用goroutine"><a href="#26-为什么不要大量使用goroutine" class="headerlink" title="26. 为什么不要大量使用goroutine"></a>26. 为什么不要大量使用goroutine</h2><ul><li>上下文切换，开销变大</li><li>可能会存在内存泄漏的问题，得<br>要根据具体的情况来评估并发的需求，避免不必要的并发，以免引入不必要的复杂性和潜在的问题。</li></ul><h3 id="协程池如何实现-worker"><a href="#协程池如何实现-worker" class="headerlink" title="协程池如何实现 worker"></a>协程池如何实现 worker</h3><h2 id="40-for-循环多次执行goroutine-有什么坑？"><a href="#40-for-循环多次执行goroutine-有什么坑？" class="headerlink" title="40. for 循环多次执行goroutine 有什么坑？"></a>40. for 循环多次执行goroutine 有什么坑？</h2><ul><li>go支持闭包， 如果用了循环的这个i，里面的变量就可能出错，用临时变量的副本比较好。</li><li>Goroutine 是异步执行的，它们可能会在循环变量发生变化之后才开始执行，导致不确定的结果</li></ul><h2 id="48-如果要等待所有goroutine结束，怎么做？【使用waitgroup】"><a href="#48-如果要等待所有goroutine结束，怎么做？【使用waitgroup】" class="headerlink" title="48. 如果要等待所有goroutine结束，怎么做？【使用waitgroup】"></a>48. 如果要等待所有goroutine结束，怎么做？【使用waitgroup】</h2><h2 id="55-goroutine为什么轻量"><a href="#55-goroutine为什么轻量" class="headerlink" title="55. goroutine为什么轻量"></a>55. goroutine为什么轻量</h2><p><strong>独立的栈空间</strong> 每个 Goroutine 都有自己独立的栈空间，相对于传统的线程来说，Goroutines 的栈空间通常会小很多。这使得创建和销毁 Goroutines 更加快速和节省内存。</p><p><strong>灵活的调度器</strong> Go 的运行时（runtime）包含了一个高效的调度器，它可以在多个操作系统线程上调度 Goroutines，以便充分利用多核处理器的优势。这使得在单个程序中可以同时执行大量的 Goroutines，而不会导致线程过度切换和资源浪费。</p><p><strong>快速的启动和停止</strong> 相对于传统的线程，创建和销毁 Goroutines 更加快速。这使得在需要短暂执行某些任务时，使用 Goroutines 更为合适。</p><p><strong>共享的堆空间</strong> 所有 Goroutines 共享相同的堆空间，这意味着它们可以相对容易地共享数据，而不需要显式的同步机制。</p><p><strong>通信通过通道</strong> Goroutines 之间的通信主要依赖于通道（channel），它们提供了一种安全且高效的方式来传递数据。通过通道，可以实现 Goroutines 之间的同步和数据传递，而无需显式的锁。</p><p><strong>自动的垃圾回收</strong> Go 具有垃圾回收机制，它会自动管理内存的分配和释放，使得开发者无需手动管理内存，降低了并发程序中内存泄漏的风险。</p><h2 id="85-使用两个channel实现a-b"><a href="#85-使用两个channel实现a-b" class="headerlink" title="85. 使用两个channel实现a+b"></a>85. 使用两个channel实现a+b</h2><h2 id="92-goroutine的实现方式"><a href="#92-goroutine的实现方式" class="headerlink" title="92. goroutine的实现方式"></a>92. goroutine的实现方式</h2><h2 id="100-并行goroutine如何实现"><a href="#100-并行goroutine如何实现" class="headerlink" title="100. 并行goroutine如何实现"></a>100. 并行goroutine如何实现</h2><h2 id="111-父-goroutine-退出，如何使得子goroutine也退出【waitgroup-用channel-，defer】"><a href="#111-父-goroutine-退出，如何使得子goroutine也退出【waitgroup-用channel-，defer】" class="headerlink" title="111. 父 goroutine 退出，如何使得子goroutine也退出【waitgroup 用channel ，defer】"></a>111. 父 goroutine 退出，如何使得子goroutine也退出【waitgroup 用channel ，defer】</h2><ul><li>父 Goroutine 退出时，只要main不退出，所有的子 Goroutines 不会强制关闭</li></ul><h1 id="Go的GC机制"><a href="#Go的GC机制" class="headerlink" title="Go的GC机制"></a>Go的GC机制</h1><h2 id="24-go的gc什么是否触发"><a href="#24-go的gc什么是否触发" class="headerlink" title="24. go的gc什么是否触发"></a>24. go的gc什么是否触发</h2><p><strong>主动触发(手动触发)</strong>，通过调用 runtime.GC 来触发GC，此调用阻塞式地等待当前GC运行完毕。</p><p><strong>被动触发</strong>，分为两种方式：</p><ul><li>使用步调（Pacing）算法，其核心思想是控制内存增长的比例,每次内存分配时检查当前内存分配量是否已达到阈值（环境变量GOGC）：默认100%，即当内存扩大一倍时启用GC。</li><li>使用系统监控，当超过两分钟没有产生任何GC时，强制触发 GC。</li></ul><h2 id="148-Go-语言什么时候垃圾回收，写代码时，如何减少对象分配"><a href="#148-Go-语言什么时候垃圾回收，写代码时，如何减少对象分配" class="headerlink" title="148. Go 语言什么时候垃圾回收，写代码时，如何减少对象分配"></a>148. Go 语言什么时候垃圾回收，写代码时，如何减少对象分配</h2><p><strong>对象池</strong>：可以使用 sync.Pool 或者自定义对象池来重用对象，避免频繁分配和释放。</p><p><strong>必要时使用数组而不是切片</strong>：如果你知道元素数量固定，可以使用数组而不是切片，因为切片底层数组可能会导致对象分配。</p><p><strong>避免逃逸</strong>：逃逸发生在编译器无法确定一个变量的生命周期时，变量将会在堆上分配。尽量避免函数内部的变量逃逸到堆上</p><p><strong>使用内置函数</strong>：Go 提供了一些内置函数（如 append、copy）来处理切片，它们会在底层做一些优化，避免不必要的分配。</p><h2 id="176-Golang-内存分配和管理"><a href="#176-Golang-内存分配和管理" class="headerlink" title="176. Golang 内存分配和管理"></a>176. Golang 内存分配和管理</h2><p>Go语言内置运行时（就是runtime），抛弃了传统的内存分配方式，改为自主管理。这样可以自主地实现更好的内存使用模式，比如内存池、预分配等等。这样，不会每次内存分配都需要进行系统调用。</p><p>Golang运行时的内存分配算法主要源自 Google 为 C 语言开发的TCMalloc算法，全称Thread-Caching Malloc。</p><p>核心思想就是把内存分为多级管理，从而降低锁的粒度。它将可用的堆内存采用二级分配的方式进行管理：每个线程都会自行维护一个独立的内存池，进行内存分配时优先从该内存池中分配，当内存池不足时才会向全局内存池申请，以避免不同线程对全局内存池的频繁竞争。</p><h3 id="管理如何管理？"><a href="#管理如何管理？" class="headerlink" title="管理如何管理？"></a>管理如何管理？</h3><p>Go自带GC，可以自动回收垃圾，对比C语言不用malloc申请内存及free释放，Go的GC采取三色标记法动态；</p><p>Go自动分配内存，开发者可以不用关注堆、栈，Go在编译阶段会做变量的生命周期分析做逃逸分析，自动将变量分配在堆或栈上。</p><h2 id="354-go的内存分配机制"><a href="#354-go的内存分配机制" class="headerlink" title="354. go的内存分配机制"></a>354. go的内存分配机制</h2><p>Go 的内存分配借鉴了 Google 的 TCMalloc 分配算法，其核心思想是内存池 + 多级对象管理。内存池主要是预先分配内存，减少向系统申请的频率；多级对象有：mheap、mspan、arenas、mcentral、mcache。<br>它们以 mspan 作为基本分配单位。具体的分配逻辑如下：</p><ul><li>当要分配大于 32K 的对象时，从 mheap 分配。</li><li>当要分配的对象小于等于 32K 大于 16B 时，从 P 上的 mcache 分配，如果 mcache 没有内存，则从 mcentral 获取，如果 mcentral 也没有，则向 mheap 申请，如果 mheap 也没有，则从操作系统申请内存。</li><li>当要分配的对象小于等于 16B 时，从 mcache 上的微型分配器上分配。<h2 id="324-go的内存分配机制中，有mcentral为什么要mcache"><a href="#324-go的内存分配机制中，有mcentral为什么要mcache" class="headerlink" title="324. go的内存分配机制中，有mcentral为什么要mcache"></a>324. go的内存分配机制中，有mcentral为什么要mcache</h2></li></ul><h2 id="177-如何避免内存逃逸【合理用指针，设定slice长度】"><a href="#177-如何避免内存逃逸【合理用指针，设定slice长度】" class="headerlink" title="177. 如何避免内存逃逸【合理用指针，设定slice长度】"></a>177. 如何避免内存逃逸【合理用指针，设定slice长度】</h2><ol><li>不要盲目使用变量指针作为参数，虽然减少了复制，但变量逃逸的开销更大。</li><li>预先设定好slice长度，避免频繁超出容量，重新分配。</li><li>一个经验是，指针指向的数据大部分在堆上分配的，请注意。</li></ol><p>出现内存逃逸的情况有：</p><ol><li><p>发送指针或带有指针的值到channel，因为编译时候无法知道那个goroutine会在channel接受数据，编译器无法知道什么时候释放。</p></li><li><p>在一个切片上存储指针或带指针的值。比如[]*string，导致切片内容逃逸，其引用值一直在堆上。</p></li><li><p>切片的append导致超出容量，切片重新分配地址，切片背后的存储基于运行时的数据进行扩充，就会在堆上分配。</p></li><li><p>调用接口类型时，接口类型的方法调用是动态调度，实际使用的具体实现只能在运行时确定，如一个接口类型为io.Reader的变量r，对r.Read(b)的调用将导致r的值和字节片b的后续转义并因此分配到堆上。</p></li><li><p>在方法内把局部变量指针返回，被外部引用，其生命周期大于栈，导致内存溢出。</p><h2 id="237-gc和-delete-free-有什么区别，优势？"><a href="#237-gc和-delete-free-有什么区别，优势？" class="headerlink" title="237. gc和 delete free 有什么区别，优势？"></a>237. gc和 delete free 有什么区别，优势？</h2></li></ol><ul><li>delete free是手动释放的，一有忘记的就可能导致内存泄漏，产生内存碎片</li><li>gc的话是自动释放堆的内存，<strong>能有效避免内存泄漏和内存碎片</strong>，没有垃圾回收的情况下，程序员可能需要手动释放不再使用的内存，以避免内存碎片的问题<ul><li>内存碎片是指分配在堆上的内存块中，由于频繁的分配和释放操作，导致堆中的可用内存呈现出碎片化的状态，使得大块的连续内存难以分配。</li></ul></li></ul><h2 id="355-go的性能调优是怎么做的"><a href="#355-go的性能调优是怎么做的" class="headerlink" title="355. go的性能调优是怎么做的"></a>355. go的性能调优是怎么做的</h2><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><p>A、将小对象合并成结构体一次分配，减少内存分配次数</p><p>Go runtime底层采用内存池机制，每个span大小为4k，同时维护一个cache。cache有一个0到n的list数组，list数组的每个单元挂载的是一个链表，链表的每个节点就是一块可用的内存块，同一链表中的所有节点内存块都是大小相等的；但是不同链表的内存大小是不等的，即list数组的一个单元存储的是一类固定大小的内存块，不同单元里存储的内存块大小是不等的。cache缓存的是不同类大小的内存对象，申请的内存大小最接近于哪类缓存内存块时，就分配哪类内存块。当cache不够时再向spanalloc中分配。</p><p>B、缓存区内容一次分配足够大小空间，并适当复用</p><p>在协议编解码时，需要频繁地操作[]byte，可以使用bytes.Buffer或其它byte缓存区对象。<br>bytes.Buffer等通过预先分配足够大的内存，避免当增长时动态申请内存，减少内存分配次数。对于byte缓存区对象需要考虑适当地复用。<br>C、slice和map采make创建时，预估大小指定容量<br>slice和map与数组不一样，不存在固定空间大小，可以根据增加元素来动态扩容。<br>slice初始会指定一个数组，当对slice进行append等操作时，当容量不够时，会自动扩容：<br>如果新的大小是当前大小2倍以上，则容量增涨为新的大小；<br>否则循环以下操作：如果当前容量小于1024，按2倍增加；否则每次按当前容量1/4增涨，直到增涨的容量超过或等新大小。<br>map的扩容比较复杂，每次扩容会增加到上次容量的2倍。map的结构体中有一个buckets和oldbuckets，用于实现增量扩容：<br>正常情况下，直接使用buckets，oldbuckets为空；<br>如果正在扩容，则oldbuckets不为空，buckets是oldbuckets的2倍，<br>因此，建议初始化时预估大小指定容量</p><p>D、长调用栈避免申请较多的临时对象</p><p>Goroutine的调用栈默认大小是4K（1.7修改为2K），采用连续栈机制，当栈空间不够时，Go runtime会自动扩容：<br>当栈空间不够时，按2倍增加，原有栈的变量会直接copy到新的栈空间，变量指针指向新的空间地址；<br>退栈会释放栈空间的占用，GC时发现栈空间占用不到1/4时，则栈空间减少一半。<br>比如栈的最终大小2M，则极端情况下，就会有10次的扩栈操作，会带来性能下降。<br>因此，建议控制调用栈和函数的复杂度，不要在一个goroutine做完所有逻辑；如的确需要长调用栈，而考虑goroutine池化，避免频繁创建goroutine带来栈空间的变化。</p><p>E、避免频繁创建临时对象</p><p>Go在GC时会引发stop the world，即整个情况暂停。Go1.8最坏情况下GC为100us。但暂停时间还是取决于临时对象的个数，临时对象数量越多，暂停时间可能越长，并消耗CPU。<br>因此，建议GC优化方式是尽可能地减少临时对象的个数：尽量使用局部变量；所多个局部变量合并一个大的结构体或数组，减少扫描对象的次数，一次回尽可能多的内存。</p><h3 id="并发优化"><a href="#并发优化" class="headerlink" title="并发优化"></a>并发优化</h3><p>A、高并发的任务处理使用goroutine池<br>Goroutine虽然轻量，但对于高并发的轻量任务处理，频繁来创建goroutine来执行，执行效率并不会太高，因为：过多的goroutine创建，会影响go runtime对goroutine调度，以及GC消耗；高并发时若出现调用异常阻塞积压，大量的goroutine短时间积压可能导致程序崩溃。<br>B、避免高并发调用同步系统接口<br>goroutine的实现，是通过同步来模拟异步操作。<br>网络IO、锁、channel、Time.sleep、基于底层系统异步调用的Syscall操作并不会阻塞go runtime的线程调度。<br>本地IO调用、基于底层系统同步调用的Syscall、CGo方式调用C语言动态库中的调用IO或其它阻塞会创建新的调度线程。<br>网络IO可以基于epoll的异步机制（或kqueue等异步机制），但对于一些系统函数并没有提供异步机制。例如常见的posix api中，对文件的操作就是同步操作。虽有开源的fileepoll来模拟异步文件操作。但Go的Syscall还是依赖底层的操作系统的API。系统API没有异步，Go也做不了异步化处理。<br>因此，建议：把涉及到同步调用的goroutine，隔离到可控的goroutine中，而不是直接高并的goroutine调用。<br>C、高并发时避免共享对象互斥<br>传统多线程编程时，当并发冲突在4~8线程时，性能可能会出现拐点。Go推荐不通过共享内存来通信，Go创建goroutine非常容易，当大量goroutine共享同一互斥对象时，也会在某一数量的goroutine出在拐点。<br>因此，建议：goroutine尽量独立，无冲突地执行；若goroutine间存在冲突，则可以采分区来控制goroutine的并发个数，减少同一互斥对象冲突并发数。</p><h3 id="其它优化"><a href="#其它优化" class="headerlink" title="其它优化"></a>其它优化</h3><p>A、避免使用CGO或者减少CGO调用次数<br>GO可以调用C库函数，但Go带有垃圾收集器且Go的栈动态增涨，无法与C无缝地对接。Go的环境转入C代码执行前，必须为C创建一个新的调用栈，把栈变量赋值给C调用栈，调用结束现拷贝回来。调用开销较大，需要维护Go与C的调用上下文，两者调用栈的映射。相比直接的GO调用栈，单纯的调用栈可能有2个甚至3个数量级以上。<br>因此，建议：尽量避免使用CGO，无法避免时，要减少跨CGO的调用次数。<br>B、减少[]byte与string之间转换，尽量采用[]byte来字符串处理<br>GO里面的string类型是一个不可变类型，GO中[]byte与string底层是两个不同的结构，转换存在实实在在的值对象拷贝，所以尽量减少不必要的转化。<br>因此，建议：存在字符串拼接等处理，尽量采用[]byte。<br>C、字符串的拼接优先考虑bytes.Buffer<br>string类型是一个不可变类型，但拼接会创建新的string。GO中字符串拼接常见有如下几种方式：<br>string + 操作 ：导致多次对象的分配与值拷贝<br>fmt.Sprintf ：会动态解析参数，效率好不哪去<br>strings.Join ：内部是[]byte的append<br>bytes.Buffer ：可以预先分配大小，减少对象分配与拷贝<br>因此，建议：对于高性能要求，优先考虑bytes.Buffer，预先分配大小。fmt.Sprintf可以简化不同类型转换与拼</p><h2 id="500-写屏障-插入写屏障-删除写屏障-混合写屏障"><a href="#500-写屏障-插入写屏障-删除写屏障-混合写屏障" class="headerlink" title="500. 写屏障-插入写屏障-删除写屏障-混合写屏障"></a>500. 写屏障-插入写屏障-删除写屏障-混合写屏障</h2><ul><li>混合写屏障继承了插入写屏障的优点，起始无需 STW 打快照，直接并发扫 描垃圾即可；</li><li>混合写屏障继承了删除写屏障的优点，赋值器是黑色赋值器，GC 期间，任 何在栈上创建的新对象，均为黑色。扫描过一次就不需要扫描了，这样就 消除了插入写屏障时期最后 STW 的重新扫描栈；</li><li>混合写屏障扫描精度继承了删除写屏障，比插入写屏障更低，随着带来的 是 GC 过程全程无 STW；</li><li>混合写屏障扫描栈虽然没有 STW，但是扫描某一个具体的栈的时候，还是 要停止这个 goroutine 赋值器的工作（针对一个 goroutine 栈来说，是 暂停扫的，要么全灰，要么全黑哈，原子状态切换）。</li></ul><h2 id="505-gc流程"><a href="#505-gc流程" class="headerlink" title="505. gc流程"></a>505. gc流程</h2><p>GCMark 标记准备阶段，为并发标记做准备工作，启动写屏障</p><p>STWGCMark 扫描标记阶段，与赋值器并发执行，写屏障开启并发</p><p>GCMarkTermination 标记终止阶段，保证一个周期内标记任务完成，停止写屏障</p><p>GCoff 内存清扫阶段，将需要回收的内存归还到堆中，写屏障关闭</p><p>GCoff 内存归还阶段，将过多的内存归还给操作系统，写屏障关闭。</p><h2 id="506-GC是如何调优的"><a href="#506-GC是如何调优的" class="headerlink" title="506. GC是如何调优的"></a>506. GC是如何调优的</h2><h2 id="Go-内存分配机制？"><a href="#Go-内存分配机制？" class="headerlink" title="Go 内存分配机制？"></a>Go 内存分配机制？</h2><h2 id="Go-内存逃逸机制？"><a href="#Go-内存逃逸机制？" class="headerlink" title="Go 内存逃逸机制？"></a>Go 内存逃逸机制？</h2><h2 id="Go-内存对齐机制"><a href="#Go-内存对齐机制" class="headerlink" title="Go 内存对齐机制"></a>Go 内存对齐机制</h2><h2 id="563-waitgroup的底层实现"><a href="#563-waitgroup的底层实现" class="headerlink" title="563. waitgroup的底层实现"></a>563. waitgroup的底层实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A WaitGroup must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> WaitGroup <span class="keyword">struct</span> &#123;</span><br><span class="line"> noCopy noCopy</span><br><span class="line"> state1 [<span class="number">3</span>]<span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="564-cond实现原理"><a href="#564-cond实现原理" class="headerlink" title="564. cond实现原理"></a>564. cond实现原理</h2><h2 id="run-race能用于什么【排查逃逸，死锁，数据竞争等】"><a href="#run-race能用于什么【排查逃逸，死锁，数据竞争等】" class="headerlink" title="run -race能用于什么【排查逃逸，死锁，数据竞争等】"></a>run -race能用于什么【排查逃逸，死锁，数据竞争等】</h2><h1 id="go其他"><a href="#go其他" class="headerlink" title="go其他"></a>go其他</h1><h2 id="17-不重启实现热更新"><a href="#17-不重启实现热更新" class="headerlink" title="17. 不重启实现热更新"></a>17. 不重启实现热更新</h2><p>根据系统的 SIGHUP 信号量，以此信号量触发进程重启，达到热更新的效果。</p><p>热部署我们需要考虑几个能力：</p><ul><li>新进程启动成功，老进程不会有资源残留</li><li>新进程初始化的过程中，服务不会中断</li><li>新进程初始化失败，老进程仍然继续工作</li><li>同一时间，只能有一个更新动作执行<br>监听信号量的方法的环境是在 类 UNIX 系统中，在现在的 UNIX 内核中，允许多个进程同时监听一个端口。在收到 SIGHUP 信号量时，先 fork 出一个新的进程监听端口，同时等待旧进程处理完已经进来的连接，最后杀掉旧进程。</li></ul><p>示例代码，仓库地址：<a href="https://github.com/guowei-gong/tablefilp-example，" target="_blank" rel="noopener">https://github.com/guowei-gong/tablefilp-example，</a> 如果你希望动手来加深印象可以打开看看。</p><h2 id="157-日志框架logrus"><a href="#157-日志框架logrus" class="headerlink" title="157. 日志框架logrus"></a>157. 日志框架logrus</h2><h2 id="go实现stack-和-set"><a href="#go实现stack-和-set" class="headerlink" title="go实现stack 和 set"></a>go实现stack 和 set</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stack <span class="keyword">struct</span> &#123;</span><br><span class="line">    data []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Push</span><span class="params">(item <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    s.data = <span class="built_in">append</span>(s.data, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s.data) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    item := s.data[<span class="built_in">len</span>(s.data)<span class="number">-1</span>]</span><br><span class="line">    s.data = s.data[:<span class="built_in">len</span>(s.data)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span> <span class="title">Add</span><span class="params">(item <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    s[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span> <span class="title">Remove</span><span class="params">(item <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="built_in">delete</span>(s, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span> <span class="title">Contains</span><span class="params">(item <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    _, exists := s[item]</span><br><span class="line">    <span class="keyword">return</span> exists</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="200-项目上线了，但是发现协程-内存泄漏，如何处理"><a href="#200-项目上线了，但是发现协程-内存泄漏，如何处理" class="headerlink" title="200. 项目上线了，但是发现协程/内存泄漏，如何处理"></a>200. 项目上线了，但是发现协程/内存泄漏，如何处理</h2><p>1.goroutine泄漏。<br>2.有一些全局的数据结构意外的挂住了本该释放的对象，虽然goroutine已经退出了，但是这些对象并没有从这类数据结构中删除，导致对象一直被引用，无法被收回。<br>所以发现有内存泄漏的话，具体问题具体分析。</p><h2 id="RPC基础"><a href="#RPC基础" class="headerlink" title="RPC基础"></a>RPC基础</h2><p>讲一下RPC基础：</p><p>RPC的概念<br>RPC（Romote Procedure Call，远程过程调用），作为分布式系统中不同节点之间的通信方式，是分布式系统的基石之一，RPC不是具体的方法，而是一种解决不同服务之间调用的设计。</p><p>基于RPC开发的框架可以称为RPC框架，典型的有谷歌的gRPC、阿里的Dubbo、Facebook的Thrift等，当然成熟的RPC框架还会有服务注册与发现、服务治理、负载均衡等功能。</p><p>RPC的四个要素<br>Client<br>服务调用的发起方</p><p>Client Stub<br>用于存储要调用的服务器地址、以及将要请求的数据信息打包，通过网络请求发送给Server Stub，然后阻塞，直到接受到返回的数据，然后进行解析。</p><p>Server<br>Server，包含要调用的方法</p><p>Server Stub<br>用于接受Client Stub发送的请求数据包并进行解析，完成功能调用，最后将结果进行打包并返回给Client Stub。在没有接受到请求数据包时则处于阻塞状态。</p><p>封装了Client Stub和Server Stub后，从Client的角度来看，似乎和本地调用一样。从Server的角度看，似乎就是客户直接调用。</p><p>RPC的具体通信步骤<br>Client以类似本地调用的方式调Client Stub<br>Client Stub序列化生成消息，然后调用本地操作系统的通信模块， Stub阻塞<br>本地操作系统与远程Server进行通信，消息传输到远程操作系统<br>远程操作系统将消息传递给Server Stub<br>Server Stub进行反序列化，然后调用Server的对应方法<br>Server程序执行方法，将结果传递给Server Stub<br>Server Stub将结果进行序列化，然后传递给Server操作系统<br>Server操作系统将结果传递给Client<br>Client操作系统将其交给Client Stub， Stub从阻塞状态恢复<br>Client Stub对结果进行反序列化，并将值返回给Client程序<br>Client程序获得返回结果</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁的概念其实很简单，就是在操作一个共享变量时，我们先认为多个线程之间没有冲突</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS是乐观锁的一种实现，CAS全称是比较和替换，CAS的操作主要由以下几个步骤组成：</p><ol><li>先查询原始值</li><li>操作时比较原始值是否修改</li><li>如果修改，则操作失败，禁止更新操作，如果没有发生修改，则更新为新值<h3 id="CAS的缺点"><a href="#CAS的缺点" class="headerlink" title="CAS的缺点"></a>CAS的缺点</h3>CAS虽然在低并发量的情况下可以减少系统的开销，但是CAS也有一些问题：</li><li>CPU开销过大问题</li><li>ABA问题</li><li>只能针对一个共享变量<h3 id="CPU开销过大"><a href="#CPU开销过大" class="headerlink" title="CPU开销过大"></a>CPU开销过大</h3>在我们使用CAS时，如果并发量过大，我们的程序有可能会一直自旋，长时间占用CPU资源。<h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3>假设有个共享变量J，原始值为1。</li><li>线程A读取变量J，值为1</li><li>线程B读取变量J，值为1</li><li>线程A变量J+1，CAS成功从1修改为2</li><li>线程C读取变量J，值为2</li><li>线程C将变量J-1，CAS成功从2修改为1</li><li>线程A通过CAS比较和替换，依然可以改为自己想修改的值<br>上述过程，线程B和C已经将变量J的值已经改变了，但是线程A无法发现，依然可以修改共享变量，这就产生了ABA问题。<h3 id="共享变量单一"><a href="#共享变量单一" class="headerlink" title="共享变量单一"></a>共享变量单一</h3>CAS操作单个共享变量的时候可以保证原子的操作，无法操作多个变量。<br>但是在JDK5之后，AtomicReference可以用来保证对象之间的原子性，我们可以把多个对象放入CAS中操作。<h3 id="如何防止CAS的ABA"><a href="#如何防止CAS的ABA" class="headerlink" title="如何防止CAS的ABA"></a>如何防止CAS的ABA</h3>四个字：加标志位（version）。<br>至于标志位可以是自增的数字，也可以是时间戳。通过标志位我们可以精确的知道每次修改。</li></ol><h2 id="go-python-java的协程区别"><a href="#go-python-java的协程区别" class="headerlink" title="go python java的协程区别"></a>go python java的协程区别</h2><h3 id="python协程特点"><a href="#python协程特点" class="headerlink" title="python协程特点"></a>python协程特点</h3><ol><li><p>单线程内切换，适用于IO密集型程序中，能够最大化IO多路复用的效果。</p></li><li><p>没法利用多核。</p></li><li><p>协程间彻底同步，不会并行。不须要考虑数据安全。</p></li><li><p>关键词yield</p><h3 id="go协程特点"><a href="#go协程特点" class="headerlink" title="go协程特点"></a>go协程特点</h3></li><li><p>协程间须要保证数据安全，好比经过channel或锁。</p></li><li><p>能够利用多核并行执行。</p></li><li><p>协程间不彻底同步，能够并行运行，具体要看channel的设计。</p></li><li><p>抢占式调度，可能没法实现公平。</p></li></ol><h2 id="性能排查"><a href="#性能排查" class="headerlink" title="性能排查"></a>性能排查</h2><ol><li>使用性能分析工具（如pprof）来获取详细的性能数据，了解哪些函数或代码段消耗了大量的时间。</li><li>检查缓存、连接、数据库等</li><li>日志里也可能有信息</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用通信，也就是封装内部实现，提供接口的方式来进行相应的操作&lt;/p&gt;
&lt;h2 id=&quot;讲讲go程序的执行过程：预处理，编译、链接、运行&quot;&gt;&lt;a href=&quot;#讲讲go程序的执行过程：预处理，编译、链接、运行&quot; class=&quot;headerlink&quot; title=&quot;讲讲go程序
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/10/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95/"/>
    <id>http://waynamigo.github.io/2023/10/10/面试算法/</id>
    <published>2023-10-10T14:16:44.628Z</published>
    <updated>2023-10-29T16:44:48.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树最大直径-dfs"><a href="#二叉树最大直径-dfs" class="headerlink" title="二叉树最大直径 dfs"></a>二叉树最大直径 dfs</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode* root,<span class="keyword">int</span> &amp;res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = depth(root-&gt;left,res);</span><br><span class="line">        <span class="keyword">int</span> r = depth(root-&gt;right,res);</span><br><span class="line">        res = max(res, l+ r );</span><br><span class="line">        <span class="keyword">return</span> max(l,r)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        depth(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">递归左右子树</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树第k小的元素【没懂，记住了】"><a href="#二叉搜索树第k小的元素【没懂，记住了】" class="headerlink" title="二叉搜索树第k小的元素【没懂，记住了】"></a>二叉搜索树第k小的元素【没懂，记住了】</h2><p>迭代方法，在找到答案后停止，不需要遍历整棵树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode* &gt; nodes;</span><br><span class="line">        <span class="keyword">while</span>(root &amp;&amp; nodes.size() &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root)&#123;</span><br><span class="line">                <span class="built_in">stack</span>.push(root); <span class="comment">//左子树一直进栈</span></span><br><span class="line">                root = root -&gt; left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = <span class="built_in">stack</span>.top();</span><br><span class="line">            <span class="built_in">stack</span>.pop();</span><br><span class="line">            k--;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断树a是否是b的子树"><a href="#判断树a是否是b的子树" class="headerlink" title="判断树a是否是b的子树"></a>判断树a是否是b的子树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) :</span><br><span class="line">        val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode* pRoot1, TreeNode* pRoot2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pRoot1 == <span class="literal">NULL</span> &amp;&amp; pRoot2 != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (pRoot2 == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (pRoot1-&gt;val != pRoot2-&gt;val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> isSubtree(pRoot1-&gt;left, pRoot2-&gt;left) &amp;&amp; isSubtree(pRoot1-&gt;right, pRoot2-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HasSubtree</span><span class="params">(TreeNode* pRoot1, TreeNode* pRoot2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (pRoot1 != <span class="literal">NULL</span> &amp;&amp; pRoot2 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot1-&gt;val == pRoot2-&gt;val) &#123;</span><br><span class="line">            result = isSubtree(pRoot1, pRoot2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!result)</span><br><span class="line">            result = HasSubtree(pRoot1-&gt;left, pRoot2);</span><br><span class="line">        <span class="keyword">if</span> (!result)</span><br><span class="line">            result = HasSubtree(pRoot1-&gt;right, pRoot2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="k个一组翻转链表"><a href="#k个一组翻转链表" class="headerlink" title="k个一组翻转链表"></a>k个一组翻转链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode * <span class="title">reverse</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">    ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode* cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">        ListNode* next;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next =pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        ListNode* newnode=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//必须要</span></span><br><span class="line">        newnode -&gt;next = head;</span><br><span class="line">        ListNode* pre = newnode;</span><br><span class="line">        <span class="comment">//先找需要翻转的前一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;left<span class="number">-1</span> ;i++)&#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur = pre-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;right-left;i++)&#123;</span><br><span class="line">            ListNode* next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next =next-&gt;next;</span><br><span class="line">            next-&gt;next = pre-&gt;next;</span><br><span class="line">            pre-&gt;next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newnode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//哈希表</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;ListNode*,<span class="keyword">int</span>&gt;mp;</span><br><span class="line">        ListNode* cur1=headA;</span><br><span class="line">        <span class="keyword">while</span>(cur1)&#123;</span><br><span class="line">            mp[cur1]++;</span><br><span class="line">            cur1=cur1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* cur2=headB;</span><br><span class="line">        <span class="keyword">while</span>(cur2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[cur2]) <span class="keyword">return</span> cur2;</span><br><span class="line">            cur2=cur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><h2 id="无重复的最长子串"><a href="#无重复的最长子串" class="headerlink" title="无重复的最长子串"></a>无重复的最长子串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; appears;<span class="comment">// 判断是否重复</span></span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>,len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> left =<span class="number">0</span> ;left &lt;len;left++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left!=<span class="number">0</span>)&#123; <span class="comment">// 只要下面的循环扫描一遍，就会来这里left++，</span></span><br><span class="line">            <span class="comment">//说明往右移走了一位，最左边字母删掉</span></span><br><span class="line">                appears.erase(s[left<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(pos &lt; len &amp;&amp; !appears.count(s[pos]))&#123;</span><br><span class="line">                appears.insert(s[pos]);</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res,pos - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断s中是否有字符串st的排列"><a href="#判断s中是否有字符串st的排列" class="headerlink" title="判断s中是否有字符串st的排列"></a>判断s中是否有字符串st的排列</h2><p><a href="https://leetcode.cn/problems/permutation-in-string/" target="_blank" rel="noopener">https://leetcode.cn/problems/permutation-in-string/</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s1.length(), m = s2.length();</span><br><span class="line">    <span class="keyword">if</span> (n &gt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cnt[s1[i] - <span class="string">'a'</span>] -- ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">0</span>; right &lt; m; ++right) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = s2[right] - <span class="string">'a'</span>;</span><br><span class="line">        cnt[x]++;</span><br><span class="line">        <span class="keyword">while</span> (cnt[x] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            cnt[s2[left] - <span class="string">'a'</span>] --;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right - left + <span class="number">1</span> == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h1><h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<span class="comment">//O(n^2)</span></span><br><span class="line">    <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> dp[n];<span class="comment">//dp[i]定义为num数组前i个里面最长的上升子序列长度</span></span><br><span class="line">    <span class="comment">// memset(dp,0,sizeof(dp));</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) dp[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;<span class="comment">//比较i前所有的数，</span></span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;nums[i])&#123;</span><br><span class="line">                dp[i]=dp[j]+<span class="number">1</span> &gt; dp[i] ? dp[j]+<span class="number">1</span> :dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = ans &gt; dp[i]? ans:dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<span class="comment">//O(nlog2n) 抄的评论区</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    dp[i]: 所有长度为i+1的递增子序列中, 最小的那个序列尾数.</span></span><br><span class="line"><span class="comment">    由定义知dp数组必然是一个递增数组, 可以用 maxL 来表示最长递增子序列的长度. </span></span><br><span class="line"><span class="comment">    对数组进行迭代, 依次判断每个数num将其插入dp数组相应的位置:</span></span><br><span class="line"><span class="comment">    1. num &gt; dp[maxL], 表示num比所有已知递增序列的尾数都大, 将num添加入dp</span></span><br><span class="line"><span class="comment">        数组尾部, 并将最长递增序列长度maxL加1</span></span><br><span class="line"><span class="comment">    2. dp[i-1] &lt; num &lt;= dp[i], 只更新相应的dp[i]</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">int</span> maxL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="keyword">int</span> dp[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> num : nums) &#123;</span><br><span class="line">        <span class="comment">// 二分法查找, 也可以调用库函数如binary_search</span></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = maxL;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low+(high-low)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(dp[mid] &lt; num)</span><br><span class="line">                low = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[low] = num;</span><br><span class="line">        <span class="keyword">if</span>(low == maxL)</span><br><span class="line">            maxL++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> text1, <span class="built_in">string</span> text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = text1.size(),n=text2.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i]==text2[j]) dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=max(dp[i][j+<span class="number">1</span>],dp[i+<span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="keyword">int</span> dp[n];</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//设dp[i]为num[i]结尾的前i个数中的最大和，则dp[i]=max(dp[i-1],dp[i-1]+num[i]);</span></span><br><span class="line">    dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> maxn = dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        dp[i]=max(nums[i],dp[i<span class="number">-1</span>]+nums[i]);</span><br><span class="line">        maxn = max(maxn,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长重复子数组"><a href="#最长重复子数组" class="headerlink" title="最长重复子数组"></a>最长重复子数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.size(), m = B.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                dp[i][j] = A[i] == B[j] ? dp[i + <span class="number">1</span>][j + <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                ans = max(ans, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打家劫舍【有限制的dp】"><a href="#打家劫舍【有限制的dp】" class="headerlink" title="打家劫舍【有限制的dp】"></a>打家劫舍【有限制的dp】</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<span class="comment">//dp[i] =max(dp[i-1]跳过这间，dp[i-2]+nums[i])</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> dp[n];</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>]=max(nums[<span class="number">1</span>],nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n ;i++)&#123;</span><br><span class="line">            dp[i]=max(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(dp[n<span class="number">-1</span>],dp[n<span class="number">-2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="第K个最大元素-快排"><a href="#第K个最大元素-快排" class="headerlink" title="第K个最大元素 快排"></a>第K个最大元素 快排</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">quickselect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> nums[k];</span><br><span class="line">        <span class="keyword">int</span> partition = nums[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span> (nums[i] &lt; partition);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span> (nums[j] &gt; partition);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">                swap(nums[i], nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= j)<span class="keyword">return</span> quickselect(nums, l, j, k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> quickselect(nums, j + <span class="number">1</span>, r, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">return</span> quickselect(nums, <span class="number">0</span>, n - <span class="number">1</span>, n - k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;nums, <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= endIndex) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> x = rand() % (endIndex - startIndex + <span class="number">1</span>) + startIndex; <span class="comment">// 基于随机的原则</span></span><br><span class="line">        swap(nums[startIndex], nums[x]);</span><br><span class="line">        <span class="keyword">int</span> firstNum = nums[startIndex];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = startIndex, r = endIndex;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="comment">// 从后往前走，将比第一个小的移到前面</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt;= firstNum) --r;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                nums[l] = nums[r];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从前往后走，将比第一个大的移到后面</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt;= firstNum) ++l;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                nums[r] = nums[l];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[l] = firstNum;</span><br><span class="line">        <span class="comment">// 自顶向下</span></span><br><span class="line">        quickSort(nums, startIndex, l - <span class="number">1</span>);</span><br><span class="line">        quickSort(nums, l + <span class="number">1</span>, endIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sortArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        quickSort(nums, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="built_in">list</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; cachelist;<span class="comment">//实际缓存列表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">decltype</span>(cachelist.begin())&gt; cache;</span><br><span class="line">    <span class="comment">//保存的缓存的迭代器</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!cache.count(key))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;"cend:"&lt;&lt;  -&gt;first;</span></span><br><span class="line">        <span class="comment">// 将缓存中的键值对移动到缓存列表的末尾，表示最近使用</span></span><br><span class="line">        cachelist.splice(cachelist.cend(), cachelist, cache[key]);</span><br><span class="line">        <span class="keyword">return</span> cache[key]-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cache.count(key))&#123;<span class="comment">//缓存列表里没有出现要进入的k</span></span><br><span class="line">            <span class="comment">//如果满了，就把最前删掉，然后加到链表尾</span></span><br><span class="line">            <span class="keyword">if</span>(cachelist.size()==capacity)&#123;</span><br><span class="line">                <span class="comment">// 移除最久未使用的键值对</span></span><br><span class="line">                cache.erase(cachelist.front().first); </span><br><span class="line">                <span class="comment">// 从缓存映射中删除对应的键</span></span><br><span class="line">                cachelist.pop_front(); <span class="comment">// 从缓存列表中删除最前面的元素</span></span><br><span class="line">            &#125;</span><br><span class="line">            cache[key] = cachelist.emplace(cachelist.cend(),key,value);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//缓存列表里有这个新来的任务</span></span><br><span class="line">            <span class="comment">//根据key更新任务内容</span></span><br><span class="line">            cache[key]-&gt;second = value;</span><br><span class="line">            <span class="comment">//把这个迭代器插入队尾</span></span><br><span class="line">            cachelist.splice(cachelist.cend(),cachelist,cache[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; permute(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;visited(nums.size(),<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;perm;</span><br><span class="line">        dfs(ans,nums,visited,perm);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; ans,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&amp; visited,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; perm)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size()==perm.size())&#123;</span><br><span class="line">            ans.push_back(perm);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                perm.push_back(nums[i]);</span><br><span class="line">                visited[i]=<span class="literal">true</span>;</span><br><span class="line">                dfs(ans,nums,visited,perm);</span><br><span class="line">                perm.pop_back();</span><br><span class="line">                visited[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h1 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/09/%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE/"/>
    <id>http://waynamigo.github.io/2023/10/09/面试项目/</id>
    <published>2023-10-08T16:33:41.296Z</published>
    <updated>2023-10-30T07:16:14.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go数字孪生"><a href="#Go数字孪生" class="headerlink" title="Go数字孪生"></a>Go数字孪生</h2><p>项目背景：企业合作项目。负责设计开发数据采集与指令下发模块，实现车间物理设备与Unity模拟软件的实时状态映射。</p><p>这个项目是老师和<strong>科大讯飞与农科信创</strong>这个公司合作的一个数字化管理系统，这个项目虽然叫数字孪生但是您可以把它当作一个游戏前端+共享文档来看，客户端程序我们用的unity开发的，农科信创提供的了数字资产和传感器，科大讯飞提供了一部分深度学习模型，做的事包括产量预估、病虫害表型鉴定、采摘车的三维图像定位（通过ROS控制）、异常人员检测，这个项目我做的事就基于go做的后端，一个是监听、收集和预处理数据发送到模型端，一个是提供给unity接口支持多个用户去操作边缘设备（调整温度光照，要更改采摘车的采摘顺序），将模型处理后的统计数据、实体状态呈现给前端。</p><p>项目难点：根据传感器文档构建指令，指令是通过状态写入协议来进行的；处理多个用户操作同一个对象的冲突问题。</p><!-- ： 传感器数据发送到预测模型，处理的结果上传数据库，用户在unity客户端的指令，我要发送到边缘设备上更改前端unity可视化的作用。 --><ul><li>后端主要基于Gin和Zinx开发，连接Unity端收发实时数据，提供用户控制端Web服务接口</li><li>使用gRPC对序列化后的对象消息进行流式传输，保证服务器端与Unity端的高效同步</li><li>使用MongoDB存储服务器端的统计数据、历史设备指令与数字工厂状态的日志文件提供历史状态查询与回滚操作</li></ul><ol><li>gin做的是登陆认证、资产文件上分片上传/拉取功能，存储在mongodb，资产文件用gridFS。以及获取grpc通信的结构体解析成XML的功能，unity前端有一个功能是鼠标移动到实例上就有一个悬浮框显示所有属性</li><li>数据接收模块：传感器都是基于UDP的协议进行上传，频率有高有低，所以对一个传感器go了一个routine，在这个routine里接收解析所需的数据进行解析完，处理成结构体之后，用grpc的stream消息发到GPU服务器上部署的模型来处理。</li><li>用户在unity端的操作和指令下发是用zinx实现的，它是一个TCP长连接框架，然后服务器端去实现温度、土壤、种植区、采摘车这些实体对象与现实状态的同步，（比如控制土壤ph、二氧化碳浓度、控温、光谱开关、采摘车路线修正）包括位置、惯导的方位角，角速度线速度等（用MSO格式封装的报文），在用户端封装的控制指令以bytes的形式用zinx的DataPack封装，封装的控制指令转发到终端设备的service</li><li>如果有多个用户并发要对这个对象操作，在这个处理的goroutine中可能会造成冲突，我们维护了一个对象map，对这个map加锁处理，对于采摘车的话，是单独维护了一个处于三维坐标系下的对象。</li><li>用到channel的场景：一个预测服务中，对发送数据的goroutine是配套的，</li><li>历史状态查询的话，是根据mongo中存储各对象的历史状态，根据时间戳向前端的拉取。</li><li>是做用户在本地对传感器做操作后，连接的控制终端，比如采摘车的路径校准、和毫米波雷达的控制，主要包括DIFOP设备信息输出协议，用户配置写入协议UCWP</li><li>在服务器端连接mongodb，服务器数据收集、统计计算、上传数据库</li></ol><h2 id="Go-轻量聊天APP（Go-Kratos-GPT2）"><a href="#Go-轻量聊天APP（Go-Kratos-GPT2）" class="headerlink" title="Go 轻量聊天APP（Go/Kratos/GPT2）"></a>Go 轻量聊天APP（Go/Kratos/GPT2）</h2><p>项目角色：唯一贡献者<br>项目背景：该软件作为当时学习Go语言微服务框架与组件的个人练手项目。聊天以群组的形式进行，将基于GPT2的bot与聊天室服务拆分成微服务，主要包括用户信息服务、群组管理服务、消息传输服务、GPT会话存储服务四个。</p><ul><li>使用的微服务框架为Kratos，开发组件和工具主要包括Redis/Go-kit/Swagger</li><li>遵循微服务部署流程，微服务使用k8s部署，dlv调试工具，godoc自动化生成文档等</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户表</span><br><span class="line">用户id，密码，密码哈希值，salt</span><br><span class="line">群组表</span><br><span class="line">群组id, 用户id, 权限值</span><br><span class="line">聊天记录表</span><br><span class="line">key：userid, groupid,timestamp做的索引</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h2 id="用户信息服务"><a href="#用户信息服务" class="headerlink" title="用户信息服务"></a>用户信息服务</h2><ul><li>查看个人/他人信息功能</li><li>更改字段功能</li><li>增加删除(注销)功能<!-- - 登陆模块1：初始是获取MAC地址进行的，机器码和id作为key --></li><li>登陆模块：用户输入用户名、密码<ul><li>注册时提供密码，系统为用户生成唯一salt</li><li>将密码的字符串salt与原字符串拼接，得到hash</li><li>数据库存储 hash 和 salt</li><li>登陆时将字符串与salt连接后的到hash’，判断hash’ == hash</li><li>验证正确后，服务端使用jwt机制，进行API调用（库使用的jwt-go</li></ul></li><li>jwt优点<ul><li>更适用CDN: 可以通过内容分发网络请求你服务端的所有资料</li><li>Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li><li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.</li><li>更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</li></ul></li></ul><h2 id="群组管理服务"><a href="#群组管理服务" class="headerlink" title="群组管理服务"></a>群组管理服务</h2><ul><li>邀请加入用户byID</li><li>踢出用户byID<h2 id="消息传输服务"><a href="#消息传输服务" class="headerlink" title="消息传输服务"></a>消息传输服务</h2></li><li>群组以聊天室为单位进行，一个聊天室对应一个Pod</li><li>主要包括ChatRoomClient和ChatRoomServer</li><li>ChatRoomClient 主要负责与前端通信和处理与当前用户相关的信息</li><li>ChatRoomServer 则负责维护所有在线用户信息以及处理消息的分发<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ChatRoomClient <span class="keyword">struct</span> &#123;</span><br><span class="line">    roomId <span class="keyword">int</span></span><br><span class="line">    user User </span><br><span class="line">    conn net.Conn <span class="comment">//与前端维持的通信连接</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ChatRoomServer <span class="keyword">struct</span> &#123;</span><br><span class="line">    clients <span class="keyword">map</span>[<span class="keyword">string</span>]*ChatRoomClient <span class="comment">// 维护一个连接池</span></span><br><span class="line">    rooms   <span class="keyword">map</span>[<span class="keyword">string</span>][]*ChatRoomClient <span class="comment">// 用于维护聊天室与客户端的关系</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SendMessage 方法用于发送消息给聊天室</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ChatRoomClient)</span> <span class="title">SendMessage</span><span class="params">(message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    c.server.BroadcastMessage(c.RoomID, c.UserID, c.UserName, message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Disconnect 方法处理客户端断开连接的情况</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ChatRoomClient)</span> <span class="title">Disconnect</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c.server.RemoveClient(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NewChatRoomServer 方法用于创建一个新的ChatRoomServer对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewChatRoomServer</span><span class="params">()</span> *<span class="title">ChatRoomServer</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;ChatRoomServer&#123;</span><br><span class="line">        clients: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ChatRoomClient),</span><br><span class="line">        rooms:   <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]*ChatRoomClient),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AddClient 方法将一个客户端添加到服务器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ChatRoomServer)</span> <span class="title">AddClient</span><span class="params">(client *ChatRoomClient)</span></span> &#123;</span><br><span class="line">    s.clients[client.ConnectionID] = client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RemoveClient 方法将一个客户端从服务器移除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ChatRoomServer)</span> <span class="title">RemoveClient</span><span class="params">(client *ChatRoomClient)</span></span> &#123;</span><br><span class="line">    <span class="built_in">delete</span>(s.clients, client.ConnectionID)</span><br><span class="line">    <span class="comment">// 在此处也可以将客户端从对应的聊天室中移除</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JoinRoom 方法将一个客户端加入到指定聊天室中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ChatRoomServer)</span> <span class="title">JoinRoom</span><span class="params">(client *ChatRoomClient, roomID <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    s.rooms[roomID] = <span class="built_in">append</span>(s.rooms[roomID], client)</span><br><span class="line">    client.RoomID = roomID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LeaveRoom 方法将一个客户端从指定聊天室中移除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ChatRoomServer)</span> <span class="title">LeaveRoom</span><span class="params">(client *ChatRoomClient, roomID <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    clients := s.rooms[roomID]</span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> clients &#123;</span><br><span class="line">        <span class="keyword">if</span> c.ConnectionID == client.ConnectionID &#123;</span><br><span class="line">            <span class="comment">// 从聊天室中移除客户端</span></span><br><span class="line">            s.rooms[roomID] = <span class="built_in">append</span>(clients[:i], clients[i+<span class="number">1</span>:]...)</span><br><span class="line">            client.RoomID = <span class="string">""</span> <span class="comment">// 将客户端的聊天室ID清空</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BroadcastMessage 方法向指定聊天室内的所有客户端广播消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ChatRoomServer)</span> <span class="title">BroadcastMessage</span><span class="params">(roomID, userID, userName, message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    clients := s.rooms[roomID]</span><br><span class="line">    <span class="keyword">for</span> _, client := <span class="keyword">range</span> clients &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(client *ChatRoomClient)</span></span> &#123;</span><br><span class="line">            <span class="comment">// 在协程中处理消息发送</span></span><br><span class="line">            client.SendMessage(userID, userName, message)</span><br><span class="line">        &#125;(client)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息传输的并发处理和消息分发问题是怎么解决的"><a href="#消息传输的并发处理和消息分发问题是怎么解决的" class="headerlink" title="消息传输的并发处理和消息分发问题是怎么解决的"></a>消息传输的并发处理和消息分发问题是怎么解决的</h3><p>消息发送时，一个客户端的sendmessage用一个goroutine进行</p><ul><li>可能出现的并发安全问题<ol><li>map互斥锁 在 ChatRoomServer 中的 rooms 和 clients 字典是共享的数据结构，多个goroutine可能会同时访问或修改这些数据结构，可能导致竞态条件（race condition）或数据不一致的问题。</li></ol></li></ul><h2 id="kratos进行微服务间的通信"><a href="#kratos进行微服务间的通信" class="headerlink" title="kratos进行微服务间的通信"></a>kratos进行微服务间的通信</h2><p>这些服务的通信都是一些很轻量的元数据，kratos的用protobuf定义的middleware</p><p>gRPC API 进行接口交互，服务架构需要使用统一的元信息（Metadata）传输进行微服务间的传递。 目前 gRPC 中可以携带元信息传递，原理是将元信息放入 HTTP Header 中，这样上游即可收到对应的元信息 信息。 因此在Kratos的设计上，也是通过 HTTP Header 进行传递。在框架中先将元信息包封装成key/value结构，然后携带到 Transport Header 中。</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>创建一个 Registrar（以 consul 为例），将 Registrar 注入进 Kratos 应用实例中，Kratos 会自动完成实例注册和反注册</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    consul <span class="string">"github.com/go-kratos/kratos/contrib/registry/consul/v2"</span></span><br><span class="line">    <span class="string">"github.com/hashicorp/consul/api"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// new consul client</span></span><br><span class="line">client, err := api.NewClient(api.DefaultConfig())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new reg with consul client</span></span><br><span class="line">reg := consul.New(client)</span><br><span class="line"></span><br><span class="line">app := kratos.New(</span><br><span class="line">    <span class="comment">// service-name</span></span><br><span class="line">    kratos.Name(Name),</span><br><span class="line">    kratos.Version(Version),</span><br><span class="line">    kratos.Metadata(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;),</span><br><span class="line">    kratos.Logger(logger),</span><br><span class="line">    kratos.Server(</span><br><span class="line">        hs,</span><br><span class="line">        gs,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// with registrar</span></span><br><span class="line">    kratos.Registrar(reg),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="用的是kratos的负载均衡器"><a href="#用的是kratos的负载均衡器" class="headerlink" title="用的是kratos的负载均衡器"></a>用的是kratos的负载均衡器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Selector <span class="keyword">interface</span> &#123;</span><br><span class="line">  <span class="comment">// Selector 内部维护的服务节点列表通过 Rebalancer 接口来更新</span></span><br><span class="line">  Rebalancer</span><br><span class="line">  <span class="comment">// Select nodes</span></span><br><span class="line">  <span class="comment">// if err == nil, selected and done must not be empty.</span></span><br><span class="line">  Select(ctx context.Context, opts ...SelectOption) </span><br><span class="line">        (selected Node, done DoneFunc, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Rebalancer 实现服务节点变更感知</span></span><br><span class="line"><span class="keyword">type</span> Rebalancer <span class="keyword">interface</span> &#123;</span><br><span class="line">  Apply(nodes []Node)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用的默认的wrr算法 Weighted round robin</p><h2 id="rpc是什么-远程过程调用-和rmi的区别【RMI相当于RPC的一种实现】"><a href="#rpc是什么-远程过程调用-和rmi的区别【RMI相当于RPC的一种实现】" class="headerlink" title="rpc是什么 远程过程调用 和rmi的区别【RMI相当于RPC的一种实现】"></a>rpc是什么 远程过程调用 和rmi的区别【RMI相当于RPC的一种实现】</h2><ul><li><p>RPC (Remote Procedure Call) 采用客户端/服务器方式 (请求/响应)，发送请求到服务器端，服务端执行方法后返回结果。 优点是跨语言跨平台，缺点是编译期无法排错。返回的对象由外部数据表示</p></li><li><p>RMI (Remote Method Invocation) 客户端jvm调用服务端jvm的方法，直接获取远端方法的签名，进行调用。优点是强类型、编译期可检查错误；缺点是只限于java语言。返回的对象可以是java支持的所有对象名。</p></li></ul><p>RPC的代理类stub，将消息序列化为RPCrequest/RPCresponse</p><h2 id="RMI流程原理"><a href="#RMI流程原理" class="headerlink" title="RMI流程原理"></a>RMI流程原理</h2><ul><li><p>定义远程接口<code>interface Rmiiface extends Remote</code></p></li><li><p>实现一个远程接口类<code>MyRemoteObject implements Rmiiface</code></p></li><li><p>服务器端注册和查找远程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Rmiiface remoteObject = <span class="keyword">new</span> MyRemoteObject();</span><br><span class="line">            Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>); <span class="comment">// 默认 RMI 注册表端口号为 1099</span></span><br><span class="line">            registry.bind(<span class="string">"MyRemoteObject"</span>, remoteObject);</span><br><span class="line">            System.out.println(<span class="string">"Server is ready."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端查找注册表来获取远程方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(<span class="string">"localhost"</span>, <span class="number">1099</span>);</span><br><span class="line">            MyRemoteInterface remoteObject = (MyRemoteInterface) registry.lookup(<span class="string">"MyRemoteObject"</span>);</span><br><span class="line">            String response = remoteObject.sayHello();</span><br><span class="line">            System.out.println(response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过JRMP协议来通信</p><h3 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h3><p>基于protobuf序列化协议的通讯协议</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Go数字孪生&quot;&gt;&lt;a href=&quot;#Go数字孪生&quot; class=&quot;headerlink&quot; title=&quot;Go数字孪生&quot;&gt;&lt;/a&gt;Go数字孪生&lt;/h2&gt;&lt;p&gt;项目背景：企业合作项目。负责设计开发数据采集与指令下发模块，实现车间物理设备与Unity模拟软件的实时状态映
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/07/%E5%AE%A1%E7%A8%BF%E6%84%8F%E8%A7%81/"/>
    <id>http://waynamigo.github.io/2023/10/07/审稿意见/</id>
    <published>2023-10-07T11:04:33.723Z</published>
    <updated>2023-10-12T05:35:58.580Z</updated>
    
    <content type="html"><![CDATA[<p>Your paper GRSL-01600-2023 Multi-Stage Synergistic Aggregation Network for Remote Sensing Visual Grounding has been carefully reviewed by the GRSL review panel and found to be unacceptable in its present form. The reviewers did suggest, however, that if completely revised the paper might be found acceptable. We encourage you to revise and resubmit this manuscript as a new paper to GRSL.</p><p><strong><em>If you do decide to resubmit the paper, please include a point-by-point response to the comments of the reviewers along with the new paper in order to expedite its review.  Use the “Submit a Resubmission” link in your author center when you submit the new manuscript.  Your resubmission is due by 05-Jan-2024</em></strong></p><p>Below you will find comments from the review panel. Any attached files that may be referenced with these comments can be accessed in a copy of this decision letter located in your Author Center on ScholarOne Manuscripts.</p><p>Sincerely,<br>Dr. Avik Bhattacharya<br>Editor-in-Chief<br>IEEE Geoscience and Remote Sensing Letters</p><p>Associate Editor Comments:<br>Associate Editor<br>Comments to the Author:<br>According to the comments, the innovation of the proposed method is doubtful. The introduction and detail information of the proposed method is not clear. Besides, this manuscript needs to be further improved in terms of writting.</p><p>Reviewer(s) Comments:<br>Reviewer: 1</p><p>Comments to the Author<br>The authors propose a multi-stage synergistic aggregation network for remote sensing visual grounding to address the correlations between textual semantics and visual information, as well as the dependencies between features and bounding box representations. My major comments are as follows:</p><p>(1) The literature review on remote sensing visual grounding methods is inadequate. I recommend that the authors provide a more comprehensive literature review on remote sensing visual grounding methods.<br>(2) The authors state that existing methods overlooked the crucial dependencies between features and bounding box representations. I cannot understand what these dependencies are. Please add more descriptions to explain them.<br>(3) The authors do not introduce the objective function of the proposed method. Please add the definition of the objective function.<br>(4) The proposed method is complex and not easy to understand. I suggest that the authors make their code publicly available and release their best model to allow for result reproduction. This will greatly influence my decision.<br>(5) There is some inconsistent expression. For example, in Fig. 1, “Query channel Attention” is denoted as “QCA,” and “Cross Attention” is denoted as “CA Layer.” Additionally, the authors usually use “QCB” to refer to “Query Channel Attention” in the context, but in Fig. 1, “QCA” is used, which is confusing.<br>(6) I suggest the authors add a comma or a period at the end of different equations.</p><p>(1) 关于遥感视觉接地方法的文献综述不够充分。我建议作者对遥感视觉接地方法进行更全面的文献综述。<br>(2) 作者指出，现有方法忽略了地物与边界框表示之间的关键依赖关系。我不明白这些依赖关系是什么。请补充说明。<br>(3) 作者没有介绍建议方法的目标函数。请补充目标函数的定义。<br>(4) 建议的方法很复杂，不容易理解。我建议作者公开他们的代码，并发布他们的最佳模型，以便复制结果。这将极大地影响我的决定。<br>(5) 有些表达不一致。例如，在图 1 中，”Query channel Attention “表示为 “QCA”，而 “Cross Attention “表示为 “CA Layer”。此外，作者在上下文中通常使用 “QCB “来指代 “查询通道注意”，但在图 1 中却使用了 “QCA”，这容易引起混淆。<br>(6) 我建议作者在不同等式的末尾加上逗号或句号。</p><p>Reviewer: 2</p><p>Comments to the Author<br>Overall, this is a well-structured paper, but there are several writing issues. The paper focuses on the latest RSVG task and proposes a novel multi-stage synergistic aggregation module that effectively aggregates visual and textual contexts to facilitate the learning of multi-scale multimodal features. However, the introduction of the generative paradigm, which is the innovative aspect, may not be appropriate. The reviewer thinks this manuscript is not acceptable without major revisions.</p><h2 id="standardize-writing-precise-formula-symbols"><a href="#standardize-writing-precise-formula-symbols" class="headerlink" title="standardize writing, precise formula symbols"></a>standardize writing, precise formula symbols</h2><ol><li><p>Is the ‘Auto-Regressive Transformer’ in Figure 1(a) the same module as the ‘Generative Transformer’ in (b)? Please ensure consistent expression. Section II.C is referred to as the ‘Auto-regressive Generative Transformer’.</p></li><li><p>In Section II, the first appearance of the symbol “i” in <i-t>i needs to be explained clearly; it seems inconsistent with the meaning in formulas (2), (3), (4), and (5). In the section “Feature Aggregation,” it is stated that “i presents the i-th stage of aggregation.”.</i-t></p></li><li><p>It is mentioned in the letter that “if there are n queries associated with the same image, then the image forms n samples with these n queries.” And in “The embedding set can be presented as ={[CLS], t1, t2, t3, …, tn},” the symbol “n” is used, which should not represent the same meaning. Formulas (6) and (7) also use “n,” please carefully check and differentiate symbols with different meanings.</p></li><li><p>Section “Transformer Decoder” is poorly written. This section references formulas (9) and (12), but it is clear that formula (12) does not exist. So there is an error, please modify it carefully. What does “Cxy” mean in formula (8)? Does it have the same meaning as “Cxy” in Figure 1(a)? What is the meaning of “kwh”? What is the difference between “Cbins” and “Cˆbins”? What is the difference between “Cxy” and “Cˆxy”? What is “Sc”? What are s1, s2, s3, s4? They are not explained clearly.</p></li><li><p>There is a grammar error: “The result sequence Cˆbins predicted by the decoder can be inverse quantized with (12) to obtain the floating-point result, we use Cbins.” This sentence is incorrect as there are complete sentences before and after the comma. To clarify, this does NOT means expressions in other text are right. Please thoroughly check the grammar in the paper.</p></li><li><p>Several symbols, such as “n,” “k,” etc., are not in italic font. Please carefully check and modify.</p></li><li><p>图 1(a)中的 “自回归变压器 “与(b)中的 “生成变压器 “是同一个模块吗？请确保表述一致。第 II.C 节称为 “自动回归生成变换器”。</p></li><li><p>在第 II 节中，<i-t>i 中第一次出现的符号 “i “需要解释清楚；它似乎与公式 (2)、(3)、(4) 和 (5) 中的含义不一致。在 “特征聚合 “一节中，”i 表示聚合的第 i 个阶段”。</i-t></p></li><li><p>信中提到，”如果有 n 个查询与同一幅图像相关联，那么图像就会与这 n 个查询形成 n 个样本”。而在 “嵌入集可以表示为 ={[CLS], t1, t2, t3, …, tn}”中，使用了符号 “n”，这不应该代表相同的含义。公式 (6) 和 (7) 也使用了 “n”，请仔细检查并区分不同含义的符号。</p></li><li><p>“变压器解码器 “一节写得不好。该节引用了公式 (9) 和 (12)，但显然不存在公式 (12)。因此存在错误，请仔细修改。公式（8）中的 “Cxy “是什么意思？与图 1(a)中的 “Cxy “含义相同吗？kwh” 的含义是什么？Cbins” 和 “Cˆbins” 有什么区别？Cxy” 和 “Cˆxy “有什么区别？什么是 “Sc”？什么是 s1、s2、s3、s4？ 没有解释清楚。</p></li><li><p>有一个语法错误： “解码器预测的结果序列 Cˆbins 可以用（12）进行反量化，得到浮点结果，我们使用 Cbins。这句话不正确，因为逗号前后都有完整的句子。需要说明的是，这并不意味着其他文本中的表达是正确的。请彻底检查论文中的语法。</p></li><li><p>有几个符号，如 “n”、”k “等，没有用斜体字。请仔细检查并修改。</p></li></ol><h2 id="novelty"><a href="#novelty" class="headerlink" title="novelty"></a>novelty</h2><ol><li>Contribution 2) mentions introducing the generation paradigm into the RSVG field. Please explain what exactly the generation paradigm means. In the abstract, it is mentioned as “generate discrete coordinates sequence in an auto-regressive manner,” but the MGVLF proposed in reference [17] also generates discrete coordinates through feature regression. This contribution point is not sufficient.</li></ol><h2 id="experiments"><a href="#experiments" class="headerlink" title="experiments"></a>experiments</h2><ol><li>In Section A, it is stated that “our framework achieves improved visual representation learning for small-scale objects.” How can you prove this through qualitative or quantitative results? Otherwise, it is difficult to draw this conclusion.</li></ol><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ol><li><p>Reference [17] constructs the DIOR-RSVG dataset, and the proposed method is named MGVLF. Please modify the entire letter and TABLE 1 accordingly. The Venue should be TGRS, not IEEE.</p></li><li><p>Is the ‘Prediction Head’ in Figure 1(a) the same as ‘MLP’ in (b)?</p></li><li><p>Refer to recent articles [1] on remote sensing vision-language task.<br>[1] Y. Yuan, Y. Zhan and Z. Xiong, “Parameter-Efficient Transfer Learning for Remote Sensing Image–Text Retrieval,” in IEEE Transactions on Geoscience and Remote Sensing, vol. 61, pp. 1-14, 2023, Art no. 5619014, doi: 10.1109/TGRS.2023.3308969.</p></li></ol><h2 id="新奇"><a href="#新奇" class="headerlink" title="新奇"></a>新奇</h2><ol><li>贡献 2）提到将生成范式引入 RSVG 领域。请解释一下生成范式的确切含义。摘要中提到 “以自动回归方式生成离散坐标序列”，但参考文献 [17] 中提出的 MGVLF 也是通过特征回归生成离散坐标的。这个贡献点还不够。</li></ol><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li>A 部分指出 “我们的框架改进了小尺度物体的视觉表征学习”。如何通过定性或定量结果来证明这一点？否则很难得出这一结论。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>参考文献 [17] 构建了 DIOR-RSVG 数据集，提出的方法被命名为 MGVLF。请相应修改整封信和表 1。地点应为 TGRS，而不是 IEEE。</p></li><li><p>图 1(a)中的 “预测头 “与(b)中的 “MLP “是否相同？</p></li><li><p>参考最近关于遥感视觉语言任务的文章 [1]。<br>[1] Y. Yuan, Y. Zhan and Z. Xiong, “Parameter-Efficient Transfer Learning for Remote Sensing Image-Text Retrieval,” in IEEE Transactions on Geoscience and Remote Sensing, vol. 61, pp.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Your paper GRSL-01600-2023 Multi-Stage Synergistic Aggregation Network for Remote Sensing Visual Grounding has been carefully reviewed by
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/10/05/%E9%9D%A2%E7%BB%8FJava%E5%9F%BA%E7%A1%80/"/>
    <id>http://waynamigo.github.io/2023/10/05/面经Java基础/</id>
    <published>2023-10-04T16:19:43.730Z</published>
    <updated>2023-10-21T03:35:34.401Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B extends A;</span><br><span class="line">B b = <span class="keyword">new</span> A(); <span class="comment">//错误</span></span><br><span class="line">A a = <span class="keyword">new</span> B(); <span class="comment">//合法，但是通过 a 只能访问 A 类中定义的方法和属性，除非 B 类重写了这些方法</span></span><br></pre></td></tr></table></figure><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li>boolean 1</li><li>byte 1</li><li>short 2</li><li>char 2</li><li>int 4 </li><li>float 4</li><li>long 4</li><li>double <h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2></li><li>Boolean</li><li>Byte</li><li>Short</li><li>Character</li><li>Integer</li><li>Long</li><li>Float（没有实现缓存机制）</li><li>Double（没有实现缓存机制）</li><li>BigDecimal（浮点精确运算的场景，传统浮点类型计算时，会出现位数不够的时候，计算机会给这个浮点表示进行截断），计算机x86一般用小端存储，高（位）存高（地址），低存低<ul><li>低地址：指的是内存中较小的地址值。在大多数系统中，低地址对应于内存中的起始位置，也就是地址为0的位置。</li><li>高地址：指的是内存中较大的地址值。它是相对于低地址而言的，表示内存的结束位置。</li></ul></li><li>BigInteger（存储超过64 位 long 整型的数字）BigInteger 内部使用 int[] 数组来存储任意大小的整形数据。</li></ul><p><a href="https://javaguide.cn/java/basis/bigdecimal.html" target="_blank" rel="noopener">https://javaguide.cn/java/basis/bigdecimal.html</a></p><p><strong>装箱</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Integer num1 = <span class="number">40</span>; <span class="comment">//发生装箱，相当于 Integer.valueOf(40);</span></span><br><span class="line">Integer num2 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line"><span class="keyword">return</span> num1 == num2; | <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">解释：num1 直接使用的是缓存中的对象: num2 直接创建了新对象</span><br><span class="line"><span class="comment">// 自动装箱函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line">如果把第一句换成 <span class="keyword">int</span> num1 =<span class="number">40</span>;</span><br><span class="line">num1 == num2;| <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//会对num2发生自动拆箱，会实现两个int类型的比较，返回true</span></span><br><span class="line"><span class="comment">// 如果要用num2.equals比较:</span></span><br><span class="line">num2.equals(Integer.valueOf(num1));</span><br></pre></td></tr></table></figure><ul><li>所有<strong>整型包装类对象之间值</strong>的比较，全部使用 equals 方法比较。</li><li>== 操作符会<strong>比较两个对象的引用是否相等</strong>，而不是它们的值。因为 num1 和 num2 都是通过自动装箱得到的，它们实际上是不同的对象，即使它们包装的值相同</li><li>自动拆箱与装箱的例子：<ul><li>Integer i = 10 等价于 Integer i = Integer.valueOf(10)</li><li>int n = i 等价于 int n = i.intValue();</li></ul></li><li>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该<strong>尽量避免不必要的拆装箱操作</strong>。<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2></li><li>private</li><li>protected    </li><li>public<h2 id="类，方法，变量修饰符"><a href="#类，方法，变量修饰符" class="headerlink" title="类，方法，变量修饰符"></a>类，方法，变量修饰符</h2></li><li>class</li><li>new</li><li>abstract </li><li>extends</li><li>static:</li><li>final </li><li>implements</li><li>interface</li><li>synchronized</li><li>enum</li><li>native</li><li>volatile</li></ul><ol><li><p>static:static 修饰的变量和方法可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存。</p></li><li><p>静态方法只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。</p></li><li><p>【为什么不能调用非静态成员】：在类加载的时候就会分配内存，非静态成员需要实例化后才能有效访问</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2></li></ol><ul><li>try</li><li>catch</li><li>throw</li><li>throws</li><li>finally<ul><li>当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。</li></ul></li></ul><h2 id="重写-override-和-重载-overload"><a href="#重写-override-和-重载-overload" class="headerlink" title="重写 override 和 重载 overload"></a>重写 override 和 重载 overload</h2><ul><li>override是子类重写父类方法，参数需要一样</li><li>overload是在一个类中重载的某个方法</li><li>构造方法可以背重载，不可以重写</li></ul><h2 id="接口和抽象类有什么共同点和区别？"><a href="#接口和抽象类有什么共同点和区别？" class="headerlink" title="接口和抽象类有什么共同点和区别？"></a>接口和抽象类有什么共同点和区别？</h2><p>共同点：都不能被实例化。都可以包含抽象方法。都可以有默认实现的方法（Java 8 可以用 default 关键字在接口中定义默认方法）。</p><p>区别：接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系。一个类只能继承一个类，但是可以实现多个接口。接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值</p><h2 id="深拷贝与浅拷贝-引用拷贝"><a href="#深拷贝与浅拷贝-引用拷贝" class="headerlink" title="深拷贝与浅拷贝/引用拷贝"></a>深拷贝与浅拷贝/引用拷贝</h2><ul><li>深拷贝：完整复制某个对象，包括这个对象中的内部对象，都是不同的对象</li><li>浅拷贝：在堆上创建一个新对象，这个新对象与原对象使用的是同一个内部对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Person person = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        person.setAddress(person.getAddress().clone());</span><br><span class="line">        <span class="comment">//加入这一行，内部的address对象也进行拷贝，本质上是堆上的另外一个对象。</span></span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Object：基类"><a href="#Object：基类" class="headerlink" title="Object：基类"></a>Object：基类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()</span><br><span class="line"><span class="comment">//native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。获取哈希码（int 整数），也称为散列码，也可以比较两个对象是否相等。两个对象的hashCode 值相等并不代表两个对象就相等：可能发生冲突</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">//native 方法，用于创建并返回当前对象的一份拷贝。</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function"><span class="comment">//返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="comment">//多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="comment">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="comment">//实例被垃圾回收器回收的时候触发的操作</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="String-StringBuffer-StringBuilder"><a href="#String-StringBuffer-StringBuilder" class="headerlink" title="String  StringBuffer StringBuilder"></a>String  StringBuffer StringBuilder</h2><ul><li>String类不可变：创建时，采用final的字符数组表示字符串了,final char [],(java9以后用的byte[])</li><li><strong>StringBuilder</strong> 与 <strong>StringBuffer</strong>都继承自 <strong>AbstractStringBuilder</strong> 类，也是使用字符数组保存字符串，不过没有使用 final 和 private 关键字修饰，最关键的是这个 AbstractStringBuilder 类还提供了很多修改字符串的方法比如 append 方法。</li></ul><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了<strong>避免字符串的重复创建。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在堆中创建字符串对象”ab“</span></span><br><span class="line"><span class="comment">// 将字符串对象”ab“的引用保存在字符串常量池中</span></span><br><span class="line">String aa = <span class="string">"ab"</span>;</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”ab“的引用</span></span><br><span class="line">String bb = <span class="string">"ab"</span>;</span><br><span class="line">System.out.println(aa==bb);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>【面试题】<code>String s1 = new String(&quot;abc&quot;);</code>这句话创建了几个字符串对象？</p><ul><li>一个或两个：</li><li>一个的情况，abc在字符串常量池里，仅需要abc的引用创建s1</li><li>两个的情况，abc不存在常量池里，要先创建abc，再将其引用创建s1</li></ul><p>【面试题】手动将某字符串加入字符串常量池用什么方法</p><ul><li>String.intern()</li><li>将指定的字符串对象的引用保存在字符串常量池中，可以简单分为两种情况：<ul><li>如果字符串常量池中保存了对应的字符串对象的引用，就直接返回该引用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在堆中创建字符串对象”Java“</span></span><br><span class="line"><span class="comment">// 将字符串对象”Java“的引用保存在字符串常量池中</span></span><br><span class="line">String s1 = <span class="string">"Java"</span>;</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span></span><br><span class="line">String s2 = s1.intern();</span><br><span class="line"><span class="comment">// 会在堆中在单独创建一个字符串对象</span></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"Java"</span>);</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span></span><br><span class="line">String s4 = s3.intern();</span><br><span class="line"><span class="comment">// s1 和 s2 指向的是堆中的同一个对象</span></span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// s3 和 s4 指向的是堆中不同的对象</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// s1 和 s4 指向的是堆中的同一个对象</span></span><br><span class="line">System.out.println(s1 == s4); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>【面试题】字符串加号操作 str + str</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"str"</span>;<span class="comment">//创建了一个字符串常量 "str"，它会存储在常量池中</span></span><br><span class="line">String str2 = <span class="string">"ing"</span>;</span><br><span class="line">String str3 = <span class="string">"str"</span> + <span class="string">"ing"</span>;<span class="comment">//这里的 "str" 和 "ing" 都是字符串字面量，它们会在编译时就被合并成一个新的字符串常量 "string"，然后存储在常量池中。</span></span><br><span class="line">String str4 = str1 + str2;<span class="comment">//这里使用了变量 str1 和 str2 进行字符串拼接，这是在运行时进行的。因此，新的字符串对象 "string" 会在堆内存中创建，而不是常量池</span></span><br><span class="line">String str5 = <span class="string">"string"</span>;</span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="Exception-和-Error（两者继承Thorwable）"><a href="#Exception-和-Error（两者继承Thorwable）" class="headerlink" title="Exception 和 Error（两者继承Thorwable）"></a>Exception 和 Error（两者继承Thorwable）</h2><ul><li><strong>Exception</strong> ：程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</li><li><strong>Error</strong>：Error 属于程序无法处理的错误 ，jvm一般会选择线程终止。例如 Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li></ul><h3 id="Checkable-Exception-受检查异常，必须用catch或者throw捕获"><a href="#Checkable-Exception-受检查异常，必须用catch或者throw捕获" class="headerlink" title="Checkable Exception 受检查异常，必须用catch或者throw捕获"></a>Checkable Exception 受检查异常，必须用catch或者throw捕获</h3><p>除了RuntimeException及其子类以外（下列），其他的Exception类及其子类都属于受检查异常</p><ul><li>NullPointerException(空指针错误)</li><li>IllegalArgumentException(参数错误比如方法入参类型错误)</li><li>NumberFormatException（字符串转换为数字格式错误，IllegalArgumentException的子类）</li><li>ArrayIndexOutOfBoundsException（数组越界错误）</li><li>ClassCastException（类型转换错误）</li><li>ArithmeticException（算术错误）</li><li>SecurityException （安全错误比如权限不够）</li><li>UnsupportedOperationException(不支持的操作错误比如重复创建同一用户)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用throws关键字声明可能抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="comment">// 在方法内部发现异常情况</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="comment">/* some condition */</span>) &#123;</span><br><span class="line">            <span class="comment">// 抛出自定义异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"Something went wrong"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">catch</span>(MyException e)&#123;</span><br><span class="line">          e.printStackTrace(); <span class="comment">//在控制台上打印 Throwable 对象封装的异常信息</span></span><br><span class="line">          e.getMessage();<span class="comment">// 返回异常发生时的简要描述</span></span><br><span class="line">          e.toString();<span class="comment">// 返回异常发生时的详细信息</span></span><br><span class="line">          e.getLocalizedMessage();<span class="comment">//返回异常对象的本地化信息。</span></span><br><span class="line">      &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型-Generics-对比CPP的template"><a href="#泛型-Generics-对比CPP的template" class="headerlink" title="泛型 Generics //对比CPP的template"></a>泛型 Generics //对比CPP的template</h2><p>相同点：</p><ul><li><strong>参数化类型</strong>：两者都允许你定义可以接受不特定类型的数据结构或算法，从而提高代码的复用性和灵活性。</li><li><strong>类型安全</strong>：Java 的泛型和 C++ 的模板都<strong>在编译时进行类型检查</strong>，确保类型的一致性。</li><li><strong>支持容器类</strong>：在两者中，可以创建可以容纳任何类型的容器类（例如，List、Set、Map 等）。</li></ul><p>不同点：</p><ul><li><strong>实现方式</strong>：<ul><li>Java 泛型是通过擦除（type erasure）来实现的。在编译时，泛型类型信息会被擦除，编译器会将泛型代码转化成非泛型的代码。这意味着在运行时，不会保留关于泛型类型的信息。这也是为什么在 Java 中不能直接创建泛型数组的原因。</li><li>C++ 模板是通过编译器在编译时进行代码生成，每次使用模板时，都会根据模板参数生成对应的代码。这使得 C++ 模板可以实现更为复杂和灵活的类型推断。</li></ul></li><li><strong>语法</strong>：<br>Java 泛型使用<t>来表示泛型类型，可以在类、接口、方法等级别使用泛型。<br>C++ 模板使用<typename t>或者<class t>来声明模板参数，可以在类、函数等级别使用模板。</class></typename></t></li><li><strong>泛型的通配符</strong>：<br>Java 的泛型可以使用通配符（wildcards）来表示不确定的类型。例如：List&lt;?&gt;表示一个不确定类型的 List。<br>C++ 模板可以通过模板特化来处理特定的类型。</li><li><strong>模板元编程</strong>：<br>C++ 的模板系统支持模板元编程，这意味着可以在编译时进行计算和逻辑操作，从而实现更为复杂的类型处理。</li><li><strong>依赖</strong>：<br>Java 的泛型不依赖于运行时类型信息（RTTI）。<br>C++ 的模板依赖于编译时类型信息（CTTI）。</li></ul><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ul><li>代理机制</li></ul><p><strong>使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</strong></p><ul><li>动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。</li><li>静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li><li>JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class alunbarClass = TargetObject.class; <span class="comment">//知道目的类名为TargetObject，直接获取</span></span><br><span class="line">Class alunbarClass1 = Class.forName(<span class="string">"cn.javaguide.TargetObject"</span>);<span class="comment">//通过类的全路径获取</span></span><br><span class="line">TargetObject instance = <span class="keyword">new</span> TargetObject();<span class="comment">//通过实例获取</span></span><br><span class="line">Class alunbarClass2 = instance.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类加载器进行全路径的loadclass</span></span><br><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">"cn.javaguide.TargetObject"</span>);</span><br></pre></td></tr></table></figure><ul><li><p>静态代理<br>可以在代理类中增加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsProxy</span> <span class="keyword">implements</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService smsService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsProxy</span><span class="params">(SmsService smsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.smsService = smsService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SmsService smsService = <span class="keyword">new</span> SmsServiceImpl();</span><br><span class="line">SmsProxy smsProxy = <span class="keyword">new</span> SmsProxy(smsService);</span><br></pre></td></tr></table></figure></li><li><p>动态代理：JDK 动态代理、CGLIB 动态代理</p><ul><li>InvocationHandler 接口和 Proxy 类</li><li>还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当你使用代理对象调用方法的时候实际会调用到这个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>数据从外部存储和内存之间进出的过程就是IO。</p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>如果我们不知道编码类型的话，使用字节流的过程中很容易出现乱码问题。</p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>字符流是由 Java 虚拟机将字节转换得到的，这个过程还算是比较耗时</p><h2 id="序列化-Protobuf，Hessian，Kyro"><a href="#序列化-Protobuf，Hessian，Kyro" class="headerlink" title="序列化 Protobuf，Hessian，Kyro"></a>序列化 Protobuf，Hessian，Kyro</h2><ul><li>transient 阻止实例中那些用此关键字修饰的的变量序列化；</li><li>当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。</li><li>transient 只能修饰变量，不能修饰类和方法。</li><li>static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化。</li></ul><h2 id="sun-misc-Unsafe类-并发工具类的组件，一个直接操作内存空间的类。"><a href="#sun-misc-Unsafe类-并发工具类的组件，一个直接操作内存空间的类。" class="headerlink" title="sun.misc.Unsafe类:并发工具类的组件，一个直接操作内存空间的类。"></a>sun.misc.Unsafe类:并发工具类的组件，一个直接操作内存空间的类。</h2><p>主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升 Java 运行效率、增强 Java 语言底层资源操作能力方面起到了很大的作用。</p><ul><li>Unsafe中提供的方法需要依赖native方法，Java 代码中只是声明方法头，具体的实现则交给本地代码</li></ul><h3 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h3><p>使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配新的本地空间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">allocateMemory</span><span class="params">(<span class="keyword">long</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//重新调整内存空间的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">reallocateMemory</span><span class="params">(<span class="keyword">long</span> address, <span class="keyword">long</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//将内存设置为指定值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">long</span> bytes, <span class="keyword">byte</span> value)</span></span>;</span><br><span class="line"><span class="comment">//内存拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">copyMemory</span><span class="params">(Object srcBase, <span class="keyword">long</span> srcOffset,Object destBase, <span class="keyword">long</span> destOffset,<span class="keyword">long</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//清除内存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">long</span> address)</span></span>;</span><br></pre></td></tr></table></figure><p>这种方式分配<strong>堆外内存</strong>，是无法进行垃圾回收的，需要我们把这些内存当做一种资源去手动调用freeMemory方法进行释放，否则会产生内存泄漏。通用的操作内存方式是在try中执行对内存的操作，最终在finally块中进行内存释放。</p><h3 id="【面试题】为什么要用堆外内存"><a href="#【面试题】为什么要用堆外内存" class="headerlink" title="【面试题】为什么要用堆外内存"></a>【面试题】为什么要用堆外内存</h3><ul><li>对GC停顿的改善。由于堆外内存是直接受操作系统管理而不是 JVM，所以当我们使用堆外内存时，即可保持较小的堆内内存规模。从而在 GC 时减少回收停顿对于应用的影响。</li><li>提升程序 I/O 操作的性能。通常在 I/O 通信过程中，会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝且生命周期较短的暂存数据，都建议存储到堆外内存。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式的应用：</span></span><br><span class="line"><span class="comment">// 利用反射获得 Unsafe 类中已经实例化完成的单例对象 theUnsafe.</span></span><br><span class="line">Unsafe unsafe = Unsafe.reflectGetUnsafe();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">long</span> maddr = unsafe.allocateMemory(<span class="number">1024</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(OutOfMemoryError e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">  <span class="keyword">throw</span> e;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  unsafe.freeMomory(maddr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DirectByteBuffer"><a href="#DirectByteBuffer" class="headerlink" title="DirectByteBuffer"></a>DirectByteBuffer</h3><ul><li>实现堆外内存的一个重要类，通常用在通信过程中做缓冲池，在NIO中使用广泛。</li><li>对于堆外内存的创建、使用、销毁等逻辑均由 Unsafe 提供的堆外内存 API 来实现</li></ul><h3 id="内存屏障-Memory-Barrier-组织指令重排序"><a href="#内存屏障-Memory-Barrier-组织指令重排序" class="headerlink" title="内存屏障 Memory Barrier:组织指令重排序"></a>内存屏障 Memory Barrier:组织指令重排序</h3><p>阻止屏障两边的<strong>指令重排序</strong>从而避免编译器和硬件的不正确优化情况</p><ul><li>屏蔽了操作系统底层的差异，允许在代码中定义、并统一由 JVM 来生成内存屏障指令，来实现内存屏障的功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">loadFence</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">storeFence</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//内存屏障，禁止load、store操作重排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">fullFence</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ul><p>运行中的线程不是直接读取主内存中的变量的，只能操作自己工作内存中的变量，然后同步到主内存中，并且线程的工作内存是不能共享的。上面的图中的流程就是子线程借助于主内存，将修改后的结果同步给了主线程，进而修改主线程中的工作空间，跳出循环。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/09/24/%E9%9D%A2%E7%BB%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>http://waynamigo.github.io/2023/09/24/面经微服务/</id>
    <published>2023-09-24T08:14:02.058Z</published>
    <updated>2023-10-21T03:37:32.350Z</updated>
    
    <content type="html"><![CDATA[<ol><li>服务注册与发现 consul</li><li>负载均衡，consul，用wrr算法实现的</li><li>APi网关 gateway</li><li>熔断器 circuitbreaker</li></ol><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;服务注册与发现 consul&lt;/li&gt;
&lt;li&gt;负载均衡，consul，用wrr算法实现的&lt;/li&gt;
&lt;li&gt;APi网关 gateway&lt;/li&gt;
&lt;li&gt;熔断器 circuitbreaker&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;SpringCloud&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/09/24/%E9%9D%A2%E7%BB%8F%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    <id>http://waynamigo.github.io/2023/09/24/面经分布式/</id>
    <published>2023-09-24T08:13:46.017Z</published>
    <updated>2023-10-27T13:09:15.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p><strong>Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性)</strong></p><h1 id="raft理论"><a href="#raft理论" class="headerlink" title="raft理论"></a>raft理论</h1><h2 id="leader选举、日志复制、日志压缩、成员变更"><a href="#leader选举、日志复制、日志压缩、成员变更" class="headerlink" title="leader选举、日志复制、日志压缩、成员变更"></a>leader选举、日志复制、日志压缩、成员变更</h2><ol><li>Leader Selection</li></ol><p>Raft使用 (心跳机制)来触发选举。当server节点启动时，初始状态都是 follower。每一个server都有一个定时器，超时时间为 (时间长 度一般为150ms~300ms)，如果某server没有超时的情况下收到来自leader或者 candidate的任何RPC，则定时器重启，如果超时，它就开始一次选举。leader给 followers发RPC要么复制日志，要么就是用来告诉followers自己是leader，不用选举的 心跳(告诉followers对状态机应用日志的消息夹杂在心跳中)。如果某个candidate获 得了超过半数节点的选票(自己投了自己)，就称为新leader</p><h3 id="如果leader节点出现了故障"><a href="#如果leader节点出现了故障" class="headerlink" title="如果leader节点出现了故障"></a>如果leader节点出现了故障</h3><p>用raft共识算法来做的</p><ol start="2"><li>Log Relocation</li></ol><p>leader 在每个 heartbeat 向 follower 发送AppendEntries RPC同步日志，follower如果发现没问题，复制成功后会 给leader一个表示成功的ACK，leader收到超过半数的ACK后应用该日志，返回客户 端执行结果。若 follower 节点宕机、运行缓慢或者丢包，则 leader 节点会不断重试 AppendEntries RPC，直到所有 follower 节点最终都复制所有日志条目。</p><p>乐观锁：<br>每个对象有一个版本号或者时间戳，当对象被修改时，版本号会更新。在提交更新时，检查版本号是否匹配，如果不匹配则说明有冲突发生，需要进行相应的处理。<br>悲观锁：<br>在操作对象时，先锁定该对象，其他用户无法修改该对象直到锁被释放。这种方法可以保证同时只有一个用户能够修改对象，但可能会导致并发性能下降。</p><ol><li>服务注册与发现 consul</li><li>负载均衡，consul，用wrr算法实现的</li><li>APi网关 gateway</li><li>熔断器 circuitbreaker</li></ol><h2 id="分布式session怎么做的，常用的"><a href="#分布式session怎么做的，常用的" class="headerlink" title="分布式session怎么做的，常用的"></a>分布式session怎么做的，常用的</h2><p>java有apach shiro这两个中间件有session管理器，它是配置redis共享缓存的服务器中的，使用的是RedisSessionDAO层。</p><p>golang有casbin+redis的共享缓存来实现分布式session管理</p><h2 id="身份认证和权限管理"><a href="#身份认证和权限管理" class="headerlink" title="身份认证和权限管理"></a>身份认证和权限管理</h2><p><a href="https://zhuanlan.zhihu.com/p/150644469" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/150644469</a></p><p><a href="https://www.cnblogs.com/alisapine/p/15080359.html" target="_blank" rel="noopener">https://www.cnblogs.com/alisapine/p/15080359.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CAP理论&quot;&gt;&lt;a href=&quot;#CAP理论&quot; class=&quot;headerlink&quot; title=&quot;CAP理论&quot;&gt;&lt;/a&gt;CAP理论&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Consistency（一致性）、Availability（可用性）、Partition Toler
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/09/23/%E9%9D%A2%E7%BB%8F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://waynamigo.github.io/2023/09/23/面经数据结构/</id>
    <published>2023-09-23T15:34:47.974Z</published>
    <updated>2023-09-23T15:34:47.974Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/09/23/%E9%9D%A2%E7%BB%8F%E5%9C%BA%E6%99%AF/"/>
    <id>http://waynamigo.github.io/2023/09/23/面经场景/</id>
    <published>2023-09-23T06:00:17.405Z</published>
    <updated>2023-10-28T18:26:50.181Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844904003998842887" target="_blank" rel="noopener">https://juejin.cn/post/6844904003998842887</a></p><h2 id="merge-和-rebase-的区别【合并方式和历史记录，冲突解决方式】"><a href="#merge-和-rebase-的区别【合并方式和历史记录，冲突解决方式】" class="headerlink" title="merge 和 rebase 的区别【合并方式和历史记录，冲突解决方式】"></a>merge 和 rebase 的区别【合并方式和历史记录，冲突解决方式】</h2><p><strong>git merge：</strong></p><ul><li>将目标分支的最新提交合并到当前分支，创建一个新的合并提交，保留了分支的历史记录。</li><li>合并后会产生一个新的合并提交，记录了分支的合并操作。</li><li>适合公共分支的合并</li></ul><p><strong>git rebase：</strong></p><ul><li>将当前分支的提交“移动”到目标分支的最新提交之后，使得分支历史看起来更线性。</li><li>实际上是将当前分支的提交重新应用在目标分支的最新提交之后，形成一系列新的提交。</li><li>适合本地工作分支的合并</li><li>然后rebase 合并一些提交记录<br>git merge：<br>保留了分支的整个历史记录，可以清晰地看到分支的合并过程。<br>git rebase：<br>使得分支历史看起来更加线性，但也会丢失了分支的原始历史记录。<h2 id="pull-和fetch的区别"><a href="#pull-和fetch的区别" class="headerlink" title="pull 和fetch的区别"></a>pull 和fetch的区别</h2>fetch拉取最新代码，本身不会产生冲突，origin/branch1 会覆盖掉本底的暂存branch1<br>pull = fetch + merge，会产生冲突</li></ul><h2 id="stash的使用【在merge之前，把本地stash起来，或者当前版本需要临时存到一个分支里】"><a href="#stash的使用【在merge之前，把本地stash起来，或者当前版本需要临时存到一个分支里】" class="headerlink" title="stash的使用【在merge之前，把本地stash起来，或者当前版本需要临时存到一个分支里】"></a>stash的使用【在merge之前，把本地stash起来，或者当前版本需要临时存到一个分支里】</h2><h2 id="git-rm的使用"><a href="#git-rm的使用" class="headerlink" title="git rm的使用"></a>git rm的使用</h2><ol><li>git rm file 删除暂存区和源文件</li><li>git rm –cached file 删除暂存区文件</li><li>git reset file 删除暂存区文件</li><li>git restore –staged file 删除暂存区文件</li></ol><h2 id="强制切换分支，并丢弃当前内容"><a href="#强制切换分支，并丢弃当前内容" class="headerlink" title="强制切换分支，并丢弃当前内容"></a>强制切换分支，并丢弃当前内容</h2><p>checkout -f branchname</p><h2 id="切换到-某个提交-log查看提交hash，checkout过来"><a href="#切换到-某个提交-log查看提交hash，checkout过来" class="headerlink" title="切换到 某个提交 log查看提交hash，checkout过来"></a>切换到 某个提交 log查看提交hash，checkout过来</h2><h2 id="撤销一个commit"><a href="#撤销一个commit" class="headerlink" title="撤销一个commit"></a>撤销一个commit</h2><ol><li>保留历史，丢弃提交<br>git reset HEAD^</li><li>完全丢弃<br>git reset –hard HEAD^<br>git revert <cmmit_sha>,这会创建一个新的提交来撤销特定的提交，保留了提交历史。</cmmit_sha></li></ol><p>如果你已经push，不推荐使用 git reset，因为它会改变历史记录，可能会影响其他开发者。<br>git revert 会创建一个新的提交，用于撤销指定的提交，这样可以保持提交历史的完整性。</p><h2 id="git-checkout-和reset-到指定版本"><a href="#git-checkout-和reset-到指定版本" class="headerlink" title="git checkout 和reset 到指定版本"></a>git checkout 和reset 到指定版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. checkout作用：</span><br><span class="line">主要用于切换分支、切换到某个特定的提交、或者查看历史版本的内容。</span><br><span class="line">影响：</span><br><span class="line">切换分支或切换到特定提交时，会将工作目录和暂存区的状态更新为目标分支或提交的状态。如果是切换到特定提交，会处于“分离头指针”状态。</span><br><span class="line">回滚版本：</span><br><span class="line">不能用 git checkout 直接回滚到以前的版本。如果你只是想查看以前的版本，可以使用 git checkout &lt;commit_sha&gt; 来切换到特定提交。</span><br><span class="line">1.  reset作用：</span><br><span class="line">用于重置当前分支的 HEAD 指针，可以将分支回退到以前的提交。</span><br><span class="line">影响：</span><br><span class="line">可以影响工作目录、暂存区和分支的状态，具体取决于使用的选项：</span><br><span class="line">--soft：保留工作目录和暂存区，只重置 HEAD 指针。</span><br><span class="line">--mixed（默认选项）：重置 HEAD 指针和暂存区，但保留工作目录。</span><br><span class="line">--hard：重置 HEAD 指针、暂存区和工作目录，丢弃所有本地的更改。</span><br><span class="line">回滚版本：</span><br><span class="line">可以用 git reset 回滚到以前的版本。例如，可以使用 git reset HEAD^ 将分支回滚到前一个提交。</span><br><span class="line">总结：</span><br><span class="line">如果你只是想查看以前的版本，可以使用 git checkout。</span><br><span class="line">如果你想回滚到以前的版本，可以使用 git reset，但要注意谨慎使用，因为它会影响工作目录、暂存区和分支的状态，并且在共享分支上可能会影响其他开发者。</span><br></pre></td></tr></table></figure><h2 id="github和gitlab的区别"><a href="#github和gitlab的区别" class="headerlink" title="github和gitlab的区别"></a>github和gitlab的区别</h2><h2 id="持续集成和持续部署的区别是什么，"><a href="#持续集成和持续部署的区别是什么，" class="headerlink" title="持续集成和持续部署的区别是什么，"></a>持续集成和持续部署的区别是什么，</h2><p>持续集成（CI）注重的是团队成员之间的协作与代码的频繁集成。通过自动化的构建和测试流程，保证了每次提交的代码都能够顺利地融入共享代码库，从而快速发现并解决潜在的集成问题，使团队能够保持稳步前进。</p><p>而持续部署（CD）则是在持续集成的基础上，将通过CI验证的代码自动地部署到目标环境，实现了软件交付的高效、可靠，甚至是自动化。这使得开发团队能够以更迅速的速度向生产环境中推送稳定可靠的软件，为项目的成功交付提供了坚实保障。</p><h2 id="慢SQL问题如何排查"><a href="#慢SQL问题如何排查" class="headerlink" title="慢SQL问题如何排查"></a>慢SQL问题如何排查</h2><p>如果你的数据库查询变慢了，可以采取以下步骤来找出问题并解决它：</p><ol><li><strong>找出慢查询</strong>：首先，找出哪些数据库查询很慢。通常，这些查询会花费很长时间才能返回结果。</li><li><strong>检查查询计划</strong>：查看慢查询的执行计划，看看数据库是如何执行这些查询的。这可以帮助你找到性能瓶颈。</li><li><strong>考虑索引</strong>：确保查询使用了适当的索引。有时候，缺少或错误使用索引会导致查询变慢。</li><li><strong>优化SQL</strong>：审查慢查询的SQL语句，看看是否可以通过改写查询或者使用更有效的SQL来提高性能。</li><li><strong>检查数据库服务器</strong>：确保数据库服务器有足够的资源来处理查询。不足的CPU、内存或磁盘IO可能会导致性能问题。</li><li><strong>连接池</strong>：如果你在应用程序中使用了数据库连接池，确保连接池的配置正确。连接池的设置也可能影响性能。</li><li><strong>数据库统计信息</strong>：查看数据库的统计信息，了解表的大小、索引情况和数据分布。这些信息可以指导你哪些地方需要优化。</li><li><strong>查询缓存</strong>：考虑使用查询缓存，将经常执行的查询结果缓存起来，以减轻数据库负担。</li><li><strong>分页查询优化</strong>：如果涉及到分页查询，确保使用了有效的分页查询方式，避免一次性获取大量数据。</li><li><strong>监控和性能测试</strong>：建立监控系统，随时监测数据库性能。进行性能测试，模拟高负载情况，确保数据库在压力下能够正常工作。<h2 id="SQL的优化方式有哪些"><a href="#SQL的优化方式有哪些" class="headerlink" title="SQL的优化方式有哪些"></a>SQL的优化方式有哪些</h2></li><li><strong>联合索引</strong></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844904003998842887&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.cn/post/6844904003998842887&lt;/a&gt;&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/05/10/1%E6%8A%80%E6%9C%AF%E5%8F%91%E6%98%8E/"/>
    <id>http://waynamigo.github.io/2023/05/10/1技术发明/</id>
    <published>2023-05-10T06:32:09.256Z</published>
    <updated>2023-05-10T14:49:42.530Z</updated>
    
    <content type="html"><![CDATA[<p>本项目源自国家重点研发计划、国家自然科学基金国家重大科研仪器研制项目、国防基础科研计划重点项目、国防科技创新特区重点项目等。<br>（有什么问题，难点，提出四条问题）</p><p>随着内河与海洋近岸航运业和旅游业的蓬勃发展，人们对水上交通的安全性、便捷性和舒适性的需求日益强烈，沿海地区发展水上交通的运行效率和智能化要求日趋提高。然而，水上环境复杂多变，安全隐患和事故频发，已经成为制约水上交通业发展的重要因素之一，水上无人系统的环境感知、自主导航、智能化决策能力还面临如下挑战：<br>1）复杂的水文环境和气象条件会对传感器与传统导航设备产生干扰，导致的信息损失严重影响系统可靠性，并难以对动态漂浮物等动力目标进行精准定位；<br>2）水上交通发达的旅游业城市的内河环境水文条件和地形复杂，存在狭窄航道与大量桥洞等环境，以及更复杂的停靠环境，在这些情况下的智能化决策则要求更高精度的三维环境感知能力；<br>3）多传感器的水上系统存在多源数据的协同问题，由于不同传感器的感知能力和适应范围不同，多源数据融合的效率难以处理，也难以保证融合后的信息能够真实、准确地反映复杂的动态水上环境；<br>4）存在大规模应用的成本问题与实时性问题，水上无人系统需要使用多种传感器、导航设备和计算设备，成本问题导致大规模应用难以实现。</p><p>为此，本项目发明了水上无人系统多模态智能分析技术，主要技术发明内容如下：</p><ol><li>面向复杂近岸水上场景的环境感知系统：<br>通过视觉感知增强技术，有效减小水文环境与气象条件对视觉传感器的干扰程度，并引入水上动态目标行为预测技术，综合视觉检测与分割算法，支持水岸线、漂浮物、动力目标的感知，解决了近岸水面环境下的视觉感知退化问题，为系统的行为决策提供更准确的预测模型。</li><li>规限航道环境下的精确导航技术：<br>利用雷达与摄像头数据融合技术，进行三维场景实时重建，实现内河环境下对狭窄航道区域与桥洞目标的精准距离测量与定位，（此处可能需要误差数据），并通过避障决策算法显著提升了实时的障碍物感知与避障能力。</li><li>基于多模态交互的精准靠泊技术<br>综合利用多模态数据多层次融合技术，构建高效率多的传感器协同算法，并建立路径规划、碰撞检测及实时路径修正模型，求解无人船在动态场景下的行为树，实现自主靠泊过程，最优路径搜索精度≤3米，搜索时长≤3分钟，实际位置与码头边缘误差≤10cm。</li><li>资源受限环境下的轻量化及协同计算技术<br>通过量化压缩方法，降低模型存储和计算资源需求，并采用自动化部署技术，实现面向复杂任务的多船载边缘节点智能组网技术，构建高扩展性分布式边缘计算架构，在此架构下的任务处理效率提升20%。</li></ol><p>（用在什么地方，效果，应用场景）<br>以上发明可广泛用于禁飞区域（如政治敏感区、军事管理区）的防护、高等级事件（如政要随行、大型演出）的安保、违法活动（如恐怖袭击、隐私窥探）的打击等，解决假目标类型广、数量多、排除难的问题，精准识别升非合作无人机，提升非合作无人机的实时定位准确性。</p><p>本项目的发明成果具有完全的自主知识产权，申请发明专利 26 项，其中授权 13 项，多项授权专利已转让或许可中国电科36所、博宏科源元公司等使用，转让许可金额达 103 万元。发表相关论文 20 余篇，发明成果获得我国工程院院士、加拿大工程院院士、IEEE 会士的高度评价，其中贲德院士指出本项目发明的空中监测系统“填补了国内三维空间频谱仪器测量空白”。<br>本项目的发明成果已应用于探月工程、北斗卫星频谱态势系统、新一代战机/战舰一体化智能化重大系统等国家和国防重大工程；参加了在2018、2019年两届中央军委科技委、公安部主办的全国“无形截击”反无人机大赛，均取得了前三名的成绩；参加了2021年中国电力技术市场协会电力安防春业委员会主办的“电力场站无人机主动防御技术公开选拔赛”现场赛，通过了“集群侦测”分项；参与了多项重大活动保障，受到了云南省公安厅、郑州市公安局的感谢。博宏科元信息科技有限公司应用本项目成果，生产相关无人机防御系统 3000 多台套，产值超3亿元。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本项目源自国家重点研发计划、国家自然科学基金国家重大科研仪器研制项目、国防基础科研计划重点项目、国防科技创新特区重点项目等。&lt;br&gt;（有什么问题，难点，提出四条问题）&lt;/p&gt;
&lt;p&gt;随着内河与海洋近岸航运业和旅游业的蓬勃发展，人们对水上交通的安全性、便捷性和舒适性的需求日益
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://waynamigo.github.io/2023/03/12/report1/"/>
    <id>http://waynamigo.github.io/2023/03/12/report1/</id>
    <published>2023-03-12T08:29:32.070Z</published>
    <updated>2023-03-12T17:03:25.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、近期学习工作总结"><a href="#一、近期学习工作总结" class="headerlink" title="一、近期学习工作总结"></a>一、近期学习工作总结</h2><p><strong>视觉定位任务</strong></p><p>目前拟定的论文题目是”<em>AEME : An Adaptive Enhancement Mask Auto-Encoder for Visual Grounding</em>“。一种用于视觉定位任务的自适应增强型掩码自编码器。</p><p><strong>论文完成情况</strong></p><p>论文的动机：当前用于VG任务的transformer仅依赖于自注意力机制，对于中间层的特征融合过于关注细粒度融合，而其他基于ROI的方法偏粗粒度融合，通过本文提出的AEME模块，可以有效地将视觉ROI与文本的中间层特征进行由粗到细(coarse-to-fine)地交互。</p><p><strong>实验情况</strong></p><ol><li>完成了将AEME用在ReSC上的测试，已出结果。</li><li>年后进行了在TransVG上的应用，预估时间140多个小时（90个epoch），暂时各置，最近在跑其他出结果快的baseline，目前还没有结果。</li><li>最近一周跑的实验是SeqTR的baseline，是两个月前出的新方法，和ReSC性能持平，并且出结果更快，在尝试将AEME用在这上面能否验证得到提升。</li></ol><p><strong>多模态目标检测任务</strong></p><p>假期时进一步完成了相关论文的追踪和调查，目前以VoxelRCNN作为baseline进行实验，数据集为KITTI。</p><p>当前思路：</p><ol><li>点云特征提取，用VoxelRCNN的体素表示方法。</li><li>在VoxelRCNN的特征表示的基础上，加入一个transformer分支获取浅层的全局场景视图特征表示，concat到 VoxelRCNN结构的pooling操作后，进行ROI的回归。</li><li>transformer分支的代码参考了Point Cloud Transformer。</li><li>加入场景视图后，能让这一transoformer分支在VoxelRCNN上起作用的loss设计是必要的，这部分还没有想好怎么设计。<h2 id="二、本学期目标和计划"><a href="#二、本学期目标和计划" class="headerlink" title="二、本学期目标和计划"></a>二、本学期目标和计划</h2></li></ol><p><strong>论文计划</strong></p><ol><li>Visualgrounding方向的论文争取三月内完成初稿，四月底前根据要投的期刊或会议修改润色完投稿。</li><li>优先解决第一篇VG任务的论文，多模态目标检测任务的实验放缓进行，完成第一篇投稿后开始推进。</li></ol><p><strong>下一步实验计划</strong></p><ol><li>将AEME在ReSC,TransVG,SeqTR三个baseline上进行验证</li></ol><ul><li>ReSC上加入AEME的实验在referit、refcoco、refcoco+三个数据集上的结果已得到，各数据集目前跑了四次取平均，后期需要增加实验次数</li><li>下一步是在TransVG上跑结果，代码已改好，跑一次预估时间要一周暂时搁置，在测试SeqTR上加入AEME的性能</li><li>SeqTR是2022年具有代表性的新VG框架，目前在调试，一个数据集出实验结果的周期在24小时左右</li></ul><p>以下是论文准备的实验表格，’ - ‘ 表示暂时没有数据，将在近期及三四月完成。</p><table><thead><tr><th>baseline</th><th>referit game</th><th>RefCOCO val testA testB</th><th>RefCOCO+ val testA testB</th><th>RefCOCOg val testA testB</th></tr></thead><tbody><tr><td>ReSC(ECCV 2020)</td><td>64.60</td><td>77.63 80.45 72.30</td><td>63.59 68.36 56.81</td><td>63.12 67.30 67.20</td></tr><tr><td>TransVG(ICCV 2021)</td><td>70.73</td><td>81.02 82.72 78.35</td><td>64.82 70.70 56.94</td><td>67.02 68.67 67.73</td></tr><tr><td>SeqTR(ECCV 2022)</td><td>69.66</td><td>81.23 85.00 76.08</td><td>68.82 75.37 58.78</td><td>-  71.35 71.58</td></tr><tr><td>ReSC+AEME</td><td>65.21</td><td>79.67 81.91 73.15</td><td>64.55 70.08 56.49</td><td>- - -</td></tr><tr><td>TransVG+AEME</td><td>-</td><td>- - -</td><td>- - -</td><td>- - -</td></tr><tr><td>SeqTR+AEME</td><td>调试中</td><td>- - -</td><td>- - -</td><td>- - -</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、近期学习工作总结&quot;&gt;&lt;a href=&quot;#一、近期学习工作总结&quot; class=&quot;headerlink&quot; title=&quot;一、近期学习工作总结&quot;&gt;&lt;/a&gt;一、近期学习工作总结&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;视觉定位任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前拟定的论文
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Operating System</title>
    <link href="http://waynamigo.github.io/2023/01/04/%E9%9D%A2%E7%BB%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://waynamigo.github.io/2023/01/04/面经操作系统/</id>
    <published>2023-01-03T16:00:00.000Z</published>
    <updated>2023-10-30T07:14:50.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li>线程安全（Thread Safety）：</li></ul><p>当多个线程访问某个类或者对象时，如果不需要额外的同步机制或者用户干预，这个类或者对象依然能够表现出正确的行为，那么它就被认为是线程安全的。<br>简而言之，线程安全意味着在多线程环境下，对象的状态不会发生不一致或者不正确的情况。</p><ul><li>线程不安全（Thread Unsafe）：</li></ul><p>相反，当多个线程访问某个类或者对象时，如果没有适当的同步措施，就可能导致对象的状态变得不可预测或者不正确，那么这个类或者对象就是线程不安全的。<br>在线程不安全的情况下，多个线程可能会在同一时间访问、修改相同的数据，这可能导致数据损坏或者不一致。</p><h1 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1><ul><li><p>进程是系统资源分配的基本单位，一个程序对应一个进程。每个进程都有自己独立的内存空间，相互之间不会共享。它包括了程序代码、内存空间、资源和文件等。</p></li><li><p>线程是进程中的<strong>执行单元</strong>，一个进程可以包含多个线程。线程共享了进程的内存空间和资源，可以同时执行不同的任务。</p></li></ul><h3 id="共享资源指的是哪些资源"><a href="#共享资源指的是哪些资源" class="headerlink" title="共享资源指的是哪些资源"></a>共享资源指的是哪些资源</h3><p>内存、全局变量、对象、文件等</p><h1 id="协程和线程的区别"><a href="#协程和线程的区别" class="headerlink" title="协程和线程的区别"></a>协程和线程的区别</h1><p>协程（goroutine）可以理解为轻量化的用户态线程的实现，区别是<br><strong>协程由goruntime进行调度，线程由操作系统内核调度</strong></p><h1 id="进程切换："><a href="#进程切换：" class="headerlink" title="进程切换："></a>进程切换：</h1><ul><li>保存当前进程上下文：当操作系统决定要切换到另一个进程时，首先会保存当前进程的上下文信息，包括寄存器的值、程序计数器（PC）等。</li><li>加载目标进程的上下文：接下来，操作系统会从进程调度队列中选择一个新的进程，将其保存的上下文信息加载到 CPU 寄存器中，以便开始执行该进程。</li><li>切换页表：在多进程的环境下，<strong>每个进程都有自己独立的地址空间</strong>（虚拟内存），因此在切换进程时，需要将当前进程的页表（用于地址映射）切换为目标进程的页表。</li><li>恢复执行：一旦目标进程的上下文信息被加载，CPU 会从目标进程的上次停止的位置继续执行。</li></ul><h2 id="与线程切换的区别："><a href="#与线程切换的区别：" class="headerlink" title="与线程切换的区别："></a>与线程切换的区别：</h2><ul><li>线程切换发生在用户态，进程切换发生在内核态。</li><li>线程切换相对于进程切换来说更加轻量级，因为线程共享了同一地址空间和其他资源，上下文切换的开销较小。</li></ul><h1 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h1><ul><li><strong>共享内存</strong> </li><li><strong>管道</strong> 半双工</li><li><strong>信号</strong> signal ，用于处理异步事件，如外部中断、错误、异常等情况</li><li><strong>信号量</strong> semaphore（mutex）实现进程间的互斥与同步，int计数器</li><li><strong>消息队列</strong> 保存在内核中的消息链表<h1 id="线程同步的方式有哪些"><a href="#线程同步的方式有哪些" class="headerlink" title="线程同步的方式有哪些"></a>线程同步的方式有哪些</h1></li><li><strong>互斥锁</strong></li><li><strong>读写锁</strong></li><li><strong>自旋锁</strong> 适用于锁被持有时间较短的情况：线程尝试获得锁时，如果锁已被占用，线程会一直忙等待直到锁被释放</li><li><strong>信号量</strong></li><li><strong>条件变量</strong></li><li><strong>原子操作</strong></li></ul><h1 id="fork子进程与父进程的区别"><a href="#fork子进程与父进程的区别" class="headerlink" title="fork子进程与父进程的区别"></a>fork子进程与父进程的区别</h1><p>在调用 fork() 函数时，操作系统会创建一个新的进程，这个新的进程称为子进程。子进程是父进程的一个复制，它将继承父进程的内存空间、文件描述符等资源。<br>fork之后，子进程和父进程之间是完全独立进行，互不干扰。</p><h1 id="死锁定义-amp-产生条件"><a href="#死锁定义-amp-产生条件" class="headerlink" title="死锁定义&amp; 产生条件"></a>死锁定义&amp; 产生条件</h1><p>定义：<br>死锁（Deadlock）是指在多个进程或线程之间，每个进程或线程都在等待一个事件，而这个事件只能由其他等待的进程或线程触发，从而导致所有进程或线程都无法继续执行的一种状态。</p><p>产生条件</p><ul><li>互斥（Mutual Exclusion）：资源只能被一个进程或线程占用，如果资源被占用，其他进程或线程必须等待。</li><li>持有和等待（Hold and Wait）：一个进程或线程可以在持有某个资源的同时等待其他资源，这时如果其他资源被占用，就会导致死锁。</li><li>不可剥夺（No Preemption）：资源不能被强制从一个进程或线程中抢占，只能由占用它的进程或线程显式释放。</li><li>循环等待（Circular Wait）：多个进程或线程之间形成一个环路。</li></ul><h1 id="进程调度策略"><a href="#进程调度策略" class="headerlink" title="进程调度策略"></a>进程调度策略</h1><ul><li>先来先服务</li><li>短进程优先</li><li>时间片轮转</li><li>优先级队列</li><li>多级反馈队列<h1 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h1></li><li>先进先出</li><li>最近最久未使用（手撕）</li></ul><h1 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h1><ul><li>先来先服务</li><li>最短寻道优先</li><li>扫描算法<h1 id="分页是什么，内存页面"><a href="#分页是什么，内存页面" class="headerlink" title="分页是什么，内存页面"></a>分页是什么，内存页面</h1>分页是操作系统中一种内存管理技术。</li></ul><p>优势 </p><ul><li>虚拟内存的实现：允许程序使用比实际物理内存更大的地址空间。</li><li>分页策略：可以实现页面置换算法，将不常用的页置换到磁盘上。</li><li>内存保护：可以将页设置为只读或只执行，从而保护程序的关键部分不被修改。</li><li>内存共享：多个进程可以共享相同的物理页，减少了内存的占用。</li></ul><h1 id="分段是什么，存在碎片问题"><a href="#分段是什么，存在碎片问题" class="headerlink" title="分段是什么，存在碎片问题"></a>分段是什么，存在碎片问题</h1><p>与分页不同，分段不将内存划分为固定大小的块，而是将其划分为逻辑上相关联的段，每个段的长度可以不同。</p><p>优势</p><ul><li>更灵活的内存管理：可以根据程序的需要分配不同大小的段，更好地利用内存。</li><li>更好的地址空间划分：可以将程序的不同部分（如代码、数据、堆栈等）放置在不同的段中，提高了程序的可读性和可维护性。</li><li>内存保护：可以通过设置段的权限（如只读、读写等）来保护程序的关键部分，防止非法访问。</li><li>共享和动态加载：不同程序可以共享相同的段，也可以在运行时动态加载和卸载段。</li></ul><p>使用场景</p><ul><li>动态链接库（DLL）：在操作系统中，动态链接库通常会以独立的段来存放，这样可以在运行时被加载和卸载。</li><li>程序的逻辑结构：将程序的不同部分（如代码段、数据段、堆栈段等）放置在不同的段中，可以使程序的逻辑结构更清晰，提高可读性和可维护性。</li><li>内存保护：可以通过设置段的权限来保护程序的关键部分，防止非法访问。例如，将代码段设置为只读，防止在运行时修改代码</li></ul><h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p>通过将程序的逻辑地址空间映射到物理内存或磁盘上的存储空间来实现。<br>实现技术：分页和分段技术</p><h1 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h1><p>时间局部性：如果一个数据项被访问，那么在不久的将来它很可能再次被访问。这意味着程序往往会重复使用相同的数据。</p><p>空间局部性：如果一个数据项被访问，那么在它附近的数据也很可能会被访问。这意味着程序往往会以块或连续区域的方式访问数据。</p><h1 id="交换空间（Swap分区）"><a href="#交换空间（Swap分区）" class="headerlink" title="交换空间（Swap分区）"></a>交换空间（Swap分区）</h1><p>当物理内存不足时，操作系统会将一部分不常用的数据（可能是程序的代码、数据等）从物理内存移动到磁盘上的交换文件（Swap File）或者交换分区（Swap Partition）中。这样，物理内存就会腾出空间来运行当前活动的程序。当需要访问被移到交换空间的数据时，操作系统会将其再次加载到物理内存中。</p><h1 id="缓冲区泄漏"><a href="#缓冲区泄漏" class="headerlink" title="缓冲区泄漏"></a>缓冲区泄漏</h1><p>当程序向缓冲区写入超过其容量的数据时，会覆盖相邻内存区域的数据或者控制程序的执行流程，从而可能导致程序崩溃或者执行意外的行为。</p><ul><li>程序崩溃：如果溢出的数据覆盖了程序关键的数据或者控制信息，可能会导致程序崩溃或异常终止。</li><li>提权漏洞：如果一个程序以特权用户或系统管理员的身份运行，并且存在缓冲区溢出漏洞，攻击者可以利用这个漏洞来提升自己的权限，获取对系统的控制权。</li><li>执行恶意代码：攻击者可以通过精心构造的输入数据来覆盖程序的返回地址或者函数指针，从而强行将程序执行流程转移到恶意代码所在的地址，实现远程代码执行攻击。</li><li>信息泄露：攻击者可以利用缓冲区溢出漏洞来读取程序内部的数据，可能包括敏感信息、密码等。</li></ul><h1 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h1><h2 id="僵尸进程：子进程结束，父进程不知道"><a href="#僵尸进程：子进程结束，父进程不知道" class="headerlink" title="僵尸进程：子进程结束，父进程不知道"></a>僵尸进程：子进程结束，父进程不知道</h2><p>定义：僵尸进程是已经结束执行的子进程，但其父进程尚未调用wait()或waitpid()系统调用来获取子进程的退出状态，因此子进程的资源（如进程表项、文件描述符等）尚未被完全释放。</p><p>状态：僵尸进程处于”Z”状态（在ps命令中以”Z”标识），找到Z状态kill掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep Z</span><br><span class="line">kill -s SIGCHLD &lt;PID&gt; </span><br><span class="line">#SIGCHLD信号是一个用于通知父进程子进程状态变化的信号。通过向僵尸进程发送这个信号</span><br></pre></td></tr></table></figure><p>危害：僵尸进程占用了系统资源（如进程表项），如果大量的僵尸进程积累，可能会导致系统资源不足。</p><h2 id="孤儿进程：父进程结束，子进程还在执行，会被init进程接管"><a href="#孤儿进程：父进程结束，子进程还在执行，会被init进程接管" class="headerlink" title="孤儿进程：父进程结束，子进程还在执行，会被init进程接管"></a>孤儿进程：父进程结束，子进程还在执行，会被init进程接管</h2><p>定义：孤儿进程是指一个子进程的父进程提前结束了，而子进程还在继续运行。此时，子进程会被init进程（PID为1）接管，成为init的子进程。<br>状态：孤儿进程的状态正常，不会变成僵尸进程，因为init进程会负责回收孤儿进程的资源。<br>危害：一般情况下，孤儿进程并不会造成严重问题。但如果大量的孤儿进程在系统中运行，可能会占用系统资源，因此最好的做法是在父进程退出前，确保它的子进程已经正确地结束。</p><h1 id="重点：IO多路复用"><a href="#重点：IO多路复用" class="headerlink" title="重点：IO多路复用"></a>重点：IO多路复用</h1><p>IO Multiplexing是指通过一种机制<strong>同时监听多个文件描述符（sockets、文件、设备等）</strong>，当其中任意一个文件描述符就绪（可读、可写或异常）时，就可以对其进行相应的处理，从而提高了系统的性能和响应速度。</p><ul><li>select 轮训，在一个数组中注册多个文件描述符，数据量少时效果好</li><li>数据结构：数组</li><li>poll 轮训，数据量多时效果好</li><li>数据结构：链表</li><li>epoll 使用了事件驱动的方式来管理文件描述符，只有当文件描述符真正就绪时才会通知应用程序</li><li>数据结构：红黑树</li></ul><p>优点：相对于select和poll，epoll的性能更高，因为它采用了红黑树的数据结构来管理文件描述符，可以处理大量的文件描述符，并且在文件描述符就绪时会立即得到通知。</p><h1 id="硬连接-软连接"><a href="#硬连接-软连接" class="headerlink" title="硬连接 软连接"></a>硬连接 软连接</h1><p>硬连接</p><ul><li>硬链接与原文件共享同一个索引节点，具有相同的 Inode 号。</li><li>不能连接目录，防止形成环<br>软连接</li><li>软链接是一个单独的文件，其中包含了指向目标文件的路径信息。</li><li>能连接目录</li></ul><h1 id="中断的处理过程"><a href="#中断的处理过程" class="headerlink" title="中断的处理过程"></a>中断的处理过程</h1><ol><li>中断触发，事件可能包括定时器结束，系统调用，异常等</li><li>中断请求，向CPU发送通知，我要处理一个终端</li><li>中断控制器（Interrupt Controller）将中断请求映射到一个中断向量，对应了中断处理程序的入口地址，是映射关系，类似于函数指针。</li><li>根据中断向量表将中断向量映射到实际的中断处理程序的入口地址。</li><li>保存上下文</li><li>执行中断服务程序</li><li>关中断</li><li>恢复现场后，<strong>重新执行产生中断的那一句指令</strong></li></ol><h1 id="中断和轮训"><a href="#中断和轮训" class="headerlink" title="中断和轮训"></a>中断和轮训</h1><ol><li>触发条件不同，中断是被动条件触发（定时器结束、产生异常），轮训是主动查询资源状体啊</li><li>响应能力不同，中断实时发生，论文有延迟</li><li>轮训同步，中断异步</li></ol><h1 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h1><p>零拷贝是一种优化数据传输的技术，它通过<strong>减少或消除数据在内存之间的复制过程</strong>来提高传输效率，从而在高性能的数据传输场景中发挥重要作用。</p><ol><li>传递文件描述符</li><li>允许内核缓冲区直接访问</li><li>DMA</li><li>sendfile() 将一个文件描述符的内容发给另一个</li><li>mmap()文件映射到内存</li></ol><p><strong>Redis：</strong><br>Redis 通过使用 sendfile 系统调用，实现了零拷贝技术，可以在文件传输时避免数据在用户空间和内核空间之间的多次拷贝。</p><p><strong>Kafka：</strong><br>Kafka 在数据的生产者和消费者之间使用了零拷贝技术。生产者将数据<strong>直接写入内核缓冲区</strong>，消费者从内核缓冲区直接读取数据，避免了中间的数据拷贝过程。</p><h1 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h1><p><strong>分配管理</strong></p><ul><li>栈由编译器管理，自动分配和释放内存，函数调用时分配，并在函数返回时自动释放。</li><li>堆通常用于存储动态分配的数据，由程序员手动管理内存的分配和释放。<code>malloc()、calloc()、realloc()</code></li></ul><p><strong>存储内容</strong><br>栈用于存储函数的局部变量和控制信息<br>堆用于存储动态分配的数据，如动态数组、对象等。<br><strong>大小和位置</strong></p><ul><li>栈的大小是固定有限的，由系统在程序启动时分配，每个函数调用时，都会创建一个称为帧（Frame）的区域来存储这些信息</li><li>堆大小不固定，位置不固定</li></ul><h2 id="CPU占用率-使用率-负载"><a href="#CPU占用率-使用率-负载" class="headerlink" title="CPU占用率 使用率 负载"></a>CPU占用率 使用率 负载</h2><p>CPU占用率、使用率和负载是监控和评估计算机系统性能的三个不同方面。</p><p><strong>CPU占用率（CPU Usage）：</strong><br>CPU占用率是指计算机CPU处理任务的效率和利用率。它通常以百分比的形式表示，表示CPU正在执行任务的时间占总时间的比例。例如，一个CPU占用率为50%的系统表示CPU一半的时间用于处理任务，一半的时间处于空闲状态。</p><p><strong>CPU使用率（CPU Utilization）：</strong><br>CPU使用率是指实际用于处理计算任务的CPU时间与总时间的比例。它反映了CPU的工作效率，是一个反映计算机性能的重要指标。CPU使用率可以分为用户态使用率、内核态使用率等不同类型。</p><p><strong>负载（Load Average）：</strong><br>负载是一个相对于一段时间内系统CPU运算负荷的指标。通常以三个数值表示，分别表示系统在过去1分钟、5分钟和15分钟内的负载情况。例如，一个负载为1.0的系统表示在平均1分钟内，有一个任务在运行。</p><p><strong>区别总结：</strong></p><p>CPU占用率关注的是CPU执行任务的效率，以百分比表示。<br>CPU使用率关注的是实际用于处理任务的CPU时间占总时间的比例，也以百分比表示，但更偏向于反映CPU的工作效率。<br>负载关注的是系统的整体负担情况，包括CPU、内存、磁盘等资源的占用情况，以及等待队列中的任务数。</p><h2 id="Linux进程间通信：管道（匿名管道和有名管道）、信号、消息队列、共享内存、信号量、套接字（socket）"><a href="#Linux进程间通信：管道（匿名管道和有名管道）、信号、消息队列、共享内存、信号量、套接字（socket）" class="headerlink" title="Linux进程间通信：管道（匿名管道和有名管道）、信号、消息队列、共享内存、信号量、套接字（socket）"></a>Linux进程间通信：管道（匿名管道和有名管道）、信号、消息队列、共享内存、信号量、套接字（socket）</h2><h2 id="Linus线程间通信：互斥量、信号量、条件变量"><a href="#Linus线程间通信：互斥量、信号量、条件变量" class="headerlink" title="Linus线程间通信：互斥量、信号量、条件变量"></a>Linus线程间通信：互斥量、信号量、条件变量</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;线程安全（Thread Safety）：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当多个线程访问某个类或者对象时，如果不需要
      
    
    </summary>
    
      <category term="OS" scheme="http://waynamigo.github.io/categories/OS/"/>
    
    
      <category term="面试" scheme="http://waynamigo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="OS" scheme="http://waynamigo.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>NetWorking</title>
    <link href="http://waynamigo.github.io/2023/01/04/%E9%9D%A2%E7%BB%8F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://waynamigo.github.io/2023/01/04/面经计算机网络/</id>
    <published>2023-01-03T16:00:00.000Z</published>
    <updated>2023-10-30T07:15:20.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p>MAC头部：6<br>IP头部：20<br>TCP头部：20到60字节<br>UDP头部：8<br>TCP最大长度 65535 - 头部</p><p>UDP最大长度 65535 - 头部</p><h2 id="TCP的字节序是大端还是小端【大端】为什么？"><a href="#TCP的字节序是大端还是小端【大端】为什么？" class="headerlink" title="TCP的字节序是大端还是小端【大端】为什么？"></a>TCP的字节序是大端还是小端【大端】为什么？</h2><p>小端字节序是将最低有效字节存储在内存的最低地址处，而大端字节序则是将最高有效字节存储在最低地址处。</p><ol><li>网络字节序是大端，arm64和x86主机采用主机字节序，是小端</li><li>如果两台主机的CPU架构或者字节序不同（比如一台是小端序，另一台是大端序），TCP协议会在传输过程中自动进行字节序的转换，以保证接收方能够正确地解析数据。</li></ol><ul><li>创建socket或bind时，要用htonl、htons等函数来将端口或ip地址从主机字节序转换成网络字节序</li><li>send，recv等函数传输的只是字节流，不关心大小端序<h2 id="TCP如何保证可靠的"><a href="#TCP如何保证可靠的" class="headerlink" title="TCP如何保证可靠的"></a>TCP如何保证可靠的</h2></li></ul><ol><li>确认号，序列号</li><li>三次握手和四次挥手</li><li>超时重传（TTS字段）</li><li>流量控制（滑动窗口）</li><li>拥塞控制（拥塞窗口）<h2 id="TCP半连接队列和全连接队列"><a href="#TCP半连接队列和全连接队列" class="headerlink" title="TCP半连接队列和全连接队列"></a>TCP半连接队列和全连接队列</h2>在TCP连接的建立过程中，会涉及到半连接队列（SYN队列）和全连接队列（ESTABLISHED队列）。</li></ol><ul><li>半连接队列中存放的是三次握手中的第一步（即SYN）发送的连接请求，还没有得到完全建立连接的确认</li><li>当TCP连接成功建立后，会被移动到全连接队列<h2 id="粘包和拆包"><a href="#粘包和拆包" class="headerlink" title="粘包和拆包"></a>粘包和拆包</h2>由于网络传输中的数据分片、路由器缓冲区大小限制、接收端缓冲区大小设置等因素造成的</li><li><strong>粘包</strong>：多个数据包被合并成一个大的数据块</li><li><strong>拆包</strong>：只收到了一个大包，被拆成了多个小块</li><li>TCP选项字段可以设置MTU，指网络通信中能够通过的最大数据包的大小。通过设置MTU，可以控制单个数据包的大小，但并不能解决粘包和拆包的问题。</li><li>粘包和拆包问题主要是因为TCP协议是流协议，它并没有记录消息的边界信息。因此，在数据传输过程中，可能会出现多个消息被合并成一个包（粘包）或一个消息被拆分成多个包（拆包）的情况。<h1 id="TCP最大长度为2的32次方-头部字段"><a href="#TCP最大长度为2的32次方-头部字段" class="headerlink" title="TCP最大长度为2的32次方-头部字段"></a>TCP最大长度为2的32次方-头部字段</h1><h3 id="解决办法【固定长度，消息边界，定时器，缓冲区】"><a href="#解决办法【固定长度，消息边界，定时器，缓冲区】" class="headerlink" title="解决办法【固定长度，消息边界，定时器，缓冲区】"></a>解决办法【固定长度，消息边界，定时器，缓冲区】</h3></li></ul><ol><li>头部字段，固定消息长度</li><li>帧数据字段加入边界信息，比如某个特定字符</li><li>使用定时器来等待足够长的时间以接收完整的消息，</li><li>可以通过合理设置缓冲区大小来保证完整接收消息<h2 id="TCP的TIMEWAIT状态过多会发生什么"><a href="#TCP的TIMEWAIT状态过多会发生什么" class="headerlink" title="TCP的TIMEWAIT状态过多会发生什么"></a>TCP的TIMEWAIT状态过多会发生什么</h2>TCP的TIME_WAIT状态发生在第四次挥手，是为了确保在网络中所有的数据包都被正确地接收和处理，以避免出现数据包混淆或丢失的情况</li><li>内存资源、端口资源大量被占用，新连接无法建立，被网络攻击，导致程序崩溃等情况</li><li>拒绝服务（DOS）攻击，端口扫描攻击<h3 id="【如何解决】"><a href="#【如何解决】" class="headerlink" title="【如何解决】"></a>【如何解决】</h3></li><li>在程序里设置一个等待参数，超时退出</li><li>使用连接池复用连接<h2 id="传输内容"><a href="#传输内容" class="headerlink" title="传输内容"></a>传输内容</h2>应用层 报文<br>传输层 报文段<br>网络层 数据包<br>链路层 数据帧<br>物理层 比特流<h2 id="网络层实现转发"><a href="#网络层实现转发" class="headerlink" title="网络层实现转发"></a>网络层实现转发</h2><h2 id="路由表是使用什么数据结构查找的？路由表中没有要查找的IP怎么办？"><a href="#路由表是使用什么数据结构查找的？路由表中没有要查找的IP怎么办？" class="headerlink" title="路由表是使用什么数据结构查找的？路由表中没有要查找的IP怎么办？"></a>路由表是使用什么数据结构查找的？路由表中没有要查找的IP怎么办？</h2>路由表通常使用前缀树（Trie）存储路由表项，存的是一个<strong>IP地址与下一跳路由器，即路由器的IP地址</strong>，的映射<br>没有要查找的IP，则跳到默认的下一跳，如果一直转发默认下一跳，则丢弃或者不可达信号</li></ol><h2 id="简述TCP的拥塞控制"><a href="#简述TCP的拥塞控制" class="headerlink" title="简述TCP的拥塞控制"></a>简述TCP的拥塞控制</h2><p>首先，通过<strong>慢启动</strong>机制，当建立新的TCP连接时，发送方会谨慎地开始发送数据，逐步增大发送量以避免过快发送引起网络拥塞，每次x2。其次，一旦拥塞窗口达到设定阈值，TCP进入<strong>拥塞避免</strong>状态，发送方将<strong>以线性方式增大拥塞窗口</strong>，以保持合理的数据传输速率。</p><ol><li>发现数据丢失时，用<strong>快速重传和快速恢复机制</strong>：1.计时器检测没有确认，超时重传发生，TCP会将拥塞窗口减半，再线性增加。<h2 id="简述TCP的流量控制【确保接收方能以自己的接收速度来处理】"><a href="#简述TCP的流量控制【确保接收方能以自己的接收速度来处理】" class="headerlink" title="简述TCP的流量控制【确保接收方能以自己的接收速度来处理】"></a>简述TCP的流量控制【确保接收方能以自己的接收速度来处理】</h2>通过接收方维护接收的窗口实现的。<br>发送方<h1 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1. 应用层"></a>1. 应用层</h1><h2 id="HTTP的无状态、明文传输特性"><a href="#HTTP的无状态、明文传输特性" class="headerlink" title="HTTP的无状态、明文传输特性"></a>HTTP的无状态、明文传输特性</h2></li></ol><ul><li>无状态：在处理每个请求时都不会记住之前的请求，每个请求都是独立的，不依赖于之前的请求</li><li>状态码：状态码用来指示<strong>服务器对请求</strong>的处理状态<h2 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h2></li><li>强制缓存：浏览器判断缓存没有过期，则直接使用浏览器的本地缓存</li><li>协商缓存：通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存，响应状态码为304。</li><li>【TIP】只有在未能命中强制缓存的时候，才能发起带有协商缓存字段的请求。</li></ul><h2 id="HTTP-和HTTPs-的区别"><a href="#HTTP-和HTTPs-的区别" class="headerlink" title="HTTP 和HTTPs 的区别"></a>HTTP 和HTTPs 的区别</h2><ol><li>HTTP是明文传输，HTTPS使用了SSL证书来建立加密传输过程，HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</li><li>HTTP是直接运行在TCP协议基础上的，HTTPS是运行在SSL协议上，其中SSL协议建立在TCP之上，使用加密和身份验证保证安全性</li><li>HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li><li>CA证书放在服务器上，证书内容包含服务器的公钥、持有者信息、颁发者信息、有效期等等</li><li>CA证书验证：服务器向客户端发送证书时，客户端会使用相应的CA的公钥来验证证书的合法性。包括检查证书的数字签名是否正确、证书是否在有效期内等。</li><li>CA信任链验证：如果客户端信任该CA（通常是因为<strong>CA的根证书</strong>预装在操作系统或浏览器中），那么客户端将信任由该CA签发的证书。</li></ol><h2 id="HTTP状态码目录"><a href="#HTTP状态码目录" class="headerlink" title="HTTP状态码目录"></a>HTTP状态码目录</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</a></p><ul><li>200：成功返回响应</li><li>301：永久重定向，客户端第一次访问此 url 时，告知客户端以后直接访问新的 url，该状态保存在浏览器缓存中。</li><li>302；临时重定向，客户端每次访问此 url 时，告知客户端重定向到新的 url ，后续访问依然访问当前的 url。</li><li>304：使用协商缓存</li><li>400：发送的请求错误，请求格式错误，或者没有服务器要求的数据。</li><li>401：没有权限访问，当前用户没有权限访问此资源。</li><li>403：请求被服务器禁止。</li><li>404：请求的 url 不存在，一般是 url 出错。</li><li>500：服务器处理请求出现错误。</li><li>501：服务器超出能力之外的方法，例如：请求的方法服务器不支持。</li><li>504：来自网关或者代理服务器，请求资源服务器时超时。</li></ul><h2 id="HTTP2：解决HTTP延迟高的问题"><a href="#HTTP2：解决HTTP延迟高的问题" class="headerlink" title="HTTP2：解决HTTP延迟高的问题"></a>HTTP2：解决HTTP延迟高的问题</h2><ul><li>延迟高的原因：请求-响应模型、头部巨大且重复、并发连接耗时、服务器不能主动推送等<h3 id="解决方法与针对的问题"><a href="#解决方法与针对的问题" class="headerlink" title="解决方法与针对的问题"></a>解决方法与针对的问题</h3></li><li>头部压缩：Cookie、User Agent、Accept 头部字段内容太大</li><li>二进制帧：字段传输速度，便于位运算</li><li>并发传输：缓解了队头阻塞问题（没有解决）</li><li>服务端主动推送资源<h3 id="方法细节"><a href="#方法细节" class="headerlink" title="方法细节"></a>方法细节</h3></li><li>头部压缩：使用Hpack算法，静态字典/动态字典/哈夫曼编码。客户端和服务器两端都会建立和维护「字典」，用长度较小的索引号表示重复的字符串，再用 Huffman 编码压缩数据，可达到 50%~90% 的高压缩率。</li><li>二进制帧：响应报文划分成了两类帧，包括 首部 和 DATA（负载），也就是说一条 HTTP 响应，划分成了两类帧来传输，并且采用二进制来编码。</li><li>并发传输：使用 Stream 设计，多个 Stream 复用一条 TCP 连接，达到并发的效果</li></ul><p><img src="/images/http2stream.webp" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 1 个 TCP 连接包含一个或者多个 Stream，Stream 是 HTTP/2 并发的关键技术；</span><br><span class="line">- Stream 里可以包含 1 个或多个 Message，Message 对应 HTTP/1 中的请求或响应，由 HTTP 头部和包体构成；</span><br><span class="line">- Message 里包含一条或者多个 Frame，Frame 是 HTTP/2 最小单位，以二进制压缩格式存放 HTTP/1 中的内容（头部和包体）；</span><br><span class="line">- 一个 Frame 可以由多个 TCP 报文构成</span><br><span class="line">- 不同stream的帧可以乱序，帧头部可以带stream ID，接收端可以重组</span><br></pre></td></tr></table></figure><ul><li>服务端推送资源：客户端发起的请求，必须使用的是奇数号 Stream，服务器主动的推送，使用的是偶数号 Stream。服务器在推送资源时，会通过 PUSH_PROMISE 帧传输 HTTP 头部，并通过帧中的 Promised Stream ID 字段告知客户端，接下来会在哪个偶数号 Stream 中发送包体。<h2 id="HTTP3-quic协议，使用HTTP2-TLS-UDP"><a href="#HTTP3-quic协议，使用HTTP2-TLS-UDP" class="headerlink" title="HTTP3: quic协议，使用HTTP2 + TLS + UDP"></a>HTTP3: quic协议，使用HTTP2 + TLS + UDP</h2>HTTP2存在问题：</li></ul><ol><li>TCP层的队头阻塞问题：HTTP/2 多个请求是跑在一个 TCP 连接中的，那么当 TCP 丢包时，整个 TCP 都要等待重传，那么就会阻塞该 TCP 连接中的所有请求。<ul><li><strong>TCP 是字节流协议</strong>。TCP 层必须保证收到的字节数据是完整且有序的，如果序列号较低的 TCP 段在网络传输中丢失了，即使序列号较高的 TCP 段已经被接收了，应用层也无法从内核中读取到这部分数据，从 HTTP 视角看，就是请求被阻塞了。</li></ul></li><li>TCP 与 TLS 的握手时延迟：TCP 由于具有「拥塞控制」的特性，所以刚建立连接的 TCP 会有个「慢启动」的过程，它会对 TCP 连接产生“减速”效果</li><li>网络迁移需要重新连接：<h3 id="quic协议"><a href="#quic协议" class="headerlink" title="quic协议"></a>quic协议</h3></li><li>无队头阻塞：传输层协议换成UDP，根本上避免了TCP的队头阻塞。<ul><li>quic协议会保证数据包的可靠性，每个数据包都有一个序号唯一标识。当某个流中的一个数据包丢失了，即使该流的其他数据包到达了，数据也无法被 HTTP/3 读取，直到 QUIC 重传丢失的报文，数据才会交给 HTTP/3。</li><li>而其他流的数据报文只要被完整接收，HTTP/3 就可以读取到数据。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。</li></ul></li><li>更快的连接建立：quic协议握手的方式：<ul><li>QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS 1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商，甚至在第二次连接的时候，应用数据包可以和 QUIC 握手信息（连接信息 + TLS 信息）一起发送，达到 0-RTT 的效果。</li></ul></li><li>连接迁移：没有用四元组的方式来“绑定”连接，而是通过连接 ID 来标记通信的两个端点，客户端和服务器可以各自选择一组 ID 来标记自己，因此即使移动设备的网络变化后，导致 IP 地址变化了，只要仍保有上下文信息（比如连接 ID、TLS 密钥等），就可以“无缝”地复用原连接，消除重连的成本，没有丝毫卡顿感。</li></ol><h2 id="网页解析HTTP请求："><a href="#网页解析HTTP请求：" class="headerlink" title="网页解析HTTP请求："></a>网页解析HTTP请求：</h2><ol><li><p>输入url</p></li><li><p>DNS解析，就近原则，如果本地DNS服务器的缓存中没有，就发到DNS根服务器，</p><ul><li>根DNS服务器返回的报文，告诉本地DNS，这个域名由哪个顶级DNS服务器负责，本地去这个顶级（比如.com）服务器去查询</li><li>顶级返回次级地址，次级返回次次级，最后返回目标IP，本地DNS缓存更新这个IP</li><li>其中用户使用的DNS服务器默认是运营商提供的本地域名解析器，检查自己的缓存</li></ul></li><li><p><strong>建立TCP连接，经过三次握手 <em>1.C-&gt;S发送握手请求，附带一个SEQ=x，2.S-&gt;C发送收到，福袋一个ACK=x+1，和另一个SEQ=y ，3. C-&gt;S发送一个ACK=y+1 ,SEQ =x+1，上一个ACK</em>，结束SYN-RECV阶段，并进入establish阶段/</strong></p></li><li><p>释放连接，<strong>经过四次挥手</strong> <em>1.</em></p><h2 id="网页解析HTTPS请求：先建立TCP，再建立SSL加密"><a href="#网页解析HTTPS请求：先建立TCP，再建立SSL加密" class="headerlink" title="网页解析HTTPS请求：先建立TCP，再建立SSL加密"></a>网页解析HTTPS请求：先建立TCP，再建立SSL加密</h2></li><li><p>输入url，三次握手完成TCP通信建立</p></li><li><p>客户端发送https请求到服务端</p></li><li><p>服务端发回SSL证书和公钥到客户端</p></li><li><p>客户端验证证书安全性，如果安全，生成对称密钥，把这个密钥用公钥发回服务端</p></li><li><p>服务端用自己的私钥解密，这样两者都有了session key，后面的传输都是通过这个对称加密进行的</p></li></ol><h2 id="HTTP1-1的长连接是怎样建立的"><a href="#HTTP1-1的长连接是怎样建立的" class="headerlink" title="HTTP1.1的长连接是怎样建立的"></a>HTTP1.1的长连接是怎样建立的</h2><p>响应头中包含了 Connection: keep-alive 字段，那么它表示愿意保持连接开启，后续的请求都会通过上一个连接发送</p><h2 id="HTTP方法：POST-GET的区别：get提交数据在url后，post在body中；get具有幂等性，post不具有"><a href="#HTTP方法：POST-GET的区别：get提交数据在url后，post在body中；get具有幂等性，post不具有" class="headerlink" title="HTTP方法：POST GET的区别：get提交数据在url后，post在body中；get具有幂等性，post不具有"></a>HTTP方法：POST GET的区别：get提交数据在url后，post在body中；get具有幂等性，post不具有</h2><p>GET 方法具有<strong>幂等性</strong>，指同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。<br>POST不具有幂等性。</p><ol><li><p>get 提交的数据会放在 url 之后，post 提交的数据放在 body 上。<br>get请求参数会以 url 的形式完整的保留在浏览器的记录里，会存在安全问题。而 post 数据放在请求主体中，且数据不会被浏览器记录，相比 get 方法，post 方法更安全，主要用于修改服务器上的资源。</p><ul><li><p>post 可以进行复杂的加密，get 则不可以</p></li><li><p>get 只支持 ASCII 字符格式的参数，而 post 方法没有限制。</p></li><li><p>get 提交的数据大小有限制（这里所说的限制是针对浏览器而言的），而 post 方法提交的数据理论上没限制</p></li></ul></li><li><p>get 方法具有幂等性，post 方法不具有。<br>幂等性，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p></li><li><p>post方法有时会发送两个 tcp 数据包，与浏览器有关</p></li></ol><ul><li>使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</li><li>而 GET 方法 Header 和 Data 会一起发送<br>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</li></ul><h2 id="长连接：减少-TCP-连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。"><a href="#长连接：减少-TCP-连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。" class="headerlink" title="长连接：减少 TCP 连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。"></a>长连接：减少 TCP 连接的重复建立和断开所造成的额外开销，减轻服务器端的负载。</h2><ul><li>管道传输【一般不使用】：在同一个 TCP 连接里面，客户端可以发起多个请求：只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间</li><li>队头阻塞问题：当顺序发送的请求序列中的某个请求阻塞时，后面的请求也会一直被阻塞。<h1 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2. 传输层"></a>2. 传输层</h1><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2>UDP头部包含8个字节64位</li></ul><p>UDP头部的格式如下：</p><p><strong>源端口 (16位)</strong>：用于标识发送方的端口号。<br><strong>目标端口 (16位)</strong>：用于标识接收方的端口号。<br><strong>长度 (16位)</strong>：指示UDP报文头部和数据的总长度，以字节为单位，最小值为8（只有头部）。<br><strong>校验和 (16位)</strong>：用于检测UDP报文是否在传输过程中发生了错误。</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP头部包含20个字节。握手挥手时，数据字段为空</p><h3 id="为什么要进行三次握手-？"><a href="#为什么要进行三次握手-？" class="headerlink" title="*为什么要进行三次握手 ？"></a>*为什么要进行三次握手 ？</h3><p>确认客户端和服务端都可以正常发送接收数据。</p><ul><li>第一次握手：确认客户端可以正常发送数据。</li><li>第二次握手：确认客户端可以正常发送数据，确认服务端可以正常接收数据。</li><li>第三次握手：确认客户端可以正常发送数据，确认服务端可以正常接收数据，确认服务端可以正常发送数据，客户端可以正常接收数据。<h3 id="三次握手过程中网络断开，会出现什么情况"><a href="#三次握手过程中网络断开，会出现什么情况" class="headerlink" title="三次握手过程中网络断开，会出现什么情况"></a>三次握手过程中网络断开，会出现什么情况</h3></li></ul><p>第一次握手丢失：客户端没收到第二次握手，触发超时重传机制，发送第一次握手<br>第二次握手丢失：客户端依然没收到第二次握手，触发超时重传，发送第一次握手；服务端没有收到第三次握手，超时重传，发送第二次握手<br>第三次握手丢失：客户端establish状态，服务端没有收到第三次握手，超时重传，仍然发送第二次握手</p><p>超时重传的限度：发送一定次数N，这个次数由内核限制，linux为5次。</p><h3 id="为什么要进行四次挥手-？"><a href="#为什么要进行四次挥手-？" class="headerlink" title="为什么要进行四次挥手 ？"></a>为什么要进行四次挥手 ？</h3><p>第一次挥手：客户端向服务端请求关闭连接。</p><ul><li>客户端：客户端无数据传输。</li><li>服务端：无感知。</li></ul><p>第二次挥手：服务端收到客户端的请求，并且告知客户端等我处理完毕数据。</p><ul><li>客户端：客户端无数据传输。</li><li>服务端：客户端无数据传输。</li></ul><p>第三次挥手：服务端处理完毕数据，告知客户端，服务端数据处理完毕。</p><ul><li>客户端：客户端无数据传输，服务端无数据传输。</li><li>服务端：客户端无数据传输，服务端无数据传输。</li></ul><p>第四次挥手：客户端得知服务端数据处理完毕，双方数据都处理完毕，可断开连接。</p><ul><li>客户端：客户端无数据传输，服务端无数据传输。</li><li>服务端：客户端无数据传输，服务端无数据传输，得知客户端知道服务端无数据传输。</li></ul><h3 id="TCP是如何保证可靠传输的"><a href="#TCP是如何保证可靠传输的" class="headerlink" title="*TCP是如何保证可靠传输的"></a>*TCP是如何保证可靠传输的</h3><p>1 数据分块<br>​ 应用数据被分割成 TCP 认为最适合发送的数据块。并且给每一个数据块进行编号，在传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答，即发送 ACK 报文，这个 ACK 报文当中带有对应的确认序列号，如果发送过程中，存在数据块丢失或者发送重复，接收方根据序列号整理数据块，删除重复的数据块，要求发送方重新发送丢失的数据块。</p><p>2 校验和<br>与UDP 校验和相同，监测数据传输过程中可能出现的差错。</p><p>3 流量控制<br>让发送方的发送速率不要太快，让接收方来得及接收，TCP 连接的双方都有一个固定大小的缓冲空间，发送方发送的数据量不能超过接收端缓冲区的大小。当接收方来不及处理发送方的数据，会提示发送方降低发送的速率，防止产生丢包。TCP 通过滑动窗口协议来支持流量控制机制。</p><p>4 ARQ协议<br>ARQ(Automatic Repeat-reQuest)自动重传协议：每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</p><p>5 超时重传<br>当 TCP 发出一个报文段后，它启动一个定时器，等待目的端确认收到这个报文段。如果超过某个时间还没有收到确认，将重发这个报文段。</p><p>6 拥塞控制<br>在实际的网络通信系统中，除了发送方和接收方外，还有路由器，交换机等复杂的网络传输线路，此时就需要拥塞控制。拥塞控制是作用于网络的，它是防止过多的数据注入到网络中，避免出现网络负载过大的情况。常用的解决方法有：慢开始和拥塞避免、快重传和快恢复。</p><p>慢开始：当发送方开始发送数据时，由于一开始不知道网络负荷情况，如果立即将大量的数据字节传输到网络中，那么就有可能引起网络拥塞。一个较好的方法是在一开始发送少量的数据先探测一下网络状况。慢开始的慢指的是初始发送报文段的数量为 1，如果收到确认，则发送两个报文段，之后每收到一个确认报文，发送报文端的数量就翻倍，直到到达慢开始门限，当发送报文段的数据大于门限数量时，使用拥塞避免算法。<br>拥塞避免：当网络拥塞发生时，慢开始门限值减半，发送的报文段数量改变为 1 ,然后再次重复两种算法（慢开始和拥塞避免）。<br>快重传：接收方每收到一个失序的报文就立即发送重复确认，而不要等到自己发送数据时才捎带进行确认，假定发送方发送了 Msg 1 ~ Msg 4 这 4 个报文，已知接收方收到了 Msg 1，Msg 3 和 Msg 4 报文，此时因为接收到收到了失序的数据包，按照快重传的约定，接收方应立即向发送方发送 Msg 1 的重复确认。 于是在接收方收到 Msg 4 报文的时候，向发送方发送的仍然是 Msg 1 的重复确认。这样，发送方就收到了 3 次 Msg 1 的重复确认，于是立即重传对方未收到的 Msg 报文。由于发送方尽早重传未被确认的报文段，因此，快重传算法可以提高网络的吞吐量。</p><p>快恢复</p><p>快恢复算法是和快重传算法配合使用的，该算法主要有以下两个要点：</p><p>① 当发送方连续收到三个重复确认，执行乘法减小，慢开始门限值减半；</p><p>② 由于发送方可能认为网络现在没有拥塞，因此与慢开始不同，发送报文段的数量减半，然后执行拥塞避免算法，线性增加发送报文段的数量。</p><h2 id="quic协议-1"><a href="#quic协议-1" class="headerlink" title="quic协议"></a>quic协议</h2><p>QUIC(Quick UDP Internet Connections)，是一种基于 UDP 的传输层协议。QUIC = HTTP/2 + TLS + UDP.</p><h1 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3. 网络层"></a>3. 网络层</h1><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>A 类地址：10.0.0.0～10.255.255.255<br>B 类地址：172.16.0.0～172.31.255.255<br>C 类地址：192.168.0.0～192.168.255.255<br>解决IPv4不够用的两种技术：</p><ul><li>nat(network address translation)网络地址转换协议：将内网地址转为公网ip的协议，实现多层网络地址转换。</li><li>IPv6 128位，比IPv4的32位多了四倍<h1 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h1><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2>arp(address resolution protocol) 地址解析协议：根据主机的ip 地址获取主机的mac 地址。每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</li></ul><p>A要发送B一个数据包，首先他有B的IP地址，为了发送成功还需要B的MAC地址。</p><ul><li>首先A查找本地ARP缓存，<strong>IP：MAC的映射</strong></li><li>如果找到MAC 地址，就可以发送消息。</li><li>如果没有，A就会发送一个局域网广播的ARP请求B的MAC的数据包，这个消息被局域网内所有的计算机接受，B返回一个包含自身MAC和IP地址的ARP响应消息。作为响应请求的一部分，B 可以将 A 的一个条目插入到它的 ARP 表中，以备将来使用。</li></ul><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><ul><li>MAC 地址是数据链路层和物理层使用的地址，是写在网卡上的物理地址。MAC 地址用来定义网络设备的位置。</li><li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址。IP 地址用来区别网络上的计算机。<br>互联网中主机之间相互传递数据的逻辑是，先通过 ip 地址找到对应的局域网，然后再找到对应的主机。</li><li>如果只采用 ip 地址，不用mac 地址：不安全， 同一个ip 地址可能绑定多个主机，而无论何时mac 地址和主机是一一对应的。<br>  <strong>找不到主机号，IP本质上相当于逻辑地址，两个主机可能有一个IP</strong></li><li>如果只采用mac 地址，不用ip 地址：没有办法使用ip 通过网段寻找目标主机，需要在全网段内没有规律的找一个主机，效率太慢。<br>  <strong>一个是不够用，二是没有IP网段，全网查找，没有规律</strong></li></ul><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><ul><li>使用最广泛的HTTP/1.1，也是基于TCP协议的，同一时间里，客户端和服务器只能有一方主动发数据，这就是所谓的半双工。</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;体系结构&quot;&gt;&lt;a href=&quot;#体系结构&quot; class=&quot;headerlink&quot; title=&quot;体系结构&quot;&gt;&lt;/a&gt;体系结构&lt;/h1&gt;&lt;p&gt;MAC头部：6&lt;br&gt;IP头部：20&lt;br&gt;TCP头部：20到60字节&lt;br&gt;UDP头部：8&lt;br&gt;TCP最大长度 6553
      
    
    </summary>
    
      <category term="Network" scheme="http://waynamigo.github.io/categories/Network/"/>
    
    
      <category term="network" scheme="http://waynamigo.github.io/tags/network/"/>
    
      <category term="面试" scheme="http://waynamigo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Operating System</title>
    <link href="http://waynamigo.github.io/2023/01/04/%E9%9D%A2%E7%BB%8F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://waynamigo.github.io/2023/01/04/面经设计模式/</id>
    <published>2023-01-03T16:00:00.000Z</published>
    <updated>2023-10-30T07:15:44.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h1><p>开闭原则：软件实体（类、函数、模块）对扩展开放，对修改封闭</p><p>单一职责：每个类只做它负责的事情（一个类应该只有一个引起它修改的原因）<br>里氏替换：子类可以完全代替父类</p><p>依赖倒置：细节依赖于抽象，抽象不依赖于细节，程序细节由底层完成</p><p>最少知道：迪米特法则，尽量降低类与类之间的耦合。一个类不应该知道自己操作的类的细节</p><p>接口隔离：一个接口实现时，如果有冗余，就应该把接口拆分，让实现的类只依赖自己需要的接口，客户端不应依赖于它不知道的接口</p><h1 id="创造型模式"><a href="#创造型模式" class="headerlink" title="创造型模式"></a>创造型模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">工厂方法模式：为每一类对象建立工厂，将对象交由工厂创建，客户端只和工厂打交道。</span><br><span class="line">抽象工厂模式：为每一类工厂提取出抽象接口，使得新增工厂、替换工厂变得非常容易。</span><br><span class="line">建造者模式：用于创建构造过程稳定的对象，不同的 Builder 可以定义不同的配置。</span><br><span class="line">单例模式：全局使用同一个对象，分为饿汉式和懒汉式。懒汉式有双检锁和内部类两种实现方式。</span><br><span class="line">原型模式：为一个类定义 clone 方法，使得创建相同的对象更方便。</span><br></pre></td></tr></table></figure><p>饿汉：变量在声明时便初始化，但饿汉式有一个弊端，那就是即使这个单例不需要使用，它也会在类加载之后立即创建出来，占用一块内存，并增加类初始化时间。<br>懒汉：先声明一个空变量，需要用时才初始化。懒汉式解决了饿汉式的弊端，好处是按需加载，避免了内存浪费，减少了类初始化时间。<br>    - 但是懒汉不是线程安全的，要实现线程安全的懒汉，需要加同步锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span><span class="comment">// 同步包</span></span><br><span class="line"><span class="keyword">type</span> Singleton <span class="keyword">struct</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉</span></span><br><span class="line"><span class="keyword">var</span> instance *Singleton = &amp;Singleton&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInstance</span><span class="params">()</span> *<span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉线程安全</span></span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInstance</span><span class="params">()</span> *<span class="title">Singleton</span></span>&#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        instance := &amp;Singleton&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂模式</strong><br><strong>抽象工厂模式</strong><br><strong>单例模式</strong><br><strong>建造者模式</strong><br><strong>原型模式</strong></p><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">适配器模式：用于有相关性但不兼容的接口</span><br><span class="line">桥接模式：用于同等级的接口互相组合</span><br><span class="line">组合模式：用于整体与部分的结构</span><br><span class="line">外观模式：体现封装的思想</span><br><span class="line">享元模式：体现面向对象的可复用性</span><br><span class="line">代理模式：主要用于对某个对象加以控制</span><br></pre></td></tr></table></figure><p><strong>适配器模式</strong><br><strong>装饰器模式</strong><br><strong>代理模式</strong><br><strong>享元模式</strong>：享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p><p>FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。<br>一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p><p><strong>外观模式</strong><br><strong>桥接模式</strong><br><strong>组合模式</strong></p><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">行为型模式重点关注类与类之间的交互与协作。如同在工作中，每个人的行为都可能影响到其他同事，同时每个人也会受到别人的影响。我们一边接收上级的指令，一边派发任务给下级，在这样的协作中完成一项项伟大的工作。程序在运行时，每个对象都不是孤立的，他们可以通过通信与协作完成种种复杂的功能。</span><br><span class="line"></span><br><span class="line">责任链模式：处理职责相同，程度不同的对象，使其在一条链上传递</span><br><span class="line">命令模式：封装“方法调用”，将行为请求者和行为实现者解耦</span><br><span class="line">解释器模式：定义自己的语法规则</span><br><span class="line">迭代器模式：定义 next() 方法和 hasNext() 方法，让外部类使用这两个方法来遍历列表，以达到隐藏列表内部细节的目的</span><br><span class="line">中介者模式：通过引入中介者，将网状耦合结构变成星型结构</span><br><span class="line">备忘录模式：存储对象的状态，以便恢复</span><br><span class="line">观察者模式：处理一对多的依赖关系，被观察的对象改变时，多个观察者都能收到通知</span><br><span class="line">状态模式：关于多态的设计模式，每个状态类处理对象的一种状态</span><br><span class="line">策略模式：殊途同归，用多种方法做同一件事</span><br><span class="line">模板方法模式：关于继承的设计模式，父类是子类的模板</span><br><span class="line">访问者模式：将数据的结构和对数据的操作分离</span><br></pre></td></tr></table></figure><p><strong>责任链模式</strong>：责任链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止<br><strong>观察者模式</strong><br><strong>中介者模式</strong><br><strong>访问者模式</strong><br><strong>解释器模式</strong><br><strong>迭代器模式</strong><br><strong>命令模式</strong><br><strong>备忘录模式</strong></p><h1 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h1><ol><li>面向对象的特点是什么？</li></ol><p>👉查看答案👈<br>可维护、可复用、可扩展、灵活性好。</p><ol start="2"><li>让面向对象保持结构良好的秘诀是什么？</li></ol><p>👉查看答案👈<br>让面向对象保持结构良好的秘诀就是设计模式，面向对象结合设计模式，才能真正体会到程序变得可维护、可复用、可扩展、灵活性好。</p><ol start="3"><li>六大设计原则是什么？</li></ol><p>👉查看答案👈<br>开闭原则、单一职责原则、里氏替换原则、依赖倒置原则、迪米特原则、接口隔离原则。</p><ol start="4"><li>什么是里氏替换原则？</li></ol><p>👉查看答案👈<br>子类应该可以完全替换父类。也就是说在使用继承时，只扩展新功能，而不要破坏父类原有的功能。</p><ol start="5"><li>工厂模式是用于达到什么目的的设计模式？</li></ol><p>👉查看答案👈<br>封装对象。</p><ol start="6"><li>工厂模式有哪三种？</li></ol><p>👉查看答案👈<br>简单工厂模式、工厂方法模式、抽象工厂模式。</p><ol start="7"><li>工厂方法模式解决了简单工厂模式的哪两个弊端？</li></ol><p>👉查看答案👈<br>当生产的产品种类越来越多时，工厂类不会变成超级类。工厂类会越来越多，保持灵活。不会越来越大、变得臃肿。如果苹果的生产过程需要修改时，只需修改苹果工厂。梨子的生产过程需要修改时，只需修改梨子工厂。符合单一职责原则。<br>当需要生产新的产品时，无需更改既有的工厂，只需要添加新的工厂即可。保持了面向对象的可扩展性，符合开闭原则。</p><ol start="8"><li>抽象工厂模式是什么样的？</li></ol><p>在创建时指定了具体的工厂类后，在使用时就无需再关心是哪个工厂类，只需要将此工厂当作抽象的 IFactory 接口使用即可。这种经过抽象的工厂方法模式被称作抽象工厂模式。</p><ol><li>抽象工厂模式很好的发挥了哪些原则？</li></ol><p>开闭原则、依赖倒置原则。</p><ol><li>抽象工厂模式的缺点是什么？</li></ol><p>缺点是抽象工厂模式太重了，如果 IFactory 接口需要新增功能，则会影响到所有的具体工厂类。使用抽象工厂模式，替换具体工厂时只需更改一行代码，但要新增抽象方法则需要修改所有的具体工厂类。</p><ol><li>抽象工厂模式适用于和不适用于哪些情况？</li></ol><p>适用于增加同类工厂这样的横向扩展需求，不适合新增功能这样的纵向扩展。</p><ol><li>什么时候可以使用单例模式？</li></ol><p>某个对象全局只需要一个实例时即可。</p><ol><li>单例模式的优点是什么？</li></ol><p>• 它能够避免对象重复创建，节约空间并提升效率<br>• 避免由于操作不同实例导致的逻辑错误</p><ol><li>单例模式有哪两种实现方式？请分别简单解释。</li></ol><p>饿汉式和懒汉式。饿汉式指变量在声明时便初始化。懒汉式指先声明一个空变量，需要用时才初始化。</p><ol><li>饿汉式的弊端是什么？</li></ol><p>即使这个单例不需要使用，它也会在类加载之后立即创建出来，占用一块内存，并增加类初始化时间。</p><ol><li>静态内部类方式是怎么保证线程安全的？</li></ol><p>Java 虚拟机的设计是非常稳定的，早已经考虑到了多线程并发执行的情况。虚拟机在加载类的 clinit 方法时，会保证 clinit 在多线程中被正确的加锁、同步。即使有多个线程同时去初始化一个类，一次也只有一个线程可以执行 clinit 方法，其他线程都需要阻塞等待，从而保证了线程安全。</p><ol><li>建造者模式用于什么时候？</li></ol><p>创建过程稳定，但配置多变的对象。</p><ol><li>建造者模式是什么意思？</li></ol><p>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><ol><li>现在建造者模式主要用来做什么？</li></ol><p>通过链式调用生成不同的配置。</p><ol><li>使用建造者模式的好处是什么？</li></ol><p>不用担心忘了指定某个配置，保证了构建过程是稳定的。</p><ol><li>原型模式是什么？</li></ol><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><ol><li>适配器模式适用于什么结构？</li></ol><p>有相关性但不兼容的结构。</p><ol><li>什么是适配？什么是适配器？</li></ol><p>源接口通过一个中间件转换后才可以适用于目标接口，这个转换过程就是适配，这个中间件就称之为适配器。</p><ol><li>需要绘制矩形、圆形、三角形这三种图案，按照桥接模式的思想会怎么做？</li></ol><p>将形状和颜色分离，根据需要对形状和颜色进行组合。</p><ol><li>什么是桥接模式？</li></ol><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体模式或接口模式。</p><ol><li>组合模式适用于什么结构？</li></ol><p>组合模式用于整体与部分的结构，当整体与部分有相似的结构，在操作时可以被一致对待时，就可以使用组合模式。</p><ol><li>组合模式最主要的功能是什么？</li></ol><p>组合模式最主要的功能是让用户可以一致对待整体和部分结构，将两者都作为一个相同的组件。</p><ol><li>什么是组合模式中的透明方式？</li></ol><p>违背了接口隔离原则的组合模式。</p><ol><li>什么是安全方式？</li></ol><p>在 Component 中不声明 add 和 remove 等管理子对象的方法，这样叶节点就无需实现它，只需在枝节点中实现管理子对象的方法即可。</p><ol><li>什么是透明装饰模式？</li></ol><p>装饰器仅用于增强功能，并不会改变 Me 原有的功能，这种装饰模式称之为透明装饰模式。</p><ol><li>装饰模式的缺点是什么？</li></ol><p>容易造成程序中有大量相似的类。</p><ol><li>动态代理相对于静态代理的优势是什么？</li></ol><p>节省代码量。</p><ol><li>简述责任链模式的有优点有哪些？</li></ol><p>• 降低了对象之间的耦合度。<br>• 扩展性强，满足开闭原则。可以根据需要增加新的请求处理类。<br>• 灵活性强。可以动态地改变链内的成员或者改变链的次序来适应流程的变化。<br>• 简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用。</p><ol><li>什么是宏命令？</li></ol><p>宏命令是将多个命令合并起来组成的命令。</p><ol><li>请写出解释器模式的一个常见应用。</li></ol><p>在我们平时匹配字符串时，用到的正则表达式就是一个解释器。</p><ol><li>怎样使得外部类只能读取此列表中的数据，无法修改其中的任何数据，保证其安全性？</li></ol><p>• 提供一个 String next() 方法，使得外部类可以按照次序，一条一条的读取数据；<br>• 提供一个 boolean hasNext() 方法，告知外部类是否还有下一条数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式六大原则&quot;&gt;&lt;a href=&quot;#设计模式六大原则&quot; class=&quot;headerlink&quot; title=&quot;设计模式六大原则&quot;&gt;&lt;/a&gt;设计模式六大原则&lt;/h1&gt;&lt;p&gt;开闭原则：软件实体（类、函数、模块）对扩展开放，对修改封闭&lt;/p&gt;
&lt;p&gt;单一职责：每个类只
      
    
    </summary>
    
      <category term="软件工程" scheme="http://waynamigo.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="面试" scheme="http://waynamigo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="设计模式" scheme="http://waynamigo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="UML" scheme="http://waynamigo.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://waynamigo.github.io/2023/01/03/%E9%9D%A2%E7%BB%8FMySQL/"/>
    <id>http://waynamigo.github.io/2023/01/03/面经MySQL/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-10-30T07:12:35.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql分为哪些层，各用来干嘛的"><a href="#mysql分为哪些层，各用来干嘛的" class="headerlink" title="mysql分为哪些层，各用来干嘛的"></a>mysql分为哪些层，各用来干嘛的</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysql查询流程.png.webp" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>mysql架构共分为两层：Server 层和存储引擎层</li><li>Server 层负责建立连接、分析和执行 SQL</li><li>存储引擎层负责数据的存储和提取<h2 id="mysql基于什么协议传输"><a href="#mysql基于什么协议传输" class="headerlink" title="mysql基于什么协议传输"></a>mysql基于什么协议传输</h2>TCP。<br>三次握手建立后，连接器验证用户名和密码。</li></ul><p><strong>连接器作用</strong></p><ul><li>TCP三次握手</li><li>校检用户名密码，返回用户权限</li></ul><p><strong>查询缓存作用</strong></p><ul><li>select语句输入，执行，先去查询缓存中找，查询缓存中存的是之前执行过的sql语句，以key-value保存的，底层数据结构为哈希表。</li><li>8.0.3后移除了这一层，在一些问题，包括性能问题、锁的竞争问题以及难以扩展。</li></ul><p><strong>解析器作用</strong></p><ul><li><code>词法分析-语法分析-语法树</code>结构</li><li>词法分析（Lexical Analysis）</li><li>语法分析（Syntax Analysis）语法分析器会将其转化为一个抽象语法树（<strong>AST</strong>）</li><li><strong>AST</strong>的作用：编译器或解释器用来理解代码含义的数据结构，它可以被后续的步骤用来进行语义分析、优化和生成目标代码等。</li><li>【查询优化】：对AST进行查询优化，选择合适的索引和决定连接顺序</li></ul><h2 id="【面试题】执行一条-SQL-查询语句，期间发生了什么？"><a href="#【面试题】执行一条-SQL-查询语句，期间发生了什么？" class="headerlink" title="【面试题】执行一条 SQL 查询语句，期间发生了什么？"></a>【面试题】执行一条 SQL 查询语句，期间发生了什么？</h2><ul><li>连接器：建立连接，管理连接、校验用户身份；</li><li>查询缓存：查询语句如果命中查询缓存则直接返回，否则继续往下执行。MySQL 8.0 已删除该模块；</li><li>解析 SQL，通过解析器对 SQL 查询语句进行词法分析、语法分析，然后构建语法树，方便后续模块读取表名、字段、语句类型；</li><li>执行 SQL：执行 SQL 共有三个阶段：</li><li>prepare 预处理阶段：检查表或字段是否存在；将 select * 中的 * 符号扩展为表上的所有列。</li><li>optimize 优化阶段：基于查询成本的考虑， 选择查询成本最小的执行计划；</li><li>execute 执行阶段：根据执行计划执行 SQL 查询语句，从存储引擎读取记录，返回给客户端；</li></ul><h2 id="如何查看我的sql被几个客户端链接了"><a href="#如何查看我的sql被几个客户端链接了" class="headerlink" title="如何查看我的sql被几个客户端链接了"></a>如何查看我的sql被几个客户端链接了</h2><p>show processlist;会有ID user host等字段</p><h2 id="mysql推荐使用长链接，但会产生的问题："><a href="#mysql推荐使用长链接，但会产生的问题：" class="headerlink" title="mysql推荐使用长链接，但会产生的问题："></a>mysql推荐使用长链接，但会产生的问题：</h2><p>随着长连接一直不释放，内存占用大。【解决方式】定期释放，主动重置连接mysql_reset_connection()</p><h2 id="MYSQL的数据存储方式"><a href="#MYSQL的数据存储方式" class="headerlink" title="MYSQL的数据存储方式"></a>MYSQL的数据存储方式</h2><ol><li>show variable like ‘datadir’; 可以查找mysql的文件在哪<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.opt  用来存储当前数据库的默认字符集和字符校验规则。</span><br><span class="line">t_order.frm  存放表结构，在 MySQL 中建立一张表都会生成一个.frm 文件，该文件是用来保存每个表的元数据信息的，主要包含表结构定义。</span><br><span class="line">t_order.ibd  存放表数据。表数据既可以存在共享表空间文件（文件名：ibdata1）里，也可以存放在独占表空间文件（文件名：表名字.ibd）。</span><br></pre></td></tr></table></figure></li></ol><h3 id="表空间文件的结构"><a href="#表空间文件的结构" class="headerlink" title="表空间文件的结构"></a>表空间文件的结构</h3><p>表空间由段（segment）、区（extent）、页（page）、行（row）组成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysqltablestructure.drawio.webp" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>表中的数据在Page里，数据是按「页」为单位来读写的，当需要读一条记录的时候，并不是将这个行记录从磁盘读出来，而是以页为单位，将其整体读入内存。</li><li>默认每个页的大小为 16KB，也就是最多能保证 16KB 的连续存储空间</li></ul><p><strong>按区分配空间的情况</strong></p><ul><li>在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照区（extent）为单位分配。每个区的大小为 1MB，对于 16KB 的页来说，连续的 64 个页会被划为一个区，这样就使得链表中相邻的页的物理位置也相邻，就能使用顺序 I/O 了。</li></ul><p><strong>段一般分为数据段、索引段和回滚段等。</strong></p><ul><li>索引段：存放 B + 树的非叶子节点的区的集合；</li><li>数据段：存放 B + 树的叶子节点的区的集合；</li><li>回滚段：存放的是回滚数据的区的集合，之前讲事务隔离 (opens new window)的时候就介绍到了 MVCC 利用了回滚段实现了多版本查询数据。<h2 id="Innodb的行格式"><a href="#Innodb的行格式" class="headerlink" title="Innodb的行格式"></a>Innodb的行格式</h2>InnoDB 提供了 4 种行格式，分别是 Redundant、Compact、Dynamic和 Compressed 行格式。</li></ul><p><strong>COMPACT 行格式</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/COMPACT.drawio.png.webp" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li><p>数据类型：char 是定长的，varchar 是变长的，变长字段实际存储的数据的长度（大小）不固定的。</p></li><li><p>row_id：<br>如果我们建表的时候指定了主键或者唯一约束列，那么就没有 row_id 隐藏字段了。如果既没有指定主键，又没有唯一约束，那么 InnoDB 就会为记录添加 row_id 隐藏字段。row_id不是必需的，占用 6 个字节。</p></li><li><p>trx_id：<br>事务id，表示这个数据是由哪个事务生成的。 trx_id是必需的，占用 6 个字节。</p></li><li><p>roll_pointer：<br>这条记录上一个版本的指针。roll_pointer 是必需的，占用 7 个字节</p></li><li><p>NULL值列表：用位图存储的。压缩行存储通过一种称为”Dynamic Prefix”的技术，动态地存储每一行的前缀信息和 NULL 列的位图。这使得它可以更加高效地存储具有大量 NULL 列的行。</p><h1 id="mysql读取时的几个情况"><a href="#mysql读取时的几个情况" class="headerlink" title="mysql读取时的几个情况"></a>mysql读取时的几个情况</h1></li><li><p>脏读：读到其他事务未提交的数据；</p></li><li><p>不可重复读：前后读取的数据不一致；</p></li><li><p>幻读：前后读取的记录数量不一致。</p></li></ul><p><strong>脏读</strong>: A事务读取到了B事务未提交的内容,而B事务后面进行了回滚. </p><p><strong>不可重复读</strong>: 当设置A事务只能读取B事务已经提交的部分,会造成在A事务内的两次查询,结果竟然不一样,因为在此期间B事务进行了提交操作. </p><p><strong>幻读</strong>: A事务读取了一个范围的内容,而同时B事务在此期间插入了一条数据.造成”幻觉”. </p><h1 id="MySQL什么情况下索引会失效"><a href="#MySQL什么情况下索引会失效" class="headerlink" title="MySQL什么情况下索引会失效"></a>MySQL什么情况下索引会失效</h1><ol><li>组合索引时，如果查询条件没有使用最左边的字段，就不会使用索引</li><li>like进行匹配时，如果字符串前面含有%百分号，就会全表扫描时，不使用索引，</li><li>还有一种情况，是如果查询条件中类型是字符串，没有引号，发生了隐式转换就不会使用索引</li><li>对索引列进行运算</li><li>判断索引列是否不等于某个值时</li><li>查询条件使用or连接，也会导致索引失效</li></ol><h1 id="mysql四种隔离级别"><a href="#mysql四种隔离级别" class="headerlink" title="mysql四种隔离级别"></a>mysql四种隔离级别</h1><ol><li>Serializable (串行化) :可避免脏读、不可重复读、幻读的发生。 </li><li>Repeatable read (可重复读) :可避免脏读、不可重复读的发生。 </li><li>Read committed (读已提交) :可避免脏读的发生。</li><li>Read uncommitted (读未提交) :最低级别，任何情况都无法保证。 </li></ol><p>SQL查看隔离级别：</p><figure class="highlight plain"><figcaption><span>@@transaction_isolation;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">设置隔离级别：</span><br><span class="line">```set session transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><h2 id="生产环境数据库一般用的什么隔离级别呢？"><a href="#生产环境数据库一般用的什么隔离级别呢？" class="headerlink" title="生产环境数据库一般用的什么隔离级别呢？"></a>生产环境数据库一般用的什么隔离级别呢？</h2><p>生产环境大多使用RC(读已提交)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">缘由一：在可重复读RR隔离级别下，存在**间隙锁**，导致出现死锁的几率比RC大的多！ </span><br><span class="line">缘由二：在RR隔离级别下，条件列未命中索引会锁表！而在RC隔离级别下，只锁行!</span><br></pre></td></tr></table></figure><p>InnoDB的默认隔离级别：可重复读，不能避免幻读<br>多版本并发控制协议MVCC(Multi- Version Concurrency Control) </p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p>索引是存储引擎用于提高数据库表的访问速度的一种数据结构。它可以比作一本字典的目录，可以帮你快速找到对应的记录。<br>索引一般存储在磁盘的文件中，它是占用物理空间的。</p><h2 id="索引的分类（按字段特性）"><a href="#索引的分类（按字段特性）" class="headerlink" title="索引的分类（按字段特性）"></a>索引的分类（按字段特性）</h2><ol><li>主键索引：primary key，在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> A(</span><br><span class="line">    x <span class="built_in">int</span> primary <span class="keyword">key</span>, </span><br><span class="line">    //或</span><br><span class="line">    x <span class="built_in">int</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(x) <span class="keyword">using</span> BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>建表后，创建主键索引<br><code>CREATE INDEX a ON tableA(a);</code><br>再将其添加主键约束<br><code>ALTER TABLE tableA ADD CONTRAINT id PRIMARY KEY</code></p><p>如果仅改一个主键<code>ALTER TABLE tableA ADD PRIMARY KEY(a)</code></p><ol start="2"><li>唯一索引：unique key建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，<strong>索引列的值必须唯一，但是允许有空值</strong>。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> A&#123;</span><br><span class="line">    x <span class="built_in">int</span> <span class="keyword">unique</span> <span class="keyword">key</span>,</span><br><span class="line">    <span class="keyword">unique</span> <span class="keyword">key</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>建表后，创建唯一索引<code>create UNIQUE INDEX index_nameON table_name(index_column_1,index_column_2,...);</code></li></ul><ol start="3"><li><p>普通索引/二级索引:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx <span class="keyword">on</span> tableA(a,b,x,y);</span><br></pre></td></tr></table></figure></li><li><p>前缀索引: 对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableA(</span><br><span class="line">    a <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">INDEX</span>(a(<span class="number">10</span>))//字符串前<span class="number">10</span>个字符匹配。</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h3 id="【面试考点】联合索引如何使用的"><a href="#【面试考点】联合索引如何使用的" class="headerlink" title="【面试考点】联合索引如何使用的"></a>【面试考点】联合索引如何使用的</h3><ol><li>联合索引范围查询</li></ol><p>联合索引的最左匹配原则会一直向右匹配直到遇到「范围查询」就会停止匹配。也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引。</p><p>【例子】</p><figure class="highlight plain"><figcaption><span>* from  tableA where a> 10 and b</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">```select * from  tableA where a&gt;= 10 and b=2;```的区别：</span><br><span class="line">a都用了索引，一个没用，一个用了。因为对于联合索引，是先按照 a 字段的值排序，然后在 a 字段的值相同的情况下，再按照 b 字段的值进行排序</span><br><span class="line">   </span><br><span class="line">## 索引的优缺点？</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">- 加快数据查找的速度</span><br><span class="line">- 为用来排序或者是分组的字段添加索引，可以加快分组和排序的速度</span><br><span class="line">- 加快表与表之间的连接</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">- 建立索引需要占用物理空间</span><br><span class="line">- 会降低表的增删改的效率，因为每次对表记录进行增删改，需要进行动态维护索引，导致增删改时间变长</span><br><span class="line">## 什么情况下需要建索引？</span><br><span class="line"></span><br><span class="line">- 经常**用于查询**的字段</span><br><span class="line">- 经常**用于连接**的字段建立索引，可以加快连接的速度</span><br><span class="line">- 经常**需要排序**的字段建立索引，因为索引已经排好序，可以加快排序查询速度</span><br><span class="line"></span><br><span class="line">## 什么情况下不建索引？</span><br><span class="line"></span><br><span class="line">- where条件中用不到的字段不适合建立索引</span><br><span class="line">- 表记录较少。比如只有几百条数据，没必要加索引。</span><br><span class="line">- 需要经常增删改。需要评估是否适合加索引</span><br><span class="line">- 参与列计算的列不适合建索引</span><br><span class="line">- 区分度不高的字段不适合建立索引，如性别，只有男/女/未知三个值。加了索引，查询效率也不会提高。</span><br><span class="line"></span><br><span class="line">## 哈希索引</span><br><span class="line">哈希索引是基于哈希表实现的，对于每一行数据，存储引擎会对索引列进行哈希计算得到哈希码，并且哈希算法要尽量保证不同的列值计算出的哈希码值是不同的，将哈希码的值作为哈希表的key值，将指向数据行的指针作为哈希表的value值。这样查找一个数据的时间复杂度就是O(1)，一般多用于精确查找。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 【面试题】InnoDB为什么用B+树做索引</span><br><span class="line">从数据结构和考虑磁盘 I/O 操作次数回答</span><br><span class="line">![](/images/innodbb%2Btree.webp)</span><br><span class="line">因为B+树可以实现**有序存放**和**减少磁盘IO**</span><br><span class="line">知识点：</span><br><span class="line">1. 适合范围查找：普通二分查找树</span><br><span class="line">   由于树是存储在磁盘中的，访问每个节点，都对应一次磁盘 I/O 操作（假设一个节点的大小「小于」操作系统的最小读写单位块的大小），也就是说树的高度就等于每次查询数据时磁盘 IO 操作的次数，所以树的高度越高，就会影响查询性能。</span><br><span class="line">2.  在 B+ 树中，叶子节点和非叶子节点的数据结构是一样的，区别在于，叶子节点存放的是实际的行数据，而非叶子节点存放的是主键和页号。</span><br><span class="line"></span><br><span class="line">### 【再问】为什么不用B树</span><br><span class="line">B树和B+的时间复杂度查找都是O(logN)，但是B 树可能会因为树的分支过多，导致需要进行多次磁盘访问。并且B+支持多级索引，很容易扩展。</span><br><span class="line">- 更适合磁盘存储：</span><br></pre></td></tr></table></figure><p>B+ 树的叶子节点形成了一个有序链表，这使得范围查询的效率非常高，因为相邻的元素会被存储在相邻的位置，可以在一个或者很少几个相邻的节点中找到所有需要的数据。<br>B+ 树的叶子节点包含了所有的数据记录，这意味着每次查找都可以直接定位到具体的数据行，而不需要额外的中间层节点来获取实际数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 支持多级索引</span><br><span class="line"></span><br><span class="line">B+ 树可以很容易地扩展为多级索引。在多级索引中，每一层都是一个独立的 B+ 树，它们之间通过指针进行连接。这样的设计使得在大量数据的情况下也可以保持高效的检索速度。</span><br></pre></td></tr></table></figure><p>举例来说，假设我们有一个三级索引 (a, b, c)，那么：<br>第一级索引以 a 为键构建一颗 B+ 树，每个节点中存储 b 的值以及指向第二级索引的指针。<br>第二级索引以 b 为键构建一颗 B+ 树，每个节点中存储 c 的值以及指向第三级索引的指针。<br>第三级索引以 c 为键构建一颗 B+ 树，叶子节点中存储了对应的数据记录。<br>这样的设计使得在多级索引中，每一层都能帮助缩小搜索范围，从而提高查询效</p><p>其中，叶子节点和非叶子节点的数据结构是一样的，区别在于，叶子节点存放的是实际的行数据，而非叶子节点存放的是主键和页号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">## 为什么B+ 和 B树</span><br><span class="line">- 从存储情况来说，B+只有叶子村数据，B树所有节点都有数据，这样就增加了磁盘IO次数</span><br><span class="line">- B+ 的非叶子结点仅有关键字，适合搜索</span><br><span class="line"></span><br><span class="line">B 树的内部节点既包含关键字也包含指向实际数据的指针，而 B+ 树的内部节点仅包含关键字，实际数据只存储在叶子节点中。这使得 B+ 树在磁盘存储和范围查询等方面具有优势，适合作为数据库索引的数据结构</span><br><span class="line"></span><br><span class="line">## 【面试】 索引失效的情况</span><br><span class="line">- 左/左右模糊匹配`like %a`</span><br><span class="line">- 使用函数，但是8.0之后出现了函数索引</span><br><span class="line">- 表达式计算</span><br><span class="line">- 隐式类型转换，比如name是varchar，查询时使用`select 8 from A where name=11111;`</span><br><span class="line">- 联合索引的非**最左匹配**：</span><br><span class="line">- WHERE 里面的 OR操作，导致全表扫描：OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，解决办法将其都加上索引。</span><br><span class="line">## 【面试题】索引下推是什么，回表是什么</span><br><span class="line">- **explain会显示Extra字段为using index condition，表示使用了索引下推**</span><br><span class="line">- 回表也叫二次查询，指在数据库中执行一个查询，如果查询的字段不在查询的索引中，数据库可能需要通过索引定位到相应的行，然后再去实际的数据页中获取所需的字段值，这个过程就被称为回表。</span><br><span class="line">以索引举例，查了两个索引，那么就是先根据第一个索引找到符合要求的值，然后在这些行里用第二个索引进行过滤。</span><br><span class="line"></span><br><span class="line">截断的字段不会在 Server 层进行条件判断，而是会被下推到「存储引擎层」进行条件判断（因为 c 字段的值是在 (a, b, c) 联合索引里的），然后过滤出符合条件的数据后再返回给 Server 层。由于在引擎层就过滤掉大量的数据，无需再回表读取数据来进行判断，减少回表次数，从而提升了性能。</span><br><span class="line"></span><br><span class="line">## 【面试】最左匹配的一个问题：当where a=1 and c=3时，符合最左匹配吗</span><br><span class="line">答案：符合最左，只有a用了索引，c字段没使用</span><br><span class="line">严格意义上来说是属于索引截断。</span><br><span class="line"></span><br><span class="line">- MySQL 5.5 的话，前面 a 会走索引，在联合索引找到主键值后，开始回表，到主键索引读取数据行，Server 层从存储引擎层获取到数据行后，然后在 Server 层再比对 c 字段的值。</span><br><span class="line">- 从 MySQL 5.6 之后，有一个索引下推功能，可以在存储引擎层进行索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，再返还给 Server 层，从而减少回表次数。</span><br><span class="line">## 【面试】讲一下回表和索引下推的区别</span><br><span class="line">- **表是先通过索引查询行，再访问数据行涉及到两次磁盘访问**</span><br><span class="line">- **先在索引上执行一部分或全部的查询条件，大大减少磁盘访问次数**</span><br><span class="line"></span><br><span class="line">**表（Lookup）：**</span><br><span class="line"></span><br><span class="line">定义：</span><br><span class="line">回表是指在使用索引定位到符合查询条件的行后，再次访问实际的数据行，从中获取所需的字段值的过程。</span><br><span class="line"></span><br><span class="line">过程：</span><br><span class="line">使用索引定位到符合查询条件的行的位置。</span><br><span class="line">从定位到的位置中读取行的指针或主键。</span><br><span class="line">使用指针或主键再次访问实际的数据行，从中获取所需的字段值。</span><br><span class="line"></span><br><span class="line">代价：</span><br><span class="line">回表的代价相对较高，因为它涉及了两次磁盘/内存访问。</span><br><span class="line"></span><br><span class="line">**索引下推（Index Pushdown）：**</span><br><span class="line"></span><br><span class="line">定义：</span><br><span class="line">索引下推是指在查询执行过程中，数据库管理系统会尝试在索引上执行部分或全部的查询条件，从而减少需要访问实际数据行的次数。</span><br><span class="line"></span><br><span class="line">过程：</span><br><span class="line">当查询中的条件可以在索引中找到匹配项时，数据库会尝试在索引上执行这部分查询条件，以过滤掉不符合条件的行。 只有符合索引条件的行才会被返回给用户。</span><br><span class="line"></span><br><span class="line">优势：</span><br><span class="line">减少了回表的次数，降低了查询的代价，提高了查询的性能。</span><br><span class="line">减少了磁盘/内存访问次数，尤其在大型数据集中，效果显著。</span><br><span class="line"></span><br><span class="line">适用情况：</span><br><span class="line">索引下推通常在涉及到范围查询、排序、聚合等操作时可以发挥较大的优化作用。</span><br><span class="line"></span><br><span class="line">## Hash索引和B+树索引的区别？</span><br><span class="line"></span><br><span class="line">哈希索引**不支持排序**，因为哈希表是无序的。</span><br><span class="line">哈希索引**不支持范围查找**。</span><br><span class="line">哈希索引**不支持模糊查询**及组合索引的最左前缀匹配。</span><br><span class="line">因为哈希表中会存在哈希冲突，所以哈希索引的性能是**不稳定**的，</span><br><span class="line">而B+树索引的性能是**相对稳定的**，每次查询都是从根节点到叶子节点。</span><br><span class="line"></span><br><span class="line">## 为什么B+树比B树更适合实现数据库索引？</span><br><span class="line"></span><br><span class="line">- 由于B+树的数据都存储在叶子结点中，叶子结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，而在数据库中基于范围的查询是非常频繁的，所以通常B+树用于数据库索引。</span><br><span class="line"></span><br><span class="line">B+树的节点只存储索引key值，具体信息的地址存在于叶子节点的地址中。这就使以页为单位的索引中可以存放更多的节点。减少更多的I/O支出。</span><br><span class="line"></span><br><span class="line">B+树的查询效率更加稳定，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当</span><br><span class="line"></span><br><span class="line">## 什么是覆盖索引？</span><br><span class="line"></span><br><span class="line">select的数据列只用从索引中就能够取得，不需要回表进行二次查询，也就是说查询列要被所使用的索引覆盖。对于innodb表的二级索引，如果索引能覆盖到查询的列，那么就可以避免对主键索引的二次查询。</span><br><span class="line"></span><br><span class="line">不是所有类型的索引都可以成为覆盖索引。覆盖索引要存储索引列的值，而哈希索引、全文索引不存储索引列的值，所以MySQL使用b+树索引做覆盖索引。</span><br><span class="line"></span><br><span class="line">对于使用了覆盖索引的查询，在查询前面使用explain，输出的extra列会显示为using index。</span><br><span class="line"></span><br><span class="line">比如user_like 用户点赞表，组合索引为(user_id, blog_id)，user_id和blog_id都不为null。</span><br><span class="line"></span><br><span class="line">```explain select blog_id from user_like where user_id = 13;</span><br></pre></td></tr></table></figure><p>explain结果的Extra列为Using index，查询的列被索引覆盖，并且where筛选条件符合最左前缀原则，通过索引查找就能直接找到符合条件的数据，不需要回表查询数据。</p><figure class="highlight plain"><figcaption><span>select user_id from user_like where blog_id </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">explain结果的Extra列为Using where; Using index， 查询的列被索引覆盖，where筛选条件不符合最左前缀原则，无法通过索引查找找到符合条件的数据，但可以通过索引扫描找到符合条件的数据，也不需要回表查询数据。</span><br><span class="line"></span><br><span class="line"># 数据库引擎</span><br><span class="line">## InnoDB存储引擎</span><br><span class="line"></span><br><span class="line">InnoDB是MySQL默认的事务型存储引擎，使用最广泛，基于**聚簇索引**建立的。InnoDB内部做了很多优化，如能够自动在内存中创建自适应hash索引，以加速读操作。</span><br><span class="line"></span><br><span class="line">**优点**：支持事务和崩溃修复能力；引入了行级锁和外键约束。</span><br><span class="line"></span><br><span class="line">**缺点**：占用的数据空间相对较大。</span><br><span class="line"></span><br><span class="line">**适用场景**：需要事务支持，并且有较高的并发读写频率。</span><br><span class="line">### 什么是聚集索引？</span><br><span class="line"></span><br><span class="line">InnoDB使用**表的主键构造主键索引树**，同时叶子节点中存放的即为整张表的记录数据。聚集索引叶子节点的存储是逻辑上连续的，使用双向链表连接，叶子节点按照主键的顺序排序，因此对于主键的排序查找和范围查找速度比较快。</span><br><span class="line"></span><br><span class="line">聚集索引的叶子节点就是整张表的行记录。InnoDB 主键使用的是聚簇索引。聚集索引要比非聚集索引查询效率高很多。</span><br><span class="line"></span><br><span class="line">对于InnoDB来说，聚集索引一般是表中的主键索引，如果表中没有显示指定主键，则会选择表中的第一个不允许为NULL的唯一索引。如果没有主键也没有合适的唯一索引，那么InnoDB内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键长度为6个字节，它的值会随着数据的插入自增。</span><br><span class="line"></span><br><span class="line">## MyISAM存储引擎</span><br><span class="line"></span><br><span class="line">数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，可以使用MyISAM引擎。MyISAM会将表存储在两个文件中，数据文件.MYD和索引文件.MYI。</span><br><span class="line"></span><br><span class="line">**优点**: 访问速度快。</span><br><span class="line"></span><br><span class="line">**缺点**：MyISAM不支持事务和行级锁，不支持崩溃后的安全恢复，也不支持外键。</span><br><span class="line"></span><br><span class="line">**适用场景**：对事务完整性没有要求；表的数据都会只读的。</span><br><span class="line"></span><br><span class="line">## InnoDB和MyISAM的区别</span><br><span class="line">1. myisam支持表锁，Innodb支持行锁，解决脏读和不可重复度</span><br><span class="line">2. myisam没有事务日志，innodb有binlog可以恢复数据库</span><br><span class="line">3. myisam数据存储是直接查到内存地址，innodb是有数据缓存，myisam更快一些</span><br><span class="line">4. 使用场景myisam适合读场景多，crud场景少的场景，比如博客这些；innodb适合事务支持，高并发等情况</span><br><span class="line">## 两者索引的区别【非聚簇索引myisam，看3.】</span><br><span class="line">1. myisam使用非聚簇索引，B树，innodb使用聚簇索引，B+树</span><br><span class="line">2. myisam的索引和数据存储是分开的，聚簇索引是将数据和索引存储在一起</span><br><span class="line">3. 将数据存储于索引分开结构，索引结构的叶子节点指向了数 据的对应行，myisam 通 过 key_buffer 把索引先缓存到内存中，当需要访问 数据时(通过索引访问数据)，在内存中直接 搜索索引，然后通过索引找 到磁盘相应数据，这也就是为什么索引不在 key buffer 命中时，速度慢 的 原因。</span><br><span class="line">## 【面试】为什么innodb用b+而不用b树</span><br><span class="line">b+树在范围查询和顺序访问上有优势：</span><br><span class="line">b+树叶子节点形成了一个有序链表，有利于范围查询和顺序访问，不需遍历整棵树</span><br><span class="line">## 【重点】为什么innodb比myisam慢了点</span><br><span class="line">- myisam是非聚簇，索引和数据是分开的，在查询时，可以直接访问到索引文件，而不需要额外的查找操作。</span><br><span class="line">- 而在 InnoDB 中，由于使用了聚簇索引，查询时可能需要在索引中定位到主键，再根据主键访问数据行</span><br><span class="line"># 事务Transaction</span><br><span class="line">## InnoDB 引擎通过什么技术来保证事务的这ACID特性的？</span><br><span class="line"></span><br><span class="line">- 持久性Durability是通过 redo log（重做日志）来保证的；</span><br><span class="line">- 原子性Atomicity 是通过 undo log（回滚日志）来保证的；</span><br><span class="line">- 隔离性Isolation是通过 MVCC（多版本并发控制） 或锁机制来保证的；</span><br><span class="line">- 一致性Consistency则是通过持久性+原子性+隔离性来保证；</span><br><span class="line"></span><br><span class="line">*MySQL 并不会使用「串行化」隔离级别来避免幻读现象的发生，因为使用「串行化」隔离级别会影响性能*</span><br><span class="line">https://xiaolincoding.com/mysql/transaction/phantom.html#什么是幻读</span><br><span class="line">## 可重复读隔离级别是启动事务时生成一个 Read View，然后整个事务期间都在用这个 Read View。</span><br><span class="line"></span><br><span class="line">## 【面试题】为什么事务要有隔离性，我们就要知道并发事务时会引发什么问题。</span><br><span class="line">数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。</span><br><span class="line"></span><br><span class="line">## 多事务的并发进行一般会造成以下几个问题: </span><br><span class="line"></span><br><span class="line">锁：共享锁和排他锁（读写锁）</span><br><span class="line"></span><br><span class="line"># 【面试重点】锁</span><br><span class="line">锁分为全局锁，表锁，行锁，下面介绍各锁的使用和场景</span><br><span class="line">## 全局锁</span><br><span class="line">**应用场景**：全局锁主要应用于做全库逻辑备份，这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。</span><br><span class="line"></span><br><span class="line">**缺点**：意味着整个数据库都是只读状态，备份花时间长，无法执行其他操作。</span><br><span class="line">但是MYSQL解决了这个问题，通过**可重复度**，使用ReadView，事务操作时用ReadView，MVCC支持备份与事务同时进行。</span><br><span class="line"></span><br><span class="line">- 上锁1`flush tables with READ lock;`锁定所有的表，防止其他会话对这些表进行写操作，但允许读操作</span><br><span class="line">- 上锁2`lock tables [tablename] READ/WRITE`</span><br><span class="line">- `unlock tables;`</span><br><span class="line"></span><br><span class="line">## 表级锁</span><br><span class="line">### 表锁</span><br><span class="line">**应用场景**:表级别的共享锁=读锁,独占锁=写锁</span><br><span class="line">- 尽量避免在使用 InnoDB 引擎的表使用表锁，因为表锁的颗粒度太大，会影响并发性能</span><br><span class="line">- `lock tables [tablename] read/write;` </span><br><span class="line">### 元数据锁</span><br><span class="line">**应用场景**不需要显式使用，在CRUD/alter中自动创建，select执行完才可以执行其他操作，</span><br><span class="line">- MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。</span><br><span class="line">  </span><br><span class="line">【引申问题】</span><br><span class="line">那如果数据库有一个长事务（所谓的长事务，就是开启了事务，但是一直还没提交），</span><br><span class="line">首先，线程 A 先启用了事务（但是一直不提交），然后执行一条 select 语句，此时就先对该表加上 MDL 读锁；</span><br><span class="line"></span><br><span class="line">然后，线程 B 也执行了同样的 select 语句，此时并不会阻塞，因为「读读」并不冲突；</span><br><span class="line"></span><br><span class="line">接着，线程 C 修改了表字段，此时由于线程 A 的事务并没有提交，也就是 MDL 读锁还在占用着，这时线程 C 就无法申请到 MDL 写锁，就会被阻塞，</span><br><span class="line"></span><br><span class="line">那么在线程 C 阻塞后，后续有对该表的 select 语句，就都会被阻塞，如果此时有大量该表的 select 语句的请求到来，就会有大量的线程被阻塞住，这时数据库的线程很快就会爆满了。</span><br><span class="line"></span><br><span class="line">**那么为什么线程 C 因为申请不到 MDL 写锁，而导致后续的申请读锁的查询操作也会被阻塞？**</span><br><span class="line"></span><br><span class="line">因为申请 MDL 锁的操作会形成一个队列，队列中写锁获取优先级高于读锁，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。</span><br><span class="line"></span><br><span class="line">### 意向锁</span><br><span class="line">**用于快速判断表是否加了锁**。因为：</span><br><span class="line"></span><br><span class="line">如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。</span><br><span class="line"></span><br><span class="line">### 自增锁</span><br><span class="line">```java</span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue(strategy = GenerationType.IDENTITY) // 指定自动生成主键的策略</span><br><span class="line">@Column(name = &quot;id&quot;)</span><br><span class="line">private int id;</span><br></pre></td></tr></table></figure><p>在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。</p><p><strong>应用场景</strong></p><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><p><strong>记录锁 Record Lock</strong>，仅仅把一条记录锁上；</p><p><strong>间隙锁 Gap Lock</strong>，锁定一个范围，但是不包含记录本身；间隙锁的意义只在于阻止区间被插入</p><p><strong>临键锁 Next-Key Lock</strong>：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p><ul><li>【普通的select没有行锁】普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。<h3 id="记录锁-Record-Lock"><a href="#记录锁-Record-Lock" class="headerlink" title="记录锁 Record Lock"></a>记录锁 Record Lock</h3>记录锁分为S锁和X锁。</li><li>当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;</li><li>当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。<h3 id="间隙锁-Gap-Lock"><a href="#间隙锁-Gap-Lock" class="headerlink" title="间隙锁 Gap Lock"></a>间隙锁 Gap Lock</h3>只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</li><li>对间隙加锁是为了防止插入/删除的时候出现幻读</li><li>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。<h3 id="临键锁-Next-key-Lock"><a href="#临键锁-Next-key-Lock" class="headerlink" title="临键锁 Next-key Lock"></a>临键锁 Next-key Lock</h3>理解为一个范围的间隙锁</li></ul><h2 id="【面试题】MYSQL怎么加锁"><a href="#【面试题】MYSQL怎么加锁" class="headerlink" title="【面试题】MYSQL怎么加锁"></a>【面试题】MYSQL怎么加锁</h2><ol><li>【加行锁】在查询时对记录加行级锁，这两种查询会加锁的语句称为锁定读。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//对读取的记录加共享锁(S型锁)</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line">//对读取的记录加独占锁(X型锁)</span><br><span class="line"><span class="keyword">select</span> ... <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"></span><br><span class="line">//对操作的记录加独占锁(X型锁)</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> .... <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">//对操作的记录加独占锁(X型锁)</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol><p>上面这两条语句必须在一个事务中，因为当事务提交了，锁就会被释放，所以在使用这两条语句的时候，要加上 begin 或者 start transaction 开启事务的语句。</p><h3 id="普通查询，没有使用索引的话，会导致什么情况？"><a href="#普通查询，没有使用索引的话，会导致什么情况？" class="headerlink" title="普通查询，没有使用索引的话，会导致什么情况？"></a>普通查询，没有使用索引的话，会导致什么情况？</h3><p>没有使用索引字段作查询条件的话，导致扫描是全表扫描。那么，每一条记录的索引上都会加 临键（NK）锁，这样就相当于锁住的全表，这时如果其他事务对该表进行增、删、改操作的时候，都会被阻塞。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.xiaolincoding.com//mysql/other/3c3af16e7a948833ccb6409e8b51daf8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>如果在 update 语句的 where 条件没有使用索引，就会全表扫描，于是就会对所有记录加上 next-key 锁（记录锁 + 间隙锁），相当于把整个表锁住了。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.xiaolincoding.com//mysql/other/1aa886fe95e7bc791c296e2d342fa435.png" alt title>                </div>                <div class="image-caption"></div>            </figure>这条 update 语句产生了 4 个记录锁（有几条记录就有几个Record锁）和 5 个间隙锁（范围+1），相当于锁住了全表。</li></ul><h3 id="那-update-语句的-where-带上索引就能避免全表记录加锁了吗？"><a href="#那-update-语句的-where-带上索引就能避免全表记录加锁了吗？" class="headerlink" title="那 update 语句的 where 带上索引就能避免全表记录加锁了吗？"></a>那 update 语句的 where 带上索引就能避免全表记录加锁了吗？</h3><p>关键还得看这条语句在执行过程种，优化器最终选择的是索引扫描，还是全表扫描，如果走了全表扫描，就会对全表的记录加锁了。</p><h3 id="update-没加索引，加的是表锁还是行锁"><a href="#update-没加索引，加的是表锁还是行锁" class="headerlink" title="update 没加索引，加的是表锁还是行锁"></a>update 没加索引，加的是表锁还是行锁</h3><p>对每一行都加了NK锁，就锁了整张表。</p><h3 id="避免全表锁定"><a href="#避免全表锁定" class="headerlink" title="避免全表锁定"></a>避免全表锁定</h3><p>将 MySQL 里的 <strong>sql_safe_updates 参数设置为 1</strong>，开启安全更新模式。</p><ul><li><p>update 语句必须满足如下条件之一才能执行成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 where，并且 where 条件中必须有索引列；</span><br><span class="line">使用 limit；</span><br><span class="line">同时使用 where 和 limit，此时 where 条件中可以没有索引列；</span><br></pre></td></tr></table></figure></li><li><p>delete 语句必须满足以下条件能执行成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同时使用 where 和 limit，此时 where 条件中可以没有索引列；</span><br><span class="line"></span><br><span class="line">另外：如果 where 条件带上了索引列，但是优化器最终扫描选择的是全表，而不是索引的话，我们可以使用 FORCE INDEX([index_name]) 可以告诉优化器使用哪个索引，以此避免有几率锁全表带来的隐患。</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL-记录锁-间隙锁可以防止删除操作而导致的幻读吗？【可以】"><a href="#MySQL-记录锁-间隙锁可以防止删除操作而导致的幻读吗？【可以】" class="headerlink" title="MySQL 记录锁+间隙锁可以防止删除操作而导致的幻读吗？【可以】"></a>MySQL 记录锁+间隙锁可以防止删除操作而导致的幻读吗？【可以】</h2><h3 id="插入意向锁"><a href="#插入意向锁" class="headerlink" title="插入意向锁"></a>插入意向锁</h3><p>插入意向锁的生成时机：</p><p>每插入一条新记录，都需要看一下待插入记录的下一条记录上是否已经被加了间隙锁，如果已加间隙锁，此时会生成一个插入意向锁，然后锁的状态设置为等待状态（PS：MySQL 加锁时，是先生成锁结构，然后设置锁的状态，如果锁状态是等待状态，并不是意味着事务成功获取到了锁，只有当锁状态为正常状态时，才代表事务成功获取到了锁），现象就是 Insert 语句会被阻塞。<br>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql分为哪些层，各用来干嘛的&quot;&gt;&lt;a href=&quot;#mysql分为哪些层，各用来干嘛的&quot; class=&quot;headerlink&quot; title=&quot;mysql分为哪些层，各用来干嘛的&quot;&gt;&lt;/a&gt;mysql分为哪些层，各用来干嘛的&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
      <category term="Mysql" scheme="http://waynamigo.github.io/categories/Mysql/"/>
    
    
      <category term="面试" scheme="http://waynamigo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Mysql" scheme="http://waynamigo.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL questions</title>
    <link href="http://waynamigo.github.io/2023/01/03/%E9%9D%A2%E7%BB%8FMySQL%E9%97%AE%E9%A2%98/"/>
    <id>http://waynamigo.github.io/2023/01/03/面经MySQL问题/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-10-30T07:13:03.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a>其他数据库</h2><p>mongodb(<a href="https://www.chaojimake.cn/question_8_88.html" target="_blank" rel="noopener">https://www.chaojimake.cn/question_8_88.html</a>)<br>hbase(<a href="https://www.chaojimake.cn/question_8_349.html" target="_blank" rel="noopener">https://www.chaojimake.cn/question_8_349.html</a>)</p><h2 id="为什么要分库"><a href="#为什么要分库" class="headerlink" title="为什么要分库"></a>为什么要分库</h2><p>如果业务量剧增，数据库可能会出现性能瓶颈，这时候我们就需要考虑拆分数据库。</p><ul><li><strong>磁盘存储</strong><br>业务量剧增，MySQL单机磁盘容量会撑爆，拆成多个数据库，磁盘使用率大大降低。</li><li><strong>并发连接支撑</strong><br>知道数据库连接数是有限的（150个？）。在高并发的场景下，大量请求访问数据库，MySQL单机是扛不住的！高并发场景下，会出现too many connections报错。</li></ul><p>当前非常火的微服务架构出现，就是为了应对高并发。它把订单、用户、商品等不同模块，拆分成多个应用，并且把单个数据库也拆分成多个不同功能模块的数据库（订单库、用户库、商品库），以分担读写压力。</p><h2 id="为什么要分表"><a href="#为什么要分表" class="headerlink" title="为什么要分表"></a>为什么要分表</h2><p>假如你的单表数据量非常大，存储和查询的性能就会遇到瓶颈了，如果你做了很多优化之后还是无法提升效率的时候，就需要考虑做分表了。一般千万级别数据量，就需要分表。<br>这是因为即使SQL命中了索引，如果表的数据量超过一千万的话，查询也是会明显变慢的。这是因为索引一般是B+树结构，数据千万级别的话，B+树的高度会增高，查询就变慢啦</p><h2 id="考虑分库分表的时机"><a href="#考虑分库分表的时机" class="headerlink" title="考虑分库分表的时机"></a>考虑分库分表的时机</h2><p>一般数据量千万级别，B+树索引高度就会到3层以上了，查询的时候会多查磁盘的次数，SQL就会变慢。</p><p>阿里巴巴的《Java开发手册》提出：<br><strong>单表行数超过500万行或者单表容量超过2GB，才推荐进行分库分表</strong>。<br>那我们是不是等到数据量到达五百万，才开始分库分表呢？<br>不是这样的，我们应该提前规划分库分表，如果估算3年后，你的表都不会到达这个五百万，则不需要分库分表。<br>MySQL服务器如果配置更好，是不是可以超过这个500万这个量级，才考虑分库分表？<br>虽然配置更好，可能数据量大之后，性能还是不错，但是如果持续发展的话，还是要考虑分库分表<br>一般什么类型业务表需要才分库分表？<br>通用是一些流水表、用户表等才考虑分库分表，如果是一些配置类的表，则完全不用考虑，因为不太可能到达这个量级。</p><h2 id="如何分库分表？原则有哪些"><a href="#如何分库分表？原则有哪些" class="headerlink" title="如何分库分表？原则有哪些"></a>如何分库分表？原则有哪些</h2><h2 id="数据库垂直切分"><a href="#数据库垂直切分" class="headerlink" title="数据库垂直切分"></a>数据库垂直切分</h2><h2 id="数据库水平切分"><a href="#数据库水平切分" class="headerlink" title="数据库水平切分"></a>数据库水平切分</h2><h2 id="一定规则"><a href="#一定规则" class="headerlink" title="一定规则"></a>一定规则</h2><h2 id="分库分表的取模算法"><a href="#分库分表的取模算法" class="headerlink" title="分库分表的取模算法"></a>分库分表的取模算法</h2><h2 id="分库分表的范围限定算法"><a href="#分库分表的范围限定算法" class="headerlink" title="分库分表的范围限定算法"></a>分库分表的范围限定算法</h2><h2 id="分库后，事务问题如何解决"><a href="#分库后，事务问题如何解决" class="headerlink" title="分库后，事务问题如何解决"></a>分库后，事务问题如何解决</h2><h2 id="分表后，跨节点的join和union问题"><a href="#分表后，跨节点的join和union问题" class="headerlink" title="分表后，跨节点的join和union问题"></a>分表后，跨节点的join和union问题</h2><h2 id="分库分表后，orderby-groupby等聚合函数如何处理"><a href="#分库分表后，orderby-groupby等聚合函数如何处理" class="headerlink" title="分库分表后，orderby groupby等聚合函数如何处理"></a>分库分表后，orderby groupby等聚合函数如何处理</h2><h2 id="分库分表后，分页的处理方案"><a href="#分库分表后，分页的处理方案" class="headerlink" title="分库分表后，分页的处理方案"></a>分库分表后，分页的处理方案</h2><h2 id="如何生成全局唯一的分布式ID"><a href="#如何生成全局唯一的分布式ID" class="headerlink" title="如何生成全局唯一的分布式ID"></a>如何生成全局唯一的分布式ID</h2><h2 id="主流分库分表中间件"><a href="#主流分库分表中间件" class="headerlink" title="主流分库分表中间件"></a>主流分库分表中间件</h2><h2 id="分表要停服吗，不停服怎么做"><a href="#分表要停服吗，不停服怎么做" class="headerlink" title="分表要停服吗，不停服怎么做"></a>分表要停服吗，不停服怎么做</h2><h2 id="为了避免数据热点问题如何选择分表策略"><a href="#为了避免数据热点问题如何选择分表策略" class="headerlink" title="为了避免数据热点问题如何选择分表策略"></a>为了避免数据热点问题如何选择分表策略</h2><h2 id="阐述常用的数据库中间件"><a href="#阐述常用的数据库中间件" class="headerlink" title="阐述常用的数据库中间件"></a>阐述常用的数据库中间件</h2><h1 id="基础问题"><a href="#基础问题" class="headerlink" title="基础问题"></a>基础问题</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><ul><li>int：tinyint(1byte) smallint(2byte)  mediumint(3byte)  int(4byte)  bigint(8byte) </li><li>float,double</li><li>decimal</li></ul><p><strong>字符串类型：varchar,char,text,blob</strong> </p><ul><li>varchar(n):n代表字符个数，不是字节个数</li><li>char与varchar的区别<ul><li>char定长，var不定长，存储效率较高</li><li>varchar在开头两个字节存长度</li></ul></li><li>text 和blob会使用临时表，开销损失大<br>【Tips】经常变更的数据使用char，char不容易产生碎片</li></ul><p><strong>时间类型</strong></p><ul><li><p>date</p></li><li><p>timestamp（优先使用，空间开销小）</p><h2 id="3-数据库三大范式-，范式和反范式是什么"><a href="#3-数据库三大范式-，范式和反范式是什么" class="headerlink" title="3. 数据库三大范式 ，范式和反范式是什么"></a>3. 数据库三大范式 ，范式和反范式是什么</h2></li><li><p>第一范式（1NF）：每个列都不可以再拆分，强调的是列的原子性。第一范式要求数据库中的表都是二维表。</p></li><li><p>第二范式（2NF）：在第一范式的基础上，一个表必须有一个主键，非主键列 完全依赖 于主键，而不能是依赖于主键的一部分。</p></li><li><p>第三范式（3NF）：在第二范式的基础上，非主键列只依赖（直接依赖）于主键，不依赖于其他非主键。</p></li><li><p><strong>范式</strong>：范式化的表减少了数据冗余，数据表更新操作快、占用存储空间少。    </p></li><li><p>但是查询时通常需要多表关联查询，更难进行索引优化</p></li><li><p><strong>反范式</strong>：反范式的过程就是通过冗余数据来提高查询性能，可以减少表关联和更好进行索引优化</p></li><li><p>存在大量冗余数据，并且数据的维护成本更高</p></li></ul><h1 id="索引问题"><a href="#索引问题" class="headerlink" title="索引问题"></a>索引问题</h1><h2 id="1-索引的分类"><a href="#1-索引的分类" class="headerlink" title="1.索引的分类"></a>1.索引的分类</h2><h2 id="2-索引优缺点"><a href="#2-索引优缺点" class="headerlink" title="2.索引优缺点"></a>2.索引优缺点</h2><h2 id="3-索引设计原则"><a href="#3-索引设计原则" class="headerlink" title="3.索引设计原则"></a>3.索引设计原则</h2><ul><li><p>唯一性</p></li><li><p>选择常用的字段</p></li><li><p>选用经常排序、分组、联合的字段</p></li><li><p>小表不建议索引（几万这种不需要，，几十万这种看情况）</p><h2 id="4-索引的b-树"><a href="#4-索引的b-树" class="headerlink" title="4.索引的b+树"></a>4.索引的b+树</h2><h2 id="5-hash索引和b-索引的区别"><a href="#5-hash索引和b-索引的区别" class="headerlink" title="5.hash索引和b+索引的区别"></a>5.hash索引和b+索引的区别</h2><h2 id="6-为什么b-树打败了二叉查找树和b树"><a href="#6-为什么b-树打败了二叉查找树和b树" class="headerlink" title="6.为什么b+树打败了二叉查找树和b树"></a>6.为什么b+树打败了二叉查找树和b树</h2><h2 id="7-最左匹配原则"><a href="#7-最左匹配原则" class="headerlink" title="7.最左匹配原则"></a>7.最左匹配原则</h2><h2 id="8-覆盖索引"><a href="#8-覆盖索引" class="headerlink" title="8.覆盖索引"></a>8.覆盖索引</h2><h2 id="9-索引下推"><a href="#9-索引下推" class="headerlink" title="9.索引下推"></a>9.索引下推</h2><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p>InnoDB 适用于？<br>MyISAM 适用以插入为主的程序，比如博客系统、新闻门户</p><h2 id="1-存储引擎InnoDB的四大特性"><a href="#1-存储引擎InnoDB的四大特性" class="headerlink" title="1.存储引擎InnoDB的四大特性"></a>1.存储引擎InnoDB的四大特性</h2><p>插入缓冲（insert buffer)<br>二次写(double write)<br>自适应哈希索引(ahi)<br>预读(read ahead)</p><h2 id="2-MyISAM和InnoDB的区别"><a href="#2-MyISAM和InnoDB的区别" class="headerlink" title="2.MyISAM和InnoDB的区别"></a>2.MyISAM和InnoDB的区别</h2></li><li><p>InnoDB 支持事务，而 MyISAM 不支持。</p></li><li><p>InnoDB 支持外键，而 MyISAM 不支持。因此将一个含有外键的 InnoDB 表 转为 MyISAM 表会失败。</p></li><li><p>InnoDB 和 MyISAM 均支持 B+ Tree 数据结构的索引。但 InnoDB 是聚集索引，而 MyISAM 是非聚集索引。</p></li><li><p>InnoDB 不保存表中数据行数，执行 select count(*) from table 时需要全表扫描。而 MyISAM 用一个变量记录了整个表的行数，速度相当快（注意不能有 WHERE 子句）。</p></li></ul><p><strong>那为什么 InnoDB 没有使用这样的变量呢</strong> 因为InnoDB的事务特性，在同一时刻表中的行数对于不同的事务而言是不一样的。</p><ul><li><p>InnoDB 支持表、行（默认）级锁，而 MyISAM 支持表级锁。<br>InnoDB 的行锁是基于索引实现的，而不是物理行记录上。即访问如果没有命中索引，则也无法使用行锁，将要退化为表锁。</p></li><li><p>InnoDB 必须有唯一索引（如主键），如果没有指定，就会自动寻找或生产一个隐藏列 Row_id 来充当默认主键，而 Myisam 可以没有主键。</p><h2 id="3-为何推荐使用自增主键"><a href="#3-为何推荐使用自增主键" class="headerlink" title="3.为何推荐使用自增主键"></a>3.为何推荐使用自增主键</h2><p>自增 ID 可以保证每次插入时 B+ 树索引是从右边扩展的，因此相比自定义 ID （如 UUID）可以避免 B+ 树的频繁合并和分裂。如果使用字符串主键和随机主键，会使得数据随机插入，效率比较差。</p><h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><h2 id="1-页Page，区Extend，段Segment"><a href="#1-页Page，区Extend，段Segment" class="headerlink" title="1.页Page，区Extend，段Segment"></a>1.页Page，区Extend，段Segment</h2></li></ul><p><strong>页（数据页）：InnoDB中每个页16KB，Myisam是1KB</strong></p><h3 id="一行数据大于16kb，会发生什么，怎么解决【行溢出问题】"><a href="#一行数据大于16kb，会发生什么，怎么解决【行溢出问题】" class="headerlink" title="一行数据大于16kb，会发生什么，怎么解决【行溢出问题】"></a>一行数据大于16kb，会发生什么，怎么解决【行溢出问题】</h3><p>内置的解决方式：将溢出的数据存到新页里，然后原始页里存放一个指针，需要额外一次IO去读取</p><p>聚簇索引情况：</p><ul><li>如果表使用了聚簇索引（InnoDB的主键索引就是一个聚簇索引），那么数据行实际上是存储在聚簇索引的叶子节点中的。如果一行数据超出了页的大小，那么会发生行溢出，溢出部分会存储在一个溢出页中，而叶子节点中仍然包含原始行的数据和指向溢出页的指针。</li></ul><p>非聚簇索引情况：</p><ul><li>如果表使用了非聚簇索引（如普通索引），那么数据行是单独存储在聚簇索引的叶子节点之外的，这种情况下，如果一行数据超出了页的大小，会直接发生行溢出，溢出部分会存储在溢出页中，同时非聚簇索引中也会保留指向溢出页的指针。</li></ul><p><strong>区Extent：一个区默认是 64 个连续的页组成的，也就是 1MB</strong></p><p><strong>段Segment：一段相邻的区的集合，逻辑上的组织，存放b+树</strong></p><h2 id="2-页由哪些数据组成"><a href="#2-页由哪些数据组成" class="headerlink" title="2.页由哪些数据组成"></a>2.页由哪些数据组成</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysqlpagestructure.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ul><li>file header:用于描述数据页的外部信息，比如属于哪一个表空间、前后页的页号等</li><li>page header:用来描述数据页中的具体信息，比如存在多少条纪录，第一条纪录的位置等。</li><li>infimum 和 supremum 纪录:是系统生成的纪录，分别为最小和最大纪录值，infimum 的下一条是用户纪录中键值最小的纪录，supremum 的上一条是用户纪录中键值最大的纪录，通过 next_record 字段来相连。</li><li>user records:据库表中对应的数据(Compact行格式)</li><li>free space 可插入的空闲区域</li><li>page dictionary：类似于字典的目录结构，根据主键大小，每隔 4-8 个纪录设置一个槽，用来纪录其位置，当根据主键查找数据时，首先一步到位找到数据所在的槽，然后在槽中线性搜素。这种方法比从前到后遍历页的链表的效率更快。</li><li>File Header：存储刷盘前内存的校验和，Page Tailer储存刷盘后的校验和。当刷盘的时候，出现异常，Page Tailer和File Header中的校验和不一致，则说明出现刷盘错误。</li></ul><h2 id="3-页插入记录的过程"><a href="#3-页插入记录的过程" class="headerlink" title="3.页插入记录的过程"></a>3.页插入记录的过程</h2><p>1）如果 Free Space 的空间足够的话，直接分配空间来添加纪录，并将插入前最后一条纪录的 next_record 指向当前插入的纪录，将当前插入纪录的 next_record 指向 supremum 纪录。</p><p>2）如果 Free Space的 空间不够的话，则首先将之前删除造成的碎片重新整理之后，按照上述步骤插入纪录。</p><p>3）如果当前页空间整理碎片之后仍然不足的话，则重新申请一个页，将页初始化之后，按照上述步骤插入纪录</p><h2 id="4-bufferPool"><a href="#4-bufferPool" class="headerlink" title="4.bufferPool"></a>4.bufferPool</h2><p>Buffer Pool 是 InnoDB 存储引擎层的缓冲池，不属于 MySQL 的 Server 层，注意跟 8.0 删掉的“查询缓存”功能区分。</p><p>内存中以页（page）为单位缓存磁盘数据，减少磁盘IO，提升访问速度。缓冲池大小默认 128M，独立的 MySQL 服务器推荐设置缓冲池大小为总内存的 80%。主要存储数据页、索引页更新缓冲（change buffer）等。</p><h2 id="5-change-buffer"><a href="#5-change-buffer" class="headerlink" title="5.change buffer"></a>5.change buffer</h2><p>​如果每次写操作，数据库都直接更新磁盘中的数据，会很占磁盘IO。为了减少磁盘IO，InnoDB在Buffer Pool中开辟了一块内存，用来存储变更记录，为了防止异常宕机丢失缓存，当事务提交时会将变更记录持久化到磁盘（redo log），等待时机更新磁盘的数据文件（刷脏），用来缓存写操作的内存，就是Change Buffer</p><p>Change Buffer默认占Buffer Pool的25%，最大设置占用50%。</p><h1 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h1><h2 id="1-架构设计【内存、线程】"><a href="#1-架构设计【内存、线程】" class="headerlink" title="1.架构设计【内存、线程】"></a>1.架构设计【内存、线程】</h2><ul><li>内存数据区域划分<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Innodbmem.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>四大线程<ul><li>Master thread</li><li>IO thread</li><li>Purge thread</li><li>Page Cleaner Thread</li></ul></li></ul><p>1）负责刷新内存池中的数据，保证缓冲池的内存缓冲的是最近的数据</p><p>2）已修改的数据文件刷新到磁盘文件</p><p>3）保证数据库发生异常的情况下InnoDB能恢复到正常状态</p><h2 id="2-InnoDB有哪些线程"><a href="#2-InnoDB有哪些线程" class="headerlink" title="2.InnoDB有哪些线程"></a>2.InnoDB有哪些线程</h2><ul><li>Master Thread</li></ul><p>负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新，合并插入缓冲（INSERT BUFFER），UNDO页的回收等。</p><ul><li>IO Thread</li></ul><p>负责 AIO 请求的回调处理。</p><ul><li>Purge Thread</li></ul><p>事务提交后，undo log 可能不再需要，由 Purge Thread 负责回收并重新分配的这些已经使用的 undo 页。</p><ul><li>Page Cleaner Thread</li></ul><p>将Master Threader中刷新脏页的工作移至该线程，如上面说的FLUSH LRU LIST Checkpoint以及Async/Sync Flush Checkpoint。</p><h2 id="3-double-writer是什么"><a href="#3-double-writer是什么" class="headerlink" title="3.double writer是什么"></a>3.double writer是什么</h2><h2 id="4-自适应hash是什么"><a href="#4-自适应hash是什么" class="headerlink" title="4. 自适应hash是什么"></a>4. 自适应hash是什么</h2><p>InnoDB 会监控对表上各索引页的查询执行情况，如发现建立哈希索引可以提升速度，则建立哈希索引，这是过程不需要用户干预。（默认开启）</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行</p><h2 id="2-什么是事务的四大特性ACID"><a href="#2-什么是事务的四大特性ACID" class="headerlink" title="2.什么是事务的四大特性ACID"></a>2.什么是事务的四大特性ACID</h2><h2 id="3-事务的并发问题【带来脏读、不可重复度、幻读问题】"><a href="#3-事务的并发问题【带来脏读、不可重复度、幻读问题】" class="headerlink" title="3.事务的并发问题【带来脏读、不可重复度、幻读问题】"></a>3.事务的并发问题【带来脏读、不可重复度、幻读问题】</h2><h2 id="5-事务的隔离级别"><a href="#5-事务的隔离级别" class="headerlink" title="5.事务的隔离级别"></a>5.事务的隔离级别</h2><p>串行化<br>可重复度（Innodb默认）<br>读已提交<br>读未提交</p><h2 id="6-ACID的特性如何实现"><a href="#6-ACID的特性如何实现" class="headerlink" title="6.ACID的特性如何实现"></a>6.ACID的特性如何实现</h2><p>原子性是 undo 日志<br>持久性是 redo 日志</p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="1-数据库锁的特性，有哪些锁"><a href="#1-数据库锁的特性，有哪些锁" class="headerlink" title="1.数据库锁的特性，有哪些锁"></a>1.数据库锁的特性，有哪些锁</h2><ul><li>行锁，表锁，页锁</li><li>共享锁=读锁S，排他锁=写锁X，更新锁U锁</li><li>乐观锁，悲观锁<h2 id="2-隔离级别和锁的关系"><a href="#2-隔离级别和锁的关系" class="headerlink" title="2.隔离级别和锁的关系"></a>2.隔离级别和锁的关系</h2></li><li><h2 id="3-InnoDB的锁算法"><a href="#3-InnoDB的锁算法" class="headerlink" title="3.InnoDB的锁算法"></a>3.InnoDB的锁算法</h2><h2 id="4-快照读和当前读"><a href="#4-快照读和当前读" class="headerlink" title="4.快照读和当前读"></a>4.快照读和当前读</h2><h2 id="5-innodb的可重复度如何实现"><a href="#5-innodb的可重复度如何实现" class="headerlink" title="5.innodb的可重复度如何实现"></a>5.innodb的可重复度如何实现</h2>通过MVCC实现，为每个事务维护一个独立版本视图，执行期间保持一致性。<h2 id="6-MVCC以及实现（乐观锁）"><a href="#6-MVCC以及实现（乐观锁）" class="headerlink" title="6.MVCC以及实现（乐观锁）"></a>6.MVCC以及实现（乐观锁）</h2>MVCC 的基本思想是为每个事务创建一个独立的版本视图，以便在事务执行期间保持数据的一致性。它通过在修改数据时不覆盖原有的数据，而是为每个事务创建一个新的版本来实现。</li></ul><ol><li>每行数据保存一个版本号/时间戳</li><li>当一个事务对某行数据进行修改时，不会直接修改原始数据，而是会在数据库中创建一个新的版本，并将原始版本的数据保留下来</li><li>查询时，根据版本号<h2 id="7-mysql优化手段有哪些"><a href="#7-mysql优化手段有哪些" class="headerlink" title="7. mysql优化手段有哪些"></a>7. mysql优化手段有哪些</h2></li><li>给常用字段索引</li><li>避免使用select *，避免全表扫描</li><li>分表，分区，拆分子表</li><li>使用覆盖索引：索引覆盖是指查询的列都包含在索引中，而无需再去访问表本身，可以减少IO和提高查询性能。<strong>不适合频繁变更的表和列</strong></li><li>redis缓存分担压力</li><li>连接池等<h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id="1-mysql的常见日志"><a href="#1-mysql的常见日志" class="headerlink" title="1.mysql的常见日志"></a>1.mysql的常见日志</h2></li></ol><h2 id="2-主从复制的作用"><a href="#2-主从复制的作用" class="headerlink" title="2.主从复制的作用"></a>2.主从复制的作用</h2><h2 id="3-主从复制的架构"><a href="#3-主从复制的架构" class="headerlink" title="3.主从复制的架构"></a>3.主从复制的架构</h2><h2 id="4-主从复制的原理"><a href="#4-主从复制的原理" class="headerlink" title="4.主从复制的原理"></a>4.主从复制的原理</h2><h2 id="5-主从复制的异步复制和半同步"><a href="#5-主从复制的异步复制和半同步" class="headerlink" title="5.主从复制的异步复制和半同步"></a>5.主从复制的异步复制和半同步</h2><h2 id="6-主从的常见问题和解决方式"><a href="#6-主从的常见问题和解决方式" class="headerlink" title="6.主从的常见问题和解决方式"></a>6.主从的常见问题和解决方式</h2><p>主从延迟问题，不一致性问题<br><a href="https://zhuanlan.zhihu.com/p/642614348" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/642614348</a></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="1-Where和Having的区别"><a href="#1-Where和Having的区别" class="headerlink" title="1.Where和Having的区别"></a>1.Where和Having的区别</h2><h2 id="2-In-和-Exists的区别"><a href="#2-In-和-Exists的区别" class="headerlink" title="2.In 和 Exists的区别"></a>2.In 和 Exists的区别</h2><h2 id="3-Union和Union-ALL的区别"><a href="#3-Union和Union-ALL的区别" class="headerlink" title="3. Union和Union ALL的区别"></a>3. Union和Union ALL的区别</h2><h2 id="4-Drop-Delete-Truncate的区别"><a href="#4-Drop-Delete-Truncate的区别" class="headerlink" title="4. Drop Delete Truncate的区别"></a>4. Drop Delete Truncate的区别</h2><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="1-如何判断是否走了索引"><a href="#1-如何判断是否走了索引" class="headerlink" title="1. 如何判断是否走了索引"></a>1. 如何判断是否走了索引</h2><h2 id="2-索引失效的几种情况"><a href="#2-索引失效的几种情况" class="headerlink" title="2. 索引失效的几种情况"></a>2. 索引失效的几种情况</h2><h2 id="3-where子句如何优化"><a href="#3-where子句如何优化" class="headerlink" title="3. where子句如何优化"></a>3. where子句如何优化</h2><h2 id="4-超大分页和深度分页"><a href="#4-超大分页和深度分页" class="headerlink" title="4. 超大分页和深度分页"></a>4. 超大分页和深度分页</h2><h2 id="5-大表查询如何优化"><a href="#5-大表查询如何优化" class="headerlink" title="5. 大表查询如何优化"></a>5. 大表查询如何优化</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="1-存储过程（procedure）和函数的区别"><a href="#1-存储过程（procedure）和函数的区别" class="headerlink" title="1.存储过程（procedure）和函数的区别"></a>1.存储过程（procedure）和函数的区别</h2><h2 id="2-视图是什么"><a href="#2-视图是什么" class="headerlink" title="2.视图是什么"></a>2.视图是什么</h2><h2 id="3-Trigger是什么"><a href="#3-Trigger是什么" class="headerlink" title="3.Trigger是什么"></a>3.Trigger是什么</h2><h2 id="sql优化的经验"><a href="#sql优化的经验" class="headerlink" title="sql优化的经验"></a>sql优化的经验</h2><ol><li>查询字段不使用函数或者大于等于表达式</li><li>避免where中的不等于，大于小于，null等</li><li>使用between and 替代in</li><li>当操作字段规模大的时候，拆分delete和insert语句</li><li>查询时使用索引的最左前缀原则</li></ol><h2 id="使用-union-和-union-all-时需要注意些什么"><a href="#使用-union-和-union-all-时需要注意些什么" class="headerlink" title="使用 union 和 union all 时需要注意些什么?"></a>使用 union 和 union all 时需要注意些什么?</h2><p>通过 union 连接的 SQL 分别单独取出的列数必须相同。 使用 union 时，多个相等的行将会被合并，由<br>于合升比较耗时，一般不直接使 用 union 进行合并，而是通常采用 union all 进行合并。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;其他数据库&quot;&gt;&lt;a href=&quot;#其他数据库&quot; class=&quot;headerlink&quot; title=&quot;其他数据库&quot;&gt;&lt;/a&gt;其他数据库&lt;/h2&gt;&lt;p&gt;mongodb(&lt;a href=&quot;https://www.chaojimake.cn/question_8_88.h
      
    
    </summary>
    
      <category term="Mysql" scheme="http://waynamigo.github.io/categories/Mysql/"/>
    
    
      <category term="面试" scheme="http://waynamigo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Mysql" scheme="http://waynamigo.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://waynamigo.github.io/2023/01/03/%E9%9D%A2%E7%BB%8FRedis/"/>
    <id>http://waynamigo.github.io/2023/01/03/面经Redis/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-10-30T07:13:30.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/八股文/五种数据类型.png" alt title>                </div>                <div class="image-caption"></div>            </figure><table><thead><tr><th>String</th><th>List</th><th>Hash</th><th>Set</th><th>Zset</th></tr></thead><tbody><tr><td>SDS</td><td>LinkedList/ZipList/QuickList</td><td>Dict、ZipList</td><td>Dict、Intset</td><td>ZipList、SkipList</td></tr><tr><td># redis内存模型？</td><td></td><td></td><td></td><td></td></tr><tr><td>hashtable</td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h1><ul><li>BitMap：签到、行为统计（点赞）</li><li>hyperloglog：不太了解</li><li>Geospatial：基于sort set，GEO 中存储的地理位置信息的经纬度数据通过 GeoHash 算法转换成了一个整数，这个整数作为 Sorted Set 的 score(权重参数)使用。<h2 id="【重点】一致性问题：Redis和数据库的一致性"><a href="#【重点】一致性问题：Redis和数据库的一致性" class="headerlink" title="【重点】一致性问题：Redis和数据库的一致性"></a>【重点】一致性问题：Redis和数据库的一致性</h2><a href="https://juejin.cn/post/7287026079066800168#heading-1" target="_blank" rel="noopener">https://juejin.cn/post/7287026079066800168#heading-1</a></li></ul><h1 id="三种缓存读写策略"><a href="#三种缓存读写策略" class="headerlink" title="三种缓存读写策略"></a>三种缓存读写策略</h1><h2 id="1-Cache-Aside-Pattern（旁路缓存模式）"><a href="#1-Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="1. Cache Aside Pattern（旁路缓存模式）"></a>1. <strong>Cache Aside Pattern（旁路缓存模式）</strong></h2><ul><li>写：先更新DB，再删除cache</li><li>读：先从cache读，读到就返回；读不到就读db，将数据写到cache<h3 id="【问题】可以先删cache，再更新db吗？"><a href="#【问题】可以先删cache，再更新db吗？" class="headerlink" title="【问题】可以先删cache，再更新db吗？"></a>【问题】可以先删cache，再更新db吗？</h3>不能，因为写的时间远大于读，出现数据不一致（和缓存击穿？）的可能性更高<h3 id="缺陷有哪些"><a href="#缺陷有哪些" class="headerlink" title="缺陷有哪些"></a>缺陷有哪些</h3><ol><li>数据不在cache，导致缓存击穿（大量数据访问db）</li><li>不适合写操作频繁的操作<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3>解决办法：</li></ol><ul><li>数据库和缓存数据强一致场景：更新 db 的时候同样更新 cache，不过我们需要加一个锁/分布式锁来保证更新 cache 的时候不存在线程安全问题。</li><li>可以短暂地允许数据库和缓存数据不一致的场景：更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样的话就可以保证即使数据不一致的话影响也比较小</li></ul></li></ul><h2 id="2-Read-Write-Through-Pattern（读写穿透）"><a href="#2-Read-Write-Through-Pattern（读写穿透）" class="headerlink" title="2. Read/Write Through Pattern（读写穿透）"></a>2. <strong>Read/Write Through Pattern（读写穿透）</strong></h2><ul><li>写：先查cache，没有就直接更新db；有的话， 先更新cache，cache服务自己更新db</li><li>读：先从cache读，读到就返回；读不到就读db，写入到cache<h2 id="3-Write-Behind-Pattern（异步缓存写入）"><a href="#3-Write-Behind-Pattern（异步缓存写入）" class="headerlink" title="3. Write Behind Pattern（异步缓存写入）"></a>3. <strong>Write Behind Pattern（异步缓存写入）</strong></h2></li><li>写：先查cache，没有直接更新db；有的话，只更新缓存，异步批量写db</li><li>读：先从cache读，读到就返回；读不到就读db，写入到cache<br><strong>与读写穿透的区别：</strong>：Read/Write Through 是同步更新 cache 和 db，而 Write Behind 则是只更新缓存，不直接更新 db，而是改为异步批量的方式来更新 db。<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1></li></ul><h2 id="Redis持久化的方式"><a href="#Redis持久化的方式" class="headerlink" title="Redis持久化的方式"></a>Redis持久化的方式</h2><p>Redis 共有三种数据持久化的方式：</p><ul><li>AOF（Append Only File）日志：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里；</li><li>RDB（Redis Database Backup file） 快照：将某一时刻的内存数据，以二进制的方式写入磁盘；</li><li>混合持久化方式：Redis 4.0 新增的方式，集成了 AOF 和 RBD 的优点<h3 id="RDB快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h3>提供两个命令实现快照</li><li>save：在主线程实现，可能会导致阻塞</li><li>bgsave：background save，在后台的子进程生成RDB快照</li></ul><p><strong>RDB 在执行快照的时候，数据能修改吗？</strong></p><p>执行 bgsave 过程中，Redis 依然可以继续处理操作命令的，也就是数据是能被修改的，关键的技术就在于【写时复制技术】（Copy-On-Write, COW）。</p><p>技术原理：bgsave会通过 fork() 创建子进程，此时子进程和父进程是共享同一片内存数据的，因为创建子进程的时候，会复制父进程的页表，但是页表指向的物理内存还是一个，此时如果主线程执行读操作，则主线程和 bgsave 子进程互相不影响。</p><h3 id="AOF日志"><a href="#AOF日志" class="headerlink" title="AOF日志"></a>AOF日志</h3><p>在执行完一条写操作命令后，就会把该命令以追加的方式写入到一个文件里，然后 Redis 重启时，会读取该文件记录的命令，然后逐一执行命令的方式来进行数据恢复。<br><strong>它们的区别是什么</strong><br>AOF：三种写回方式</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/redisAOF.webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>所以，RDB 快照就是记录某一个瞬间的内存数据，记录的是实际数据，而 AOF 文件记录的是命令操作的日志，而不是实际的数据。</p><p>因此在 Redis 恢复数据时， RDB 恢复数据的效率会比 AOF 高些，因为直接将 RDB 文件读入内存就可以，不需要像 AOF 那样还需要额外执行操作命令的步骤才能恢复数据。</p><p><strong>AOF 日志过大，会触发什么机制</strong></p><p>【AOF 重写机制】，压缩AOF文件：<br>【压缩方式】：在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到「新的 AOF 文件」，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件。但是对KV的记录就保持最新的那一条</p><h1 id="redis事务【不建议开发时使用，和mysql不一致的时候会造成缓存读写的限制问题】"><a href="#redis事务【不建议开发时使用，和mysql不一致的时候会造成缓存读写的限制问题】" class="headerlink" title="redis事务【不建议开发时使用，和mysql不一致的时候会造成缓存读写的限制问题】"></a>redis事务【不建议开发时使用，和mysql不一致的时候会造成缓存读写的限制问题】</h1><p><strong>不支持回滚</strong></p><ol><li>ULTI/EXEC 命令：<br>在 Redis 中，事务的开始由 MULTI 命令表示，结束由 EXEC 命令表示。在 MULTI 和 EXEC 之间的所有命令会被添加到事务队列中，但不会立即执行。</li><li>WATCH 命令：<br>Redis 提供了 WATCH 命令，可以用于在事务执行之前监视一个或多个键。如果在事务执行过程中，被监视的键被其他客户端修改了，事务将会被打断。</li></ol><h1 id="数据类型实现"><a href="#数据类型实现" class="headerlink" title="数据类型实现"></a>数据类型实现</h1><h3 id="String-字符串-应用场景-缓存对象、常规计数、分布式锁、共享-session-信息等。"><a href="#String-字符串-应用场景-缓存对象、常规计数、分布式锁、共享-session-信息等。" class="headerlink" title="String(字符串) 应用场景:缓存对象、常规计数、分布式锁、共享 session 信息等。"></a>String(字符串) 应用场景:缓存对象、常规计数、分布式锁、共享 session 信息等。</h3><ul><li><strong>底层数据结构是SDS（Simple Dynamic String）简单动态字符串</strong>，保存文本数据，还可以保存二进制数据 。因为 SDS 使用 len 属性 的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li><li>Redis 的 SDS API 是安全的，<strong>拼接字符串不会造成缓冲区溢出</strong> ：因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果<strong>空间不够会自动扩容</strong>，所以不会导致缓冲区溢出的问题。</li></ul><p><strong>使用 String 来缓存对象有两种方式</strong>：</p><p>直接缓存整个对象的 JSON，命令例子： <figure class="highlight plain"><figcaption><span>user:1 '&#123;"name":"xiaolin", "age":18&#125;'```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值，命令例子： MSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20**</span><br><span class="line">### List(列表)</span><br><span class="line">- **数据结构**：quicklist（双向链表+压缩列表）</span><br><span class="line">- **类型的应用场景**:消息队列(但是有两个问题:1. 生产者需要自行实现全局唯一ID;2. 不能以消费组形式消费数据)等</span><br><span class="line"></span><br><span class="line">**List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列。**</span><br><span class="line"></span><br><span class="line">- 生产者使用 LPUSH key value[value...] 将消息插入到队列的头部，如果 key 不存在则会创建一个空的队列再插入消息。</span><br><span class="line">  </span><br><span class="line">- 消费者使用 RPOP key 依次读取队列的消息，先进先出。</span><br><span class="line"></span><br><span class="line">### Set(集合) 类型:聚合计算(并集、交集、差集)场景，比如点赞、共同关注、抽奖活动等。</span><br><span class="line">- **数据结构**：是由哈希表或整数集合实现的</span><br><span class="line">- 如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；</span><br><span class="line">- 如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。</span><br><span class="line">### Zset(有序集合) 类型:排序场景，比如排行榜、电话和姓名排序等</span><br><span class="line">- **数据结构** ：7.0以后，使用 **listpack** 数据结构</span><br><span class="line">### Hash(哈希) 类型:缓存对象、购物车等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### BitMap(2.2 版新增):二值状态统计的场景，比如签到、判断用户登陆状态、 连续签到用户总数等;</span><br><span class="line">### HyperLogLog(2.8 版新增):海量数据基数统计的场景，比如百万级网页 UV 计数等;</span><br><span class="line">### GEO</span><br><span class="line">### Stream</span><br><span class="line"># Redis 的线程模型</span><br><span class="line"></span><br><span class="line">**首先**，是单线程模型，它指的是```「接收客户端请求-&gt;解析请求 -&gt;进行数据读写等操作-&gt;发送数据给客户端」```这个过程是由一个线程（主线程）来完成的，这也是我们常说 Redis 是单线程的原因。</span><br><span class="line"></span><br><span class="line">但是，Redis 程序并不是单线程的，Redis 在启动的时候，是会启动后台线程（BIO）</span><br><span class="line"></span><br><span class="line">### Redis 6.0 之后为什么引入了多线程？</span><br><span class="line">回答：网络IO出现瓶颈，对网络IO引入了多线程处理，命令执行仍然是主线程完成。</span><br><span class="line"></span><br><span class="line">虽然 Redis 的主要工作（网络 I/O 和执行命令）一直是单线程模型，但是在 Redis 6.0 版本之后，也采用了多个 I/O 线程来处理网络请求，这是因为```随着网络硬件的性能提升，Redis 的性能瓶颈有时会出现在网络 I/O 的处理上```。</span><br><span class="line"></span><br><span class="line">所以为了提高网络 I/O 的并行度，Redis 6.0 **对于网络 I/O 采用多线程来处理**。但是对于命令的执行，Redis 仍然使用单线程来处理，所以大家不要误解 Redis 有多线程同时执行命令。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Redis的零拷贝技术是什么</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Redis集群</span><br><span class="line"></span><br><span class="line"> 主从复制，主节点故障时要手动恢复</span><br><span class="line">### 主从模式</span><br><span class="line">读写分离，主节点负责写，从节点负责读。</span><br><span class="line">### 哨兵模式</span><br><span class="line">多个哨兵监控主节点服务器，提供故障转移功能：</span><br><span class="line">【故障转移】：主节点挂了之后，在从节点中选取一个作为主节点</span><br><span class="line"></span><br><span class="line">### 切片集群模式</span><br><span class="line">缓存数据量大到一台服务器无法缓存时，就需要使用 Redis 切片集群。</span><br><span class="line">将数据分布在不同的服务器上，以此来降低系统对单主节点的依赖，从而提高 Redis 服务的读写性能。</span><br><span class="line">- 切片就是一个redis实例分成多个hash slot，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中。</span><br><span class="line">- 默认部署的slot个数有16384个，平均分配到各节点上，如果有n个redis实例，那么每个节点有16384/n个slot。</span><br><span class="line"></span><br><span class="line">### 可能出现的问题：</span><br><span class="line">**集群脑裂是什么**：</span><br><span class="line"></span><br><span class="line">由于网络问题，导致主节点与哨兵失联后，哨兵多选举出来一个主节点，当旧节点恢复正常时，降级从节点后，向新master请求同步复制时，清空了自己的缓冲区，产生了之前客户端写入的数据丢失的问题。</span><br><span class="line"></span><br><span class="line">- 如果旧节点又好了，就把旧主节点降级为普通节点，作为从节点向新master进行同步复制的时候，由于会从节点会清空自己的缓冲区，所以导致之前客户端写入的数据丢失了。</span><br><span class="line"></span><br><span class="line">【解决方案】</span><br><span class="line">当主节点发现从节点下线或者通信超时的总数量小于阈值时，那么禁止主节点进行写数据，直接把错误返回给客户端。</span><br><span class="line"></span><br><span class="line">【配置文件】</span><br><span class="line">- min-slaves-to-write x，主节点必须要有至少 x 个从节点连接，如果小于这个数，主节点会禁止写数据。</span><br><span class="line">- min-slaves-max-lag x，主从数据复制和同步的延迟不能超过 x 秒，如果超过，主节点会禁止写数据。</span><br><span class="line">### Redis过期删除与内存淘汰</span><br><span class="line"></span><br><span class="line">【过期删除：惰性删除+定期删除】当我们对一个 key 设置了过期时间时，Redis 会把该 key 带上过期时间存储到一个过期字典（expires dict）中，也就是说「过期字典」保存了数据库中所有 key 的过期时间。</span><br><span class="line"></span><br><span class="line">- 惰性删除：惰性删除策略的做法是，不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。</span><br><span class="line">- 每隔一段时间「随机」从数据库中取出一定数量的 key 进行检查，并删除其中的过期key。</span><br><span class="line">【内存淘汰：不进行数据淘汰的策略/进行数据淘汰的策略】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 集群与哨兵模式的区别</span><br><span class="line">- 主从集群模式适合对读写性能要求高，且可以容忍一定程度的数据同步延迟的场景</span><br><span class="line">- 哨兵模式适用于对高可用性要求较高的场景，能够实现自动故障切换</span><br><span class="line">## Redis的lua支持</span><br><span class="line">如果你想在 Redis 中定时执行 Lua 脚本，可以考虑使用 Redis 的定时任务功能，例如使用 Redis 的BGSAVE和MONITOR命令配合实现。</span><br><span class="line"></span><br><span class="line">1. 编写 Lua 脚本</span><br><span class="line">首先，你需要编写一个 Lua 脚本，命名为 a.lua 或其他你喜欢的名字。在该脚本中编写你想要定时执行的逻辑。</span><br><span class="line">2. 使用 BGSAVE</span><br><span class="line">Redis 的 BGSAVE 命令用于在后台执行持久化操作（将数据写入磁盘），这会创建一个快照文件。你可以利用这个特性来触发 Lua 脚本的执行。</span><br><span class="line">客户端执行```BGSAVE</span><br></pre></td></tr></table></figure></p><p>请注意，BGSAVE 不会阻塞 Redis 的主线程，因此可以在 Redis 运行时执行。</p><ol start="3"><li>使用 MONITOR<br>Redis 的 MONITOR 命令可以用于实时监控 Redis 的命令执行情况。你可以通过监控 Redis 的命令来捕捉 BGSAVE 命令的执行，一旦发现 BGSAVE 命令执行完毕，就可以在 Lua 脚本中调用 EVAL 来执行你的逻辑。</li></ol><h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><h2 id="介绍缓存雪崩，缓存击穿，缓存穿透"><a href="#介绍缓存雪崩，缓存击穿，缓存穿透" class="headerlink" title="介绍缓存雪崩，缓存击穿，缓存穿透"></a>介绍缓存雪崩，缓存击穿，缓存穿透</h2><ul><li><strong>缓存雪崩</strong> 指大量缓存数据在同一时间过期时，大量的用户请求全部直接访问数据库，从而导致数据库崩溃的问题，从而形成一系列连锁反应，造成整个系统崩溃。</li><li><strong>缓存击穿</strong> 指某个数据过期时，大量用户请求直接访问该数据，导致高并发的数据库请求</li><li><strong>缓存穿透</strong> 当用户访问的数据，既不在缓存中，也不在数据库中，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是缓存穿透的问题。</li></ul><p>【缓存雪崩解决方法】</p><ol><li>设置缓存失效时间随机打乱</li><li>设置缓存不过期，使用后台接口进行操作redis</li></ol><p>【缓存击穿解决方法】</p><ol><li>互斥锁方案（Redis 中使用 setNX 方法设置一个状态位，表示这是一种锁定状态），保证同一时间只有一个业务线程请求缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。</li><li>不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间；</li></ol><p>【缓存穿透解决方法】</p><ol><li><p><strong>布隆过滤器</strong>：快速判断数据是否存在，避免通过查询数据库来判断数据是否存在：我们可以在写入数据库数据时，使用布隆过滤器做个标记，然后在用户请求到来时，业务线程确认缓存失效后，可以通过查询布隆过滤器快速判断数据是否存在，如果不存在，就不用通过查询数据库来判断数据是否存在，即使发生了缓存穿透，大量请求只会查询 Redis 和布隆过滤器，而不会查询数据库，保证了数据库能正常运行，Redis 自身也是支持布隆过滤器的。</p></li><li><p>设置空值或者默认值</p></li><li><p>在API入口处判断请求参数有没有非法值/是否存在</p></li></ol><h2 id="热点数据缓存策略"><a href="#热点数据缓存策略" class="headerlink" title="热点数据缓存策略"></a>热点数据缓存策略</h2><p>热点数据动态缓存的策略总体思路：通过数据最新访问时间来做排名，并过滤掉不常访问的数据，只留下经常访问的数据。</p><h2 id="【面试题】缓存更新策略"><a href="#【面试题】缓存更新策略" class="headerlink" title="【面试题】缓存更新策略"></a>【面试题】缓存更新策略</h2><ul><li>Cache Aside（旁路缓存）策略；</li><li>Read/Write Through（读穿 / 写穿）策略；</li><li>Write Back（写回）策略；</li></ul><h2 id="【面试题】数据库和缓存如何保证一致性"><a href="#【面试题】数据库和缓存如何保证一致性" class="headerlink" title="【面试题】数据库和缓存如何保证一致性"></a>【面试题】数据库和缓存如何保证一致性</h2><h2 id="【面试题】常见性能问题和解决方案"><a href="#【面试题】常见性能问题和解决方案" class="headerlink" title="【面试题】常见性能问题和解决方案"></a>【面试题】常见性能问题和解决方案</h2><ol><li>Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave 函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大 的，会间断性暂停服务</li><li>如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次</li><li>为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局 域网</li><li>尽量避免在压力很大的主库上增加从</li><li>主从复制不要用图状结构，用单向链表结构更为稳定，即:Master &lt;- Slave1&lt;- Slave2 &lt;- Slave3… 这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了，可以立刻启 用 Slave1 做 Master，其他不变。</li></ol><h2 id="过期key的删除策略"><a href="#过期key的删除策略" class="headerlink" title="过期key的删除策略"></a>过期key的删除策略</h2><ul><li>定时删除单key：一个是添加的key的时候， expire指定时间</li><li>惰性删除：每次查找key时，都会判断是否过期</li><li>定期批量删除：每隔一段时间扫库，删除过期key<h2 id="Redis回收-淘汰策略"><a href="#Redis回收-淘汰策略" class="headerlink" title="Redis回收/淘汰策略"></a>Redis回收/淘汰策略</h2></li></ul><ol><li>volatile-lru:从已设置过期时间的数据集(server.db[i].expires)中挑选 最近最少使用的数据淘汰</li><li>volatile-ttl:从已设置过期时间的数据集(server.db[i].expires)中挑选 将要过期的数据淘汰</li><li>volatile-random:从已设置过期时间的数据集(server.db[i].expires)中任 意选择数据淘汰</li><li>allkeys-lru:从数据集(server.db[i].dict)中挑选最近最少使用的数据淘 汰</li><li>allkeys-random:从数据集(server.db[i].dict)中任意选择数据淘汰</li><li>no-enviction(驱逐):禁止驱逐数据 注意这里的 6 种机制，volatile 和 allkeys 规定了是对已设置 过期时间的数 据集淘汰数据还是从全部数据集淘汰数据，后面的 lru、ttl 以及 random 是 三种不同 的淘汰策略，再加上一种no-enviction 永不回收的策略。<h2 id="如何选取上述策略？"><a href="#如何选取上述策略？" class="headerlink" title="如何选取上述策略？"></a>如何选取上述策略？</h2></li><li>如果数据分布的差不多，使用allkeys random</li><li>如果数据分布差别大，使用allkeys lru<h2 id="redis的同步机制是什么【全量复制和部分复制】"><a href="#redis的同步机制是什么【全量复制和部分复制】" class="headerlink" title="redis的同步机制是什么【全量复制和部分复制】"></a>redis的同步机制是什么【全量复制和部分复制】</h2></li></ol><ul><li>salve 发送sync请求到master，开始第一次同步</li><li>第一次同步时使用bgsave做rdb快照，同时将后续修改记录加到内存缓冲区，完成后将rdb文件同步到从节点，复制完后由从节点加载到内存</li><li>加载完成后通知master，master将缓冲区的写操作记录发给slave，slave再执行剩余的这些写操作，与master保持一致<h3 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h3></li><li>slave发送psync请求到master，开始第一次同步</li><li>slave再发一个偏移量，master从这个偏移量开始同步数据<h2 id="redis集群的原理"><a href="#redis集群的原理" class="headerlink" title="redis集群的原理"></a>redis集群的原理</h2></li></ul><ol><li><p>哨兵模式，高可用性，在master宕机时自动将slave提升为master</p></li><li><p>集群模式，扩展性，单个redis内存不足时，使用cluster进行分片存储</p><ul><li>集群没用一致性hash，而是用了hash槽，有16384个hash槽，每个节点负责一部分槽</li><li>主从复制模型，每个节点都是其他节点的副本<h2 id="集群会有写操作丢失吗【会】为什么？"><a href="#集群会有写操作丢失吗【会】为什么？" class="headerlink" title="集群会有写操作丢失吗【会】为什么？"></a>集群会有写操作丢失吗【会】为什么？</h2></li></ul></li><li><p>当发生故障转移（failover）时，在连接丢失的情况下，部分写操作无法完成</p></li><li><p>另外如果用了RDB，主节点写操作存在buffer里，转移主节点时，这部分不进行复制，导致写操作丢失，所以可以使用混合方式，写操作使用AOF持久化一下，转移主节点后重放AOF日志</p><h2 id="redis事务了解吗"><a href="#redis事务了解吗" class="headerlink" title="redis事务了解吗"></a>redis事务了解吗</h2><p>multi exec discard watch</p><h2 id="如何优化redis内存占用和性能【内存优化】"><a href="#如何优化redis内存占用和性能【内存优化】" class="headerlink" title="如何优化redis内存占用和性能【内存优化】"></a>如何优化redis内存占用和性能【内存优化】</h2></li><li><p>对小数据合并到一个对象中，用hash存储</p></li><li><p>设置合理的过期策略，和内存淘汰策略等</p></li><li><p>使用持久化保证高可用性</p></li><li><p>使用布隆过滤器，防止缓存穿透和击穿问题，查看一个元素是否存在于一个集合中</p></li><li><p>删除key后的碎片整理：Redis 会在删除键值对后，释放内存并且尝试整理内存碎片。可以通过配置文件中的 activerehashing 参数来控制内存碎片整理的行为。</p><h2 id="假如-Redis-里面有-1-亿个-key，其中有-10w-个-key-是以某-个固定的已知的前缀开头的，如果将它们全部找出来"><a href="#假如-Redis-里面有-1-亿个-key，其中有-10w-个-key-是以某-个固定的已知的前缀开头的，如果将它们全部找出来" class="headerlink" title="假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某 个固定的已知的前缀开头的，如果将它们全部找出来?"></a>假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某 个固定的已知的前缀开头的，如果将它们全部找出来?</h2></li></ol><ul><li>使用scan无阻塞地去提取正则字符串，然后在客户端用一个set去重</li><li>keys也可以扫，但是会导致阻塞，线上服务会停<h2 id="redis队列和延时队列"><a href="#redis队列和延时队列" class="headerlink" title="redis队列和延时队列"></a>redis队列和延时队列</h2></li><li>队列使用list，当队列为空，rpush生产消息，使用blpop消费消息。</li><li>延时队列使用zset，每个消息对应的时间戳作为score，消息内容当key，<strong>zadd生产消息</strong>，消费者用 <strong>zrangebyscore 指令获取 N 秒之前的数据轮询进行处理</strong></li></ul><h2 id="redis内存回收进程"><a href="#redis内存回收进程" class="headerlink" title="redis内存回收进程"></a>redis内存回收进程</h2><p><a href="https://cloud.tencent.com/developer/article/2315748" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/2315748</a><br>Redis回收进程指对那些已过期但是尚未被删除的 keys 进行标记，这样它们就可以在之后被立即释放并回收所占用的内存</p><ol><li>基本原理是周期性地扫描存储数据库中所有的键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Redis 提供了三个与内存回收相关的命令：</span><br><span class="line"></span><br><span class="line">MEMORY USAGE key：</span><br><span class="line">用于返回指定键所占用的内存字节数。可以通过传递键的名称作为参数来获取相应键的内存使用情况。</span><br><span class="line">MEMORY PURGE：</span><br><span class="line">该命令用于在 Redis Enterprise 中手动触发内存回收。</span><br><span class="line">MEMORY DOCTOR：</span><br><span class="line">该命令用于诊断 Redis 内存分配和使用情况，帮助识别内存泄漏或者不正常的内存使用情况。</span><br><span class="line">需要注意的是，MEMORY PURGE 和 MEMORY DOCTOR 是 Redis Enterprise 特有的命令，而 MEMORY USAGE 是 Redis 通用的命令。</span><br></pre></td></tr></table></figure></li></ol><h2 id="如何使用redis实现一个分布式锁"><a href="#如何使用redis实现一个分布式锁" class="headerlink" title="如何使用redis实现一个分布式锁"></a>如何使用redis实现一个分布式锁</h2><ul><li>setnx拿锁，拿到之后expire给锁加一个过期时间，</li></ul><h2 id="Redis内存耗尽会怎样"><a href="#Redis内存耗尽会怎样" class="headerlink" title="Redis内存耗尽会怎样"></a>Redis内存耗尽会怎样</h2><p>崩溃，可能导致缓存失效，命中率下降，虚拟内存<br><a href="https://juejin.cn/post/6932711444404256781" target="_blank" rel="noopener">https://juejin.cn/post/6932711444404256781</a></p><ol><li>会使用LRU和LFU的内存淘汰策略<h2 id="LRU-最近最长时间未被使用"><a href="#LRU-最近最长时间未被使用" class="headerlink" title="LRU 最近最长时间未被使用"></a>LRU 最近最长时间未被使用</h2><h2 id="LFU-最近最少频率使用"><a href="#LFU-最近最少频率使用" class="headerlink" title="LFU 最近最少频率使用"></a>LFU 最近最少频率使用</h2></li></ol><h2 id="stream数据结构"><a href="#stream数据结构" class="headerlink" title="stream数据结构"></a>stream数据结构</h2><ol><li>基于基数树</li></ol><h2 id="缓存穿透miss-和击穿breakdown-怎么解决"><a href="#缓存穿透miss-和击穿breakdown-怎么解决" class="headerlink" title="缓存穿透miss 和击穿breakdown 怎么解决"></a>缓存穿透miss 和击穿breakdown 怎么解决</h2><ul><li>击穿是breakdown，要查找的热点缓存突然过期，导致大量请求向mysql涌入，导致崩溃等问题</li><li>穿透是缓存中没有这些key，没有方法满足这些请求<h2 id="穿透的解决方式"><a href="#穿透的解决方式" class="headerlink" title="穿透的解决方式"></a>穿透的解决方式</h2></li></ul><ol><li>在缓存之前再加一层布隆过滤器，在查询的时候先去布隆过滤器查询 key 是否存在，如果不存在就直接返回</li><li>简单处理，存无效key，value设为null</li></ol><h2 id="如果有大量的key需要同一时间过期，要如何解决缓存雪崩问题"><a href="#如果有大量的key需要同一时间过期，要如何解决缓存雪崩问题" class="headerlink" title="如果有大量的key需要同一时间过期，要如何解决缓存雪崩问题"></a>如果有大量的key需要同一时间过期，要如何解决缓存雪崩问题</h2><ul><li>设置过期时间时加上随机值，使得缓存失效的时间点尽量均匀分布。</li><li>使用 Redis 集群，将缓存数据分散到多个节点上，避免单点故障。</li><li>在缓存失效后采用加锁或者队列来控制<strong>读数据库写缓存</strong>的线程数量，避免大量线程同时读数据库。</li><li>针对热点数据可以设置永不过期，或者使用手动过期的方式来控制缓存的使用时间</li><li>高并发时，使用限流和熔断机制控制请求访问量</li><li>本地和分布式缓存结合，服务器本地当二级缓存</li></ul><h2 id="热key问题怎么解决"><a href="#热key问题怎么解决" class="headerlink" title="热key问题怎么解决"></a>热key问题怎么解决</h2><p>热key问题是由于某部分热点key分布在不同的节点上，导致负载不均衡</p><ul><li>解决方法，1使用分布式缓存，读写分离架构 2 数据分片策略 3 缓存失效策略避免一直是热key</li><li>如果热Key的产生<strong>来自于读请求</strong>使用读写分离架构<br>您可以将实例改造成读写分离架构来降低每个数据分片的读请求压力，甚至可以不断地增加从节点。但是读写分离架构在增加业务代码复杂度的同时，也会增加Redis集群架构复杂度。不仅要为多个从节点提供转发层（如Proxy，LVS等）来实现负载均衡，还要考虑从节点数量显著增加后带来故障率增加的问题。<h2 id="单例的redis能承载多少个连接？【默认1w个，可以用maxclients修改】"><a href="#单例的redis能承载多少个连接？【默认1w个，可以用maxclients修改】" class="headerlink" title="单例的redis能承载多少个连接？【默认1w个，可以用maxclients修改】"></a>单例的redis能承载多少个连接？【默认1w个，可以用maxclients修改】</h2></li></ul><h2 id="redis-6-0-前后不支持与支持多线程的理由"><a href="#redis-6-0-前后不支持与支持多线程的理由" class="headerlink" title="redis 6.0 前后不支持与支持多线程的理由"></a>redis 6.0 前后不支持与支持多线程的理由</h2><ol><li>6.0前，避免竞态条件，上下文切换的开销，充分利用CPU</li><li>6.0后的多线程主要引入的是IO和AOF和RDB备份</li></ol><h2 id="提高命中率的方式"><a href="#提高命中率的方式" class="headerlink" title="提高命中率的方式"></a>提高命中率的方式</h2><ol><li>缓存过期时间</li><li>缓存预热</li><li>LRU LFU分别基于访问时间和频率来确定缓存中的数据</li><li>使用分布式缓存，将缓存数据分布到多节点上<!-- 5. 使用分布式锁，布隆过滤器等手段去提高可用性，提供维护时间长 --></li></ol><h2 id="redis-如何解决key冲突"><a href="#redis-如何解决key冲突" class="headerlink" title="redis 如何解决key冲突"></a>redis 如何解决key冲突</h2><ol><li><p>命名时注意不冲突，比如加前缀后缀</p></li><li><p>不同数据存合适的数据结构</p></li><li><p>分布式锁来保证并发冲突</p></li><li><p>单线程下使用mutex方法<br>内存模型是hashtable，解决key冲突可能就链地址 开地址哪些吧</p></li></ol><h2 id="redis-如何解决大key问题【key的value过大】"><a href="#redis-如何解决大key问题【key的value过大】" class="headerlink" title="redis 如何解决大key问题【key的value过大】"></a>redis 如何解决大key问题【key的value过大】</h2><p><a href="https://help.aliyun.com/zh/redis/user-guide/identify-and-handle-large-keys-and-hotkeys" target="_blank" rel="noopener">bigkey solution</a></p><h3 id="大key产生的问题"><a href="#大key产生的问题" class="headerlink" title="大key产生的问题"></a>大key产生的问题</h3><ol><li>执行变慢，删除时产生阻塞，内存溢出</li></ol><h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><ol><li>如果已经发现了一个大key，就遍历把它插成大key1 key2 key3，限制长度</li><li>不要这个大key时，使用UNLINK删除</li><li><strong>使用redis分片技术</strong>：</li></ol><ul><li><p>一致性hash:<br>将哈希值映射到一个固定大小的环形空间中。客户端根据键的哈希值定位到环上的某个位置，然后找到离该位置最近的节点，将数据存储在该节点上。</p><ul><li><strong>优点</strong>：在节点的增减时，只有少量的数据需要重新映射，保持了相对的稳定性。</li><li><strong>缺点</strong>：可能会出现不均匀的数据分布，导致节点负载不均</li></ul></li><li><p>CRC16:<br>循环冗余校验来生成哈希值</p><ul><li><strong>优点</strong>：计算速度快，适用于一些简单的分布式场景。</li><li><strong>缺点</strong>：可能会导致节点负载不均衡。</li></ul></li><li><p>RedisCluster<br>它将数据分片到多个节点上，同时提供了节点间的数据复制和故障恢复机制</p><ul><li><strong>优点</strong>自动进行数据分片和复制，实现了高可用性。</li><li><strong>缺点</strong>好用但是复杂 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Key本身的数据量过大：一个String类型的Key，它的值为5 MB。</span><br><span class="line">Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个。</span><br><span class="line">Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="redis慢查询如何排查"><a href="#redis慢查询如何排查" class="headerlink" title="redis慢查询如何排查"></a>redis慢查询如何排查</h2><p>命令：</p><ol><li>慢查询日志：SHOWLOG GET</li><li>redis-cli的INFO</li><li>redis有一个时延监控命令，–latency查询命令</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis数据类型&quot;&gt;&lt;a href=&quot;#Redis数据类型&quot; class=&quot;headerlink&quot; title=&quot;Redis数据类型&quot;&gt;&lt;/a&gt;Redis数据类型&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
               
      
    
    </summary>
    
      <category term="Redis" scheme="http://waynamigo.github.io/categories/Redis/"/>
    
    
      <category term="面试" scheme="http://waynamigo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Redis" scheme="http://waynamigo.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
